system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You and your friend are participating in a TV show "Run For Your Prize".

At the start of the show n prizes are located on a straight line. i-th prize is located at position ai. Positions of all prizes are distinct. You start at position 1, your friend — at position 106 (and there is no prize in any of these two positions). You have to work as a team and collect all prizes in minimum possible time, in any order.

You know that it takes exactly 1 second to move from position x to position x + 1 or x - 1, both for you and your friend. You also have trained enough to instantly pick up any prize, if its position is equal to your current position (and the same is true for your friend). Carrying prizes does not affect your speed (or your friend's speed) at all.

Now you may discuss your strategy with your friend and decide who will pick up each prize. Remember that every prize must be picked up, either by you or by your friend.

What is the minimum number of seconds it will take to pick up all the prizes?

Input

The first line contains one integer n (1 ≤ n ≤ 105) — the number of prizes.

The second line contains n integers a1, a2, ..., an (2 ≤ ai ≤ 106 - 1) — the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.

Output

Print one integer — the minimum number of seconds it will take to collect all prizes.

Examples

Input

3
2 3 9


Output

8


Input

2
2 999995


Output

5

Note

In the first example you take all the prizes: take the first at 1, the second at 2 and the third at 8.

In the second example you take the first prize in 1 second and your friend takes the other in 5 seconds, you do this simultaneously, so the total time is 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 7;
const long long inf = 1e9 + 7;
const long double eps = (long double)1e-12;
const double pi = 3.141592653;
const long long linf = 1e18 + 7;
const int logn = 20;
int n, a[maxn], tim, ans;
map<int, int> cnt;
int fir, sec;
int res;
int main() {
  fir = 1;
  sec = 1e6;
  cin >> n;
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
    cnt[a[i]] = 1;
    res++;
  }
  while (fir <= sec) {
    fir++;
    sec--;
    if (cnt[fir]) cnt[fir] = 0, res--;
    if (cnt[sec]) cnt[sec] = 0, res--;
    tim++;
    if (!res) break;
  }
  cout << tim;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
500001 999999


(G.2) Fast Input

2
2 999999


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1e5 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long inf = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = (long double)1e-12; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = 3.141592653; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const long long linf = 1e18 + 7; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int logn = 20; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int n, a[maxn], tim, ans; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> cnt; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int fir, sec; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int res; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  fir = 1; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  sec = 1e6; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 17 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> a[i]; /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
    cnt[a[i]] = 1; /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
    res++; /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  while (fir <= sec) { /* line 22 slow_hit_count: 499999, fast_hit_count: 1 */
    fir++; /* line 23 slow_hit_count: 499999, fast_hit_count: 1 */
    sec--; /* line 24 slow_hit_count: 499999, fast_hit_count: 1 */
    if (cnt[fir]) cnt[fir] = 0, res--; /* line 25 slow_hit_count: 499999, fast_hit_count: 1 */
    if (cnt[sec]) cnt[sec] = 0, res--; /* line 26 slow_hit_count: 499999, fast_hit_count: 1 */
    tim++; /* line 27 slow_hit_count: 499999, fast_hit_count: 1 */
    if (!res) break; /* line 28 slow_hit_count: 499999, fast_hit_count: 1 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << tim; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the provided code and hit count data, the main area of inefficiency is the `while` loop on lines 22-29. The significant difference in the hit counts between the slow and fast inputs indicates that this loop is the primary source of the slowdown:

1. **Line 22 `while (fir <= sec)`:** The loop runs 499,999 times for the slow input compared to just once for the fast input. This suggests that the loop's exit condition is not optimized for the slow input scenario.
2. **Lines 23-28 (loop contents):** Inside this loop, both `fir` and `sec` are incremented/decremented, and checks update the `cnt` map. These operations are repeated for a large number of iterations in the slow input case, as indicated by the hit counts.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive the following performance-characterizing invariants:

1. **Invariant: Imbalanced Prize Distribution Across the Starting Points**
   - **Natural Language Description:** "A slowdown occurs when the prizes are unevenly distributed such that one participant has to traverse a significantly larger distance compared to the other. This imbalance leads to excessive iterations in the loop designed to synchronize the collection times."
   - **Implication:** If the prizes are predominantly located closer to one starting position (either near position 1 or 106), then the strategy of reducing the effective range (`fir` to `sec`) becomes inefficient, as one participant ends up collecting all prizes.

2. **Invariant: Large Range Between Closest and Farthest Prizes**
   - **Natural Language Description:** "If the maximum distance between the closest and farthest prizes requires traversing a substantial portion of the total range, the loop becomes costly, as it must iterate across this entire span to ensure all prizes are collected."
   - **Implication:** When the difference between the smallest and largest prize positions is large, the while loop has to decrement `sec` and increment `fir` many times, which slows down the execution.

3. **Invariant: Need for Adaptive Strategy**
   - **Natural Language Description:** "When the distribution of prizes warrants a more adaptive approach than merely moving towards each other, the loop's current structure can introduce inefficiencies."
   - **Implication:** The strategy of simply moving towards each other (`fir++`, `sec--`) may not be optimal if prizes are skewed towards one end, leading to redundant operations inside the loop.

By focusing on these invariants, future inputs exhibiting similar patterns can be flagged as potential slow paths, aiding in the optimization and testing of the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You and your friend are participating in a TV show "Run For Your Prize".

At the start of the show n prizes are located on a straight line. i-th prize is located at position ai. Positions of all prizes are distinct. You start at position 1, your friend — at position 106 (and there is no prize in any of these two positions). You have to work as a team and collect all prizes in minimum possible time, in any order.

You know that it takes exactly 1 second to move from position x to position x + 1 or x - 1, both for you and your friend. You also have trained enough to instantly pick up any prize, if its position is equal to your current position (and the same is true for your friend). Carrying prizes does not affect your speed (or your friend's speed) at all.

Now you may discuss your strategy with your friend and decide who will pick up each prize. Remember that every prize must be picked up, either by you or by your friend.

What is the minimum number of seconds it will take to pick up all the prizes?

Input

The first line contains one integer n (1 ≤ n ≤ 105) — the number of prizes.

The second line contains n integers a1, a2, ..., an (2 ≤ ai ≤ 106 - 1) — the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.

Output

Print one integer — the minimum number of seconds it will take to collect all prizes.

Examples

Input

3
2 3 9


Output

8


Input

2
2 999995


Output

5

Note

In the first example you take all the prizes: take the first at 1, the second at 2 and the third at 8.

In the second example you take the first prize in 1 second and your friend takes the other in 5 seconds, you do this simultaneously, so the total time is 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checks

Based on the performance-characterizing invariants from Phase 2, here are the C++ checks for each invariant:

1. **Invariant: Imbalanced Prize Distribution Across the Starting Points**

   ```cpp
   void check_imbalance_invariant(int minPrize, int maxPrize) {
       if (std::abs(minPrize - 1) > 10 * std::abs(106 - maxPrize)) {
           cerr << "Warning: Imbalance invariant triggered - one participant may need to travel significantly more!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: Large Range Between Closest and Farthest Prizes**

   ```cpp
   void check_large_range_invariant(int minPrize, int maxPrize) {
       if (maxPrize - minPrize > 500000) {
           cerr << "Warning: Large range invariant triggered - large distance between closest and farthest prizes!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Need for Adaptive Strategy**

   ```cpp
   void check_adaptive_strategy_invariant(int minPrize, int maxPrize) {
       if ((maxPrize < 1000 && minPrize < 50) || (maxPrize > 990000 && minPrize > 500000)) {
           cerr << "Warning: Adaptive strategy invariant triggered - prizes heavily skewed towards one end!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into the Original Program

Now, let's integrate these checks into the original C++ program code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 7;
const long long inf = 1e9 + 7;
const long double eps = (long double)1e-12;
const double pi = 3.141592653;
const long long linf = 1e18 + 7;
const int logn = 20;
int n, a[maxn], tim, ans;
map<int, int> cnt;
int fir, sec;
int res;

void check_imbalance_invariant(int minPrize, int maxPrize) {
    if (std::abs(minPrize - 1) > 10 * std::abs(106 - maxPrize)) {
        cerr << "Warning: Imbalance invariant triggered - one participant may need to travel significantly more!" << endl;
        abort();
    }
}

void check_large_range_invariant(int minPrize, int maxPrize) {
    if (maxPrize - minPrize > 500000) {
        cerr << "Warning: Large range invariant triggered - large distance between closest and farthest prizes!" << endl;
        abort();
    }
}

void check_adaptive_strategy_invariant(int minPrize, int maxPrize) {
    if ((maxPrize < 1000 && minPrize < 50) || (maxPrize > 990000 && minPrize > 500000)) {
        cerr << "Warning: Adaptive strategy invariant triggered - prizes heavily skewed towards one end!" << endl;
        abort();
    }
}

int main() {
    fir = 1;
    sec = 1e6;
    cin >> n;
    int minPrize = inf, maxPrize = -inf;

    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        cnt[a[i]] = 1;
        res++;
        minPrize = min(minPrize, a[i]);
        maxPrize = max(maxPrize, a[i]);
    }

    // Check performance-characterizing invariants before the main loop
    check_imbalance_invariant(minPrize, maxPrize);
    check_large_range_invariant(minPrize, maxPrize);
    check_adaptive_strategy_invariant(minPrize, maxPrize);

    while (fir <= sec) {
        fir++;
        sec--;
        if (cnt[fir]) cnt[fir] = 0, res--;
        if (cnt[sec]) cnt[sec] = 0, res--;
        tim++;
        if (!res) break;
    }
    cout << tim;
    return 0;
}
```

### Explanation

- **Invariant Checks Integration:** Each check is called right after reading the input and before entering the main loop. This avoids adding overhead inside the loop while still catching potential performance issues early.
- **Comments and Structure:** Each function is self-contained, making it easy to identify which invariant is being checked. This modular approach keeps the main logic clean and focused. 
- **Abort on Detection:** If any performance issue is detected, the program logs a warning message and aborts, which is useful for debugging and testing with a fuzzer.

