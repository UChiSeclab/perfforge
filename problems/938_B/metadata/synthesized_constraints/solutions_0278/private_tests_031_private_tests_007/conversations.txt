system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You and your friend are participating in a TV show "Run For Your Prize".

At the start of the show n prizes are located on a straight line. i-th prize is located at position ai. Positions of all prizes are distinct. You start at position 1, your friend — at position 106 (and there is no prize in any of these two positions). You have to work as a team and collect all prizes in minimum possible time, in any order.

You know that it takes exactly 1 second to move from position x to position x + 1 or x - 1, both for you and your friend. You also have trained enough to instantly pick up any prize, if its position is equal to your current position (and the same is true for your friend). Carrying prizes does not affect your speed (or your friend's speed) at all.

Now you may discuss your strategy with your friend and decide who will pick up each prize. Remember that every prize must be picked up, either by you or by your friend.

What is the minimum number of seconds it will take to pick up all the prizes?

Input

The first line contains one integer n (1 ≤ n ≤ 105) — the number of prizes.

The second line contains n integers a1, a2, ..., an (2 ≤ ai ≤ 106 - 1) — the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.

Output

Print one integer — the minimum number of seconds it will take to collect all prizes.

Examples

Input

3
2 3 9


Output

8


Input

2
2 999995


Output

5

Note

In the first example you take all the prizes: take the first at 1, the second at 2 and the third at 8.

In the second example you take the first prize in 1 second and your friend takes the other in 5 seconds, you do this simultaneously, so the total time is 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, c = 0, s1 = 0, s = 0, l = 0, m, sec;
  cin >> n;
  m = n - 1;
  int a[n];
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  for (int i = 2, k = 999999; c != n; i++, k--) {
    if (i == a[l]) {
      s1 = i - 2 + 1;
      c++;
      l++;
    }
    if (k == a[m]) {
      s = 1000000 - k;
      c++;
      m--;
    }
  }
  if (s > s1)
    sec = s;
  else
    sec = s1;
  cout << sec;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
499999 999999


(G.2) Fast Input

2
2 999999


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, c = 0, s1 = 0, s = 0, l = 0, m, sec; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  m = n - 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int a[n]; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> a[i]; /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2, k = 999999; c != n; i++, k--) { /* line 11 slow_hit_count: 499999, fast_hit_count: 2 */
    if (i == a[l]) { /* line 12 slow_hit_count: 499998, fast_hit_count: 1 */
      s1 = i - 2 + 1; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
      c++; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
      l++; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (k == a[m]) { /* line 17 slow_hit_count: 499998, fast_hit_count: 1 */
      s = 1000000 - k; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
      c++; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
      m--; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  if (s > s1) /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    sec = s; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    sec = s1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cout << sec; /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 28 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis
- **Line 11:** The loop `for (int i = 2, k = 999999; c != n; i++, k--)` shows a significant difference in hit counts between the slow and fast inputs. For the slow input, this line is executed 499,999 times, while for the fast input, it is executed only twice.

- **Line 12 and Line 17:** These lines contain condition checks `if (i == a[l])` and `if (k == a[m])`, respectively. Both are executed nearly half a million times with the slow input but only once with the fast input.

The performance bottleneck here is the loop on line 11, which iterates from both ends (2 and 999,999) until all prizes are collected. The slow input causes this loop to run significantly more times due to the positioning of the prizes, particularly because one of the prizes is located near the midpoint (499,999), which leads to a prolonged search.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Invariants

1. **Invariant 1: Midpoint Clustering**
   - **Description:** "If prizes are clustered around the midpoint of the range (close to position 500,000), the program takes significantly longer since both players effectively have to travel towards the center from opposite directions, leading to a larger number of loop iterations."
   - **Explanation:** When prizes are positioned such that they are equidistant from both starting points, the iteration process to check positions from both ends increases, causing the loop to execute many more times.

2. **Invariant 2: Balanced Distribution**
   - **Description:** "Prizes that are evenly distributed across the entire range of positions can cause inefficiencies, as both players might need to move through larger portions of the range, leading to prolonged search times."
   - **Explanation:** An even distribution can lead to more extensive traversal requirements by both players, as neither can exclusively cover a contiguous segment effectively before hitting the midpoint.

3. **Invariant 3: Large Gap Between Prizes**
   - **Description:** "If there is a large gap between consecutive prizes, and these gaps sit near the middle of the search range, the program may slow down as one player might have to traverse a significant distance without collecting any prize."
   - **Explanation:** Large gaps can force one player to traverse many positions without finding a prize, particularly if the gap is centered, leading to more iterations needed to reach subsequent prizes.

These invariants help identify scenarios where the algorithm will perform inefficiently due to the positioning of prizes, translating into excessive iterations in the main loop.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You and your friend are participating in a TV show "Run For Your Prize".

At the start of the show n prizes are located on a straight line. i-th prize is located at position ai. Positions of all prizes are distinct. You start at position 1, your friend — at position 106 (and there is no prize in any of these two positions). You have to work as a team and collect all prizes in minimum possible time, in any order.

You know that it takes exactly 1 second to move from position x to position x + 1 or x - 1, both for you and your friend. You also have trained enough to instantly pick up any prize, if its position is equal to your current position (and the same is true for your friend). Carrying prizes does not affect your speed (or your friend's speed) at all.

Now you may discuss your strategy with your friend and decide who will pick up each prize. Remember that every prize must be picked up, either by you or by your friend.

What is the minimum number of seconds it will take to pick up all the prizes?

Input

The first line contains one integer n (1 ≤ n ≤ 105) — the number of prizes.

The second line contains n integers a1, a2, ..., an (2 ≤ ai ≤ 106 - 1) — the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.

Output

Print one integer — the minimum number of seconds it will take to collect all prizes.

Examples

Input

3
2 3 9


Output

8


Input

2
2 999995


Output

5

Note

In the first example you take all the prizes: take the first at 1, the second at 2 and the third at 8.

In the second example you take the first prize in 1 second and your friend takes the other in 5 seconds, you do this simultaneously, so the total time is 5.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Natural Language Invariants as C++ Checkers

### C++ Code for Invariants

#### Invariant 1: Midpoint Clustering
```cpp
void check_midpoint_clustering(int* a, int n) {
    int mid_point = 500000;
    int left_closer = 0, right_closer = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] <= mid_point) left_closer++;
        if (a[i] >= mid_point) right_closer++;
    }
    if (left_closer > 0 && right_closer > 0) {
        cerr << "Warning: Performance bottleneck condition triggered - midpoint clustering!" << endl;
        abort();
    }
}
```

#### Invariant 2: Balanced Distribution
```cpp
void check_balanced_distribution(int* a, int n) {
    int quarter1 = 250000;
    int quarter3 = 750000;
    int count1 = 0, count3 = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] < quarter1) count1++;
        if (a[i] > quarter3) count3++;
    }
    if (count1 > 0 && count3 > 0 && (count1 + count3 < n)) {
        cerr << "Warning: Performance bottleneck condition triggered - balanced distribution!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Gap Between Prizes
```cpp
void check_large_gap(int* a, int n) {
    for (int i = 1; i < n; i++) {
        if (a[i] - a[i-1] > 100000) { // Arbitrary threshold for a "large" gap
            cerr << "Warning: Performance bottleneck condition triggered - large gap between prizes!" << endl;
            abort();
        }
    }
}
```

## Phase 4: Integrate Checkers into the Original Program

Here is the modified C++ code with the invariants integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for midpoint clustering
void check_midpoint_clustering(int* a, int n) {
    int mid_point = 500000;
    int left_closer = 0, right_closer = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] <= mid_point) left_closer++;
        if (a[i] >= mid_point) right_closer++;
    }
    if (left_closer > 0 && right_closer > 0) {
        cerr << "Warning: Performance bottleneck condition triggered - midpoint clustering!" << endl;
        abort();
    }
}

// Function to check for balanced distribution
void check_balanced_distribution(int* a, int n) {
    int quarter1 = 250000;
    int quarter3 = 750000;
    int count1 = 0, count3 = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] < quarter1) count1++;
        if (a[i] > quarter3) count3++;
    }
    if (count1 > 0 && count3 > 0 && (count1 + count3 < n)) {
        cerr << "Warning: Performance bottleneck condition triggered - balanced distribution!" << endl;
        abort();
    }
}

// Function to check for large gaps between prizes
void check_large_gap(int* a, int n) {
    for (int i = 1; i < n; i++) {
        if (a[i] - a[i-1] > 100000) { // Arbitrary threshold for a "large" gap
            cerr << "Warning: Performance bottleneck condition triggered - large gap between prizes!" << endl;
            abort();
        }
    }
}

int main() {
    int n, c = 0, s1 = 0, s = 0, l = 0, m, sec;
    cin >> n;
    m = n - 1;
    int a[n];
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    // Insert performance checks after reading input
    check_midpoint_clustering(a, n);
    check_balanced_distribution(a, n);
    check_large_gap(a, n);
    
    for (int i = 2, k = 999999; c != n; i++, k--) {
        if (i == a[l]) {
            s1 = i - 2 + 1;
            c++;
            l++;
        }
        if (k == a[m]) {
            s = 1000000 - k;
            c++;
            m--;
        }
    }
    if (s > s1)
        sec = s;
    else
        sec = s1;
    cout << sec;
}
```

### Explanation
- **Midpoint Clustering Check**: The check is applied after reading the input, ensuring that both sides of the midpoint have prizes before proceeding.
- **Balanced Distribution Check**: This check confirms that there's a balanced prize distribution across the range, potentially leading to inefficiencies.
- **Large Gap Check**: This checks for large gaps between consecutive prizes, which could slow down the search. 

These integrative checks help identify potential slowdown scenarios and can be useful for fuzz testing to detect conditions causing performance degradation.

