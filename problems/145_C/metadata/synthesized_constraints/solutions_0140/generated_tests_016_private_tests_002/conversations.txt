system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.

Petya has sequence a consisting of n integers.

The subsequence of the sequence a is such subsequence that can be obtained from a by removing zero or more of its elements.

Two sequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, any sequence of length n has exactly 2n different subsequences (including an empty subsequence).

A subsequence is considered lucky if it has a length exactly k and does not contain two identical lucky numbers (unlucky numbers can be repeated any number of times).

Help Petya find the number of different lucky subsequences of the sequence a. As Petya's parents don't let him play with large numbers, you should print the result modulo prime number 1000000007 (109 + 7).

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105). The next line contains n integers ai (1 ≤ ai ≤ 109) — the sequence a. 

Output

On the single line print the single number — the answer to the problem modulo prime number 1000000007 (109 + 7).

Examples

Input

3 2
10 10 10


Output

3


Input

4 2
4 4 7 7


Output

4

Note

In the first sample all 3 subsequences of the needed length are considered lucky.

In the second sample there are 4 lucky subsequences. For them the sets of indexes equal (the indexation starts from 1): {1, 3}, {1, 4}, {2, 3} and {2, 4}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int di[] = {-1, 0, 1, 0, -1, 1, 1, -1};
const int dj[] = {0, 1, 0, -1, -1, 1, -1, 1};
const long long MOD = 1e9 + 7;
const long long INF = 1e9;
const long double EPS = 1e-7;
long long fastPow(long long a, int p, int m) {
  if (p == 0) return 1;
  if (p % 2 == 1) return (a * fastPow(a, p - 1, m)) % m;
  long long c = fastPow(a, p / 2, m);
  return (c * c) % m;
}
vector<int> mem(1e5 + 5, -1);
long long fact(long long n) {
  if (n == 0) return 1;
  if (~mem[n]) return mem[n];
  return mem[n] = (n * fact(n - 1)) % MOD;
}
long long nCr(long long n, long long r) {
  if (!(n >= r)) return 0;
  long long ret = fact(n) * fastPow(fact(r), MOD - 2, MOD);
  ret %= MOD;
  ret *= fastPow(fact(n - r), MOD - 2, MOD);
  ret %= MOD;
  return ret;
}
bool lucky(int n) {
  while (n) {
    if (n % 10 != 4 && n % 10 != 7) return false;
    n /= 10;
  }
  return true;
}
vector<long long> cnt;
int main() {
  ios::sync_with_stdio(false), cin.tie(0);
  int n, k;
  cin >> n >> k;
  map<int, long long> cntm;
  long long others = n;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    if (lucky(x)) cntm[x]++, others--;
  }
  for (auto& i : cntm) cnt.push_back(i.second);
  if (k == 1)
    cout << n << endl;
  else {
    vector<vector<long long> > dp(2, vector<long long>(1e5 + 5));
    if (cnt.empty()) {
      dp[0][0] = 1;
    } else {
      dp[cnt.size() & 1][0] = 1;
      for (int i = (int)cnt.size() - 1; i >= 0; i--) {
        dp[i & 1][0] = 1;
        for (int j = 1; j <= k && j <= cnt.size() - i; j++) {
          dp[i & 1][j] = cnt[i] * dp[(i + 1) & 1][j - 1];
          dp[i & 1][j] %= MOD;
          dp[i & 1][j] += dp[(i + 1) & 1][j];
          dp[i & 1][j] %= MOD;
        }
      }
    }
    long long r = 0;
    for (int i = 0; i <= k; i++) {
      r += (nCr(others, i) * dp[0][k - i]) % MOD;
      r %= MOD;
    }
    cout << r << endl;
  }
  cin.ignore(), cin.get();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 7
1 2 5 8 47 777777777 1 5 4 8 5 9 5 4 7 4 5 7 7 44474


(G.2) Fast Input

10 1
1 2 3 4 5 6 7 8 9 10


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int di[] = {-1, 0, 1, 0, -1, 1, 1, -1}; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int dj[] = {0, 1, 0, -1, -1, 1, -1, 1}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1e9 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e9; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const long double EPS = 1e-7; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long fastPow(long long a, int p, int m) { /* line 8 slow_hit_count: 720, fast_hit_count: 0 */
  if (p == 0) return 1; /* line 9 slow_hit_count: 720, fast_hit_count: 0 */
  if (p % 2 == 1) return (a * fastPow(a, p - 1, m)) % m; /* line 10 slow_hit_count: 704, fast_hit_count: 0 */
  long long c = fastPow(a, p / 2, m); /* line 11 slow_hit_count: 464, fast_hit_count: 0 */
  return (c * c) % m; /* line 12 slow_hit_count: 464, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> mem(1e5 + 5, -1); /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long fact(long long n) { /* line 15 slow_hit_count: 35, fast_hit_count: 0 */
  if (n == 0) return 1; /* line 16 slow_hit_count: 35, fast_hit_count: 0 */
  if (~mem[n]) return mem[n]; /* line 17 slow_hit_count: 33, fast_hit_count: 0 */
  return mem[n] = (n * fact(n - 1)) % MOD; /* line 18 slow_hit_count: 11, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long nCr(long long n, long long r) { /* line 20 slow_hit_count: 8, fast_hit_count: 0 */
  if (!(n >= r)) return 0; /* line 21 slow_hit_count: 8, fast_hit_count: 0 */
  long long ret = fact(n) * fastPow(fact(r), MOD - 2, MOD); /* line 22 slow_hit_count: 8, fast_hit_count: 0 */
  ret %= MOD; /* line 23 slow_hit_count: 8, fast_hit_count: 0 */
  ret *= fastPow(fact(n - r), MOD - 2, MOD); /* line 24 slow_hit_count: 8, fast_hit_count: 0 */
  ret %= MOD; /* line 25 slow_hit_count: 8, fast_hit_count: 0 */
  return ret; /* line 26 slow_hit_count: 8, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
bool lucky(int n) { /* line 28 slow_hit_count: 42, fast_hit_count: 12 */
  while (n) { /* line 29 slow_hit_count: 42, fast_hit_count: 12 */
    if (n % 10 != 4 && n % 10 != 7) return false; /* line 30 slow_hit_count: 33, fast_hit_count: 10 */
    n /= 10; /* line 31 slow_hit_count: 22, fast_hit_count: 2 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 33 slow_hit_count: 9, fast_hit_count: 2 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> cnt; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false), cin.tie(0); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, long long> cntm; /* line 40 slow_hit_count: 2, fast_hit_count: 2 */
  long long others = n; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 42 slow_hit_count: 21, fast_hit_count: 11 */
    int x; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 44 slow_hit_count: 20, fast_hit_count: 10 */
    if (lucky(x)) cntm[x]++, others--; /* line 45 slow_hit_count: 20, fast_hit_count: 10 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto& i : cntm) cnt.push_back(i.second); /* line 47 slow_hit_count: 6, fast_hit_count: 3 */
  if (k == 1) /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    cout << n << endl; /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
  else { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    vector<vector<long long> > dp(2, vector<long long>(1e5 + 5)); /* line 51 slow_hit_count: 3, fast_hit_count: 0 */
    if (cnt.empty()) { /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
      dp[0][0] = 1; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      dp[cnt.size() & 1][0] = 1; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
      for (int i = (int)cnt.size() - 1; i >= 0; i--) { /* line 56 slow_hit_count: 6, fast_hit_count: 0 */
        dp[i & 1][0] = 1; /* line 57 slow_hit_count: 5, fast_hit_count: 0 */
        for (int j = 1; j <= k && j <= cnt.size() - i; j++) { /* line 58 slow_hit_count: 20, fast_hit_count: 0 */
          dp[i & 1][j] = cnt[i] * dp[(i + 1) & 1][j - 1]; /* line 59 slow_hit_count: 15, fast_hit_count: 0 */
          dp[i & 1][j] %= MOD; /* line 60 slow_hit_count: 15, fast_hit_count: 0 */
          dp[i & 1][j] += dp[(i + 1) & 1][j]; /* line 61 slow_hit_count: 15, fast_hit_count: 0 */
          dp[i & 1][j] %= MOD; /* line 62 slow_hit_count: 15, fast_hit_count: 0 */
        } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    long long r = 0; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i <= k; i++) { /* line 67 slow_hit_count: 9, fast_hit_count: 0 */
      r += (nCr(others, i) * dp[0][k - i]) % MOD; /* line 68 slow_hit_count: 8, fast_hit_count: 0 */
      r %= MOD; /* line 69 slow_hit_count: 8, fast_hit_count: 0 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    cout << r << endl; /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  cin.ignore(), cin.get(); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 74 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C program and derive performance-characterizing invariants, we'll follow the two-phase approach as described.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - The `fastPow` function (lines 8-12) is called extensively in the slow run, with very high hit counts (720 for `fastPow` entry, 704 for line 10, indicating recursion).
   - The `fact` function (lines 15-18) shows high recursiveness as well due to its hit count (35 for entry, multiple entries for recursion).
   - The `nCr` function (lines 20-26) is repeatedly called in the slow input, with line 22 indicating recursive factorial computations.
   - The loop in lines 67-69 also shows significant hits, indicating repeated operations inside it.

2. **Interaction with Data Structures and Recursion:**
   - The `fastPow` function is used for modular inverses in `nCr`, which is called repeatedly as part of calculating combinations.
   - The recursive nature of `fact` and `fastPow` contributes to extensive computation.
   - The nested loop structure in lines 58-62 iterates over combinations of lucky numbers, thus having a direct impact on performance when there are many distinct lucky numbers.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can derive the following natural language performance invariants that describe conditions under which the program slows down:

1. **Combination Calculations:**
   - **Invariant:** "When the number of non-lucky numbers (`others`) is large and the program computes combinations (`nCr`) extensively, the recursive factorial and power computations can slow down the program significantly."
   - **Rationale:** High hit counts in `fastPow` and `fact` suggest that large values for `others` lead to frequent calculations, particularly when there are fewer lucky numbers to form subsequences of length `k`.

2. **Lucky Number Subsequence Iteration:**
   - **Invariant:** "If there are many distinct lucky numbers in the input, the nested loop iterating over subsequences can lead to significant slowdowns, especially when seeking subsequences of length `k`."
   - **Rationale:** The nested loop in lines 58-62 depends on `cnt.size()`, indicating that as the number of distinct lucky numbers increases, the complexity of forming valid subsequences increases.

3. **Recursive Operations for Modulo Calculations:**
   - **Invariant:** "High recursion depths in `fastPow` and `fact` functions due to large inputs can significantly slow down the computation, especially when these functions are called within loops or repeatedly for similar values."
   - **Rationale:** The high hit counts in recursive calls show that these functions are performance-critical when working with larger values of `others` and `cnt`.

These invariants should help identify conditions that cause slow execution and provide insight into potential optimizations, such as reducing unnecessary recalculations or optimizing recursive operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.

Petya has sequence a consisting of n integers.

The subsequence of the sequence a is such subsequence that can be obtained from a by removing zero or more of its elements.

Two sequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, any sequence of length n has exactly 2n different subsequences (including an empty subsequence).

A subsequence is considered lucky if it has a length exactly k and does not contain two identical lucky numbers (unlucky numbers can be repeated any number of times).

Help Petya find the number of different lucky subsequences of the sequence a. As Petya's parents don't let him play with large numbers, you should print the result modulo prime number 1000000007 (109 + 7).

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105). The next line contains n integers ai (1 ≤ ai ≤ 109) — the sequence a. 

Output

On the single line print the single number — the answer to the problem modulo prime number 1000000007 (109 + 7).

Examples

Input

3 2
10 10 10


Output

3


Input

4 2
4 4 7 7


Output

4

Note

In the first sample all 3 subsequences of the needed length are considered lucky.

In the second sample there are 4 lucky subsequences. For them the sets of indexes equal (the indexation starts from 1): {1, 3}, {1, 4}, {2, 3} and {2, 4}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as C++ Checker Functions

Let's transform the performance-characterizing invariants we inferred into C++ code snippets.

1. **Combination Calculations Checker:**
   - **Invariant:** When the number of non-lucky numbers (`others`) is large, the recursive combination calculations can slow down the program.
   - **Checker Code:**
   ```cpp
   void check_combination_invariant(long long others, int threshold) {
       if (others > threshold) {
           cerr << "Warning: combination_invariant triggered - too many non-lucky numbers affecting combinations!" << endl;
           abort();
       }
   }
   ```

2. **Lucky Number Subsequence Iteration Checker:**
   - **Invariant:** If there are many distinct lucky numbers, the nested loop iterating over subsequences can cause slowdowns.
   - **Checker Code:**
   ```cpp
   void check_lucky_subsequence_invariant(int distinctLuckyCount, int threshold) {
       if (distinctLuckyCount > threshold) {
           cerr << "Warning: lucky_subsequence_invariant triggered - too many distinct lucky numbers slowing down!" << endl;
           abort();
       }
   }
   ```

3. **Recursive Operations Checker:**
   - **Invariant:** High recursion depths in `fastPow` and `fact` can slow down computation.
   - **Checker Code:**
   ```cpp
   void check_recursive_operations_invariant(int depth, int threshold) {
       if (depth > threshold) {
           cerr << "Warning: recursive_operations_invariant triggered - excessive recursion depth!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Program

Now we will integrate these checkers into the original C++ program, ensuring they are placed effectively to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int di[] = {-1, 0, 1, 0, -1, 1, 1, -1};
const int dj[] = {0, 1, 0, -1, -1, 1, -1, 1};
const long long MOD = 1e9 + 7;
const long long INF = 1e9;
const long double EPS = 1e-7;

void check_combination_invariant(long long others, int threshold) {
    if (others > threshold) {
        cerr << "Warning: combination_invariant triggered - too many non-lucky numbers affecting combinations!" << endl;
        abort();
    }
}

void check_lucky_subsequence_invariant(int distinctLuckyCount, int threshold) {
    if (distinctLuckyCount > threshold) {
        cerr << "Warning: lucky_subsequence_invariant triggered - too many distinct lucky numbers slowing down!" << endl;
        abort();
    }
}

long long fastPow(long long a, int p, int m) {
  if (p == 0) return 1;
  if (p % 2 == 1) return (a * fastPow(a, p - 1, m)) % m;
  long long c = fastPow(a, p / 2, m);
  return (c * c) % m;
}

vector<int> mem(1e5 + 5, -1);
long long fact(long long n) {
  if (n == 0) return 1;
  if (~mem[n]) return mem[n];
  return mem[n] = (n * fact(n - 1)) % MOD;
}

long long nCr(long long n, long long r) {
  if (!(n >= r)) return 0;
  long long ret = fact(n) * fastPow(fact(r), MOD - 2, MOD);
  ret %= MOD;
  ret *= fastPow(fact(n - r), MOD - 2, MOD);
  ret %= MOD;
  return ret;
}

bool lucky(int n) {
  while (n) {
    if (n % 10 != 4 && n % 10 != 7) return false;
    n /= 10;
  }
  return true;
}

vector<long long> cnt;
int main() {
  ios::sync_with_stdio(false), cin.tie(0);
  int n, k;
  cin >> n >> k;
  map<int, long long> cntm;
  long long others = n;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    if (lucky(x)) cntm[x]++, others--;
  }
  check_combination_invariant(others, 1e5); // Check for too many non-lucky numbers
  for (auto& i : cntm) cnt.push_back(i.second);
  check_lucky_subsequence_invariant(cnt.size(), 100); // Check for too many distinct lucky numbers
  if (k == 1)
    cout << n << endl;
  else {
    vector<vector<long long> > dp(2, vector<long long>(1e5 + 5));
    if (cnt.empty()) {
      dp[0][0] = 1;
    } else {
      dp[cnt.size() & 1][0] = 1;
      for (int i = (int)cnt.size() - 1; i >= 0; i--) {
        dp[i & 1][0] = 1;
        for (int j = 1; j <= k && j <= cnt.size() - i; j++) {
          dp[i & 1][j] = cnt[i] * dp[(i + 1) & 1][j - 1];
          dp[i & 1][j] %= MOD;
          dp[i & 1][j] += dp[(i + 1) & 1][j];
          dp[i & 1][j] %= MOD;
        }
      }
    }
    long long r = 0;
    for (int i = 0; i <= k; i++) {
      r += (nCr(others, i) * dp[0][k - i]) % MOD;
      r %= MOD;
    }
    cout << r << endl;
  }
  cin.ignore(), cin.get();
}
```

### Explanation

- **Combination Invariant**: This check is placed after calculating `others` to ensure we don't have an excessive number of non-lucky numbers affecting combination calculations.
- **Lucky Subsequence Invariant**: This check runs after populating the `cnt` vector, which counts distinct lucky numbers, to ensure we do not slow down due to iterating over too many distinct lucky numbers.
- **Recursion Invariant**: Given the complexities involved, we assumed that deeper recursive calls and the nature of their setup should be computed before invoking the recursive functions, but left this to potential runtime profiling or further analysis.

