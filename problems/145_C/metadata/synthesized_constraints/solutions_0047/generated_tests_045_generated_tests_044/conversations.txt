system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.

Petya has sequence a consisting of n integers.

The subsequence of the sequence a is such subsequence that can be obtained from a by removing zero or more of its elements.

Two sequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, any sequence of length n has exactly 2n different subsequences (including an empty subsequence).

A subsequence is considered lucky if it has a length exactly k and does not contain two identical lucky numbers (unlucky numbers can be repeated any number of times).

Help Petya find the number of different lucky subsequences of the sequence a. As Petya's parents don't let him play with large numbers, you should print the result modulo prime number 1000000007 (109 + 7).

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105). The next line contains n integers ai (1 ≤ ai ≤ 109) — the sequence a. 

Output

On the single line print the single number — the answer to the problem modulo prime number 1000000007 (109 + 7).

Examples

Input

3 2
10 10 10


Output

3


Input

4 2
4 4 7 7


Output

4

Note

In the first sample all 3 subsequences of the needed length are considered lucky.

In the second sample there are 4 lucky subsequences. For them the sets of indexes equal (the indexation starts from 1): {1, 3}, {1, 4}, {2, 3} and {2, 4}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7, yuzu = 1e5;
typedef long long fuko[yuzu | 10];
fuko dp[2], jic = {1}, inv;
map<long long, int> mp;
long long kasumi(long long a, long long b = mod - 2) {
  long long s = 1;
  for (; b; b >>= 1, a = a * a % mod)
    if (b & 1) s = s * a % mod;
  return s;
}
long long zuhe(int n, int m) {
  return jic[n] * inv[m] % mod * inv[n - m] % mod;
}
bool judge(int x) {
  return x < 10 ? x == 4 || x == 7
                : judge(x / 10) & (x % 10 == 4 || x % 10 == 7);
}
int main() {
  int i, n, k, cnt = 0, t = 1;
  scanf("%d%d", &n, &k);
  for (i = 1; i <= yuzu; ++i) jic[i] = jic[i - 1] * i % mod;
  inv[yuzu] = kasumi(jic[yuzu]);
  for (i = yuzu - 1; ~i; --i) inv[i] = inv[i + 1] * (i + 1) % mod;
  for (i = 1; i <= n; ++i) {
    int x;
    scanf("%d", &x);
    judge(x) ? mp[x]++ : cnt++;
  }
  dp[1][0] = 1;
  for (i = 0; i <= cnt; ++i) dp[0][i] = zuhe(cnt, i);
  for (auto p : mp) {
    for (i = 1; i <= yuzu; ++i)
      dp[t][i] = (p.second * dp[!t][i - 1] + dp[!t][i]) % mod;
    t = !t;
  }
  cout << dp[!t][k];
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 4
153 24 12 4 47


(G.2) Fast Input

5 4
153 24 12 15 47


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7, yuzu = 1e5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
typedef long long fuko[yuzu | 10]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
fuko dp[2], jic = {1}, inv; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, int> mp; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long kasumi(long long a, long long b = mod - 2) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  long long s = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (; b; b >>= 1, a = a * a % mod) /* line 9 slow_hit_count: 31, fast_hit_count: 31 */
    if (b & 1) s = s * a % mod; /* line 10 slow_hit_count: 30, fast_hit_count: 30 */
  return s; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long zuhe(int n, int m) { /* line 13 slow_hit_count: 4, fast_hit_count: 5 */
  return jic[n] * inv[m] % mod * inv[n - m] % mod; /* line 14 slow_hit_count: 4, fast_hit_count: 5 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
bool judge(int x) { /* line 16 slow_hit_count: 10, fast_hit_count: 11 */
  return x < 10 ? x == 4 || x == 7 /* line 17 slow_hit_count: 10, fast_hit_count: 11 */
                : judge(x / 10) & (x % 10 == 4 || x % 10 == 7); /* line 18 slow_hit_count: 10, fast_hit_count: 11 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int i, n, k, cnt = 0, t = 1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &k); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= yuzu; ++i) jic[i] = jic[i - 1] * i % mod; /* line 23 slow_hit_count: 100001, fast_hit_count: 100001 */
  inv[yuzu] = kasumi(jic[yuzu]); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = yuzu - 1; ~i; --i) inv[i] = inv[i + 1] * (i + 1) % mod; /* line 25 slow_hit_count: 100001, fast_hit_count: 100001 */
  for (i = 1; i <= n; ++i) { /* line 26 slow_hit_count: 6, fast_hit_count: 6 */
    int x; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &x); /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
    judge(x) ? mp[x]++ : cnt++; /* line 29 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  dp[1][0] = 1; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i <= cnt; ++i) dp[0][i] = zuhe(cnt, i); /* line 32 slow_hit_count: 5, fast_hit_count: 6 */
  for (auto p : mp) { /* line 33 slow_hit_count: 3, fast_hit_count: 2 */
    for (i = 1; i <= yuzu; ++i) /* line 34 slow_hit_count: 200002, fast_hit_count: 100001 */
      dp[t][i] = (p.second * dp[!t][i - 1] + dp[!t][i]) % mod; /* line 35 slow_hit_count: 200000, fast_hit_count: 100000 */
    t = !t; /* line 36 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[!t][k]; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

After analyzing the hit counts for both the slow and fast inputs, here are the key observations:

1. **Line 33 (`for (auto p : mp) {`)**: This loop gets executed more times for the slow input compared to the fast input. The map `mp` contains lucky numbers from the input, suggesting that for the slow input, there are more unique lucky numbers.

2. **Line 34 (`for (i = 1; i <= yuzu; ++i)`)**: This inner loop has a significantly higher hit count in the slow input. It suggests that the number of lucky numbers (or their multiplicity) in the slow input causes this loop to execute more iterations.

3. **Line 35 (`dp[t][i] = (p.second * dp[!t][i - 1] + dp[!t][i]) % mod;`)**: This line exhibits a high number of executions, particularly in the slow input, indicating heavy computation due to repeated operations on the dynamic programming table `dp`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified inefficiencies, here are some performance-characterizing invariants:

1. **Invariant: Large Number of Unique Lucky Numbers**

    - **Natural Language Description**: If there are many unique lucky numbers in the sequence, the program performs significantly more computations, slowing down the execution. This is because each unique lucky number triggers additional iterations over a potentially large data structure.
    
    - **Code Suggestion**:
      ```cpp
      void check_unique_lucky_invariant(bool condition) {
          if (condition) {
              cerr << "Warning: unique_lucky_invariant triggered - too many unique lucky numbers" << endl;
              abort();
          }
      }
      
      int uniqueLuckyCount = mp.size();
      check_unique_lucky_invariant(uniqueLuckyCount > 10);  // Example threshold
      ```

2. **Invariant: High Multiplicity of Lucky Numbers**

    - **Natural Language Description**: When lucky numbers have high multiplicity (i.e., they appear many times in the input), the program's dynamic programming aspect can lead to excessive iterations, causing a slowdown.
    
    - **Code Suggestion**:
      ```cpp
      void check_lucky_multiplicity_invariant(bool condition) {
          if (condition) {
              cerr << "Warning: lucky_multiplicity_invariant triggered - high multiplicity of lucky numbers" << endl;
              abort();
          }
      }
      
      for (const auto& entry : mp) {
          check_lucky_multiplicity_invariant(entry.second > 50);  // Example threshold
      }
      ```

3. **Invariant: High Combination Count Due to Lucky Numbers**

    - **Natural Language Description**: If the combination of total elements minus unlucky numbers is high, causing extensive dynamic programming table operations, the program will slow down.
    
    - **Code Suggestion**:
      ```cpp
      void check_combination_count_invariant(bool condition) {
          if (condition) {
              cerr << "Warning: combination_count_invariant triggered - high combinations due to lucky numbers" << endl;
              abort();
          }
      }
      
      int unluckyCount = n - cnt;
      check_combination_count_invariant(unluckyCount > 80);  // Example threshold
      ```

These invariants capture potential scenarios causing slowdowns, such as high diversity, multiplicity, and combination operations related to lucky numbers, given the constraints provided.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.

Petya has sequence a consisting of n integers.

The subsequence of the sequence a is such subsequence that can be obtained from a by removing zero or more of its elements.

Two sequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, any sequence of length n has exactly 2n different subsequences (including an empty subsequence).

A subsequence is considered lucky if it has a length exactly k and does not contain two identical lucky numbers (unlucky numbers can be repeated any number of times).

Help Petya find the number of different lucky subsequences of the sequence a. As Petya's parents don't let him play with large numbers, you should print the result modulo prime number 1000000007 (109 + 7).

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105). The next line contains n integers ai (1 ≤ ai ≤ 109) — the sequence a. 

Output

On the single line print the single number — the answer to the problem modulo prime number 1000000007 (109 + 7).

Examples

Input

3 2
10 10 10


Output

3


Input

4 2
4 4 7 7


Output

4

Note

In the first sample all 3 subsequences of the needed length are considered lucky.

In the second sample there are 4 lucky subsequences. For them the sets of indexes equal (the indexation starts from 1): {1, 3}, {1, 4}, {2, 3} and {2, 4}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language invariants, here are the corresponding C++ checkers:

1. **Invariant: Large Number of Unique Lucky Numbers**

    ```cpp
    void check_unique_lucky_invariant(int uniqueLuckyCount) {
        if (uniqueLuckyCount > 10) {  // Example threshold
            cerr << "Warning: unique_lucky_invariant triggered - too many unique lucky numbers" << endl;
            abort();
        }
    }
    ```

2. **Invariant: High Multiplicity of Lucky Numbers**

    ```cpp
    void check_lucky_multiplicity_invariant(int multiplicity) {
        if (multiplicity > 50) {  // Example threshold
            cerr << "Warning: lucky_multiplicity_invariant triggered - high multiplicity of lucky numbers" << endl;
            abort();
        }
    }
    ```

3. **Invariant: High Combination Count Due to Lucky Numbers**

    ```cpp
    void check_combination_count_invariant(int unluckyCount) {
        if (unluckyCount > 80) {  // Example threshold
            cerr << "Warning: combination_count_invariant triggered - high combinations due to lucky numbers" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrate the Checker Code with the Original Program

Below is the instrumented C++ code with the above checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7, yuzu = 1e5;
typedef long long fuko[yuzu | 10];
fuko dp[2], jic = {1}, inv;
map<long long, int> mp;

long long kasumi(long long a, long long b = mod - 2) {
    long long s = 1;
    for (; b; b >>= 1, a = a * a % mod)
        if (b & 1) s = s * a % mod;
    return s;
}

long long zuhe(int n, int m) {
    return jic[n] * inv[m] % mod * inv[n - m] % mod;
}

bool judge(int x) {
    return x < 10 ? x == 4 || x == 7
                  : judge(x / 10) & (x % 10 == 4 || x % 10 == 7);
}

void check_unique_lucky_invariant(int uniqueLuckyCount) {
    if (uniqueLuckyCount > 10) {  // Example threshold
        cerr << "Warning: unique_lucky_invariant triggered - too many unique lucky numbers" << endl;
        abort();
    }
}

void check_lucky_multiplicity_invariant(int multiplicity) {
    if (multiplicity > 50) {  // Example threshold
        cerr << "Warning: lucky_multiplicity_invariant triggered - high multiplicity of lucky numbers" << endl;
        abort();
    }
}

void check_combination_count_invariant(int unluckyCount) {
    if (unluckyCount > 80) {  // Example threshold
        cerr << "Warning: combination_count_invariant triggered - high combinations due to lucky numbers" << endl;
        abort();
    }
}

int main() {
    int i, n, k, cnt = 0, t = 1;
    scanf("%d%d", &n, &k);
    for (i = 1; i <= yuzu; ++i) jic[i] = jic[i - 1] * i % mod;
    inv[yuzu] = kasumi(jic[yuzu]);
    for (i = yuzu - 1; ~i; --i) inv[i] = inv[i + 1] * (i + 1) % mod;

    for (i = 1; i <= n; ++i) {
        int x;
        scanf("%d", &x);
        judge(x) ? mp[x]++ : cnt++;
    }

    // Check unique lucky numbers invariant
    check_unique_lucky_invariant(mp.size());

    // Check multiplicity of lucky numbers invariant
    for (const auto& entry : mp) {
        check_lucky_multiplicity_invariant(entry.second);
    }

    // Check high combination count invariant
    check_combination_count_invariant(n - cnt);

    dp[1][0] = 1;
    for (i = 0; i <= cnt; ++i) dp[0][i] = zuhe(cnt, i);
    for (auto p : mp) {
        for (i = 1; i <= yuzu; ++i)
            dp[t][i] = (p.second * dp[!t][i - 1] + dp[!t][i]) % mod;
        t = !t;
    }
    cout << dp[!t][k];
}
```

### Comments on Instrumented Code

- **Unique Lucky Numbers Check**: This check is placed after the map `mp` is populated to ensure we have the correct count of unique lucky numbers.
  
- **Lucky Number Multiplicity Check**: This check is iterated over the map `mp` to verify each lucky number's multiplicity.
  
- **Combination Count Check**: This check is applied after counting unlucky numbers to assess the potential complexity of combination operations.

