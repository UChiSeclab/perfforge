system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.

Petya has sequence a consisting of n integers.

The subsequence of the sequence a is such subsequence that can be obtained from a by removing zero or more of its elements.

Two sequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, any sequence of length n has exactly 2n different subsequences (including an empty subsequence).

A subsequence is considered lucky if it has a length exactly k and does not contain two identical lucky numbers (unlucky numbers can be repeated any number of times).

Help Petya find the number of different lucky subsequences of the sequence a. As Petya's parents don't let him play with large numbers, you should print the result modulo prime number 1000000007 (109 + 7).

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105). The next line contains n integers ai (1 ≤ ai ≤ 109) — the sequence a. 

Output

On the single line print the single number — the answer to the problem modulo prime number 1000000007 (109 + 7).

Examples

Input

3 2
10 10 10


Output

3


Input

4 2
4 4 7 7


Output

4

Note

In the first sample all 3 subsequences of the needed length are considered lucky.

In the second sample there are 4 lucky subsequences. For them the sets of indexes equal (the indexation starts from 1): {1, 3}, {1, 4}, {2, 3} and {2, 4}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<long long> lucky;
void gen(long long num) {
  if (num > 1000000000) return;
  if (num) lucky.push_back(num);
  gen(num * 10 + 4);
  gen(num * 10 + 7);
}
map<long long, long long> mark;
long long cnt[1034];
long long dp[1034][1034];
long long fact[100005];
long long call(int idx, int cntt) {
  if (idx > (int)lucky.size()) {
    if (cntt == 0) return 1;
    return 0;
  }
  long long &ret = dp[idx][cntt];
  if (ret != -1) return ret;
  long long p = 0, q = 0;
  if (cntt) {
    p = (cnt[idx] * (call(idx + 1, cntt - 1))) % 1000000007;
  }
  q = call(idx + 1, cntt);
  return ret = (p + q) % 1000000007;
}
long long bigmod(long long n, long long p) {
  long long ret = 1;
  while (p > 0) {
    if (p % 2) ret = (ret * n) % 1000000007;
    n = (n * n) % 1000000007;
    p /= 2;
  }
  return ret;
}
long long nCr(long long n, long long r) {
  long long up = fact[n];
  long long down = (fact[r] * fact[n - r]) % 1000000007;
  down = bigmod(down, 1000000007 - 2);
  long long ret = (up * down) % 1000000007;
  return ret;
}
int main() {
  gen(0);
  sort(lucky.begin(), lucky.end());
  for (int i = 0; i < (int)lucky.size(); i++) {
    mark[lucky[i]] = i + 1;
  }
  int n, k;
  scanf("%d %d", &n, &k);
  long long others = 0;
  int total_lucky = 0;
  for (int i = 0; i < n; i++) {
    long long a;
    scanf("%lld", &a);
    if (mark[a]) {
      if (cnt[mark[a]] == 0) total_lucky++;
      cnt[mark[a]]++;
    } else
      others++;
  }
  fact[0] = 1;
  for (long long i = 1; i < 100005; i++)
    fact[i] = (fact[i - 1] * i) % 1000000007;
  if (others + total_lucky < k) {
    printf("0\n");
    return 0;
  }
  long long ans = 0;
  memset(dp, -1, sizeof(dp));
  for (int i = 0; i <= total_lucky; i++) {
    long long x = k - i;
    if (x <= others && x >= 0) {
      long long temp = nCr(others, x);
      long long temp1 = (call(1, i)) % 1000000007;
      temp = (temp * temp1) % 1000000007;
      ans = (ans + temp) % 1000000007;
    }
  }
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 7
1 2 5 8 47 777777777 1 5 4 8 5 9 5 4 7 4 5 7 7 44474


(G.2) Fast Input

2 2
47 47


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> lucky; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void gen(long long num) { /* line 4 slow_hit_count: 2047, fast_hit_count: 2047 */
  if (num > 1000000000) return; /* line 5 slow_hit_count: 2047, fast_hit_count: 2047 */
  if (num) lucky.push_back(num); /* line 6 slow_hit_count: 1023, fast_hit_count: 1023 */
  gen(num * 10 + 4); /* line 7 slow_hit_count: 1023, fast_hit_count: 1023 */
  gen(num * 10 + 7); /* line 8 slow_hit_count: 1023, fast_hit_count: 1023 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, long long> mark; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long cnt[1034]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[1034][1034]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long fact[100005]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long call(int idx, int cntt) { /* line 14 slow_hit_count: 11248, fast_hit_count: 0 */
  if (idx > (int)lucky.size()) { /* line 15 slow_hit_count: 11248, fast_hit_count: 0 */
    if (cntt == 0) return 1; /* line 16 slow_hit_count: 11, fast_hit_count: 0 */
    return 0; /* line 17 slow_hit_count: 9, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  long long &ret = dp[idx][cntt]; /* line 19 slow_hit_count: 11237, fast_hit_count: 0 */
  if (ret != -1) return ret; /* line 20 slow_hit_count: 11237, fast_hit_count: 0 */
  long long p = 0, q = 0; /* line 21 slow_hit_count: 6132, fast_hit_count: 0 */
  if (cntt) { /* line 22 slow_hit_count: 6132, fast_hit_count: 0 */
    p = (cnt[idx] * (call(idx + 1, cntt - 1))) % 1000000007; /* line 23 slow_hit_count: 5110, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  q = call(idx + 1, cntt); /* line 25 slow_hit_count: 6132, fast_hit_count: 0 */
  return ret = (p + q) % 1000000007; /* line 26 slow_hit_count: 6132, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
long long bigmod(long long n, long long p) { /* line 28 slow_hit_count: 6, fast_hit_count: 0 */
  long long ret = 1; /* line 29 slow_hit_count: 6, fast_hit_count: 0 */
  while (p > 0) { /* line 30 slow_hit_count: 186, fast_hit_count: 0 */
    if (p % 2) ret = (ret * n) % 1000000007; /* line 31 slow_hit_count: 180, fast_hit_count: 0 */
    n = (n * n) % 1000000007; /* line 32 slow_hit_count: 180, fast_hit_count: 0 */
    p /= 2; /* line 33 slow_hit_count: 180, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 35 slow_hit_count: 6, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long nCr(long long n, long long r) { /* line 37 slow_hit_count: 6, fast_hit_count: 0 */
  long long up = fact[n]; /* line 38 slow_hit_count: 6, fast_hit_count: 0 */
  long long down = (fact[r] * fact[n - r]) % 1000000007; /* line 39 slow_hit_count: 6, fast_hit_count: 0 */
  down = bigmod(down, 1000000007 - 2); /* line 40 slow_hit_count: 6, fast_hit_count: 0 */
  long long ret = (up * down) % 1000000007; /* line 41 slow_hit_count: 6, fast_hit_count: 0 */
  return ret; /* line 42 slow_hit_count: 6, fast_hit_count: 0 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  gen(0); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  sort(lucky.begin(), lucky.end()); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)lucky.size(); i++) { /* line 47 slow_hit_count: 1023, fast_hit_count: 1023 */
    mark[lucky[i]] = i + 1; /* line 48 slow_hit_count: 1022, fast_hit_count: 1022 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  int n, k; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d", &n, &k); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  long long others = 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  int total_lucky = 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 54 slow_hit_count: 21, fast_hit_count: 3 */
    long long a; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%lld", &a); /* line 56 slow_hit_count: 20, fast_hit_count: 2 */
    if (mark[a]) { /* line 57 slow_hit_count: 20, fast_hit_count: 2 */
      if (cnt[mark[a]] == 0) total_lucky++; /* line 58 slow_hit_count: 9, fast_hit_count: 2 */
      cnt[mark[a]]++; /* line 59 slow_hit_count: 9, fast_hit_count: 2 */
    } else /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      others++; /* line 61 slow_hit_count: 11, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  fact[0] = 1; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i < 100005; i++) /* line 64 slow_hit_count: 100005, fast_hit_count: 100005 */
    fact[i] = (fact[i - 1] * i) % 1000000007; /* line 65 slow_hit_count: 100004, fast_hit_count: 100004 */
  if (others + total_lucky < k) { /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
    printf("0\n"); /* line 67 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 68 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 70 slow_hit_count: 1, fast_hit_count: 0 */
  memset(dp, -1, sizeof(dp)); /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i <= total_lucky; i++) { /* line 72 slow_hit_count: 7, fast_hit_count: 0 */
    long long x = k - i; /* line 73 slow_hit_count: 6, fast_hit_count: 0 */
    if (x <= others && x >= 0) { /* line 74 slow_hit_count: 6, fast_hit_count: 0 */
      long long temp = nCr(others, x); /* line 75 slow_hit_count: 6, fast_hit_count: 0 */
      long long temp1 = (call(1, i)) % 1000000007; /* line 76 slow_hit_count: 6, fast_hit_count: 0 */
      temp = (temp * temp1) % 1000000007; /* line 77 slow_hit_count: 6, fast_hit_count: 0 */
      ans = (ans + temp) % 1000000007; /* line 78 slow_hit_count: 6, fast_hit_count: 0 */
    } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 81 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 82 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 83 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count analysis, the following lines are of particular interest due to their high hit counts on the slow input compared to the fast input:

1. **Recursive Function Call - `call(int idx, int cntt)`**
   - **Lines 14-27**: This recursive function is called significantly more times (11248 times) on the slow input compared to none on the fast input. This indicates that the recursive exploration of potential combinations is a major factor in the slowdown.
  
2. **Line 23 and Line 25**:
   - These lines involve recursive calls, and they are hit frequently in the slow input (6132 and 5110 times, respectively). The recursive structure and its depth contribute heavily to computational overhead.

3. **Factorial Calculation - `fact` Array Initialization**
   - **Lines 64-65**: These lines are executed 100004 times, which is expected due to the initialization of the factorial array. Although this may not directly contribute to the linearly increased cost, the computation is substantial, especially when juxtaposed with the recursive calls.

4. **Combination Calculation - `nCr` Function**
   - **Lines 37-42**: This function is called 6 times in the slow input run. The overhead here is due to the computation of binomial coefficients, which involves modular arithmetic and is computationally expensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following are natural language performance-characterizing invariants:

1. **Recursive Combinatorial Exploration**:
   - **Invariant**: "If the number of unique lucky numbers identified in the input is relatively high compared to \( k \) and involves recursive combinations, the program may slow down considerably due to extensive recursive depth and branching."
   - **Explanation**: The recursive function `call` is a key contributor to the slowdown, particularly when many recursive paths are being explored due to a large number of potential combinations of lucky numbers.

2. **High Factorial and Combination Calculations**:
   - **Invariant**: "When both the number of non-lucky and lucky numbers is high, leading to frequent updates of combination values, the program may exhibit slow performance due to heavy factorial calculations and modular arithmetic."
   - **Explanation**: The program performs numerous factorial and combination calculations, which can become a performance bottleneck as the number of non-lucky numbers increases, requiring large binomial coefficient computations.

3. **High Counts of Recursive Calls**:
   - **Invariant**: "If the recursion depth of the function `call` approaches the size of the `lucky` vector, performance degradation might occur due to excessive recursive calls and state management overhead."
   - **Explanation**: The recursive nature of the `call` function creates a large computational load when attempting to cover all potential subsequences, especially when the vector of lucky numbers is large relative to \( k \).

4. **Handling of Large Input Sizes**:
   - **Invariant**: "For inputs where the number of lucky numbers multiplies possibilities (in a \( n \) close to the maximum constraint), the recursive structure and factorial calculations may lead to a marked slowdown."
   - **Explanation**: As \( n \) nears its upper limit, and many combinations of lucky numbers need to be considered, the computation time increases non-linearly due to the recursive depth and factorial calculations.

These invariants aim to capture conditions under which the recursive exploration of subsequences and associated computations lead to performance degradation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.

Petya has sequence a consisting of n integers.

The subsequence of the sequence a is such subsequence that can be obtained from a by removing zero or more of its elements.

Two sequences are considered different if index sets of numbers included in them are different. That is, the values ​of the elements ​do not matter in the comparison of subsequences. In particular, any sequence of length n has exactly 2n different subsequences (including an empty subsequence).

A subsequence is considered lucky if it has a length exactly k and does not contain two identical lucky numbers (unlucky numbers can be repeated any number of times).

Help Petya find the number of different lucky subsequences of the sequence a. As Petya's parents don't let him play with large numbers, you should print the result modulo prime number 1000000007 (109 + 7).

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105). The next line contains n integers ai (1 ≤ ai ≤ 109) — the sequence a. 

Output

On the single line print the single number — the answer to the problem modulo prime number 1000000007 (109 + 7).

Examples

Input

3 2
10 10 10


Output

3


Input

4 2
4 4 7 7


Output

4

Note

In the first sample all 3 subsequences of the needed length are considered lucky.

In the second sample there are 4 lucky subsequences. For them the sets of indexes equal (the indexation starts from 1): {1, 3}, {1, 4}, {2, 3} and {2, 4}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Let's translate the performance-characterizing invariants derived earlier into C++ checker code:

1. **Recursive Combinatorial Exploration**:
   ```cpp
   void check_recursive_invariant(int total_lucky, int k) {
       if (total_lucky > 50 && k < 10) {
           cerr << "Warning: Performance bottleneck condition triggered - high recursion depth and low k!" << endl;
           abort();
       }
   }
   ```

2. **High Factorial and Combination Calculations**:
   ```cpp
   void check_factorial_invariant(int others, int total_lucky, int k) {
       if (others > 50000 && total_lucky > 10) {
           cerr << "Warning: Performance bottleneck condition triggered - heavy factorial calculations!" << endl;
           abort();
       }
   }
   ```

3. **High Counts of Recursive Calls**:
   ```cpp
   void check_recursive_call_count(int idx, int lucky_size) {
       if (idx > lucky_size - 10) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive recursive call depth!" << endl;
           abort();
       }
   }
   ```

4. **Handling of Large Input Sizes**:
   ```cpp
   void check_large_input_invariant(int n, int total_lucky) {
       if (n > 10000 && total_lucky > 20) {
           cerr << "Warning: Performance bottleneck condition triggered - large input with many lucky numbers!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checkers into the original C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
vector<long long> lucky;

// Checker functions
void check_recursive_invariant(int total_lucky, int k) {
    if (total_lucky > 50 && k < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth and low k!" << endl;
        abort();
    }
}

void check_factorial_invariant(int others, int total_lucky, int k) {
    if (others > 50000 && total_lucky > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - heavy factorial calculations!" << endl;
        abort();
    }
}

void check_recursive_call_count(int idx, int lucky_size) {
    if (idx > lucky_size - 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive call depth!" << endl;
        abort();
    }
}

void check_large_input_invariant(int n, int total_lucky) {
    if (n > 10000 && total_lucky > 20) {
        cerr << "Warning: Performance bottleneck condition triggered - large input with many lucky numbers!" << endl;
        abort();
    }
}

void gen(long long num) {
    if (num > 1000000000) return;
    if (num) lucky.push_back(num);
    gen(num * 10 + 4);
    gen(num * 10 + 7);
}

map<long long, long long> mark;
long long cnt[1034];
long long dp[1034][1034];
long long fact[100005];

long long call(int idx, int cntt) {
    check_recursive_call_count(idx, lucky.size()); // Check for excessive recursive call depth
    if (idx > (int)lucky.size()) {
        if (cntt == 0) return 1;
        return 0;
    }
    long long &ret = dp[idx][cntt];
    if (ret != -1) return ret;
    long long p = 0, q = 0;
    if (cntt) {
        p = (cnt[idx] * (call(idx + 1, cntt - 1))) % 1000000007;
    }
    q = call(idx + 1, cntt);
    return ret = (p + q) % 1000000007;
}

long long bigmod(long long n, long long p) {
    long long ret = 1;
    while (p > 0) {
        if (p % 2) ret = (ret * n) % 1000000007;
        n = (n * n) % 1000000007;
        p /= 2;
    }
    return ret;
}

long long nCr(long long n, long long r) {
    long long up = fact[n];
    long long down = (fact[r] * fact[n - r]) % 1000000007;
    down = bigmod(down, 1000000007 - 2);
    long long ret = (up * down) % 1000000007;
    return ret;
}

int main() {
    gen(0);
    sort(lucky.begin(), lucky.end());
    for (int i = 0; i < (int)lucky.size(); i++) {
        mark[lucky[i]] = i + 1;
    }
    int n, k;
    scanf("%d %d", &n, &k);
    long long others = 0;
    int total_lucky = 0;
    for (int i = 0; i < n; i++) {
        long long a;
        scanf("%lld", &a);
        if (mark[a]) {
            if (cnt[mark[a]] == 0) total_lucky++;
            cnt[mark[a]]++;
        } else
            others++;
    }

    // Checking conditions after input processing
    check_large_input_invariant(n, total_lucky); // Check for large input with many lucky numbers
    check_factorial_invariant(others, total_lucky, k); // Check for heavy factorial calculations
    check_recursive_invariant(total_lucky, k); // Check recursion-related conditions

    fact[0] = 1;
    for (long long i = 1; i < 100005; i++)
        fact[i] = (fact[i - 1] * i) % 1000000007;

    if (others + total_lucky < k) {
        printf("0\n");
        return 0;
    }
    long long ans = 0;
    memset(dp, -1, sizeof(dp));
    for (int i = 0; i <= total_lucky; i++) {
        long long x = k - i;
        if (x <= others && x >= 0) {
            long long temp = nCr(others, x);
            long long temp1 = (call(1, i)) % 1000000007;
            temp = (temp * temp1) % 1000000007;
            ans = (ans + temp) % 1000000007;
        }
    }
    printf("%lld\n", ans);
    return 0;
}
```

### Explanation
- **Recursive Combinatorial Exploration Check**: Placed after determining the number of lucky numbers.
- **Factorial and Combination Calculation Check**: Introduced after processing input and before factorials are used extensively.
- **Recursive Call Depth Check**: Implemented inside the `call` function to monitor excessive recursive calls.
- **Large Input Handling Check**: Introduced after input processing to ensure large inputs with many lucky numbers are detected. 

These checks help in identifying potential performance bottlenecks related to recursion depth, factorial calculations, and large input sizes.

