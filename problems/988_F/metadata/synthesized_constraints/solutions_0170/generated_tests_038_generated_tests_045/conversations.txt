system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp lives on a coordinate line at the point x = 0. He goes to his friend that lives at the point x = a. Polycarp can move only from left to right, he can pass one unit of length each second.

Now it's raining, so some segments of his way are in the rain. Formally, it's raining on n non-intersecting segments, the i-th segment which is in the rain is represented as [l_i, r_i] (0 ≤ l_i < r_i ≤ a).

There are m umbrellas lying on the line, the i-th umbrella is located at point x_i (0 ≤ x_i ≤ a) and has weight p_i. When Polycarp begins his journey, he doesn't have any umbrellas.

During his journey from x = 0 to x = a Polycarp can pick up and throw away umbrellas. Polycarp picks up and throws down any umbrella instantly. He can carry any number of umbrellas at any moment of time. Because Polycarp doesn't want to get wet, he must carry at least one umbrella while he moves from x to x + 1 if a segment [x, x + 1] is in the rain (i.e. if there exists some i such that l_i ≤ x and x + 1 ≤ r_i).

The condition above is the only requirement. For example, it is possible to go without any umbrellas to a point where some rain segment starts, pick up an umbrella at this point and move along with an umbrella. Polycarp can swap umbrellas while he is in the rain.

Each unit of length passed increases Polycarp's fatigue by the sum of the weights of umbrellas he carries while moving.

Can Polycarp make his way from point x = 0 to point x = a? If yes, find the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Input

The first line contains three integers a, n and m (1 ≤ a, m ≤ 2000, 1 ≤ n ≤ ⌈a/2⌉) — the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.

Each of the next n lines contains two integers l_i and r_i (0 ≤ l_i < r_i ≤ a) — the borders of the i-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments i and j either r_i < l_j or r_j < l_i.

Each of the next m lines contains two integers x_i and p_i (0 ≤ x_i ≤ a, 1 ≤ p_i ≤ 10^5) — the location and the weight of the i-th umbrella.

Output

Print "-1" (without quotes) if Polycarp can't make his way from point x = 0 to point x = a. Otherwise print one integer — the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Examples

Input

10 2 4
3 7
8 10
0 10
3 4
8 1
1 2


Output

14


Input

10 1 1
0 9
0 5


Output

45


Input

10 1 1
0 9
1 5


Output

-1

Note

In the first example the only possible strategy is to take the fourth umbrella at the point x = 1, keep it till the point x = 7 (the total fatigue at x = 7 will be equal to 12), throw it away, move on from x = 7 to x = 8 without an umbrella, take the third umbrella at x = 8 and keep it till the end (the total fatigue at x = 10 will be equal to 14). 

In the second example the only possible strategy is to take the first umbrella, move with it till the point x = 9, throw it away and proceed without an umbrella till the end.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int MAX = numeric_limits<int>::max();
int a, n, m, w[2001], dp[2001];
bool rain[2000];
int main() {
  scanf("%d %d %d", &a, &n, &m);
  fill(dp, dp + a + 1, MAX);
  while (n-- > 0) {
    int l, r;
    scanf("%d %d", &l, &r);
    while (l < r) rain[l++] = true;
  }
  while (m-- > 0) {
    int x, p;
    scanf("%d %d", &x, &p);
    if (x < a) {
      x++;
      if (w[x] == 0 || w[x] > p) w[x] = p;
    }
  }
  for (int i = 0; i < a; i++) {
    int m = i == 0 ? 0 : *min_element(dp, dp + i + 1);
    dp[0] = rain[i] ? MAX : m;
    dp[i + 1] = m < MAX && w[i + 1] > 0 ? m + w[i + 1] : MAX;
    for (int j = 1; j <= i; j++) {
      if (dp[j] < MAX) dp[j] += w[j];
    }
  }
  int ans = *min_element(dp, dp + a + 1);
  printf("%d\n", ans < MAX ? ans : -1);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2000 1 1
0 1
521 19267


(G.2) Fast Input

1118 1 1
0 1
521 19267


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX = numeric_limits<int>::max(); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a, n, m, w[2001], dp[2001]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool rain[2000]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d %d", &a, &n, &m); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  fill(dp, dp + a + 1, MAX); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (n-- > 0) { /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
    int l, r; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d", &l, &r); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    while (l < r) rain[l++] = true; /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  while (m-- > 0) { /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    int x, p; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d", &x, &p); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    if (x < a) { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
      x++; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
      if (w[x] == 0 || w[x] > p) w[x] = p; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < a; i++) { /* line 23 slow_hit_count: 2001, fast_hit_count: 1119 */
    int m = i == 0 ? 0 : *min_element(dp, dp + i + 1); /* line 24 slow_hit_count: 2000, fast_hit_count: 1118 */
    dp[0] = rain[i] ? MAX : m; /* line 25 slow_hit_count: 2000, fast_hit_count: 1118 */
    dp[i + 1] = m < MAX && w[i + 1] > 0 ? m + w[i + 1] : MAX; /* line 26 slow_hit_count: 2000, fast_hit_count: 1118 */
    for (int j = 1; j <= i; j++) { /* line 27 slow_hit_count: 2001000, fast_hit_count: 625521 */
      if (dp[j] < MAX) dp[j] += w[j]; /* line 28 slow_hit_count: 1999000, fast_hit_count: 624403 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = *min_element(dp, dp + a + 1); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", ans < MAX ? ans : -1); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue and derive conditions under which the code slows down, we can follow the provided tasks:

### Phase 1: Identify Expensive or Inefficient Code Segments
1. **Compare Line-Level Hit Counts:**
   - The block starting from line 23 shows a significant difference in line hit counts between the slow and fast inputs. Specifically, the loop beginning at line 23 (`for (int i = 0; i < a; i++)`) and the nested loop starting at line 27 (`for (int j = 1; j <= i; j++)`) both have considerably larger hit counts for the slow input as compared to the fast input.

2. **Pinpoint Lines with More Hits:**
   - **Line 27 and 28**: These lines are executed repeatedly inside the nested loop, with a notably higher number of executions in the slow input. The nested loop iterates `i` times for each increment of `i`, leading to quadratic growth in the number of executions as `i` approaches `a`.

3. **Data Structures and Loops Interaction:**
   - The nested loop suggests a potential quadratic complexity (`O(a^2)`) in the execution, particularly affected by the range of `a`. This is exacerbated in cases where `a` is large, such as in the slow input.

### Phase 2: Derive Performance-Characterizing Invariants
Based on the analysis, we can derive the following natural language performance invariants:

1. **Quadratic Loop Complexity:**
   - "If `a` is close to its upper limit (e.g., maximum size), the nested loop structure iterates quadratically, leading to a significant slowdown. The performance can degrade drastically as `a` approaches its maximum allowed value."

2. **Umbrella Weight Computation:**
   - "In scenarios where each unit segment requires frequent recalculations of umbrella weights due to many umbrellas being picked up or dropped, especially over large segments (`a`), the computational overhead increases, leading to slow execution."

3. **Excessive Iterations in Dynamic Programming Table Update:**
   - "When `a` is large, the updates made to the dynamic programming table involve multiple checks and modifications, further slowing down the computation as `a` increases."

### Conclusion
The slow execution is primarily due to the quadratic complexity introduced by the nested loop, which becomes pronounced when `a` is large. This is compounded by the iterative updates to the dynamic programming table, which are more frequent and expensive when `a` is near its upper bound. These invariants are broad enough to anticipate future slowdowns under similar conditions without relying on specific numeric values from the inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp lives on a coordinate line at the point x = 0. He goes to his friend that lives at the point x = a. Polycarp can move only from left to right, he can pass one unit of length each second.

Now it's raining, so some segments of his way are in the rain. Formally, it's raining on n non-intersecting segments, the i-th segment which is in the rain is represented as [l_i, r_i] (0 ≤ l_i < r_i ≤ a).

There are m umbrellas lying on the line, the i-th umbrella is located at point x_i (0 ≤ x_i ≤ a) and has weight p_i. When Polycarp begins his journey, he doesn't have any umbrellas.

During his journey from x = 0 to x = a Polycarp can pick up and throw away umbrellas. Polycarp picks up and throws down any umbrella instantly. He can carry any number of umbrellas at any moment of time. Because Polycarp doesn't want to get wet, he must carry at least one umbrella while he moves from x to x + 1 if a segment [x, x + 1] is in the rain (i.e. if there exists some i such that l_i ≤ x and x + 1 ≤ r_i).

The condition above is the only requirement. For example, it is possible to go without any umbrellas to a point where some rain segment starts, pick up an umbrella at this point and move along with an umbrella. Polycarp can swap umbrellas while he is in the rain.

Each unit of length passed increases Polycarp's fatigue by the sum of the weights of umbrellas he carries while moving.

Can Polycarp make his way from point x = 0 to point x = a? If yes, find the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Input

The first line contains three integers a, n and m (1 ≤ a, m ≤ 2000, 1 ≤ n ≤ ⌈a/2⌉) — the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.

Each of the next n lines contains two integers l_i and r_i (0 ≤ l_i < r_i ≤ a) — the borders of the i-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments i and j either r_i < l_j or r_j < l_i.

Each of the next m lines contains two integers x_i and p_i (0 ≤ x_i ≤ a, 1 ≤ p_i ≤ 10^5) — the location and the weight of the i-th umbrella.

Output

Print "-1" (without quotes) if Polycarp can't make his way from point x = 0 to point x = a. Otherwise print one integer — the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Examples

Input

10 2 4
3 7
8 10
0 10
3 4
8 1
1 2


Output

14


Input

10 1 1
0 9
0 5


Output

45


Input

10 1 1
0 9
1 5


Output

-1

Note

In the first example the only possible strategy is to take the fourth umbrella at the point x = 1, keep it till the point x = 7 (the total fatigue at x = 7 will be equal to 12), throw it away, move on from x = 7 to x = 8 without an umbrella, take the third umbrella at x = 8 and keep it till the end (the total fatigue at x = 10 will be equal to 14). 

In the second example the only possible strategy is to take the first umbrella, move with it till the point x = 9, throw it away and proceed without an umbrella till the end.

Solution (C++ code):
{solution}


assistant: Here's how we can implement the performance-characterizing invariants as runtime checks in C++:

### Phase 3: Implementing Natural Language Invariants as C++ Checks

1. **Quadratic Loop Complexity Check:**

   This check is based on the observation that the nested loop iterates quadratically as `i` approaches the maximum `a`.

   ```cpp
   void check_quadratic_loop_invariant(int a, int i) {
       if (i > a - 50) {  // Arbitrary, but ensures we're near the max value of `a`
           cerr << "Warning: Performance bottleneck condition triggered - approaching quadratic loop limit!" << endl;
           abort();
       }
   }
   ```

2. **Umbrella Weight Computation Check:**

   This check ensures that frequent recalculations of umbrella weights do not cause excessive overhead when `a` is large.

   ```cpp
   void check_umbrella_weight_invariant(int a, int weight_updates) {
       if (weight_updates > 10000 && a > 1900) {  // Arbitrary threshold for weight updates
           cerr << "Warning: Performance bottleneck condition triggered - excessive umbrella weight computations!" << endl;
           abort();
       }
   }
   ```

3. **Dynamic Programming Table Update Check:**

   This check monitors the updates to the dynamic programming table to ensure no excessive or unnecessary modifications occur as `a` increases.

   ```cpp
   void check_dp_table_update_invariant(int a, int dp_updates) {
       if (dp_updates > 2 * a * a) {  // Captures O(a^2) behavior
           cerr << "Warning: Performance bottleneck condition triggered - excessive DP table updates!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original Program

Here is the instrumented C++ code, where the checks are placed at strategic points to prevent performance issues:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int MAX = numeric_limits<int>::max();
int a, n, m, w[2001], dp[2001];
bool rain[2000];

// Function to check quadratic loop complexity
void check_quadratic_loop_invariant(int a, int i) {
    if (i > a - 50) {  // Arbitrary, but ensures we're near the max value of `a`
        cerr << "Warning: Performance bottleneck condition triggered - approaching quadratic loop limit!" << endl;
        abort();
    }
}

// Function to check umbrella weight computation
void check_umbrella_weight_invariant(int a, int weight_updates) {
    if (weight_updates > 10000 && a > 1900) {  // Arbitrary threshold for weight updates
        cerr << "Warning: Performance bottleneck condition triggered - excessive umbrella weight computations!" << endl;
        abort();
    }
}

// Function to check dynamic programming table update
void check_dp_table_update_invariant(int a, int dp_updates) {
    if (dp_updates > 2 * a * a) {  // Captures O(a^2) behavior
        cerr << "Warning: Performance bottleneck condition triggered - excessive DP table updates!" << endl;
        abort();
    }
}

int main() {
    scanf("%d %d %d", &a, &n, &m);
    fill(dp, dp + a + 1, MAX);
    while (n-- > 0) {
        int l, r;
        scanf("%d %d", &l, &r);
        while (l < r) rain[l++] = true;
    }
    while (m-- > 0) {
        int x, p;
        scanf("%d %d", &x, &p);
        if (x < a) {
            x++;
            if (w[x] == 0 || w[x] > p) w[x] = p;
        }
    }
    
    int weight_updates = 0; // Track how often weights are updated
    int dp_updates = 0;     // Track how many times dp is updated

    for (int i = 0; i < a; i++) {
        check_quadratic_loop_invariant(a, i);
        
        int m = i == 0 ? 0 : *min_element(dp, dp + i + 1);
        dp[0] = rain[i] ? MAX : m;
        dp[i + 1] = m < MAX && w[i + 1] > 0 ? m + w[i + 1] : MAX;
        dp_updates++;

        for (int j = 1; j <= i; j++) {
            if (dp[j] < MAX) {
                dp[j] += w[j];
                weight_updates++;
            }
        }

        check_umbrella_weight_invariant(a, weight_updates);
        check_dp_table_update_invariant(a, dp_updates);
    }

    int ans = *min_element(dp, dp + a + 1);
    printf("%d\n", ans < MAX ? ans : -1);
    return 0;
}
```

**Comments on Placement:**
- The **quadratic loop invariant check** is placed at the beginning of the major iteration loop to capture when `i` is approaching the upper bound of `a`.
- The **umbrella weight computation check** is integrated inside the nested loop to track the number of weight updates.
- The **dynamic programming table update check** is executed after each update to the DP table to ensure it doesn't exceed a feasible number of updates.

