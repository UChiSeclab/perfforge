system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp lives on a coordinate line at the point x = 0. He goes to his friend that lives at the point x = a. Polycarp can move only from left to right, he can pass one unit of length each second.

Now it's raining, so some segments of his way are in the rain. Formally, it's raining on n non-intersecting segments, the i-th segment which is in the rain is represented as [l_i, r_i] (0 ≤ l_i < r_i ≤ a).

There are m umbrellas lying on the line, the i-th umbrella is located at point x_i (0 ≤ x_i ≤ a) and has weight p_i. When Polycarp begins his journey, he doesn't have any umbrellas.

During his journey from x = 0 to x = a Polycarp can pick up and throw away umbrellas. Polycarp picks up and throws down any umbrella instantly. He can carry any number of umbrellas at any moment of time. Because Polycarp doesn't want to get wet, he must carry at least one umbrella while he moves from x to x + 1 if a segment [x, x + 1] is in the rain (i.e. if there exists some i such that l_i ≤ x and x + 1 ≤ r_i).

The condition above is the only requirement. For example, it is possible to go without any umbrellas to a point where some rain segment starts, pick up an umbrella at this point and move along with an umbrella. Polycarp can swap umbrellas while he is in the rain.

Each unit of length passed increases Polycarp's fatigue by the sum of the weights of umbrellas he carries while moving.

Can Polycarp make his way from point x = 0 to point x = a? If yes, find the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Input

The first line contains three integers a, n and m (1 ≤ a, m ≤ 2000, 1 ≤ n ≤ ⌈a/2⌉) — the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.

Each of the next n lines contains two integers l_i and r_i (0 ≤ l_i < r_i ≤ a) — the borders of the i-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments i and j either r_i < l_j or r_j < l_i.

Each of the next m lines contains two integers x_i and p_i (0 ≤ x_i ≤ a, 1 ≤ p_i ≤ 10^5) — the location and the weight of the i-th umbrella.

Output

Print "-1" (without quotes) if Polycarp can't make his way from point x = 0 to point x = a. Otherwise print one integer — the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Examples

Input

10 2 4
3 7
8 10
0 10
3 4
8 1
1 2


Output

14


Input

10 1 1
0 9
0 5


Output

45


Input

10 1 1
0 9
1 5


Output

-1

Note

In the first example the only possible strategy is to take the fourth umbrella at the point x = 1, keep it till the point x = 7 (the total fatigue at x = 7 will be equal to 12), throw it away, move on from x = 7 to x = 8 without an umbrella, take the third umbrella at x = 8 and keep it till the end (the total fatigue at x = 10 will be equal to 14). 

In the second example the only possible strategy is to take the first umbrella, move with it till the point x = 9, throw it away and proceed without an umbrella till the end.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4")
using namespace std;
const int mod = 1000000007;
const long long INF = 1e11;
struct ConvexHull {
  long long inf = 1e17;
  struct Line;
  set<Line> hull;
  bool hasNext(set<Line>::iterator it) {
    return (it != hull.end()) && (next(it) != hull.end());
  }
  bool hasPrev(set<Line>::iterator it) {
    return (it != hull.end()) && (it != hull.begin());
  }
  double getIntersection(set<Line>::iterator a, set<Line>::iterator b) {
    if (a->k == b->k) return (double)inf;
    return (double)(a->b - b->b) / (double)(b->k - a->k);
  }
  bool isBad(set<Line>::iterator a, set<Line>::iterator b,
             set<Line>::iterator c) {
    return getIntersection(a, c) <= getIntersection(a, b);
  }
  bool isBad(set<Line>::iterator it) {
    return hasPrev(it) && hasNext(it) && isBad(prev(it), it, next(it));
  }
  set<Line>::iterator updateBorder(set<Line>::iterator it) {
    Line tmp = *it;
    if (hasNext(it))
      tmp.intersection = getIntersection(it, next(it));
    else
      tmp.intersection = inf;
    it = hull.erase(it);
    it = hull.insert(it, tmp);
    return it;
  }
  void addLine(long long k, long long b) {
    Line cur(k, b);
    set<Line>::iterator it = hull.lower_bound(cur);
    if ((it != hull.end()) && (it->k == k)) {
      if (it->b > b)
        it = hull.erase(it);
      else
        return;
    }
    it = hull.insert(it, cur);
    if (isBad(it)) {
      hull.erase(it);
      return;
    }
    while (hasPrev(it) && isBad(prev(it))) hull.erase(prev(it));
    while (hasNext(it) && isBad(next(it))) hull.erase(next(it));
    it = updateBorder(it);
    if (hasNext(it)) updateBorder(next(it));
    if (hasPrev(it)) updateBorder(prev(it));
  }
  long long query(long long x) {
    Line tmp(0, 0, 1, x);
    set<Line>::iterator result = hull.lower_bound(tmp);
    if (result == hull.end()) return inf;
    return result->f(x);
  }
  struct Line {
    long long k, b;
    double intersection;
    bool isQuery;
    Line() {}
    Line(long long k, long long b, bool isQuery = 0, double intersection = 0) {
      this->k = k;
      this->b = b;
      this->isQuery = isQuery;
      this->intersection = intersection;
    }
    bool operator<(const Line &another) const {
      if (isQuery || another.isQuery)
        return intersection < another.intersection;
      return k > another.k;
    }
    long long f(long long x) const { return k * x + b; }
  };
};
int a, n, m, rain[2005];
long long dp[2005], mn[2005];
ConvexHull CHT;
int main() {
  long long x, p, l, r;
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> a >> n >> m;
  for (int i = 1; i <= n; i++) {
    cin >> l >> r;
    rain[l + 1]++;
    rain[r + 1]--;
  }
  for (int i = 1; i <= a; i++) rain[i] += rain[i - 1];
  fill(mn, mn + 2005, INF);
  for (int i = 1; i <= m; i++) {
    cin >> x >> p;
    mn[x] = min(mn[x], p);
  }
  for (int i = 0; i <= a; i++) {
    if (i) dp[i] = dp[i - 1];
    if (rain[i]) dp[i] = CHT.query(i);
    CHT.addLine(mn[i], dp[i] - mn[i] * i);
  }
  if (dp[a] > 10000000000LL)
    cout << "-1";
  else
    cout << dp[a];
  cout << "\n"
       << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2000 1 1
0 1
4 33303


(G.2) Fast Input

2000 1 1
0 1
2000 33303


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target("sse,sse2,sse3,ssse3,sse4") /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1000000007; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e11; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
struct ConvexHull { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  long long inf = 1e17; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  struct Line; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  set<Line> hull; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  bool hasNext(set<Line>::iterator it) { /* line 11 slow_hit_count: 9994, fast_hit_count: 6002 */
    return (it != hull.end()) && (next(it) != hull.end()); /* line 12 slow_hit_count: 9994, fast_hit_count: 6002 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  bool hasPrev(set<Line>::iterator it) { /* line 14 slow_hit_count: 7997, fast_hit_count: 6001 */
    return (it != hull.end()) && (it != hull.begin()); /* line 15 slow_hit_count: 7997, fast_hit_count: 6001 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  double getIntersection(set<Line>::iterator a, set<Line>::iterator b) { /* line 17 slow_hit_count: 1997, fast_hit_count: 1 */
    if (a->k == b->k) return (double)inf; /* line 18 slow_hit_count: 1997, fast_hit_count: 1 */
    return (double)(a->b - b->b) / (double)(b->k - a->k); /* line 19 slow_hit_count: 1997, fast_hit_count: 1 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  bool isBad(set<Line>::iterator a, set<Line>::iterator b, /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
             set<Line>::iterator c) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    return getIntersection(a, c) <= getIntersection(a, b); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  bool isBad(set<Line>::iterator it) { /* line 25 slow_hit_count: 3997, fast_hit_count: 2001 */
    return hasPrev(it) && hasNext(it) && isBad(prev(it), it, next(it)); /* line 26 slow_hit_count: 3997, fast_hit_count: 2001 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  set<Line>::iterator updateBorder(set<Line>::iterator it) { /* line 28 slow_hit_count: 3997, fast_hit_count: 2001 */
    Line tmp = *it; /* line 29 slow_hit_count: 3997, fast_hit_count: 2001 */
    if (hasNext(it)) /* line 30 slow_hit_count: 3997, fast_hit_count: 2001 */
      tmp.intersection = getIntersection(it, next(it)); /* line 31 slow_hit_count: 1997, fast_hit_count: 1 */
    else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      tmp.intersection = inf; /* line 33 slow_hit_count: 2000, fast_hit_count: 2000 */
    it = hull.erase(it); /* line 34 slow_hit_count: 3997, fast_hit_count: 2001 */
    it = hull.insert(it, tmp); /* line 35 slow_hit_count: 3997, fast_hit_count: 2001 */
    return it; /* line 36 slow_hit_count: 3997, fast_hit_count: 2001 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  void addLine(long long k, long long b) { /* line 38 slow_hit_count: 2001, fast_hit_count: 2001 */
    Line cur(k, b); /* line 39 slow_hit_count: 2001, fast_hit_count: 2001 */
    set<Line>::iterator it = hull.lower_bound(cur); /* line 40 slow_hit_count: 2001, fast_hit_count: 2001 */
    if ((it != hull.end()) && (it->k == k)) { /* line 41 slow_hit_count: 2001, fast_hit_count: 2001 */
      if (it->b > b) /* line 42 slow_hit_count: 1999, fast_hit_count: 1999 */
        it = hull.erase(it); /* line 43 slow_hit_count: 1998, fast_hit_count: 1998 */
      else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        return; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    it = hull.insert(it, cur); /* line 47 slow_hit_count: 2000, fast_hit_count: 2000 */
    if (isBad(it)) { /* line 48 slow_hit_count: 2000, fast_hit_count: 2000 */
      hull.erase(it); /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      return; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    while (hasPrev(it) && isBad(prev(it))) hull.erase(prev(it)); /* line 52 slow_hit_count: 2000, fast_hit_count: 2000 */
    while (hasNext(it) && isBad(next(it))) hull.erase(next(it)); /* line 53 slow_hit_count: 2000, fast_hit_count: 2000 */
    it = updateBorder(it); /* line 54 slow_hit_count: 2000, fast_hit_count: 2000 */
    if (hasNext(it)) updateBorder(next(it)); /* line 55 slow_hit_count: 2000, fast_hit_count: 2000 */
    if (hasPrev(it)) updateBorder(prev(it)); /* line 56 slow_hit_count: 2000, fast_hit_count: 2000 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  long long query(long long x) { /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
    Line tmp(0, 0, 1, x); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    set<Line>::iterator result = hull.lower_bound(tmp); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
    if (result == hull.end()) return inf; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    return result->f(x); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  struct Line { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    long long k, b; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    double intersection; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    bool isQuery; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    Line() {} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    Line(long long k, long long b, bool isQuery = 0, double intersection = 0) { /* line 69 slow_hit_count: 2002, fast_hit_count: 2002 */
      this->k = k; /* line 70 slow_hit_count: 2002, fast_hit_count: 2002 */
      this->b = b; /* line 71 slow_hit_count: 2002, fast_hit_count: 2002 */
      this->isQuery = isQuery; /* line 72 slow_hit_count: 2002, fast_hit_count: 2002 */
      this->intersection = intersection; /* line 73 slow_hit_count: 2002, fast_hit_count: 2002 */
    } /* line 74 slow_hit_count: 2002, fast_hit_count: 2002 */
    bool operator<(const Line &another) const { /* line 75 slow_hit_count: 9991, fast_hit_count: 2006 */
      if (isQuery || another.isQuery) /* line 76 slow_hit_count: 9991, fast_hit_count: 2006 */
        return intersection < another.intersection; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
      return k > another.k; /* line 78 slow_hit_count: 9990, fast_hit_count: 2005 */
    } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    long long f(long long x) const { return k * x + b; } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  }; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
int a, n, m, rain[2005]; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2005], mn[2005]; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
ConvexHull CHT; /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  long long x, p, l, r; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  ios::sync_with_stdio(false); /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> n >> m; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 91 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> l >> r; /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
    rain[l + 1]++; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
    rain[r + 1]--; /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= a; i++) rain[i] += rain[i - 1]; /* line 96 slow_hit_count: 2001, fast_hit_count: 2001 */
  fill(mn, mn + 2005, INF); /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) { /* line 98 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> x >> p; /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
    mn[x] = min(mn[x], p); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= a; i++) { /* line 102 slow_hit_count: 2002, fast_hit_count: 2002 */
    if (i) dp[i] = dp[i - 1]; /* line 103 slow_hit_count: 2001, fast_hit_count: 2001 */
    if (rain[i]) dp[i] = CHT.query(i); /* line 104 slow_hit_count: 2001, fast_hit_count: 2001 */
    CHT.addLine(mn[i], dp[i] - mn[i] * i); /* line 105 slow_hit_count: 2001, fast_hit_count: 2001 */
  } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[a] > 10000000000LL) /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "-1"; /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
    cout << dp[a]; /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "\n" /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
       << "\n"; /* line 112 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 114 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program and derive performance-characterizing invariants, let's analyze the code and the given data in phases.

### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts between the fast and slow runs, we can pinpoint areas where performance issues arise:

1. **Convex Hull Operations**: The lines inside the `ConvexHull` class, particularly those dealing with line insertion, are hit significantly more often in the slow input. These include the `isBad`, `updateBorder`, `addLine`, and `getIntersection` functions.

2. **High Frequency of Line Updates**: The `updateBorder` and `isBad` methods have a notably higher hit count in the slow run (3,997 hits for `updateBorder` in slow vs. 2,001 in fast). The `getIntersection` method is hit 1,997 times in slow versus only once in fast.

3. **Iterative Operations on Convex Hull**: The `isBad` and `hasNext` functions are heavily used, indicating frequent checks on the structure's integrity and intersections which may contribute to slow execution.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the patterns observed, we can derive the following natural language performance invariants:

1. **Frequent Line Adjustments in Convex Hull**: If there are many adjustments to the lines in the convex hull due to frequently changing conditions, the program may experience slowdowns. This can happen when the umbrella weights frequently change or when there are many critical points that need to be evaluated and adjusted.

   - **Invariant**: "If there are frequent adjustments to the convex hull due to multiple overlapping or close proximity segments, or rapidly changing conditions, performance may degrade due to excessive line updates."

2. **Excessive Query Operations on Convex Hull**: If the convex hull is queried frequently with varying indices, especially in cases where many segments are in rain or require evaluation, the program's execution time may increase significantly.

   - **Invariant**: "When the rain segments cause frequent and varying queries to the convex hull, particularly when there are many umbrellas or intersecting conditions, this may lead to performance bottlenecks."

3. **Handling of Large Input Parameters**: Given the constraints (e.g., `a, m ≤ 2000`), if the input size approaches these limits and involves complex relationships among umbrellas and rain segments, the program could experience slowdowns due to the extensive computations required.

   - **Invariant**: "If the input size approaches the upper constraint limits with complex dependencies between umbrellas and rain segments, the program may slow down due to increased computational overhead."

4. **Balancing Cost and Selection in Dynamic Setup**: The dynamic programming setup which balances umbrella cost may lead to slowdowns if there are multiple optimal or near-optimal combinations that must be evaluated at each step.

   - **Invariant**: "When there are many near-optimal umbrella configurations to evaluate, especially when rain segments are densely packed or spread over large distances, computational cost increases could slow down execution."

These invariants provide a framework for identifying conditions under which the program may slow down, allowing for potential optimization opportunities or for guiding testing strategies through fuzzing.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp lives on a coordinate line at the point x = 0. He goes to his friend that lives at the point x = a. Polycarp can move only from left to right, he can pass one unit of length each second.

Now it's raining, so some segments of his way are in the rain. Formally, it's raining on n non-intersecting segments, the i-th segment which is in the rain is represented as [l_i, r_i] (0 ≤ l_i < r_i ≤ a).

There are m umbrellas lying on the line, the i-th umbrella is located at point x_i (0 ≤ x_i ≤ a) and has weight p_i. When Polycarp begins his journey, he doesn't have any umbrellas.

During his journey from x = 0 to x = a Polycarp can pick up and throw away umbrellas. Polycarp picks up and throws down any umbrella instantly. He can carry any number of umbrellas at any moment of time. Because Polycarp doesn't want to get wet, he must carry at least one umbrella while he moves from x to x + 1 if a segment [x, x + 1] is in the rain (i.e. if there exists some i such that l_i ≤ x and x + 1 ≤ r_i).

The condition above is the only requirement. For example, it is possible to go without any umbrellas to a point where some rain segment starts, pick up an umbrella at this point and move along with an umbrella. Polycarp can swap umbrellas while he is in the rain.

Each unit of length passed increases Polycarp's fatigue by the sum of the weights of umbrellas he carries while moving.

Can Polycarp make his way from point x = 0 to point x = a? If yes, find the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Input

The first line contains three integers a, n and m (1 ≤ a, m ≤ 2000, 1 ≤ n ≤ ⌈a/2⌉) — the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.

Each of the next n lines contains two integers l_i and r_i (0 ≤ l_i < r_i ≤ a) — the borders of the i-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments i and j either r_i < l_j or r_j < l_i.

Each of the next m lines contains two integers x_i and p_i (0 ≤ x_i ≤ a, 1 ≤ p_i ≤ 10^5) — the location and the weight of the i-th umbrella.

Output

Print "-1" (without quotes) if Polycarp can't make his way from point x = 0 to point x = a. Otherwise print one integer — the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Examples

Input

10 2 4
3 7
8 10
0 10
3 4
8 1
1 2


Output

14


Input

10 1 1
0 9
0 5


Output

45


Input

10 1 1
0 9
1 5


Output

-1

Note

In the first example the only possible strategy is to take the fourth umbrella at the point x = 1, keep it till the point x = 7 (the total fatigue at x = 7 will be equal to 12), throw it away, move on from x = 7 to x = 8 without an umbrella, take the third umbrella at x = 8 and keep it till the end (the total fatigue at x = 10 will be equal to 14). 

In the second example the only possible strategy is to take the first umbrella, move with it till the point x = 9, throw it away and proceed without an umbrella till the end.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers for Performance Invariants

Based on the identified performance-characterizing invariants, below are the C++ code snippets to check these conditions at runtime:

```cpp
// Checker for frequent line adjustments in convex hull.
void check_convex_hull_invariant(int adjustments) {
    if (adjustments > 5000) {  // Assume 5000 as a safe threshold for adjustments
        cerr << "Warning: Performance bottleneck condition triggered - excessive line adjustments!" << endl;
        abort();
    }
}

// Checker for excessive query operations on convex hull.
void check_query_invariant(int queries) {
    if (queries > 4000) {  // Assume 4000 as a safe threshold for queries
        cerr << "Warning: Performance bottleneck condition triggered - excessive queries on convex hull!" << endl;
        abort();
    }
}

// Checker for handling large input parameters with complex dependencies.
void check_input_complexity_invariant(int n, int m) {
    if (n >= 1000 && m >= 1500) {  // Assuming near-upper limits with complex dependencies
        cerr << "Warning: Performance bottleneck condition triggered - large input parameters with complex dependencies!" << endl;
        abort();
    }
}

// Checker for evaluating many near-optimal umbrella configurations.
void check_optimal_configurations_invariant(int configurations) {
    if (configurations > 10000) {  // Assume 10000 as a safe threshold for configurations
        cerr << "Warning: Performance bottleneck condition triggered - excessive configurations evaluation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Below is the instrumented C++ code with the integrated performance checkers:

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4")
using namespace std;
const int mod = 1000000007;
const long long INF = 1e11;

struct ConvexHull {
    long long inf = 1e17;
    struct Line;
    set<Line> hull;
    int adjustments = 0;  // Track line adjustments
    int queries = 0;  // Track number of queries

    bool hasNext(set<Line>::iterator it) {
        return (it != hull.end()) && (next(it) != hull.end());
    }

    bool hasPrev(set<Line>::iterator it) {
        return (it != hull.end()) && (it != hull.begin());
    }

    double getIntersection(set<Line>::iterator a, set<Line>::iterator b) {
        if (a->k == b->k) return (double)inf;
        return (double)(a->b - b->b) / (double)(b->k - a->k);
    }

    bool isBad(set<Line>::iterator a, set<Line>::iterator b, set<Line>::iterator c) {
        return getIntersection(a, c) <= getIntersection(a, b);
    }

    bool isBad(set<Line>::iterator it) {
        return hasPrev(it) && hasNext(it) && isBad(prev(it), it, next(it));
    }

    set<Line>::iterator updateBorder(set<Line>::iterator it) {
        Line tmp = *it;
        if (hasNext(it))
            tmp.intersection = getIntersection(it, next(it));
        else
            tmp.intersection = inf;
        it = hull.erase(it);
        it = hull.insert(it, tmp);
        adjustments++;  // Increment adjustments count
        check_convex_hull_invariant(adjustments);  // Check for excessive adjustments
        return it;
    }

    void addLine(long long k, long long b) {
        Line cur(k, b);
        set<Line>::iterator it = hull.lower_bound(cur);
        if ((it != hull.end()) && (it->k == k)) {
            if (it->b > b)
                it = hull.erase(it);
            else
                return;
        }
        it = hull.insert(it, cur);
        if (isBad(it)) {
            hull.erase(it);
            return;
        }
        while (hasPrev(it) && isBad(prev(it))) hull.erase(prev(it));
        while (hasNext(it) && isBad(next(it))) hull.erase(next(it));
        it = updateBorder(it);
        if (hasNext(it)) updateBorder(next(it));
        if (hasPrev(it)) updateBorder(prev(it));
    }

    long long query(long long x) {
        Line tmp(0, 0, 1, x);
        set<Line>::iterator result = hull.lower_bound(tmp);
        queries++;  // Increment queries count
        check_query_invariant(queries);  // Check for excessive queries
        if (result == hull.end()) return inf;
        return result->f(x);
    }

    struct Line {
        long long k, b;
        double intersection;
        bool isQuery;
        Line() {}
        Line(long long k, long long b, bool isQuery = 0, double intersection = 0) {
            this->k = k;
            this->b = b;
            this->isQuery = isQuery;
            this->intersection = intersection;
        }
        bool operator<(const Line &another) const {
            if (isQuery || another.isQuery)
                return intersection < another.intersection;
            return k > another.k;
        }
        long long f(long long x) const { return k * x + b; }
    };
};

int a, n, m, rain[2005];
long long dp[2005], mn[2005];
ConvexHull CHT;

int main() {
    long long x, p, l, r;
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> a >> n >> m;

    check_input_complexity_invariant(n, m);  // Check input complexity

    for (int i = 1; i <= n; i++) {
        cin >> l >> r;
        rain[l + 1]++;
        rain[r + 1]--;
    }
    for (int i = 1; i <= a; i++) rain[i] += rain[i - 1];
    fill(mn, mn + 2005, INF);
    for (int i = 1; i <= m; i++) {
        cin >> x >> p;
        mn[x] = min(mn[x], p);
    }

    int configurations = 0;  // Track configurations
    for (int i = 0; i <= a; i++) {
        if (i) dp[i] = dp[i - 1];
        if (rain[i]) dp[i] = CHT.query(i);
        CHT.addLine(mn[i], dp[i] - mn[i] * i);
        configurations++;
        check_optimal_configurations_invariant(configurations);  // Check configurations
    }

    if (dp[a] > 10000000000LL)
        cout << "-1";
    else
        cout << dp[a];
    cout << "\n"
         << "\n";
    return 0;
}
```

### Explanation of Inserted Checkers

- **`check_convex_hull_invariant`**: This checker is invoked in the `updateBorder` function to monitor the number of line adjustments within the convex hull. It ensures that we do not exceed a given threshold for performance.

- **`check_query_invariant`**: This is used within the `query` method to monitor the number of queries to the convex hull, avoiding excessive querying.

- **`check_input_complexity_invariant`**: This checks the input parameters `n` and `m` for potentially complex combinations that could lead to performance issues.

- **`check_optimal_configurations_invariant`**: It checks the number of configurations evaluated to ensure that we do not exceed reasonable computational limits.

These checkers are strategically placed to ensure that they do not add significant overhead in tight loops while effectively monitoring potential bottlenecks.

