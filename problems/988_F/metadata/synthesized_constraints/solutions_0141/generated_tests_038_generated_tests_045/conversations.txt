system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp lives on a coordinate line at the point x = 0. He goes to his friend that lives at the point x = a. Polycarp can move only from left to right, he can pass one unit of length each second.

Now it's raining, so some segments of his way are in the rain. Formally, it's raining on n non-intersecting segments, the i-th segment which is in the rain is represented as [l_i, r_i] (0 ≤ l_i < r_i ≤ a).

There are m umbrellas lying on the line, the i-th umbrella is located at point x_i (0 ≤ x_i ≤ a) and has weight p_i. When Polycarp begins his journey, he doesn't have any umbrellas.

During his journey from x = 0 to x = a Polycarp can pick up and throw away umbrellas. Polycarp picks up and throws down any umbrella instantly. He can carry any number of umbrellas at any moment of time. Because Polycarp doesn't want to get wet, he must carry at least one umbrella while he moves from x to x + 1 if a segment [x, x + 1] is in the rain (i.e. if there exists some i such that l_i ≤ x and x + 1 ≤ r_i).

The condition above is the only requirement. For example, it is possible to go without any umbrellas to a point where some rain segment starts, pick up an umbrella at this point and move along with an umbrella. Polycarp can swap umbrellas while he is in the rain.

Each unit of length passed increases Polycarp's fatigue by the sum of the weights of umbrellas he carries while moving.

Can Polycarp make his way from point x = 0 to point x = a? If yes, find the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Input

The first line contains three integers a, n and m (1 ≤ a, m ≤ 2000, 1 ≤ n ≤ ⌈a/2⌉) — the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.

Each of the next n lines contains two integers l_i and r_i (0 ≤ l_i < r_i ≤ a) — the borders of the i-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments i and j either r_i < l_j or r_j < l_i.

Each of the next m lines contains two integers x_i and p_i (0 ≤ x_i ≤ a, 1 ≤ p_i ≤ 10^5) — the location and the weight of the i-th umbrella.

Output

Print "-1" (without quotes) if Polycarp can't make his way from point x = 0 to point x = a. Otherwise print one integer — the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Examples

Input

10 2 4
3 7
8 10
0 10
3 4
8 1
1 2


Output

14


Input

10 1 1
0 9
0 5


Output

45


Input

10 1 1
0 9
1 5


Output

-1

Note

In the first example the only possible strategy is to take the fourth umbrella at the point x = 1, keep it till the point x = 7 (the total fatigue at x = 7 will be equal to 12), throw it away, move on from x = 7 to x = 8 without an umbrella, take the third umbrella at x = 8 and keep it till the end (the total fatigue at x = 10 will be equal to 14). 

In the second example the only possible strategy is to take the first umbrella, move with it till the point x = 9, throw it away and proceed without an umbrella till the end.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long a, n, m, l, r, rain[2010], w[2010], End[2010];
const long long Inf = 1e11;
long long dp[2010][2010];
long long Rec(long long i, long long taken) {
  if (i == a + 1) return 0;
  if (dp[i][taken] != -1) return dp[i][taken];
  long long Res1 = Inf, Res2 = Inf, Res3 = Inf;
  if (w[i]) Res1 = w[i] + Rec(i + 1, i);
  if (taken) Res2 = w[taken] + Rec(i + 1, taken);
  if (!rain[i] || End[i]) Res3 = Rec(i + 1, 0);
  return dp[i][taken] = min(Res1, min(Res2, Res3));
}
int main() {
  cin >> a >> n >> m;
  for (long long i = 0; i < n; i++) {
    cin >> l >> r;
    l++;
    r++;
    End[r]++;
    for (long long j = l; j <= r; j++) rain[j]++;
  }
  for (long long i = 1; i <= a; i++) w[i] = Inf;
  for (long long i = 0; i < m; i++) {
    cin >> l >> r;
    l++;
    w[l] = min(r, w[l]);
  }
  memset(dp, -1, sizeof(dp));
  Rec(1, 0) >= Inf ? cout << "-1" : cout << Rec(1, 0);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2000 1 1
0 1
521 19267


(G.2) Fast Input

1118 1 1
0 1
521 19267


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long a, n, m, l, r, rain[2010], w[2010], End[2010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long Inf = 1e11; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2010][2010]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long Rec(long long i, long long taken) { /* line 6 slow_hit_count: 6000998, fast_hit_count: 1875443 */
  if (i == a + 1) return 0; /* line 7 slow_hit_count: 6000998, fast_hit_count: 1875443 */
  if (dp[i][taken] != -1) return dp[i][taken]; /* line 8 slow_hit_count: 5994999, fast_hit_count: 1872090 */
  long long Res1 = Inf, Res2 = Inf, Res3 = Inf; /* line 9 slow_hit_count: 2000999, fast_hit_count: 625520 */
  if (w[i]) Res1 = w[i] + Rec(i + 1, i); /* line 10 slow_hit_count: 2000999, fast_hit_count: 625520 */
  if (taken) Res2 = w[taken] + Rec(i + 1, taken); /* line 11 slow_hit_count: 2000999, fast_hit_count: 625520 */
  if (!rain[i] || End[i]) Res3 = Rec(i + 1, 0); /* line 12 slow_hit_count: 2000999, fast_hit_count: 625520 */
  return dp[i][taken] = min(Res1, min(Res2, Res3)); /* line 13 slow_hit_count: 2000999, fast_hit_count: 625520 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> n >> m; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> l >> r; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    l++; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    r++; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    End[r]++; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long j = l; j <= r; j++) rain[j]++; /* line 22 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= a; i++) w[i] = Inf; /* line 24 slow_hit_count: 2001, fast_hit_count: 1119 */
  for (long long i = 0; i < m; i++) { /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> l >> r; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    l++; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    w[l] = min(r, w[l]); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, -1, sizeof(dp)); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  Rec(1, 0) >= Inf ? cout << "-1" : cout << Rec(1, 0); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program, we need to follow the tasks outlined in the problem. We'll go through the steps and then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The recursive function `Rec` has significantly higher hit counts for the slow input (`slow_hit_count: 6000998`) compared to the fast input (`fast_hit_count: 1875443`).

2. **Pinpoint Lines with Significant Hit Count Differences:**
   - The recursive function's base case and memoization check (lines 7 and 8) have very high hit counts.
   - Lines 9-13, which handle the core logic of the recursive function, are executed significantly more for the slow input than the fast input. This suggests the recursive function is exploring a larger state space due to different input conditions.

3. **Infer Interaction with Data Structures and Constraints:**
   - The recursive function utilizes `dp` for memoization, which involves a 2D array of size `[2010][2010]`.
   - The recursive calls seem to explore many states due to the rain segments and the umbrella weights, possibly related to the number of overlapping conditions and the cost of carrying umbrellas.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements:**

   - **Invariant 1:** "The recursive function's performance degrades when the effective recursion depth becomes large, which happens when Polycarp's path involves many umbrella swaps or prolonged carrying due to sparse umbrella placement relative to rain segments."

   - **Invariant 2:** "If the number of recursive states that need evaluation becomes large due to many rain segments and scarce umbrellas, the computation becomes expensive. This often correlates with a high number of states being memoized."

   - **Invariant 3:** "Performance may degrade significantly when rain segments are such that Polycarp has limited choice but to carry heavy umbrellas over long distances, especially if the cost of all available umbrellas is high."

2. **Ensure Thresholds Adhere to Constraints:**
   - The input constraints (like `1 ≤ a, m ≤ 2000` and `1 ≤ n ≤ ⌈a/2⌉`) dictate that the potential number of rain segments and umbrellas can lead to a large number of decision states, especially if rain segments cover substantial parts of the path without sufficient umbrella distribution.

3. **Correlate Conditions to Input Patterns:**
   - Performance issues are likely to occur when:
     - There are long stretches of rain with minimal umbrellas, forcing Polycarp to carry heavy umbrellas.
     - Rain segments are near the maximum allowable (`n` close to `a/2`), creating many overlapping conditions that increase the state space for the dynamic programming solution.

These performance-characterizing invariants help identify scenarios under which the program is likely to run slowly, based on observed patterns in input conditions and recursive state exploration.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp lives on a coordinate line at the point x = 0. He goes to his friend that lives at the point x = a. Polycarp can move only from left to right, he can pass one unit of length each second.

Now it's raining, so some segments of his way are in the rain. Formally, it's raining on n non-intersecting segments, the i-th segment which is in the rain is represented as [l_i, r_i] (0 ≤ l_i < r_i ≤ a).

There are m umbrellas lying on the line, the i-th umbrella is located at point x_i (0 ≤ x_i ≤ a) and has weight p_i. When Polycarp begins his journey, he doesn't have any umbrellas.

During his journey from x = 0 to x = a Polycarp can pick up and throw away umbrellas. Polycarp picks up and throws down any umbrella instantly. He can carry any number of umbrellas at any moment of time. Because Polycarp doesn't want to get wet, he must carry at least one umbrella while he moves from x to x + 1 if a segment [x, x + 1] is in the rain (i.e. if there exists some i such that l_i ≤ x and x + 1 ≤ r_i).

The condition above is the only requirement. For example, it is possible to go without any umbrellas to a point where some rain segment starts, pick up an umbrella at this point and move along with an umbrella. Polycarp can swap umbrellas while he is in the rain.

Each unit of length passed increases Polycarp's fatigue by the sum of the weights of umbrellas he carries while moving.

Can Polycarp make his way from point x = 0 to point x = a? If yes, find the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Input

The first line contains three integers a, n and m (1 ≤ a, m ≤ 2000, 1 ≤ n ≤ ⌈a/2⌉) — the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.

Each of the next n lines contains two integers l_i and r_i (0 ≤ l_i < r_i ≤ a) — the borders of the i-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments i and j either r_i < l_j or r_j < l_i.

Each of the next m lines contains two integers x_i and p_i (0 ≤ x_i ≤ a, 1 ≤ p_i ≤ 10^5) — the location and the weight of the i-th umbrella.

Output

Print "-1" (without quotes) if Polycarp can't make his way from point x = 0 to point x = a. Otherwise print one integer — the minimum total fatigue after reaching x = a, if Polycarp picks up and throws away umbrellas optimally.

Examples

Input

10 2 4
3 7
8 10
0 10
3 4
8 1
1 2


Output

14


Input

10 1 1
0 9
0 5


Output

45


Input

10 1 1
0 9
1 5


Output

-1

Note

In the first example the only possible strategy is to take the fourth umbrella at the point x = 1, keep it till the point x = 7 (the total fatigue at x = 7 will be equal to 12), throw it away, move on from x = 7 to x = 8 without an umbrella, take the third umbrella at x = 8 and keep it till the end (the total fatigue at x = 10 will be equal to 14). 

In the second example the only possible strategy is to take the first umbrella, move with it till the point x = 9, throw it away and proceed without an umbrella till the end.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

We'll translate the previously derived performance-characterizing invariants into C++ code snippets that can be integrated into the program to detect conditions leading to slow execution.

#### Invariant 1:
"The recursive function's performance degrades when the effective recursion depth becomes large, which happens when Polycarp's path involves many umbrella swaps or prolonged carrying due to sparse umbrella placement relative to rain segments."

```cpp
void check_recursion_depth_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high effective recursion depth or prolonged carrying due to sparse umbrellas." << endl;
        abort();
    }
}
```

#### Invariant 2:
"If the number of recursive states that need evaluation becomes large due to many rain segments and scarce umbrellas, the computation becomes expensive. This often correlates with a high number of states being memoized."

```cpp
void check_memoization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of recursive states due to rain segments and sparse umbrellas." << endl;
        abort();
    }
}
```

#### Invariant 3:
"Performance may degrade significantly when rain segments are such that Polycarp has limited choice but to carry heavy umbrellas over long distances, especially if the cost of all available umbrellas is high."

```cpp
void check_umbrella_weight_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - heavy umbrellas carried over long distances." << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, we need to integrate these runtime checks into the C++ code, placing them at strategic points in the program flow to detect potential performance bottlenecks without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long a, n, m, l, r, rain[2010], w[2010], End[2010];
const long long Inf = 1e11;
long long dp[2010][2010];

void check_recursion_depth_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high effective recursion depth or prolonged carrying due to sparse umbrellas." << endl;
        abort();
    }
}

void check_memoization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of recursive states due to rain segments and sparse umbrellas." << endl;
        abort();
    }
}

void check_umbrella_weight_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - heavy umbrellas carried over long distances." << endl;
        abort();
    }
}

long long Rec(long long i, long long taken) {
    // Check recursion depth and memoization usage
    check_recursion_depth_invariant(i > 1000);
    check_memoization_invariant(dp[i][taken] != -1);

    if (i == a + 1) return 0;
    if (dp[i][taken] != -1) return dp[i][taken];

    long long Res1 = Inf, Res2 = Inf, Res3 = Inf;
    if (w[i]) Res1 = w[i] + Rec(i + 1, i);
    if (taken) Res2 = w[taken] + Rec(i + 1, taken);
    if (!rain[i] || End[i]) Res3 = Rec(i + 1, 0);

    // Check if carrying heavy umbrellas over extended distances
    check_umbrella_weight_invariant((Res1 > 10 * a) || (Res2 > 10 * a));

    return dp[i][taken] = min(Res1, min(Res2, Res3));
}

int main() {
    cin >> a >> n >> m;

    for (long long i = 0; i < n; i++) {
        cin >> l >> r;
        l++;
        r++;
        End[r]++;
        for (long long j = l; j <= r; j++) rain[j]++;
    }

    for (long long i = 1; i <= a; i++) w[i] = Inf;

    for (long long i = 0; i < m; i++) {
        cin >> l >> r;
        l++;
        w[l] = min(r, w[l]);
    }

    memset(dp, -1, sizeof(dp));

    Rec(1, 0) >= Inf ? cout << "-1" : cout << Rec(1, 0);
    return 0;
}
```

### Explanation of Changes:

1. **`check_recursion_depth_invariant`** is called at the start of the `Rec` function to monitor recursive depth.
2. **`check_memoization_invariant`** checks whether the recursive state has already been computed, indicating the exploration of many states.
3. **`check_umbrella_weight_invariant`** checks if the burden of the cumulative weight of umbrellas exceeds a reasonable threshold, assuming `10 * a` is a hypothetical threshold indicating heavy loads. 

These checks strategically help identify performance bottlenecks without affecting core loop logic, providing insights when unusual patterns are encountered in execution.

