system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;
long long inv(long long i) {
  if (i == 1) return 1;
  return (mod - ((mod / i) * inv(mod % i)) % mod) % mod;
}
long long mod_mul(long long a, long long b) {
  a = a % mod;
  b = b % mod;
  return (((a * b) % mod) + mod) % mod;
}
long long mod_add(long long a, long long b) {
  a = a % mod;
  b = b % mod;
  return (((a + b) % mod) + mod) % mod;
}
long long gcd(long long a, long long b) {
  if (b == 0) return a;
  return gcd(b, a % b);
}
long long ceil_div(long long a, long long b) {
  return a % b == 0 ? a / b : a / b + 1;
}
long long pwr(long long a, long long b) {
  a %= mod;
  long long res = 1;
  while (b > 0) {
    if (b & 1) res = res * a % mod;
    a = a * a % mod;
    b >>= 1;
  }
  return res;
}
long long n, k, d;
long long dp[101][101][101];
long long f(long long max_val, long long num_val, long long num) {
  if (num <= 0) return 0;
  if (num_val == 1) {
    if (num > max_val) return 0;
    return 1;
  }
  if (dp[max_val][num_val][num] != -1) return dp[max_val][num_val][num];
  long long i;
  long long ans = 0;
  for (i = 1; i <= max_val; i++) {
    ans = mod_add(f(max_val, num_val - 1, num - i), ans);
  }
  return dp[max_val][num_val][num] = ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  long long t, i, j, ans, temp, sum;
  string sans;
  t = 1;
  while (t--) {
    memset(dp, -1, sizeof(dp));
    sans = "NO";
    ans = temp = sum = 0;
    cin >> n >> k >> d;
    for (i = 1; i <= n; i++) {
      ans = (ans + f(k, i, n) - f(d - 1, i, n) + mod) % mod;
    }
    cout << ans;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100 1


(G.2) Fast Input

1 100 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long inv(long long i) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (i == 1) return 1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return (mod - ((mod / i) * inv(mod % i)) % mod) % mod; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_mul(long long a, long long b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  a = a % mod; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  b = b % mod; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return (((a * b) % mod) + mod) % mod; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_add(long long a, long long b) { /* line 13 slow_hit_count: 980100, fast_hit_count: 0 */
  a = a % mod; /* line 14 slow_hit_count: 980100, fast_hit_count: 0 */
  b = b % mod; /* line 15 slow_hit_count: 980100, fast_hit_count: 0 */
  return (((a + b) % mod) + mod) % mod; /* line 16 slow_hit_count: 980100, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) return a; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b, a % b); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
long long ceil_div(long long a, long long b) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return a % b == 0 ? a / b : a / b + 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
long long pwr(long long a, long long b) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  a %= mod; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  while (b > 0) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) res = res * a % mod; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    a = a * a % mod; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
long long n, k, d; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[101][101][101]; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long f(long long max_val, long long num_val, long long num) { /* line 37 slow_hit_count: 980300, fast_hit_count: 2 */
  if (num <= 0) return 0; /* line 38 slow_hit_count: 980300, fast_hit_count: 2 */
  if (num_val == 1) { /* line 39 slow_hit_count: 485399, fast_hit_count: 2 */
    if (num > max_val) return 0; /* line 40 slow_hit_count: 4952, fast_hit_count: 2 */
    return 1; /* line 41 slow_hit_count: 4951, fast_hit_count: 1 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[max_val][num_val][num] != -1) return dp[max_val][num_val][num]; /* line 43 slow_hit_count: 480447, fast_hit_count: 0 */
  long long i; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 45 slow_hit_count: 9900, fast_hit_count: 0 */
  for (i = 1; i <= max_val; i++) { /* line 46 slow_hit_count: 990000, fast_hit_count: 0 */
    ans = mod_add(f(max_val, num_val - 1, num - i), ans); /* line 47 slow_hit_count: 980100, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[max_val][num_val][num] = ans; /* line 49 slow_hit_count: 9900, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  long long t, i, j, ans, temp, sum; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  string sans; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  t = 1; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 58 slow_hit_count: 2, fast_hit_count: 2 */
    memset(dp, -1, sizeof(dp)); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    sans = "NO"; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
    ans = temp = sum = 0; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> n >> k >> d; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 1; i <= n; i++) { /* line 63 slow_hit_count: 101, fast_hit_count: 2 */
      ans = (ans + f(k, i, n) - f(d - 1, i, n) + mod) % mod; /* line 64 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 69 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Line-Level Hit Count Analysis

From the hit count information, lines that show significant differences in execution frequency between the slow and fast inputs are:

1. **Line 37 (Function `f` Call):**
   - Slow input: 980,300 hits
   - Fast input: 2 hits

2. **Line 39 (First conditional in `f`):**
   - Slow input: 485,399 hits
   - Fast input: 2 hits

3. **Line 43 (Memoization check in `f`):**
   - Slow input: 480,447 hits
   - Fast input: 0 hits

4. **Line 46 (For-loop in `f`):**
   - Slow input: 990,000 hits
   - Fast input: 0 hits

5. **Line 47 (Recursive call and addition):**
   - Slow input: 980,100 hits
   - Fast input: 0 hits

### Analysis

The function `f` is a heavily hit recursive function responsible for calculating the number of valid paths in the k-tree. The slow input (100, 100, 1) causes extensive recursive calls and deep recursion, particularly due to the high value of `n` and `k`. The hit counts indicate that the function explores a large search space, exacerbated by the nested for-loop (line 46) that iterates up to `max_val`. The memoization (line 43) is intended to mitigate repeated computations, but given the hit counts, it appears insufficiently leveraged or overwhelmed by the input size.

## Phase 2: Performance-Characterizing Invariants

### Natural Language Statements of Performance Invariants

1. **High Recursion Depth and Branching:** 
   - "When `n` and `k` are both large, the recursive function explores a significant number of branches and depths. This can lead to exponential growth in the search space, particularly if memoization is insufficient or poorly utilized."

2. **Loop Iterations Due to Large k:**
   - "If `k` is large, the nested loop in the recursive function iterates too frequently, thus generating a high computational load and excessive recursive calls."

3. **Large Path Weight Constraint:**
   - "When `n` approaches its upper constraint, the computation of all possible paths with weights summing to `n` becomes exhaustive, especially if the paths can be long due to large `k`."

### Suggested Conditions for Performance Checkers

To help capture these conditions and potentially abort or warn during future slow runs, consider implementing checks such as:

```cpp
void check_recursion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: recursion_invariant triggered - excessive recursion depth and branching" << endl;
        abort();
    }
}

// Before main computation
check_recursion_invariant(n > 80 && k > 80);

// This threshold is arbitrary but reflects the upper range before performance degrades significantly.
```

These invariants and accompanying checks capture the conditions under which the program deviates from efficient execution, providing utility for identifying slow scenarios in real-world testing or fuzzing.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

For the given invariants, we will implement runtime checks as follows:

### Invariant 1: High Recursion Depth and Branching

This invariant will check if both `n` and `k` are large, which could potentially lead to high recursion depth and branching. 

```cpp
void check_recursion_depth_and_branching(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive recursion depth and branching!" << endl;
        abort();
    }
}
```

### Invariant 2: Loop Iterations Due to Large k

This invariant will check if `k` is large, possibly causing excessive iterations in loops.

```cpp
void check_large_k(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to large k causing excessive loop iterations!" << endl;
        abort();
    }
}
```

### Invariant 3: Large Path Weight Constraint

This invariant will check if `n` is near its upper constraint, which could lead to exhaustive computation of possible paths.

```cpp
void check_large_n(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to large n causing exhaustive path computation!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code into the Original Program

We will place the checks in appropriate locations in the original program to catch the conditions without adding unnecessary overhead:

```cpp
#include <bits/stdc++.h>
using namespace std;

const long long mod = 1e9 + 7;

void check_recursion_depth_and_branching(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive recursion depth and branching!" << endl;
        abort();
    }
}

void check_large_k(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to large k causing excessive loop iterations!" << endl;
        abort();
    }
}

void check_large_n(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to large n causing exhaustive path computation!" << endl;
        abort();
    }
}

// Function implementations
long long mod_mul(long long a, long long b) {
    a = a % mod;
    b = b % mod;
    return (((a * b) % mod) + mod) % mod;
}

long long mod_add(long long a, long long b) {
    a = a % mod;
    b = b % mod;
    return (((a + b) % mod) + mod) % mod;
}

long long n, k, d;
long long dp[101][101][101];

long long f(long long max_val, long long num_val, long long num) {
    if (num <= 0) return 0;
    if (num_val == 1) {
        if (num > max_val) return 0;
        return 1;
    }
    if (dp[max_val][num_val][num] != -1) return dp[max_val][num_val][num];
    long long ans = 0;
    for (long long i = 1; i <= max_val; i++) {
        ans = mod_add(f(max_val, num_val - 1, num - i), ans);
    }
    return dp[max_val][num_val][num] = ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    memset(dp, -1, sizeof(dp));

    cin >> n >> k >> d;

    // Insert performance checks
    check_recursion_depth_and_branching(n > 80 && k > 80);
    check_large_k(k > 80);
    check_large_n(n > 80);

    long long ans = 0;
    for (long long i = 1; i <= n; i++) {
        ans = (ans + f(k, i, n) - f(d - 1, i, n) + mod) % mod;
    }
    cout << ans;

    return 0;
}
```

### Notes:

- **Checker Placement**: The checks are placed immediately after reading `n`, `k`, and `d` to detect potential performance issues early without affecting the main computation.
- **Thresholds Used**: The chosen thresholds (e.g., `n > 80` and `k > 80`) are derived from the context of performance degradation but are within the problem constraints (`n, k ≤ 100`). These are typical upper limits before the exponential growth in computation could cause notable slowdowns.
- **Abort on Condition**: Each checker uses `abort()` to halt execution, ensuring that a fuzzer or tester is alerted to performance bottlenecks when these conditions are triggered.

