system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
using uint = unsigned int;
using ull = unsigned long long;
template <typename T>
using pair2 = pair<T, T>;
using pii = pair<int, int>;
using pli = pair<ll, int>;
using pll = pair<ll, ll>;
using mii = map<int, int>;
using mll = map<ll, ll>;
using vi = vector<int>;
using vl = vector<ll>;
struct Comp {
  bool operator()(const std::pair<int, int> &a, const std::pair<int, int> &b) {
    if (a.first != b.first) {
      return a.first > b.first;
    }
    return a.second < b.second;
  }
};
bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) {
  return (a.second < b.second);
}
int dp[1001][1001];
int getval(int n, int k, int d, int m) {
  if (n < 0) {
    return 0;
  }
  if (dp[n][m] != -1) {
    return dp[n][m];
  }
  if (n == 0) {
    if (m >= d) {
      return 1;
    }
    return 0;
  }
  int ans = 0;
  for (int i = 1; i <= k; i++) {
    ans += getval(n - i, k, d, max(m, i));
    ans %= 1000000007;
  }
  ans %= 1000000007;
  return dp[n][m] = ans;
}
void solve() {
  memset((dp), (-1), sizeof(dp));
  int n, k, d;
  cin >> n >> k >> d;
  cout << getval(n, k, d, 0);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL), cout.tie(NULL);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100 1


(G.2) Fast Input

1 100 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ld = long double; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using uint = unsigned int; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using ull = unsigned long long; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
using pair2 = pair<T, T>; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
using pii = pair<int, int>; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
using pli = pair<ll, int>; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
using pll = pair<ll, ll>; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
using mii = map<int, int>; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
using mll = map<ll, ll>; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
using vl = vector<ll>; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
struct Comp { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator()(const std::pair<int, int> &a, const std::pair<int, int> &b) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (a.first != b.first) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      return a.first > b.first; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    return a.second < b.second; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return (a.second < b.second); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int dp[1001][1001]; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int getval(int n, int k, int d, int m) { /* line 28 slow_hit_count: 495101, fast_hit_count: 101 */
  if (n < 0) { /* line 29 slow_hit_count: 495101, fast_hit_count: 101 */
    return 0; /* line 30 slow_hit_count: 328350, fast_hit_count: 99 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[n][m] != -1) { /* line 32 slow_hit_count: 166751, fast_hit_count: 2 */
    return dp[n][m]; /* line 33 slow_hit_count: 156849, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  if (n == 0) { /* line 35 slow_hit_count: 9902, fast_hit_count: 2 */
    if (m >= d) { /* line 36 slow_hit_count: 4951, fast_hit_count: 1 */
      return 1; /* line 37 slow_hit_count: 4951, fast_hit_count: 1 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 41 slow_hit_count: 4951, fast_hit_count: 1 */
  for (int i = 1; i <= k; i++) { /* line 42 slow_hit_count: 500051, fast_hit_count: 101 */
    ans += getval(n - i, k, d, max(m, i)); /* line 43 slow_hit_count: 495100, fast_hit_count: 100 */
    ans %= 1000000007; /* line 44 slow_hit_count: 495100, fast_hit_count: 100 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  ans %= 1000000007; /* line 46 slow_hit_count: 4951, fast_hit_count: 1 */
  return dp[n][m] = ans; /* line 47 slow_hit_count: 4951, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  memset((dp), (-1), sizeof(dp)); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k, d; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k >> d; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  cout << getval(n, k, d, 0); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL), cout.tie(NULL); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 59 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

- The `getval` function is the primary function being called recursively. It has a significantly high hit count, particularly on lines related to recursion and memoization.
- Lines showing particularly high hit counts:
  - **Line 28** (`getval` function declaration): 495,101 (slow) vs. 101 (fast)
  - **Line 42** (for loop iterating over children): 500,051 (slow) vs. 101 (fast)
  - **Line 43** (recursive call within loop): 495,100 (slow) vs. 100 (fast)
  - **Line 44** (modular operation after recursion): 495,100 (slow) vs. 100 (fast)

These hit counts indicate that the recursive function, `getval`, is being called repeatedly, exploring a large space of possibilities. The recursion goes deep likely due to high values of `n` and `k`, especially when `n` is close to its upper limit of 100.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following invariants can be derived to characterize conditions under which the code experiences slow performance:

1. **Deep Recursion Due to Large `n`:**
   - **Invariant:** "If `n` is large, approaching its maximum constraint, and the value of `k` allows multiple paths to be considered, the recursion depth increases significantly, causing slow execution."
   - **Explanation:** As `n` grows larger, the number of potential paths and recursive calls increases exponentially, especially with a higher branching factor (`k`).

2. **High Branching Factor:**
   - **Invariant:** "When `k` is large, close to its upper constraint, the branching factor of the recursion is high, leading to many recursive calls and significant computation."
   - **Explanation:** A large `k` results in many possible child nodes per recursive call, expanding the search space exponentially.

3. **Memoization Inefficiency:**
   - **Invariant:** "Memoization may become less efficient if many states (`n`, `m`) are explored before values are reused, causing excessive recomputation."
   - **Explanation:** Despite memoization, if the number of unique states due to high `n` and `k` exceeds typical cases, recomputation can still become a bottleneck.

4. **Weight Constraint and Path Validity:**
   - **Invariant:** "If `d` is small relative to `k`, more paths need to be explored to find a valid path containing an edge >= `d`, increasing computational effort."
   - **Explanation:** A smaller `d` increases the likelihood that longer paths must be considered before finding an eligible path, increasing the number of recursive calls needed.

These invariants help explain why the slow input (`100 100 1`) leads to a large number of recursive calls and, subsequently, long execution times, in contrast to the fast input (`1 100 1`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language invariants, we can implement C++ checks for these performance bottlenecks. Here are the runtime checks for each invariant:

1. **Deep Recursion Due to Large `n`:**
   ```cpp
   void check_large_n_invariant(int n) {
       if (n > 90) { // A threshold close to the upper limit
           cerr << "Warning: Performance bottleneck condition triggered! - Large n causing deep recursion" << endl;
           abort();
       }
   }
   ```

2. **High Branching Factor:**
   ```cpp
   void check_high_k_invariant(int k) {
       if (k > 90) { // A threshold close to the upper limit
           cerr << "Warning: Performance bottleneck condition triggered! - High branching factor" << endl;
           abort();
       }
   }
   ```

3. **Memoization Inefficiency:**
   ```cpp
   void check_memoization_invariant(int n, int k) {
       if (n > 90 && k > 90) { // Combined effect of large n and k
           cerr << "Warning: Performance bottleneck condition triggered! - Memoization inefficiency" << endl;
           abort();
       }
   }
   ```

4. **Weight Constraint and Path Validity:**
   ```cpp
   void check_weight_constraint_invariant(int d, int k) {
       if (d < k / 2) { // `d` considerably less than `k`
           cerr << "Warning: Performance bottleneck condition triggered! - Path validity constraint" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original C++ Program

Now, let's integrate these checks into the original C++ program, placing them strategically to not interfere with performance in critical loops:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ld = long double;
using uint = unsigned int;
using ull = unsigned long long;
template <typename T>
using pair2 = pair<T, T>;
using pii = pair<int, int>;
using pli = pair<ll, int>;
using pll = pair<ll, ll>;
using mii = map<int, int>;
using mll = map<ll, ll>;
using vi = vector<int>;
using vl = vector<ll>;

int dp[1001][1001];

void check_large_n_invariant(int n) {
    if (n > 90) {
        cerr << "Warning: Performance bottleneck condition triggered! - Large n causing deep recursion" << endl;
        abort();
    }
}

void check_high_k_invariant(int k) {
    if (k > 90) {
        cerr << "Warning: Performance bottleneck condition triggered! - High branching factor" << endl;
        abort();
    }
}

void check_memoization_invariant(int n, int k) {
    if (n > 90 && k > 90) {
        cerr << "Warning: Performance bottleneck condition triggered! - Memoization inefficiency" << endl;
        abort();
    }
}

void check_weight_constraint_invariant(int d, int k) {
    if (d < k / 2) {
        cerr << "Warning: Performance bottleneck condition triggered! - Path validity constraint" << endl;
        abort();
    }
}

int getval(int n, int k, int d, int m) {
    if (n < 0) {
        return 0;
    }
    if (dp[n][m] != -1) {
        return dp[n][m];
    }
    if (n == 0) {
        if (m >= d) {
            return 1;
        }
        return 0;
    }
    int ans = 0;
    for (int i = 1; i <= k; i++) {
        ans += getval(n - i, k, d, max(m, i));
        ans %= 1000000007;
    }
    ans %= 1000000007;
    return dp[n][m] = ans;
}

void solve() {
    memset((dp), (-1), sizeof(dp));
    int n, k, d;
    cin >> n >> k >> d;

    // Insert checks after reading inputs
    check_large_n_invariant(n);
    check_high_k_invariant(k);
    check_memoization_invariant(n, k);
    check_weight_constraint_invariant(d, k);

    cout << getval(n, k, d, 0);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL), cout.tie(NULL);
    solve();
}
```

**Explanation of Check Placement:**
- The checks are placed right after reading the input values, ensuring that they do not introduce any additional overhead inside critical loops or recursion.
- This setup ensures that the program will alert you to potential performance bottlenecks related to the input values before entering performance-critical sections of the code.

