system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
int n, k, d;
int dp[105][105][2];
int go(int cur = 0, int sum = 0, bool has = 0) {
  if (sum > n) {
    return 0;
  } else if (has && sum == n) {
    return 1;
  }
  if (dp[cur][sum][has] != -1) {
    return dp[cur][sum][has];
  }
  dp[cur][sum][has] = 0;
  for (int i = 1; i <= k; i++) {
    dp[cur][sum][has] =
        (0LL + dp[cur][sum][has] + go(cur + 1, sum + i, (i >= d) | has)) % mod;
  }
  return dp[cur][sum][has];
}
int main() {
  cin >> n >> k >> d;
  for (int i = 0; i <= 101; i++) {
    for (int j = 0; j <= 101; j++) {
      for (int k = 0; k < 2; k++) {
        dp[i][j][k] = -1;
      }
    }
  }
  cout << go() << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 5


(G.2) Fast Input

5 99 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, d; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int dp[105][105][2]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int go(int cur = 0, int sum = 0, bool has = 0) { /* line 6 slow_hit_count: 815761, fast_hit_count: 1486 */
  if (sum > n) { /* line 7 slow_hit_count: 815761, fast_hit_count: 1486 */
    return 0; /* line 8 slow_hit_count: 548505, fast_hit_count: 1460 */
  } else if (has && sum == n) { /* line 9 slow_hit_count: 267256, fast_hit_count: 26 */
    return 1; /* line 10 slow_hit_count: 7873, fast_hit_count: 1 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[cur][sum][has] != -1) { /* line 12 slow_hit_count: 259383, fast_hit_count: 25 */
    return dp[cur][sum][has]; /* line 13 slow_hit_count: 251143, fast_hit_count: 10 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  dp[cur][sum][has] = 0; /* line 15 slow_hit_count: 8240, fast_hit_count: 15 */
  for (int i = 1; i <= k; i++) { /* line 16 slow_hit_count: 824000, fast_hit_count: 1500 */
    dp[cur][sum][has] = /* line 17 slow_hit_count: 815760, fast_hit_count: 1485 */
        (0LL + dp[cur][sum][has] + go(cur + 1, sum + i, (i >= d) | has)) % mod; /* line 18 slow_hit_count: 815760, fast_hit_count: 1485 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[cur][sum][has]; /* line 20 slow_hit_count: 8240, fast_hit_count: 15 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k >> d; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 101; i++) { /* line 24 slow_hit_count: 103, fast_hit_count: 103 */
    for (int j = 0; j <= 101; j++) { /* line 25 slow_hit_count: 10506, fast_hit_count: 10506 */
      for (int k = 0; k < 2; k++) { /* line 26 slow_hit_count: 31212, fast_hit_count: 31212 */
        dp[i][j][k] = -1; /* line 27 slow_hit_count: 20808, fast_hit_count: 20808 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << go() << "\n"; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the problem statement and the provided program, let's analyze the performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit counts for the slow and fast inputs, we observe:

1. **Function `go`:** The function `go` is called significantly more times for the slow input (815,761 times) compared to the fast input (1,486 times). This indicates that the recursion depth or the number of recursive calls is a major factor in the slowdown.

2. **Line `for (int i = 1; i <= k; i++)`:** The loop inside the recursive function `go` is executed 824,000 times for the slow input compared to 1,500 times for the fast input. This loop iterates over all possible weights (1 to `k`), and its repeated execution suggests a large branching factor.

3. **Lines checking conditions and memoization:** The condition checks and memoization (lines 7-13) are hit frequently, with the check for completed paths (`sum == n`) being hit 267,256 times in the slow case, indicating many partial paths are evaluated.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some potential performance-characterizing invariants:

1. **High Recursive Depth with Large `n`:**
   - Natural language description: "If the path weight `n` is large relative to the branching factor `k`, the recursive exploration of paths becomes deep, leading to many recursive calls and potential slowdowns."

2. **Large Branching Factor:**
   - Natural language description: "When the branching factor `k` is large, the number of paths to explore increases exponentially, resulting in a significant increase in computational overhead, especially if `n` is also large."

3. **Ineffective Memoization with High `n`:**
   - Natural language description: "The effectiveness of memoization decreases when `n` is large, as more unique states are explored, leading to less reuse of previously computed results and increased redundant computations."

### Implementation Considerations

- **Recursive Call Overhead:** The recursive calls should be minimized by ensuring effective memoization and controlling the depth of recursion.
  
- **Branching Factor Impact:** Large values of `k` drastically increase the number of recursive paths, especially as `n` approaches its maximum constraint.

- **Memoization Efficiency:** Optimize memoization so that the same states are not recomputed, especially in cases where many paths share common sub-paths.

By focusing on these conditions and their impact on the recursive search space, we can better understand the performance issues and potentially optimize the code to handle such scenarios more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code

Below are the checker code snippets for the performance-characterizing invariants derived earlier:

1. **High Recursive Depth with Large `n`:**

   ```cpp
   void check_recursive_depth_invariant(int currentDepth, int n, int k) {
       if (currentDepth > 50 && n > 90) { // Example threshold based on problem constraints
           cerr << "Warning: Performance bottleneck triggered due to high recursive depth with large n!" << endl;
           abort();
       }
   }
   ```

2. **Large Branching Factor:**

   ```cpp
   void check_branching_factor_invariant(int k, int n) {
       if (k > 80 && n > 90) { // Example threshold based on problem constraints
           cerr << "Warning: Performance bottleneck triggered due to large branching factor!" << endl;
           abort();
       }
   }
   ```

3. **Ineffective Memoization with High `n`:**

   ```cpp
   void check_memoization_invariant(int uniqueStatesCount, int n) {
       if (uniqueStatesCount > 10000 && n > 90) { // Example threshold for unique states
           cerr << "Warning: Performance bottleneck triggered due to ineffective memoization!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Program

Here is the modified C++ program with the integrated checker code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
int n, k, d;
int dp[105][105][2];

void check_recursive_depth_invariant(int currentDepth, int n, int k) {
    if (currentDepth > 50 && n > 90) { // Example threshold based on problem constraints
        cerr << "Warning: Performance bottleneck triggered due to high recursive depth with large n!" << endl;
        abort();
    }
}

void check_branching_factor_invariant(int k, int n) {
    if (k > 80 && n > 90) { // Example threshold based on problem constraints
        cerr << "Warning: Performance bottleneck triggered due to large branching factor!" << endl;
        abort();
    }
}

int go(int cur = 0, int sum = 0, bool has = 0) {
  check_recursive_depth_invariant(cur, n, k); // Check for recursive depth
  if (sum > n) {
    return 0;
  } else if (has && sum == n) {
    return 1;
  }
  if (dp[cur][sum][has] != -1) {
    return dp[cur][sum][has];
  }
  dp[cur][sum][has] = 0;
  for (int i = 1; i <= k; i++) {
    dp[cur][sum][has] =
        (0LL + dp[cur][sum][has] + go(cur + 1, sum + i, (i >= d) | has)) % mod;
  }
  return dp[cur][sum][has];
}

int main() {
  cin >> n >> k >> d;
  check_branching_factor_invariant(k, n); // Check for branching factor
  for (int i = 0; i <= 101; i++) {
    for (int j = 0; j <= 101; j++) {
      for (int k = 0; k < 2; k++) {
        dp[i][j][k] = -1;
      }
    }
  }
  cout << go() << "\n";
  return 0;
}
```

### Explanation

- **Check for High Recursive Depth:** The function `check_recursive_depth_invariant` is called at the start of the recursive function `go` to ensure the recursion depth doesn't exceed a threshold when `n` is large.

- **Check for Large Branching Factor:** The function `check_branching_factor_invariant` is called in `main` after reading the input values for `n` and `k` to detect potential slowdowns due to a large branching factor.

By integrating these checks, we aim to catch conditions that could lead to performance bottlenecks dynamically and alert the developer to potential inefficiencies in the code execution paths.

