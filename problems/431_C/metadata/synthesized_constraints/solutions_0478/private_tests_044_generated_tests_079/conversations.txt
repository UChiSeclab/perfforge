system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k, d;
int dp[105][110][2];
int rec(int idx, int sum, bool passed) {
  if (sum > n) return 0;
  if (sum == n) return passed;
  if (dp[idx][sum][passed] != -1) return dp[idx][sum][passed];
  long long answer = 0;
  for (int i = 1; i <= k; i++) {
    answer += rec(idx + 1, sum + i, i >= d || passed);
    if (answer > 1000000007) answer -= 1000000007;
  }
  dp[idx][sum][passed] = answer;
  return answer;
}
int main() {
  memset(dp, 0xFF, sizeof(dp));
  scanf("%d%d%d", &n, &k, &d);
  cout << rec(0, 0, false) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 5


(G.2) Fast Input

5 99 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, d; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dp[105][110][2]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int rec(int idx, int sum, bool passed) { /* line 5 slow_hit_count: 808336, fast_hit_count: 1090 */
  if (sum > n) return 0; /* line 6 slow_hit_count: 808336, fast_hit_count: 1090 */
  if (sum == n) return passed; /* line 7 slow_hit_count: 267256, fast_hit_count: 26 */
  if (dp[idx][sum][passed] != -1) return dp[idx][sum][passed]; /* line 8 slow_hit_count: 259091, fast_hit_count: 15 */
  long long answer = 0; /* line 9 slow_hit_count: 8165, fast_hit_count: 11 */
  for (int i = 1; i <= k; i++) { /* line 10 slow_hit_count: 816500, fast_hit_count: 1100 */
    answer += rec(idx + 1, sum + i, i >= d || passed); /* line 11 slow_hit_count: 808335, fast_hit_count: 1089 */
    if (answer > 1000000007) answer -= 1000000007; /* line 12 slow_hit_count: 808335, fast_hit_count: 1089 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  dp[idx][sum][passed] = answer; /* line 14 slow_hit_count: 8165, fast_hit_count: 11 */
  return answer; /* line 15 slow_hit_count: 8165, fast_hit_count: 11 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, 0xFF, sizeof(dp)); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &n, &k, &d); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  cout << rec(0, 0, false) << endl; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program for the task of counting paths in a k-tree, we need to analyze the hit count information and the structure of the code. Based on the provided data and problem statement, here’s a step-by-step diagnosis and derivation of performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `rec` Hit Counts**: The recursive function `rec` is called significantly more times for the slow input compared to the fast input. The slow input has hit counts of 808,336 for line 5 (function entry), while the fast input has only 1,090.

2. **Critical Lines with High Hit Counts**: 
   - The recursive call `rec(idx + 1, sum + i, i >= d || passed)` on line 11 is executed 808,335 times for the slow input, compared to just 1,089 for the fast input.
   - The loop on line 10 iterates 816,500 times for the slow input versus 1,100 times for the fast input, indicating a nested recursive depth and breadth of exploration.

3. **Data Structures and Conditions**: The use of the 3D `dp` array for memoization (`dp[idx][sum][passed]`) is meant to prevent redundant calculations. However, the high entry count in this array during the slow input suggests that many unique state combinations are being computed and cached.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can derive the following performance-characterizing invariants in natural language, which describe the conditions under which the code slows down:

1. **Deep Recursive Exploration**:
   - **Invariant**: "If the sum `n` is large relative to `k`, and `d` is small, the recursive exploration in the k-tree becomes extensive, leading to performance degradation."
   - **Explanation**: The large `n` with a relatively small `d` forces the recursion to explore many paths that only sum up to `n` after many levels, especially since paths need at least one edge weight of `d` or more.

2. **High Branching Factor**:
   - **Invariant**: "When `k` is large, the branching factor in the recursive function causes numerous recursive calls, especially when `n` approaches its upper constraint."
   - **Explanation**: A high `k` increases the number of children per node, exponentially increasing the number of paths to be checked up to the depth required to reach `sum == n`.

3. **Inefficient Memoization**:
   - **Invariant**: "If the dynamic programming table is large due to high values of `n` and `k`, the program may perform excessive redundant calculations before sufficient memoization kicks in."
   - **Explanation**: The dp table is designed for memoization, but the sheer number of combinations for large `n` and `k` can lead to excessive initial calculations before results can be reused effectively.

4. **Threshold for Path Length**:
   - **Invariant**: "For sums close to the maximum constraint of `n = 100`, the number of recursive paths increases dramatically, especially when `d` is small, leading to slow computation."
   - **Explanation**: Paths need to satisfy the sum condition and the presence of an edge with weight at least `d`, complicating calculations as `n` approaches 100.

By understanding these invariants, we can anticipate and diagnose performance issues not just in the given test cases, but in any future scenarios where similar conditions are met.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Let's translate the performance-characterizing invariants identified in Phase 2 into runtime checks in C++:

1. **Deep Recursive Exploration**:
   ```cpp
   void check_deep_recursive_invariant(int n, int k, int d) {
       if (n > 50 && d <= k / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - deep recursive exploration!" << endl;
           abort();
       }
   }
   ```

2. **High Branching Factor**:
   ```cpp
   void check_branching_factor_invariant(int n, int k) {
       if (k > 50 && n > 50) {
           cerr << "Warning: Performance bottleneck condition triggered - high branching factor!" << endl;
           abort();
       }
   }
   ```

3. **Inefficient Memoization**:
   ```cpp
   void check_memoization_invariant(int n, int k) {
       if (n * k > 5000) {
           cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization!" << endl;
           abort();
       }
   }
   ```

4. **Threshold for Path Length**:
   ```cpp
   void check_path_length_threshold_invariant(int n, int d) {
       if (n > 90 && d < 10) {
           cerr << "Warning: Performance bottleneck condition triggered - path length threshold!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into Original C++ Code

Now, we incorporate these checks into the provided C++ program. We need to ensure that they do not degrade performance by placing them carefully before the main computation begins.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k, d;
int dp[105][110][2];

int rec(int idx, int sum, bool passed) {
    if (sum > n) return 0;
    if (sum == n) return passed;
    if (dp[idx][sum][passed] != -1) return dp[idx][sum][passed];
    long long answer = 0;
    for (int i = 1; i <= k; i++) {
        answer += rec(idx + 1, sum + i, i >= d || passed);
        if (answer > 1000000007) answer -= 1000000007;
    }
    dp[idx][sum][passed] = answer;
    return answer;
}

void check_deep_recursive_invariant(int n, int k, int d) {
    if (n > 50 && d <= k / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - deep recursive exploration!" << endl;
        abort();
    }
}

void check_branching_factor_invariant(int n, int k) {
    if (k > 50 && n > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor!" << endl;
        abort();
    }
}

void check_memoization_invariant(int n, int k) {
    if (n * k > 5000) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization!" << endl;
        abort();
    }
}

void check_path_length_threshold_invariant(int n, int d) {
    if (n > 90 && d < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - path length threshold!" << endl;
        abort();
    }
}

int main() {
    memset(dp, 0xFF, sizeof(dp));
    scanf("%d%d%d", &n, &k, &d);

    // Insert checks here before the main computation
    check_deep_recursive_invariant(n, k, d);
    check_branching_factor_invariant(n, k);
    check_memoization_invariant(n, k);
    check_path_length_threshold_invariant(n, d);

    cout << rec(0, 0, false) << endl;
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are inserted after reading the inputs (`n`, `k`, `d`) but before any heavy computation (recursive calls) begins. This ensures the checks do not disrupt the main loop or recursive calls.
- **Check Conditions**: Each check condition aligns with the natural language invariant derived earlier, focusing on identifying potential bottleneck scenarios based on input characteristics.
- **Abort on Warning**: Each check prints a warning message and aborts execution if a potential bottleneck condition is detected, aiding in debugging and performance testing during development.

