system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int dp[2][101][101], n, d, k;
bool seen[2][101][101];
int sol(int index, int w, bool in) {
  if (w == n) {
    if (in)
      return 1;
    else
      return 0;
  }
  if (index == n || w > n) return 0;
  if (seen[in][index][w]) return dp[in][index][w];
  int ans = 0;
  for (int i = 1; i <= k; i++)
    ans = (ans +
           (sol(index + 1, w + i, (in == 1 || i >= d ? 1 : 0)) % 1000000007)) %
          1000000007;
  seen[in][index][w] = true;
  return dp[in][index][w] = ans;
}
int main() {
  scanf("%d %d %d", &n, &k, &d);
  printf("%d\n", sol(0, 0, 0));
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

99 99 5


(G.2) Fast Input

5 99 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int dp[2][101][101], n, d, k; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool seen[2][101][101]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int sol(int index, int w, bool in) { /* line 4 slow_hit_count: 808336, fast_hit_count: 1090 */
  if (w == n) { /* line 5 slow_hit_count: 808336, fast_hit_count: 1090 */
    if (in) /* line 6 slow_hit_count: 8165, fast_hit_count: 11 */
      return 1; /* line 7 slow_hit_count: 7873, fast_hit_count: 1 */
    else /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 9 slow_hit_count: 292, fast_hit_count: 10 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (index == n || w > n) return 0; /* line 11 slow_hit_count: 800171, fast_hit_count: 1079 */
  if (seen[in][index][w]) return dp[in][index][w]; /* line 12 slow_hit_count: 259091, fast_hit_count: 15 */
  int ans = 0; /* line 13 slow_hit_count: 8165, fast_hit_count: 11 */
  for (int i = 1; i <= k; i++) /* line 14 slow_hit_count: 816500, fast_hit_count: 1100 */
    ans = (ans + /* line 15 slow_hit_count: 808335, fast_hit_count: 1089 */
           (sol(index + 1, w + i, (in == 1 || i >= d ? 1 : 0)) % 1000000007)) % /* line 16 slow_hit_count: 808335, fast_hit_count: 1089 */
          1000000007; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  seen[in][index][w] = true; /* line 18 slow_hit_count: 8165, fast_hit_count: 11 */
  return dp[in][index][w] = ans; /* line 19 slow_hit_count: 8165, fast_hit_count: 11 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d %d", &n, &k, &d); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", sol(0, 0, 0)); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

After comparing the line-level hit counts between the fast and slow runs, the following observations can be made:

1. **Recursive Function Calls**: The function `sol` (line 4) is invoked 808,336 times for the slow input versus 1,090 times for the fast input. This indicates that the recursion is significantly deeper and more frequent for the slow input.

2. **End Condition Check**: The line checking if `w == n` (line 5) and the subsequent logic (lines 6–9) is hit 808,336 times in the slow run, compared to just 1,090 times in the fast run. This means that reaching the base case is much less frequent relative to the number of function calls in the slow run.

3. **Dynamic Programming Cache**: The memoization check (line 12) is verified 259,091 times in the slow input, and only 15 times in the fast input. This suggests that the cache is not helping as much as it could be, possibly due to a high diversity of states.

4. **Loop Over Children**: The for-loop (lines 14–17) iterating over possible child weights is executed 816,500 times in the slow input compared to 1,100 times in the fast input, indicating that this loop is a major factor in the slow performance.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis from Phase 1, here are the performance-characterizing invariants:

1. **Deep and Frequent Recursion**: 
   - **Natural Language Description**: "When `n` is large, close to its maximum constraint, and `k` is also large, the recursion may explore many paths due to the high number of possible child nodes. This leads to a deep and frequent invocation of the recursive function, significantly increasing runtime."
   - **Reasoning**: The large `n` and `k` values increase the search space exponentially, leading to many recursive calls before reaching a base case or a previously computed state.

2. **Inefficient Cache Utilization**:
   - **Natural Language Description**: "If the dynamic programming cache is checked frequently but not effectively reducing the number of computations, it may indicate that the state space is too large or diverse for effective cache hits."
   - **Reasoning**: High diversity in state space due to large `n` and `k` values results in a low cache hit ratio, causing the program to recompute many states.

3. **High Loop Iteration Counts**:
   - **Natural Language Description**: "When `k` is large, each recursive call iterates over many child paths, and if these iterations are not curtailed by early exits or cache hits, the cumulative number of iterations can become large."
   - **Reasoning**: For each recursive call, a large `k` increases the possible paths to explore, leading to a combinatorial explosion in the number of path explorations.

These invariants suggest that the program's performance is particularly sensitive to the maximum values of `n` and `k`, and that improving cache utilization or reducing unnecessary recursive calls would help address the slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

For each invariant derived in Phase 2, we will implement a runtime checker in C++ following the given template:

#### Invariant 1: Deep and Frequent Recursion
- **Checker Implementation**:
  ```cpp
  void check_recursion_invariant(int n, int k, int recursionDepth) {
      if (n >= 90 && k >= 90 && recursionDepth > 1000000) { // Example thresholds
          cerr << "Warning: Recursion invariant triggered - deep and frequent recursion!" << endl;
          abort();
      }
  }
  ```

#### Invariant 2: Inefficient Cache Utilization
- **Checker Implementation**:
  ```cpp
  void check_cache_invariant(int cacheHitCount, int recursionCallCount) {
      if (recursionCallCount > 1000000 && cacheHitCount < recursionCallCount / 100) { // Example thresholds
          cerr << "Warning: Cache invariant triggered - inefficient cache utilization!" << endl;
          abort();
      }
  }
  ```

#### Invariant 3: High Loop Iteration Counts
- **Checker Implementation**:
  ```cpp
  void check_loop_invariant(int k, int loopIterations) {
      if (k >= 90 && loopIterations > 1000000) { // Example thresholds
          cerr << "Warning: Loop invariant triggered - high loop iteration count!" << endl;
          abort();
      }
  }
  ```

### Phase 4: Integrate Checker Code into Original Program

We will integrate these checkers at appropriate points in the original C++ solution to effectively monitor and catch performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int dp[2][101][101], n, d, k;
bool seen[2][101][101];

// Function to check deep and frequent recursion
void check_recursion_invariant(int recursionDepth) {
    if (n >= 90 && k >= 90 && recursionDepth > 1000000) {
        cerr << "Warning: Recursion invariant triggered - deep and frequent recursion!" << endl;
        abort();
    }
}

// Function to check inefficient cache utilization
void check_cache_invariant(int cacheHitCount, int recursionCallCount) {
    if (recursionCallCount > 1000000 && cacheHitCount < recursionCallCount / 100) {
        cerr << "Warning: Cache invariant triggered - inefficient cache utilization!" << endl;
        abort();
    }
}

// Function to check high loop iteration counts
void check_loop_invariant(int loopIterations) {
    if (k >= 90 && loopIterations > 1000000) {
        cerr << "Warning: Loop invariant triggered - high loop iteration count!" << endl;
        abort();
    }
}

int sol(int index, int w, bool in, int recursionDepth, int& cacheHitCount, int& recursionCallCount) {
    recursionCallCount++;
    check_recursion_invariant(recursionDepth);
    
    if (w == n) {
        if (in) return 1;
        else return 0;
    }
    if (index == n || w > n) return 0;
    
    if (seen[in][index][w]) {
        cacheHitCount++;
        return dp[in][index][w];
    }
    
    int ans = 0;
    int loopIterations = 0;
    for (int i = 1; i <= k; i++) {
        loopIterations++;
        ans = (ans + (sol(index + 1, w + i, (in || i >= d), recursionDepth + 1, cacheHitCount, recursionCallCount) % 1000000007)) % 1000000007;
    }
    
    check_loop_invariant(loopIterations);
    
    seen[in][index][w] = true;
    return dp[in][index][w] = ans;
}

int main() {
    scanf("%d %d %d", &n, &k, &d);
    
    int cacheHitCount = 0;
    int recursionCallCount = 0;
    
    printf("%d\n", sol(0, 0, 0, 0, cacheHitCount, recursionCallCount));
    
    check_cache_invariant(cacheHitCount, recursionCallCount);
}
```

**Explanation:**
- **Recursion Depth Check**: We maintain a `recursionDepth` parameter to track how deep the recursion has gone and apply the check.
- **Loop Iteration Check**: We count loop iterations within each recursive call and check if it exceeds a threshold.
- **Cache Utilization Check**: Before returning from the `sol` function, we track cache hits and compare them against the number of recursive calls.
- **Placement**: Each check is placed strategically to avoid performance degradation in tight loops, yet close enough to catch the problem early.

