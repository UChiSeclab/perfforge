system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, k, d;
long long arr[110];
long long dp[110][110][3];
long long myfunc(long long i, long long sum, long long cnt) {
  if (i >= d) cnt = 1;
  if (sum <= 0) {
    if (sum == 0) {
      if (cnt == 1) return 1;
    }
    return 0;
  }
  if (dp[i][sum][cnt] != -1) return dp[i][sum][cnt];
  long long ret1 = 0;
  for (long long j = 1; j <= k; j++) {
    ret1 = (ret1 + myfunc(j, sum - j, cnt) % 1000000007) % 1000000007;
  }
  dp[i][sum][cnt] = ret1 % 1000000007;
  return dp[i][sum][cnt];
}
int main() {
  cin >> n >> k >> d;
  memset(dp, -1, sizeof dp);
  long long ans = 0;
  for (long long i = 1; i <= k; i++) {
    ans = (ans + myfunc(i, n - i, 0) % 1000000007) % 1000000007;
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100 1


(G.2) Fast Input

1 100 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, k, d; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long arr[110]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[110][110][3]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long myfunc(long long i, long long sum, long long cnt) { /* line 6 slow_hit_count: 495100, fast_hit_count: 100 */
  if (i >= d) cnt = 1; /* line 7 slow_hit_count: 495100, fast_hit_count: 100 */
  if (sum <= 0) { /* line 8 slow_hit_count: 495100, fast_hit_count: 100 */
    if (sum == 0) { /* line 9 slow_hit_count: 333301, fast_hit_count: 100 */
      if (cnt == 1) return 1; /* line 10 slow_hit_count: 4951, fast_hit_count: 1 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 12 slow_hit_count: 328350, fast_hit_count: 99 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[i][sum][cnt] != -1) return dp[i][sum][cnt]; /* line 14 slow_hit_count: 161799, fast_hit_count: 0 */
  long long ret1 = 0; /* line 15 slow_hit_count: 4950, fast_hit_count: 0 */
  for (long long j = 1; j <= k; j++) { /* line 16 slow_hit_count: 499950, fast_hit_count: 0 */
    ret1 = (ret1 + myfunc(j, sum - j, cnt) % 1000000007) % 1000000007; /* line 17 slow_hit_count: 495000, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  dp[i][sum][cnt] = ret1 % 1000000007; /* line 19 slow_hit_count: 4950, fast_hit_count: 0 */
  return dp[i][sum][cnt]; /* line 20 slow_hit_count: 4950, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k >> d; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof dp); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= k; i++) { /* line 26 slow_hit_count: 101, fast_hit_count: 101 */
    ans = (ans + myfunc(i, n - i, 0) % 1000000007) % 1000000007; /* line 27 slow_hit_count: 100, fast_hit_count: 100 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, we can follow the outlined phased approach.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Hit Counts
- **Function `myfunc`:** The line-level hit counts indicate that the function `myfunc` is called significantly more in the slow input (495,100 hits) compared to the fast input (100 hits).
- **Recursive Calls:** Line 16 (`for` loop) and line 17 (recursive call to `myfunc`) are executed 495,000 times in the slow input compared to 0 times in the fast input, indicating a high recursion depth and branching.
- **Memoization Check:** Line 14, which checks if the result is already computed (`dp[i][sum][cnt] != -1`), is hit 161,799 times in the slow input, suggesting that the memoization mechanism is not effectively reducing the number of recursive calls.

#### Inference
- The slow input causes a deep recursion with heavy branching due to the large values of `n` and `k`.
- The recursion explores many branches, especially with the nested loop iterating up to `k` times, leading to a high number of function calls.
- The memoization could be more efficient, but large problem space leads to slower performance irrespective of memoization.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis and understanding of the problem, we can derive performance-characterizing invariants as follows:

1. **Deep Recursion and High Branching:**
   - **Invariant:** "If the value of `n` is large relative to `k` and the sum of path weights approaches `n` with many possible combinations, the program may exhibit deep recursion with high branching, leading to slow performance."
   - **Rationale:** The recursive exploration increases significantly with higher values of `n` and `k`, resulting in numerous possible paths and branches from the root.

2. **Ineffective Memoization with High `k`:**
   - **Invariant:** "When `k` is large, the recursion explores many branches at each level, potentially leading to inefficient use of memoization as many states need to be stored and checked."
   - **Rationale:** The branching factor directly relates to `k`, and higher `k` increases the risk of memoization tables being less effective due to their size and complexity.

3. **High Weight Paths with Large `n`:**
   - **Invariant:** "As `n` approaches the maximum constraint and if `d` is small, the program may spend excessive time evaluating paths to meet or exceed weight `d`, slowing down computation."
   - **Rationale:** Lower values of `d` with high `n` require evaluating numerous combinations of edge weights to ensure paths have at least one edge weight `≥ d`.

### Conclusion

The identified invariants highlight conditions under which the program's performance deteriorates due to recursive depth and branching. These conditions are especially pronounced when `n` and `k` are at their upper limits, with recursive exploration becoming computationally expensive. By understanding and potentially addressing these conditions, optimization efforts can be more effectively targeted to improve performance across a range of inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Quite recently a creative student Lesha had a lecture on trees. After the lecture Lesha was inspired and came up with the tree of his own which he called a k-tree.

A k-tree is an infinite rooted tree where:

  * each vertex has exactly k children; 
  * each edge has some weight; 
  * if we look at the edges that goes from some vertex to its children (exactly k edges), then their weights will equal 1, 2, 3, ..., k. 



The picture below shows a part of a 3-tree.

<image>

As soon as Dima, a good friend of Lesha, found out about the tree, he immediately wondered: "How many paths of total weight n (the sum of all weights of the edges in the path) are there, starting from the root of a k-tree and also containing at least one edge of weight at least d?".

Help Dima find an answer to his question. As the number of ways can be rather large, print it modulo 1000000007 (109 + 7). 

Input

A single line contains three space-separated integers: n, k and d (1 ≤ n, k ≤ 100; 1 ≤ d ≤ k).

Output

Print a single integer — the answer to the problem modulo 1000000007 (109 + 7). 

Examples

Input

3 3 2


Output

3


Input

3 3 3


Output

1


Input

4 3 2


Output

6


Input

4 5 2


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Invariants as Runtime Checks in C++

Let's translate the previously derived performance-characterizing invariants into C++ checker code.

1. **Deep Recursion and High Branching:**
   - *Invariant Checker:* This will check if `n` is large relative to `k`, which could lead to deep recursion with high branching.
   
   ```cpp
   void check_recursion_branches(bool condition) {
       if (condition) {
           cerr << "Warning: High recursion depth with excessive branching!" << endl;
           abort();
       }
   }
   ```

2. **Ineffective Memoization with High `k`:**
   - *Invariant Checker:* This will check if `k` is large, indicating many branches per recursion level.

   ```cpp
   void check_memoization_inefficiency(bool condition) {
       if (condition) {
           cerr << "Warning: Inefficient use of memoization with large branching factor!" << endl;
           abort();
       }
   }
   ```

3. **High Weight Paths with Large `n`:**
   - *Invariant Checker:* This will check if `n` is close to its maximum and `d` is small, potentially slowing down computation.

   ```cpp
   void check_path_weight_conditions(bool condition) {
       if (condition) {
           cerr << "Warning: High number of combinations with large total path weights!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code with the Original Program

Now integrate these checks into the original program at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, k, d;
long long dp[110][110][3];

void check_recursion_branches(bool condition) {
    if (condition) {
        cerr << "Warning: High recursion depth with excessive branching!" << endl;
        abort();
    }
}

void check_memoization_inefficiency(bool condition) {
    if (condition) {
        cerr << "Warning: Inefficient use of memoization with large branching factor!" << endl;
        abort();
    }
}

void check_path_weight_conditions(bool condition) {
    if (condition) {
        cerr << "Warning: High number of combinations with large total path weights!" << endl;
        abort();
    }
}

long long myfunc(long long i, long long sum, long long cnt) {
    if (i >= d) cnt = 1;
    if (sum <= 0) {
        if (sum == 0) {
            if (cnt == 1) return 1;
        }
        return 0;
    }
    if (dp[i][sum][cnt] != -1) return dp[i][sum][cnt];
    long long ret1 = 0;
    for (long long j = 1; j <= k; j++) {
        ret1 = (ret1 + myfunc(j, sum - j, cnt) % 1000000007) % 1000000007;
    }
    dp[i][sum][cnt] = ret1 % 1000000007;
    return dp[i][sum][cnt];
}

int main() {
    cin >> n >> k >> d;
    memset(dp, -1, sizeof dp);

    // Check for deep recursion and high branching
    check_recursion_branches(n > 90 && k > 50);

    // Check for inefficient memoization usage
    check_memoization_inefficiency(k > 50);

    // Check for high weight path conditions
    check_path_weight_conditions(n > 90 && d < 5);

    long long ans = 0;
    for (long long i = 1; i <= k; i++) {
        ans = (ans + myfunc(i, n - i, 0) % 1000000007) % 1000000007;
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **Placement of Checks:** The checks are placed right after reading the input values, ensuring they do not interfere with the main computation and are evaluated only once.
- **Conditions:** Each checker uses conditions derived from the natural language invariants to trigger warnings and abort execution if a performance bottleneck is anticipated. The thresholds in the conditions reflect the problem's constraints and typical input limits.

