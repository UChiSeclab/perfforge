system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. 

Dima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, <image> , where aj is the taste of the j-th chosen fruit and bj is its calories.

Inna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem — now the happiness of a young couple is in your hands!

Inna loves Dima very much so she wants to make the salad from at least one fruit.

Input

The first line of the input contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the fruits' tastes. The third line of the input contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the fruits' calories. Fruit number i has taste ai and calories bi.

Output

If there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer — the maximum possible sum of the taste values of the chosen fruits.

Examples

Input

3 2
10 8 1
2 7 1


Output

18


Input

5 3
4 4 4 4 4
2 2 2 2 2


Output

-1

Note

In the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition <image> fulfills, that's exactly what Inna wants.

In the second test sample we cannot choose the fruits so as to follow Inna's principle.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int offset = (int)10000;
const int N = 3e4;
map<int, int> dp[105];
int ara[105], a[105], b[105];
int n, k;
const int inf = 1 << 30;
int solve(int pos, int bal) {
  if (pos > n) {
    if (bal == 0) {
      return 0;
    } else
      return -inf;
  }
  if (dp[pos].find(bal) != dp[pos].end()) {
    return dp[pos][bal];
  }
  int ret = -inf;
  ret = max(ret, solve(pos + 1, bal));
  ret = max(ret, a[pos] + solve(pos + 1, bal + a[pos] - (k * b[pos])));
  return dp[pos][bal] = ret;
}
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cin >> n >> k;
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
  }
  for (int i = 1; i <= n; i++) {
    cin >> b[i];
  }
  int ans = solve(1, 0);
  if (ans <= 0) {
    cout << -1 << "\n";
    return 0;
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

80 3
84 61 7 14 79 81 16 61 38 62 16 71 14 6 56 91 91 94 85 52 80 51 97 26 46 39 87 76 69 19 57 54 34 65 49 24 35 20 68 40 92 11 35 32 70 89 83 50 36 67 48 82 65 97 100 70 89 42 40 2 91 29 78 86 11 3 59 84 35 11 90 66 30 61 74 55 83 89 98 51
93 9 7 95 47 3 19 61 69 10 8 58 49 65 4 45 79 64 30 34 59 1 22 37 1 15 20 72 6 34 51 90 1 77 19 64 41 83 90 71 35 64 18 88 1 86 52 92 88 66 68 43 85 55 60 11 27 56 98 89 53 96 19 97 55 85 38 3 34 59 96 65 51 10 1 3 26 3 6 43


(G.2) Fast Input

55 1
42 45 79 90 55 14 46 34 98 30 26 100 26 61 52 85 62 26 17 32 23 76 24 35 60 41 2 94 66 16 48 81 81 30 9 23 91 71 62 76 83 8 11 37 15 45 85 31 38 42 42 34 86 49 78
43 36 78 2 48 79 7 55 47 7 75 78 100 10 11 4 83 82 26 95 70 67 9 34 10 85 32 60 28 98 81 78 52 47 91 51 98 33 26 40 82 46 60 27 75 9 35 11 65 61 28 62 11 95 72


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int offset = (int)10000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 3e4; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> dp[105]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int ara[105], a[105], b[105]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1 << 30; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int solve(int pos, int bal) { /* line 9 slow_hit_count: 627871, fast_hit_count: 103087 */
  if (pos > n) { /* line 10 slow_hit_count: 627871, fast_hit_count: 103087 */
    if (bal == 0) { /* line 11 slow_hit_count: 16916, fast_hit_count: 3810 */
      return 0; /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
    } else /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      return -inf; /* line 14 slow_hit_count: 16914, fast_hit_count: 3808 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[pos].find(bal) != dp[pos].end()) { /* line 16 slow_hit_count: 610955, fast_hit_count: 99277 */
    return dp[pos][bal]; /* line 17 slow_hit_count: 297020, fast_hit_count: 47734 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int ret = -inf; /* line 19 slow_hit_count: 313935, fast_hit_count: 51543 */
  ret = max(ret, solve(pos + 1, bal)); /* line 20 slow_hit_count: 313935, fast_hit_count: 51543 */
  ret = max(ret, a[pos] + solve(pos + 1, bal + a[pos] - (k * b[pos]))); /* line 21 slow_hit_count: 313935, fast_hit_count: 51543 */
  return dp[pos][bal] = ret; /* line 22 slow_hit_count: 313935, fast_hit_count: 51543 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 28 slow_hit_count: 81, fast_hit_count: 56 */
    cin >> a[i]; /* line 29 slow_hit_count: 80, fast_hit_count: 55 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 31 slow_hit_count: 81, fast_hit_count: 56 */
    cin >> b[i]; /* line 32 slow_hit_count: 80, fast_hit_count: 55 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = solve(1, 0); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  if (ans <= 0) { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << "\n"; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided code, hit count analysis, and problem statement, let's analyze the potential performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Recursive Function `solve`**: 
   - The function `solve` is the core recursive function that checks different combinations of fruits to achieve the target taste-to-calorie ratio \( k \).
   - The line-level hit counts indicate that `solve` is called significantly more frequently with the slow input compared to the fast input.
   - The line `solve(pos + 1, bal + a[pos] - (k * b[pos]))` (line 21) is particularly expensive because it explores a new state in the recursive tree, and it is executed many times.

2. **Memoization Table Lookup**:
   - The check `if (dp[pos].find(bal) != dp[pos].end())` (line 16) is hit very often, highlighting heavy reliance on memoization to avoid redundant calculations.

3. **Branching and Recursive Depth**:
   - The high number of recursive calls (e.g. line 10: `solve`) indicates a deep recursion tree, likely due to the combinatorial nature of the problem where each fruit can either be included or excluded.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Branching Factor With Many Fruits**:
   - **Invariant**: “If the number of fruits \( n \) is near the upper limit of 100, and the search space involves a high branching factor (i.e., many combinations of inclusion and exclusion of fruits), the computation may slow down significantly due to the large recursion tree.”

2. **Ineffective Memoization Due to Unique States**:
   - **Invariant**: “If the balance `bal` (which is calculated as the cumulative difference between the total taste and \( k \) times total calories) results in many unique states, memoization may have limited effect, increasing the computation time.”

3. **Search Space Complexity**:
   - **Invariant**: “If the target ratio \( k \) is such that no or few valid combinations exist (leading to mostly negative outcomes in recursive calls), the algorithm may explore many unnecessary paths, leading to inefficiency.”

4. **Input Combinations Leading to Many Recursive Calls**:
   - **Invariant**: “When the tastes and calories of fruits are such that their combinations create a high number of unique taste-to-calorie ratios, it can trigger excessive recursive evaluations.”

Each of these invariants addresses potential scenarios and reasons why the code might exhibit significantly slower performance for certain inputs, focusing on the recursive nature and search space complexity of the problem. These invariants can guide further optimization or analysis efforts by identifying conditions under which the program is likely to hit performance bottlenecks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. 

Dima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, <image> , where aj is the taste of the j-th chosen fruit and bj is its calories.

Inna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem — now the happiness of a young couple is in your hands!

Inna loves Dima very much so she wants to make the salad from at least one fruit.

Input

The first line of the input contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the fruits' tastes. The third line of the input contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the fruits' calories. Fruit number i has taste ai and calories bi.

Output

If there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer — the maximum possible sum of the taste values of the chosen fruits.

Examples

Input

3 2
10 8 1
2 7 1


Output

18


Input

5 3
4 4 4 4 4
2 2 2 2 2


Output

-1

Note

In the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition <image> fulfills, that's exactly what Inna wants.

In the second test sample we cannot choose the fruits so as to follow Inna's principle.

Solution (C++ code):
{solution}


assistant: Let's continue with Phase 3, where we'll transform the performance-characterizing invariants into C++ checker code:

### Phase 3: Transforming Invariants into C++ Code

1. **High Branching Factor With Many Fruits**:
   - **Invariant Check**: If the number of fruits \( n \) is close to the upper limit (100), and the search space involves high branching, detect a potential slowdown.
   
   ```cpp
   void check_high_branching_invariant(int n) {
       if (n > 90) {
           cerr << "Warning: Performance bottleneck condition triggered - high branching factor with many fruits!" << endl;
           abort();
       }
   }
   ```

2. **Ineffective Memoization Due to Unique States**:
   - **Invariant Check**: If the balance `bal` results in many unique states, causing ineffective memoization, detect a potential slowdown.
   
   ```cpp
   void check_memoization_invariant(int uniqueStatesCount) {
       if (uniqueStatesCount > 5000) {  // Arbitrary threshold for demonstration
           cerr << "Warning: Performance bottleneck condition triggered - ineffective memoization due to unique states!" << endl;
           abort();
       }
   }
   ```

3. **Search Space Complexity**:
   - **Invariant Check**: If the target ratio \( k \) leads to mostly negative outcomes in recursive calls, excess exploration can be detected.
   
   ```cpp
   void check_search_space_invariant(int negativeOutcomes) {
       if (negativeOutcomes > 10000) {  // Arbitrary threshold for demonstration
           cerr << "Warning: Performance bottleneck condition triggered - excessive exploration of negative outcomes!" << endl;
           abort();
       }
   }
   ```

4. **Input Combinations Leading to Many Recursive Calls**:
   - **Invariant Check**: When tastes and calories create numerous unique ratios, detect potential slowdown from excessive recursive evaluations.
   
   ```cpp
   void check_recursive_evaluations_invariant(int uniqueRatiosCount) {
       if (uniqueRatiosCount > 7000) {  // Arbitrary threshold for demonstration
           cerr << "Warning: Performance bottleneck condition triggered - excessive recursive evaluations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Now integrate these invariant checks at appropriate places in the C++ program. Below is the instrumented code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int offset = (int)10000;
const int N = 3e4;
map<int, int> dp[105];
int ara[105], a[105], b[105];
int n, k;
const int inf = 1 << 30;

// Checker functions for performance bottlenecks
void check_high_branching_invariant(int n) {
    if (n > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor with many fruits!" << endl;
        abort();
    }
}

void check_memoization_invariant(int uniqueStatesCount) {
    if (uniqueStatesCount > 5000) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective memoization due to unique states!" << endl;
        abort();
    }
}

void check_search_space_invariant(int negativeOutcomes) {
    if (negativeOutcomes > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive exploration of negative outcomes!" << endl;
        abort();
    }
}

void check_recursive_evaluations_invariant(int uniqueRatiosCount) {
    if (uniqueRatiosCount > 7000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive evaluations!" << endl;
        abort();
    }
}

int solve(int pos, int bal) {
    static int uniqueStatesCount = 0;  // Track unique states for memoization check
    static int negativeOutcomes = 0;   // Track negative outcomes for search space check
    static int uniqueRatiosCount = 0;  // Track unique ratios for recursive evaluations check

    if (pos > n) {
        if (bal == 0) {
            return 0;
        } else {
            negativeOutcomes++;
            check_search_space_invariant(negativeOutcomes);
            return -inf;
        }
    }
    if (dp[pos].find(bal) != dp[pos].end()) {
        return dp[pos][bal];
    }

    uniqueStatesCount++;
    check_memoization_invariant(uniqueStatesCount);

    int ret = -inf;
    ret = max(ret, solve(pos + 1, bal));
    uniqueRatiosCount++;
    ret = max(ret, a[pos] + solve(pos + 1, bal + a[pos] - (k * b[pos])));
    
    check_recursive_evaluations_invariant(uniqueRatiosCount);

    return dp[pos][bal] = ret;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> k;
    
    check_high_branching_invariant(n);  // Check for high branching condition

    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    for (int i = 1; i <= n; i++) {
        cin >> b[i];
    }
    int ans = solve(1, 0);
    if (ans <= 0) {
        cout << -1 << "\n";
        return 0;
    }
    cout << ans << "\n";
    return 0;
}
```

### Explanation

- **Checker Functions**: Implemented as separate functions to check each invariant. This keeps the code modular and clean.
- **Placement**: The checks are placed strategically:
  - **`check_high_branching_invariant`** is called after reading `n` to prevent high branching issues.
  - **Inside `solve`**, counters track unique states, negative outcomes, and ratios. The corresponding checker functions are called to detect performance issues.
- **Abort**: Each checker uses `abort()` to stop execution if a performance issue is detected.

This instrumented code should help identify slow paths and detect potential performance bottlenecks through runtime checks.

