system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. 

Dima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, <image> , where aj is the taste of the j-th chosen fruit and bj is its calories.

Inna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem — now the happiness of a young couple is in your hands!

Inna loves Dima very much so she wants to make the salad from at least one fruit.

Input

The first line of the input contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the fruits' tastes. The third line of the input contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the fruits' calories. Fruit number i has taste ai and calories bi.

Output

If there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer — the maximum possible sum of the taste values of the chosen fruits.

Examples

Input

3 2
10 8 1
2 7 1


Output

18


Input

5 3
4 4 4 4 4
2 2 2 2 2


Output

-1

Note

In the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition <image> fulfills, that's exactly what Inna wants.

In the second test sample we cannot choose the fruits so as to follow Inna's principle.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 110;
set<int> sve;
map<int, int> dp;
int a[N], b[N], n, k;
vector<pair<int, int> > v;
int main() {
  cin >> n >> k;
  for (int i = 1; i <= n; i++) cin >> a[i];
  for (int i = 1; i <= n; i++) {
    cin >> b[i];
    b[i] *= k;
  }
  for (int i = 1; i <= n; i++) {
    v.clear();
    for (auto it : sve) {
      int sum = it;
      v.push_back(make_pair(sum + a[i] - b[i], dp[sum] + a[i]));
    }
    for (int j = 0; j < v.size(); j++) {
      int best = dp[v[j].first];
      best = max(best, v[j].second);
      dp[v[j].first] = best;
      sve.insert(v[j].first);
    }
    if (sve.find(a[i] - b[i]) == sve.end()) {
      sve.insert(a[i] - b[i]);
      dp[a[i] - b[i]] = a[i];
    } else {
      int best = dp[a[i] - b[i]];
      best = max(best, a[i]);
      dp[a[i] - b[i]] = best;
    }
  }
  if (dp.count(0) == 0)
    cout << "-1";
  else
    cout << dp[0];
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

80 3
84 61 7 14 79 81 16 61 38 62 16 71 14 6 56 91 91 94 85 52 80 51 97 26 46 39 87 76 69 19 57 54 34 65 49 24 35 20 68 40 92 11 35 32 70 89 83 50 36 67 48 82 65 97 100 70 89 42 40 2 91 29 78 86 11 3 59 84 35 11 90 66 30 61 74 55 83 89 98 51
93 9 7 95 47 3 19 61 69 10 8 58 49 65 4 45 79 64 30 34 59 1 22 37 1 15 20 72 6 34 51 90 1 77 19 64 41 83 90 71 35 64 18 88 1 86 52 92 88 66 68 43 85 55 60 11 27 56 98 89 53 96 19 97 55 85 38 3 34 59 96 65 51 10 1 3 26 3 6 43


(G.2) Fast Input

55 1
42 45 79 90 55 14 46 34 98 30 26 100 26 61 52 85 62 26 17 32 23 76 24 35 60 41 2 94 66 16 48 81 81 30 9 23 91 71 62 76 83 8 11 37 15 45 85 31 38 42 42 34 86 49 78
43 36 78 2 48 79 7 55 47 7 75 78 100 10 11 4 83 82 26 95 70 67 9 34 10 85 32 60 28 98 81 78 52 47 91 51 98 33 26 40 82 46 60 27 75 9 35 11 65 61 28 62 11 95 72


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 110; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
set<int> sve; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> dp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int a[N], b[N], n, k; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > v; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> a[i]; /* line 10 slow_hit_count: 81, fast_hit_count: 56 */
  for (int i = 1; i <= n; i++) { /* line 11 slow_hit_count: 81, fast_hit_count: 56 */
    cin >> b[i]; /* line 12 slow_hit_count: 80, fast_hit_count: 55 */
    b[i] *= k; /* line 13 slow_hit_count: 80, fast_hit_count: 55 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 15 slow_hit_count: 81, fast_hit_count: 56 */
    v.clear(); /* line 16 slow_hit_count: 80, fast_hit_count: 55 */
    for (auto it : sve) { /* line 17 slow_hit_count: 314000, fast_hit_count: 51595 */
      int sum = it; /* line 18 slow_hit_count: 313920, fast_hit_count: 51540 */
      v.push_back(make_pair(sum + a[i] - b[i], dp[sum] + a[i])); /* line 19 slow_hit_count: 313920, fast_hit_count: 51540 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j < v.size(); j++) { /* line 21 slow_hit_count: 314000, fast_hit_count: 51595 */
      int best = dp[v[j].first]; /* line 22 slow_hit_count: 313920, fast_hit_count: 51540 */
      best = max(best, v[j].second); /* line 23 slow_hit_count: 313920, fast_hit_count: 51540 */
      dp[v[j].first] = best; /* line 24 slow_hit_count: 313920, fast_hit_count: 51540 */
      sve.insert(v[j].first); /* line 25 slow_hit_count: 313920, fast_hit_count: 51540 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    if (sve.find(a[i] - b[i]) == sve.end()) { /* line 27 slow_hit_count: 80, fast_hit_count: 55 */
      sve.insert(a[i] - b[i]); /* line 28 slow_hit_count: 11, fast_hit_count: 3 */
      dp[a[i] - b[i]] = a[i]; /* line 29 slow_hit_count: 11, fast_hit_count: 3 */
    } else { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      int best = dp[a[i] - b[i]]; /* line 31 slow_hit_count: 69, fast_hit_count: 52 */
      best = max(best, a[i]); /* line 32 slow_hit_count: 69, fast_hit_count: 52 */
      dp[a[i] - b[i]] = best; /* line 33 slow_hit_count: 69, fast_hit_count: 52 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp.count(0) == 0) /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "-1"; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    cout << dp[0]; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Analyzing Hit Counts**: 
   - The lines with significantly more hits in the slow input compared to the fast input are lines 17, 18, 19, 21, 22, 23, 24, and 25. This indicates that the inner loop processing (`for (auto it : sve)`) and subsequent operations (`v.push_back`, updating `dp`, and inserting into `sve`) are being executed many more times during the slow run.
   
2. **Understanding Code Structure**:
   - The outer loop iterates over each fruit, while the inner loop iterates over the set `sve`. The inner loop operations are costly, especially when `sve` is large. The growth of `sve` directly impacts the performance as it causes these inner operations to be performed more frequently.

3. **Data Structure Impact**:
   - The set `sve` keeps track of unique keys derived from the fruits, leading to potentially large numbers of combinations being stored and iterated over. This can cause the operation count to grow rapidly, especially when n (the number of fruits) is large.

**Phase 2: Derive Performance-Characterizing Invariants (Natural Language)**

1. **Invariant 1**: "If the set of combinations (`sve`) becomes large, the number of operations performed within nested loops increases significantly, leading to slower performance."
   - This happens when there are many distinct pairs in the input data, causing `sve` to grow quickly.

2. **Invariant 2**: "When the number of fruits (n) is close to its upper limit (100) and the variations in calories and tastes allow many combinations to satisfy the taste-to-calories ratio k, the program may exhibit slow behavior due to excessive set growth and processing."
   - This is particularly evident when there are many potential fruit combinations that meet the ratio k, increasing the complexity of `dp` and `sve` management.

3. **Invariant 3**: "If there exists a wide range of taste and calorie values such that many different taste-to-calorie ratios can be formed, the program might slow down as it tries to explore all possible combinations to achieve the optimal taste sum."
   - This is due to the potential for many intermediate sums being calculated and stored in `dp`, along with corresponding entries in `sve`.

**Conclusion**:
The performance bottleneck arises from managing a large number of potential combinations of fruits that satisfy the ratio constraint. This is exacerbated by the use of a dynamic programming approach with a set that can grow significantly, leading to high computational overhead in exploring and managing these combinations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. 

Dima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, <image> , where aj is the taste of the j-th chosen fruit and bj is its calories.

Inna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem — now the happiness of a young couple is in your hands!

Inna loves Dima very much so she wants to make the salad from at least one fruit.

Input

The first line of the input contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the fruits' tastes. The third line of the input contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the fruits' calories. Fruit number i has taste ai and calories bi.

Output

If there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer — the maximum possible sum of the taste values of the chosen fruits.

Examples

Input

3 2
10 8 1
2 7 1


Output

18


Input

5 3
4 4 4 4 4
2 2 2 2 2


Output

-1

Note

In the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition <image> fulfills, that's exactly what Inna wants.

In the second test sample we cannot choose the fruits so as to follow Inna's principle.

Solution (C++ code):
{solution}


assistant: **Phase 3: Implement Performance-Characterizing Invariants as C++ Checkers**

Here are the C++ code snippets implementing the performance-characterizing invariants we derived:

1. **Invariant 1 Checker**: Large `sve` set size indicating excessive operations.
    ```cpp
    void check_set_size_invariant(int setSize, int threshold) {
        if (setSize > threshold) {
            cerr << "Warning: Performance bottleneck condition triggered due to large set size!" << endl;
            abort();
        }
    }
    ```

2. **Invariant 2 Checker**: Excessive combinations due to input size and characteristics.
    ```cpp
    void check_input_size_invariant(int n, int threshold) {
        if (n >= threshold) {
            cerr << "Warning: Performance bottleneck condition triggered due to large input size!" << endl;
            abort();
        }
    }
    ```

3. **Invariant 3 Checker**: High variation in taste and calories leading to many potential combinations.
    ```cpp
    void check_variation_invariant(const vector<int>& a, const vector<int>& b, int variation_threshold) {
        int taste_range = *max_element(a.begin(), a.end()) - *min_element(a.begin(), a.end());
        int calorie_range = *max_element(b.begin(), b.end()) - *min_element(b.begin(), b.end());
        
        if (taste_range > variation_threshold || calorie_range > variation_threshold) {
            cerr << "Warning: Performance bottleneck condition triggered due to high variation in tastes or calories!" << endl;
            abort();
        }
    }
    ```

**Phase 4: Integrate Checker Code into Original C++ Program**

Below is the instrumented C++ code incorporating the checkers at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 110;
set<int> sve;
map<int, int> dp;
int a[N], b[N], n, k;
vector<pair<int, int>> v;

// Checker functions
void check_set_size_invariant(int setSize, int threshold) {
    if (setSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large set size!" << endl;
        abort();
    }
}

void check_input_size_invariant(int n, int threshold) {
    if (n >= threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large input size!" << endl;
        abort();
    }
}

void check_variation_invariant(const vector<int>& a, const vector<int>& b, int variation_threshold) {
    int taste_range = *max_element(a.begin(), a.end()) - *min_element(a.begin(), a.end());
    int calorie_range = *max_element(b.begin(), b.end()) - *min_element(b.begin(), b.end());

    if (taste_range > variation_threshold || calorie_range > variation_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high variation in tastes or calories!" << endl;
        abort();
    }
}

int main() {
    cin >> n >> k;

    // Check input size invariant
    check_input_size_invariant(n, 90);  // Set threshold to 90 as a safe boundary given n <= 100

    vector<int> a_vector(n+1), b_vector(n+1);
    for (int i = 1; i <= n; i++) cin >> a[i], a_vector[i] = a[i];
    for (int i = 1; i <= n; i++) {
        cin >> b[i];
        b_vector[i] = b[i];
        b[i] *= k;
    }

    // Check variation invariant before further processing
    check_variation_invariant(a_vector, b_vector, 80);  // Arbitrary variation threshold

    for (int i = 1; i <= n; i++) {
        v.clear();
        for (auto it : sve) {
            int sum = it;
            v.push_back(make_pair(sum + a[i] - b[i], dp[sum] + a[i]));
        }
        for (int j = 0; j < v.size(); j++) {
            int best = dp[v[j].first];
            best = max(best, v[j].second);
            dp[v[j].first] = best;
            sve.insert(v[j].first);
        }
        if (sve.find(a[i] - b[i]) == sve.end()) {
            sve.insert(a[i] - b[i]);
            dp[a[i] - b[i]] = a[i];
        } else {
            int best = dp[a[i] - b[i]];
            best = max(best, a[i]);
            dp[a[i] - b[i]] = best;
        }

        // Check set size invariant after processing each fruit
        check_set_size_invariant(sve.size(), 5000);  // Set threshold to an empirical value
    }

    if (dp.count(0) == 0)
        cout << "-1";
    else
        cout << dp[0];
    return 0;
}
```

**Key Integration Points**:
- **Input Size Check**: Right after reading `n`, ensures the size doesn't become a performance issue.
- **Variation Check**: Performed before processing combinations to detect high variability early.
- **Set Size Check**: Conducted after each outer loop iteration to detect rapid growth in `sve`.

