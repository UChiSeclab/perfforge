system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. 

Dima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, <image> , where aj is the taste of the j-th chosen fruit and bj is its calories.

Inna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem — now the happiness of a young couple is in your hands!

Inna loves Dima very much so she wants to make the salad from at least one fruit.

Input

The first line of the input contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the fruits' tastes. The third line of the input contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the fruits' calories. Fruit number i has taste ai and calories bi.

Output

If there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer — the maximum possible sum of the taste values of the chosen fruits.

Examples

Input

3 2
10 8 1
2 7 1


Output

18


Input

5 3
4 4 4 4 4
2 2 2 2 2


Output

-1

Note

In the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition <image> fulfills, that's exactly what Inna wants.

In the second test sample we cannot choose the fruits so as to follow Inna's principle.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class T>
typename T::value_type arr_sum(const T& v, int n) {
  typename T::value_type sum = 0;
  for (int i = (0); i < (n); ++i) sum += v[i];
  return sum;
}
struct Sync_stdio {
  Sync_stdio() {
    cin.tie(NULL);
    ios_base::sync_with_stdio(false);
  }
} _sync_stdio;
int main() {
  int n, k;
  cin >> n >> k;
  vector<pair<int, int> > v(n);
  for (int i = (0); i < (n); ++i) {
    cin >> v[i].first;
  }
  for (int i = (0); i < (n); ++i) {
    cin >> v[i].second;
    v[i].second *= k;
    v[i].second -= v[i].first;
  }
  vector<pair<int, int> > pos;
  vector<pair<int, int> > neg;
  int res = 0;
  for (int i = (0); i < (n); ++i) {
    if (v[i].second < 0) {
      v[i].second = -v[i].second;
      pos.push_back(v[i]);
    } else if (v[i].second > 0) {
      neg.push_back(v[i]);
    } else {
      res += v[i].first;
    }
  }
  sort(pos.begin(), pos.end(),
       [](pair<int, int> x, pair<int, int> y) { return x.second < y.second; });
  sort(neg.begin(), neg.end(),
       [](pair<int, int> x, pair<int, int> y) { return x.second < y.second; });
  map<int, int> dppos;
  map<int, int> dpneg;
  dppos[0] = 0;
  dpneg[0] = 0;
  for (int i = (0); i < (int(pos.size())); ++i) {
    vector<pair<int, int> > new_v;
    for (auto j : dppos) {
      if (dppos.find(j.first + pos[i].second) == dppos.end() ||
          j.second + pos[i].first > dppos[j.first + pos[i].second]) {
        new_v.push_back({j.first + pos[i].second, j.second + pos[i].first});
      }
    }
    for (auto j : new_v) {
      dppos[j.first] = j.second;
    }
  }
  vector<int> pos_res(100001);
  for (auto i : dppos) {
    pos_res[i.first] = i.second;
  }
  for (int i = (0); i < (int(neg.size())); ++i) {
    vector<pair<int, int> > new_v;
    for (auto j : dpneg) {
      if (dpneg.find(j.first + neg[i].second) == dpneg.end() ||
          j.second + neg[i].first > dpneg[j.first + neg[i].second]) {
        new_v.push_back({j.first + neg[i].second, j.second + neg[i].first});
      }
    }
    for (auto j : new_v) {
      dpneg[j.first] = j.second;
    }
  }
  vector<int> neg_res(100001);
  for (auto i : dpneg) {
    neg_res[i.first] = i.second;
  }
  int max_res = res;
  for (int i = (0); i < (100001); ++i) {
    if (pos_res[i] != 0 && neg_res[i] != 0) {
      max_res = max(res + pos_res[i] + neg_res[i], max_res);
    }
  }
  cout << (max_res != 0 ? max_res : -1);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

80 3
84 61 7 14 79 81 16 61 38 62 16 71 14 6 56 91 91 94 85 52 80 51 97 26 46 39 87 76 69 19 57 54 34 65 49 24 35 20 68 40 92 11 35 32 70 89 83 50 36 67 48 82 65 97 100 70 89 42 40 2 91 29 78 86 11 3 59 84 35 11 90 66 30 61 74 55 83 89 98 51
93 9 7 95 47 3 19 61 69 10 8 58 49 65 4 45 79 64 30 34 59 1 22 37 1 15 20 72 6 34 51 90 1 77 19 64 41 83 90 71 35 64 18 88 1 86 52 92 88 66 68 43 85 55 60 11 27 56 98 89 53 96 19 97 55 85 38 3 34 59 96 65 51 10 1 3 26 3 6 43


(G.2) Fast Input

55 1
42 45 79 90 55 14 46 34 98 30 26 100 26 61 52 85 62 26 17 32 23 76 24 35 60 41 2 94 66 16 48 81 81 30 9 23 91 71 62 76 83 8 11 37 15 45 85 31 38 42 42 34 86 49 78
43 36 78 2 48 79 7 55 47 7 75 78 100 10 11 4 83 82 26 95 70 67 9 34 10 85 32 60 28 98 81 78 52 47 91 51 98 33 26 40 82 46 60 27 75 9 35 11 65 61 28 62 11 95 72


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
typename T::value_type arr_sum(const T& v, int n) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  typename T::value_type sum = 0; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (0); i < (n); ++i) sum += v[i]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  return sum; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
struct Sync_stdio { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  Sync_stdio() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(NULL); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    ios_base::sync_with_stdio(false); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
} _sync_stdio; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, int> > v(n); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = (0); i < (n); ++i) { /* line 19 slow_hit_count: 81, fast_hit_count: 56 */
    cin >> v[i].first; /* line 20 slow_hit_count: 80, fast_hit_count: 55 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (0); i < (n); ++i) { /* line 22 slow_hit_count: 81, fast_hit_count: 56 */
    cin >> v[i].second; /* line 23 slow_hit_count: 80, fast_hit_count: 55 */
    v[i].second *= k; /* line 24 slow_hit_count: 80, fast_hit_count: 55 */
    v[i].second -= v[i].first; /* line 25 slow_hit_count: 80, fast_hit_count: 55 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<int, int> > pos; /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  vector<pair<int, int> > neg; /* line 28 slow_hit_count: 2, fast_hit_count: 2 */
  int res = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (n); ++i) { /* line 30 slow_hit_count: 81, fast_hit_count: 56 */
    if (v[i].second < 0) { /* line 31 slow_hit_count: 80, fast_hit_count: 55 */
      v[i].second = -v[i].second; /* line 32 slow_hit_count: 21, fast_hit_count: 30 */
      pos.push_back(v[i]); /* line 33 slow_hit_count: 21, fast_hit_count: 30 */
    } else if (v[i].second > 0) { /* line 34 slow_hit_count: 59, fast_hit_count: 25 */
      neg.push_back(v[i]); /* line 35 slow_hit_count: 59, fast_hit_count: 25 */
    } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      res += v[i].first; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  sort(pos.begin(), pos.end(), /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
       [](pair<int, int> x, pair<int, int> y) { return x.second < y.second; }); /* line 41 slow_hit_count: 110, fast_hit_count: 194 */
  sort(neg.begin(), neg.end(), /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
       [](pair<int, int> x, pair<int, int> y) { return x.second < y.second; }); /* line 43 slow_hit_count: 408, fast_hit_count: 145 */
  map<int, int> dppos; /* line 44 slow_hit_count: 2, fast_hit_count: 2 */
  map<int, int> dpneg; /* line 45 slow_hit_count: 2, fast_hit_count: 2 */
  dppos[0] = 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  dpneg[0] = 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (int(pos.size())); ++i) { /* line 48 slow_hit_count: 22, fast_hit_count: 31 */
    vector<pair<int, int> > new_v; /* line 49 slow_hit_count: 42, fast_hit_count: 60 */
    for (auto j : dppos) { /* line 50 slow_hit_count: 5595, fast_hit_count: 7488 */
      if (dppos.find(j.first + pos[i].second) == dppos.end() || /* line 51 slow_hit_count: 10266, fast_hit_count: 14002 */
          j.second + pos[i].first > dppos[j.first + pos[i].second]) { /* line 52 slow_hit_count: 10266, fast_hit_count: 14002 */
        new_v.push_back({j.first + pos[i].second, j.second + pos[i].first}); /* line 53 slow_hit_count: 2342, fast_hit_count: 2626 */
      } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto j : new_v) { /* line 56 slow_hit_count: 2363, fast_hit_count: 2656 */
      dppos[j.first] = j.second; /* line 57 slow_hit_count: 2342, fast_hit_count: 2626 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> pos_res(100001); /* line 60 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto i : dppos) { /* line 61 slow_hit_count: 884, fast_hit_count: 916 */
    pos_res[i.first] = i.second; /* line 62 slow_hit_count: 883, fast_hit_count: 915 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (0); i < (int(neg.size())); ++i) { /* line 64 slow_hit_count: 60, fast_hit_count: 26 */
    vector<pair<int, int> > new_v; /* line 65 slow_hit_count: 118, fast_hit_count: 50 */
    for (auto j : dpneg) { /* line 66 slow_hit_count: 143532, fast_hit_count: 7477 */
      if (dpneg.find(j.first + neg[i].second) == dpneg.end() || /* line 67 slow_hit_count: 279353, fast_hit_count: 13932 */
          j.second + neg[i].first > dpneg[j.first + neg[i].second]) { /* line 68 slow_hit_count: 279353, fast_hit_count: 13932 */
        new_v.push_back({j.first + neg[i].second, j.second + neg[i].first}); /* line 69 slow_hit_count: 39222, fast_hit_count: 2425 */
      } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto j : new_v) { /* line 72 slow_hit_count: 39281, fast_hit_count: 2450 */
      dpneg[j.first] = j.second; /* line 73 slow_hit_count: 39222, fast_hit_count: 2425 */
    } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> neg_res(100001); /* line 76 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto i : dpneg) { /* line 77 slow_hit_count: 7595, fast_hit_count: 974 */
    neg_res[i.first] = i.second; /* line 78 slow_hit_count: 7594, fast_hit_count: 973 */
  } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  int max_res = res; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (100001); ++i) { /* line 81 slow_hit_count: 100002, fast_hit_count: 100002 */
    if (pos_res[i] != 0 && neg_res[i] != 0) { /* line 82 slow_hit_count: 100001, fast_hit_count: 100001 */
      max_res = max(res + pos_res[i] + neg_res[i], max_res); /* line 83 slow_hit_count: 880, fast_hit_count: 902 */
    } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  cout << (max_res != 0 ? max_res : -1); /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 87 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose and characterize the performance bottlenecks in the given C program, we need to analyze the code and the hit count information provided. Here's how we can approach it:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Over Data Structures**: The hit counts indicate that some lines, particularly those inside nested loops, are executed significantly more during the slow run compared to the fast run. 

2. **Recursive-like Pattern with Maps and Vectors**:
   - **Lines 48-59**: The loop iterates over the `pos` vector, and within it, there's a nested loop iterating over `dppos`. The hit counts suggest that for each element in `pos`, a large number of operations are performed on `dppos`.
   - **Lines 64-75**: Similarly, there's a loop over the `neg` vector, with nested operations on `dpneg`. The hit counts are extremely high here, indicating a performance bottleneck.

3. **Critical Sorting Operations**:
   - **Lines 41 and 43**: Sorting operations on relatively large data structures can be expensive. The difference in hit counts between slow and fast inputs suggests that the sorting might be more frequent or more complex in the slow input.

4. **Large Lookup and Insertion Operations**:
   - **Lines 50-57 and 66-74**: The number of hit counts here is indicative of frequent insertions and lookups in maps (`dppos` and `dpneg`). These operations can be costly if they are executed repeatedly in nested loops.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following natural language performance-characterizing invariants:

1. **Frequent Insertions and Lookups in Maps**:
   - **Invariant**: "If the number of elements with negative adjusted calories is large, leading to frequent insertions and lookups in map structures, the program may slow down significantly."
   - **Explanation**: The primary issue arises from frequent operations on `dpneg` during the processing of fruits with negative `adjusted calories`.

2. **Complex Nested Loop Operations**:
   - **Invariant**: "When the number of fruits with a non-zero adjusted calorie value is high, the nested loop operations involving map updates can lead to performance degradation."
   - **Explanation**: High hit counts in the nested loops lead to repeated calculations and updates, which multiply with the number of such fruits.

3. **Sorting of Large Data Structures**:
   - **Invariant**: "If the lists of fruits to be sorted become large, the sorting operation's complexity can contribute to a slowdown."
   - **Explanation**: Sorting the `pos` and `neg` vectors has significant overhead as their size increases.

4. **High Density of Non-Zero Results in Arrays**:
   - **Invariant**: "When the cumulative effect of positive and negative calorie differences results in many valid `pos_res` and `neg_res` entries, the final combination loop can become a bottleneck."
   - **Explanation**: The loop analyzing combinations of `pos_res` and `neg_res` entries (`lines 81-83`) iterates over a large range, which becomes costly when many entries are non-zero.

### Conclusion

The performance issues stem from a combination of large input sizes relative to the constraints, nested operations on dynamic data structures like maps, and expensive sorting of large vectors. These operations become particularly costly as the number of potential valid fruit combinations increases, leading to exponential growth in computational complexity.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. 

Dima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, <image> , where aj is the taste of the j-th chosen fruit and bj is its calories.

Inna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem — now the happiness of a young couple is in your hands!

Inna loves Dima very much so she wants to make the salad from at least one fruit.

Input

The first line of the input contains two integers n, k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10). The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the fruits' tastes. The third line of the input contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 100) — the fruits' calories. Fruit number i has taste ai and calories bi.

Output

If there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer — the maximum possible sum of the taste values of the chosen fruits.

Examples

Input

3 2
10 8 1
2 7 1


Output

18


Input

5 3
4 4 4 4 4
2 2 2 2 2


Output

-1

Note

In the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition <image> fulfills, that's exactly what Inna wants.

In the second test sample we cannot choose the fruits so as to follow Inna's principle.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Below are the checker functions for the previously derived performance-characterizing invariants. These functions check the conditions at runtime and will print a warning and abort the program if triggered.

```cpp
void check_map_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - frequent map operations detected!" << endl;
        abort();
    }
}

void check_large_data_sorting_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - sorting large data structures!" << endl;
        abort();
    }
}

void check_large_combination_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - high density of valid combinations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Below is the instrumented C++ program with the invariant checks integrated at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_map_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - frequent map operations detected!" << endl;
        abort();
    }
}

void check_large_data_sorting_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - sorting large data structures!" << endl;
        abort();
    }
}

void check_large_combination_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - high density of valid combinations!" << endl;
        abort();
    }
}

struct Sync_stdio {
  Sync_stdio() {
    cin.tie(NULL);
    ios_base::sync_with_stdio(false);
  }
} _sync_stdio;

int main() {
  int n, k;
  cin >> n >> k;
  vector<pair<int, int> > v(n);
  for (int i = 0; i < n; ++i) {
    cin >> v[i].first;
  }
  for (int i = 0; i < n; ++i) {
    cin >> v[i].second;
    v[i].second *= k;
    v[i].second -= v[i].first;
  }
  vector<pair<int, int> > pos;
  vector<pair<int, int> > neg;
  int res = 0;
  for (int i = 0; i < n; ++i) {
    if (v[i].second < 0) {
      v[i].second = -v[i].second;
      pos.push_back(v[i]);
    } else if (v[i].second > 0) {
      neg.push_back(v[i]);
    } else {
      res += v[i].first;
    }
  }

  // Check large data before sorting
  check_large_data_sorting_invariant(pos.size() > 75 || neg.size() > 75);

  sort(pos.begin(), pos.end(),
       [](pair<int, int> x, pair<int, int> y) { return x.second < y.second; });
  sort(neg.begin(), neg.end(),
       [](pair<int, int> x, pair<int, int> y) { return x.second < y.second; });

  map<int, int> dppos;
  map<int, int> dpneg;
  dppos[0] = 0;
  dpneg[0] = 0;

  for (int i = 0; i < (int(pos.size())); ++i) {
    vector<pair<int, int> > new_v;
    for (auto j : dppos) {
      if (dppos.find(j.first + pos[i].second) == dppos.end() ||
          j.second + pos[i].first > dppos[j.first + pos[i].second]) {
        new_v.push_back({j.first + pos[i].second, j.second + pos[i].first});
      }
    }
    for (auto j : new_v) {
      dppos[j.first] = j.second;
    }
  }

  // Check map operations invariant
  check_map_operations_invariant(dppos.size() > 5000);

  vector<int> pos_res(100001);
  for (auto i : dppos) {
    pos_res[i.first] = i.second;
  }
  for (int i = 0; i < (int(neg.size())); ++i) {
    vector<pair<int, int> > new_v;
    for (auto j : dpneg) {
      if (dpneg.find(j.first + neg[i].second) == dpneg.end() ||
          j.second + neg[i].first > dpneg[j.first + neg[i].second]) {
        new_v.push_back({j.first + neg[i].second, j.second + neg[i].first});
      }
    }
    for (auto j : new_v) {
      dpneg[j.first] = j.second;
    }
  }

  // Check map operations invariant
  check_map_operations_invariant(dpneg.size() > 5000);

  vector<int> neg_res(100001);
  for (auto i : dpneg) {
    neg_res[i.first] = i.second;
  }

  int max_res = res;
  int valid_combinations = 0;
  for (int i = 0; i < 100001; ++i) {
    if (pos_res[i] != 0 && neg_res[i] != 0) {
      max_res = max(res + pos_res[i] + neg_res[i], max_res);
      valid_combinations++;
    }
  }

  // Check large combination invariant
  check_large_combination_invariant(valid_combinations > 500);

  cout << (max_res != 0 ? max_res : -1);
}
```

### Comments on Instrumentation

- **Sorting Invariant**: Checks are placed before sorting to ensure that we don't attempt to sort excessively large lists which could degrade performance.
- **Map Operations Invariant**: Checks are placed after map operations to detect if excessive insertions and lookups in the `dppos` and `dpneg` maps become a bottleneck.
- **Combination Invariant**: Checks the number of valid combinations that can be formed, which can indicate a slowdown if too many are processed.

These checks provide a mechanism to help identify conditions under which the program may experience performance bottlenecks.

