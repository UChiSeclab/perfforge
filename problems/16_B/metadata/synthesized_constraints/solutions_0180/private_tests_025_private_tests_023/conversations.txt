system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long int p, a[20][2];
  int n, m, i, j, k, l, t, u, pos, s = 0;
  cin >> p >> n;
  for (i = 0; i < n; i++) cin >> a[i][0] >> a[i][1];
  for (i = 0; i < n - 1; i++) {
    t = a[i][1];
    for (j = i + 1; j < n; j++) {
      if (t < a[j][1]) {
        t = a[j][1];
        u = a[j][0];
        pos = j;
      }
      l = a[i][1];
      m = a[i][0];
      if (t != l) {
        a[i][1] = t;
        a[i][0] = u;
        a[pos][1] = l;
        a[pos][0] = m;
      }
    }
  }
  for (i = 0; i < n; i++) l = 1;
  m = 0;
  k = 0;
  for (i = 0; i < n; i++) {
    for (j = 1; j <= a[i][0]; j++) {
      m += a[i][1] * l;
      s += l;
      if (s == p) {
        k++;
        break;
      }
    }
    if (k > 0) break;
  }
  cout << m;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000000 2
11823018 6
100000000 9


(G.2) Fast Input

1 2
1 9
1 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long int p, a[20][2]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int n, m, i, j, k, l, t, u, pos, s = 0; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> p >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) cin >> a[i][0] >> a[i][1]; /* line 7 slow_hit_count: 3, fast_hit_count: 3 */
  for (i = 0; i < n - 1; i++) { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    t = a[i][1]; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    for (j = i + 1; j < n; j++) { /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
      if (t < a[j][1]) { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
        t = a[j][1]; /* line 12 slow_hit_count: 1, fast_hit_count: 0 */
        u = a[j][0]; /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
        pos = j; /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      l = a[i][1]; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
      m = a[i][0]; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
      if (t != l) { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
        a[i][1] = t; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
        a[i][0] = u; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
        a[pos][1] = l; /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
        a[pos][0] = m; /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < n; i++) l = 1; /* line 26 slow_hit_count: 3, fast_hit_count: 3 */
  m = 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  k = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 29 slow_hit_count: 3, fast_hit_count: 1 */
    for (j = 1; j <= a[i][0]; j++) { /* line 30 slow_hit_count: 111823020, fast_hit_count: 1 */
      m += a[i][1] * l; /* line 31 slow_hit_count: 111823018, fast_hit_count: 1 */
      s += l; /* line 32 slow_hit_count: 111823018, fast_hit_count: 1 */
      if (s == p) { /* line 33 slow_hit_count: 111823018, fast_hit_count: 1 */
        k++; /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
        break; /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (k > 0) break; /* line 38 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  cout << m; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify expensive or inefficient code segments**

From the hit count data, we can identify the following key observations:

1. **Loop at Line 30**: The inner loop `for (j = 1; j <= a[i][0]; j++)` is executed a significantly higher number of times in the slow input compared to the fast input (111,823,020 times vs. 1 time). This is a major contributor to the slowdown as it runs for each matchbox in `a[i][0]`.

2. **Condition at Line 33**: The condition `if (s == p)` is a critical check within the innermost loop. For the slow input, this condition is checked 111,823,018 times, indicating that the loop continues until the sum `s` reaches `p`.

3. **Loop optimization**: The outer loop at Line 29 combined with the inner loop at Line 30 leads to nested iterations that scale poorly with larger values of `a[i][0]`.

**Phase 2: Derive performance-characterizing invariants (natural language)**

Based on the analysis, here are natural language performance-characterizing invariants:

1. **High Count of Matchboxes**:
   - **Description**: "The program experiences a slowdown if the total number of matchboxes (`sum of all ai`) is very large, leading to excessive iterations in the loops."
   - **Explanation**: When the total number of matchboxes from all containers is large, the innermost loop runs excessively, which causes a significant performance degradation.

2. **Large Single Container**:
   - **Description**: "If any single container has a very high number of matchboxes (`ai` is large), and the capacity (`n`) is large, the computation time increases as the program iteratively tries to fill the rucksack."
   - **Explanation**: This is because the loop iteratively adds matches until it reaches the limit `p`, and if `ai` is large, this loop will execute many times.

3. **Unsorted Data Handling**:
   - **Description**: "The initial sorting logic for matchboxes based on the number of matches (`bi`) may not effectively reduce the problem size, leading to redundant iterations."
   - **Explanation**: The current sorting logic does not fully optimize the order of processing, leading to potential inefficiencies when handling inputs with large `ai` values.

4. **Near-Max Capacity Utilization**:
   - **Description**: "Performance may degrade when the number of matchboxes (`n`) approaches its maximum limit and the matchboxes are not sorted effectively for maximum fill in each iteration."
   - **Explanation**: The loop attempts to fill up the rucksack without prioritizing containers that maximize the match count effectively, resulting in many operations without progress.

These invariants help to identify conditions under which the execution may become inefficient, particularly when dealing with large values for `ai` or when the containers are not optimally sorted for maximum match extraction. Adjusting the program to better handle these cases, perhaps by improving the sort or optimizing loop conditions, could improve performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the runtime checks implemented as C++ code based on the previously derived natural language invariants:

1. **High Count of Matchboxes**:
   ```cpp
   void check_total_matchboxes_invariant(long totalMatchboxes) {
       if (totalMatchboxes > 1e9) {  // Arbitrary large threshold for total matchboxes
           cerr << "Warning: Performance bottleneck condition triggered - total matchboxes too large!" << endl;
           abort();
       }
   }
   ```

2. **Large Single Container**:
   ```cpp
   void check_single_container_invariant(long maxMatchboxesInContainer, long numContainers) {
       if (maxMatchboxesInContainer > 1e8 && numContainers > 1e7) {  // Thresholds considering constraints
           cerr << "Warning: Performance bottleneck condition triggered - single container too large!" << endl;
           abort();
       }
   }
   ```

3. **Unsorted Data Handling**:
   This invariant relates more to code logic than a direct violation, so no direct runtime check is added. Instead, careful management of sorting checks at key points can be suggested.

4. **Near-Max Capacity Utilization**:
   ```cpp
   void check_capacity_invariant(long currentCapacity, long maxCapacity) {
       if (currentCapacity >= maxCapacity * 0.95) {  // Near-max capacity
           cerr << "Warning: Performance bottleneck condition triggered - near-max capacity utilization!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checks into the Original Program

Here is the original program with the integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_total_matchboxes_invariant(long totalMatchboxes) {
    if (totalMatchboxes > 1e9) {  // Arbitrary large threshold for total matchboxes
        cerr << "Warning: Performance bottleneck condition triggered - total matchboxes too large!" << endl;
        abort();
    }
}

void check_single_container_invariant(long maxMatchboxesInContainer, long numContainers) {
    if (maxMatchboxesInContainer > 1e8 && numContainers > 1e7) {  // Thresholds considering constraints
        cerr << "Warning: Performance bottleneck condition triggered - single container too large!" << endl;
        abort();
    }
}

void check_capacity_invariant(long currentCapacity, long maxCapacity) {
    if (currentCapacity >= maxCapacity * 0.95) {  // Near-max capacity
        cerr << "Warning: Performance bottleneck condition triggered - near-max capacity utilization!" << endl;
        abort();
    }
}

int main() {
    long int p, a[20][2];
    int n, m, i, j, k, l, t, u, pos, s = 0;
    cin >> p >> n;
    long totalMatchboxes = 0;
    long maxMatchboxesInContainer = 0;

    for (i = 0; i < n; i++) {
        cin >> a[i][0] >> a[i][1];
        totalMatchboxes += a[i][0];
        if (a[i][0] > maxMatchboxesInContainer) maxMatchboxesInContainer = a[i][0];
    }

    // Invariant checks after reading input
    check_total_matchboxes_invariant(totalMatchboxes);
    check_single_container_invariant(maxMatchboxesInContainer, n);

    for (i = 0; i < n - 1; i++) {
        t = a[i][1];
        for (j = i + 1; j < n; j++) {
            if (t < a[j][1]) {
                t = a[j][1];
                u = a[j][0];
                pos = j;
            }
            l = a[i][1];
            m = a[i][0];
            if (t != l) {
                a[i][1] = t;
                a[i][0] = u;
                a[pos][1] = l;
                a[pos][0] = m;
            }
        }
    }
    for (i = 0; i < n; i++) l = 1;
    m = 0;
    k = 0;
    for (i = 0; i < n; i++) {
        for (j = 1; j <= a[i][0]; j++) {
            m += a[i][1] * l;
            s += l;
            if (s == p) {
                k++;
                break;
            }
        }
        if (k > 0) break;
    }

    // Invariant check before output
    check_capacity_invariant(s, p);

    cout << m;
    return 0;
}
```

**Explanation**:
- **Check placement**: The checks are strategically placed after input reading and before the major computation sections to avoid adding overhead within tight loops.
- **Checker functions**: Each invariant is translated into a separate checker function, and they are called with the appropriate parameters derived from the input or computation states.
- **Abort on detection**: Each checker calls `abort()` when a bottleneck condition is detected, making it useful for debugging or fuzz testing.

