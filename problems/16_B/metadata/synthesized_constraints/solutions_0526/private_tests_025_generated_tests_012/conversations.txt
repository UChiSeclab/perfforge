system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct warehouse {
  int matchbox;
  int match;
};
int main() {
  int n, m, i = 0, j, sum, begin = 1;
  cin >> n >> m;
  warehouse s[20], tmp;
  do {
    cin >> s[i].matchbox >> s[i].match;
    i++;
  } while (i < m);
  for (i = 0; i < m - 1; i++)
    for (j = i + 1; j < m; j++)
      if (s[i].match < s[j].match) {
        tmp = s[i];
        s[i] = s[j];
        s[j] = tmp;
      };
  for (i = 0, begin, sum = 0; i < m; i++) {
    for (j = 0; j < s[i].matchbox; j++)
      if (begin <= n) {
        begin++;
        sum += s[i].match;
      }
  }
  cout << sum << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000000 2
11823018 6
100000000 9


(G.2) Fast Input

6 2
3 9
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct warehouse { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int matchbox; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int match; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, i = 0, j, sum, begin = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  warehouse s[20], tmp; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  do { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> s[i].matchbox >> s[i].match; /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
    i++; /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  } while (i < m); /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
  for (i = 0; i < m - 1; i++) /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    for (j = i + 1; j < m; j++) /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
      if (s[i].match < s[j].match) { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
        tmp = s[i]; /* line 18 slow_hit_count: 1, fast_hit_count: 0 */
        s[i] = s[j]; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
        s[j] = tmp; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
      }; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0, begin, sum = 0; i < m; i++) { /* line 22 slow_hit_count: 3, fast_hit_count: 3 */
    for (j = 0; j < s[i].matchbox; j++) /* line 23 slow_hit_count: 111823020, fast_hit_count: 7 */
      if (begin <= n) { /* line 24 slow_hit_count: 111823018, fast_hit_count: 5 */
        begin++; /* line 25 slow_hit_count: 111823018, fast_hit_count: 5 */
        sum += s[i].match; /* line 26 slow_hit_count: 111823018, fast_hit_count: 5 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cout << sum << endl; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, we need to analyze the code and the hit count data for both slow and fast inputs. Here's the analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The loop starting at line 23 has a significant discrepancy in hit counts between the slow and fast inputs: 111,823,020 hits for the slow input vs. 7 hits for the fast input.
   - Lines 24, 25, and 26 within the loop are executed 111,823,018 times for the slow input compared to 5 times for the fast input.

2. **Code Analysis**:
   - The loop at line 23 iterates over the number of matchboxes in each container (`s[i].matchbox`). This loop's body is executed up to `n` times.
   - The large number of iterations in the slow input is primarily due to the large `n` value combined with the large `ai` values (matchboxes) in the containers.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **High Number of Iterations in the Inner Loop**:
   - **Natural Language Description**: "If the total number of matchboxes across containers is large, especially when `n` is close to its upper limit and containers have a high number of matchboxes, the program may experience significant slowdowns due to extensive iterations."
   - **Explanation**: The inner loop iterates over the matchboxes in each container, and if the sum of matchboxes (`ai`) across containers is large, it can result in a large number of iterations, particularly if `n` is also large.

2. **Sorting Overhead with Large `n`**:
   - **Natural Language Description**: "When `n` approaches its maximum value, the sorting of containers by match count per box becomes more critical, as it determines the efficiency of selecting the maximum matches in the large iteration space."
   - **Explanation**: Sorting the containers primarily affects the efficiency of how quickly the maximum matches can be accumulated. With large `n`, the sorting ensures an optimal selection strategy but could become a bottleneck if not handled efficiently.

3. **Limited Container Capacity**:
   - **Natural Language Description**: "If a few containers with high match counts have significantly more matchboxes than others, the total number of iterations in the loop will increase, potentially leading to slowdowns."
   - **Explanation**: Disproportionate numbers of matchboxes in some containers can lead to imbalanced operations, where the loop iterates excessively over these containers.

These invariants collectively characterize scenarios where the program's performance may degrade, especially concerning input patterns and constraints. They emphasize conditions involving large `n` values and imbalanced matchbox distributions that align with the program logic and observed slow behavior.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language performance invariants, here are the C++ code snippets that check for these conditions at runtime:

1. **High Number of Iterations in the Inner Loop**:
   ```cpp
   void check_iteration_invariant(int n, int totalMatchboxes) {
       if (totalMatchboxes > 100000000 && n > 100000000) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to high total matchbox count and large n." << endl;
           abort();
       }
   }
   ```

2. **Sorting Overhead with Large `n`**:
   ```cpp
   void check_sort_invariant(int n, int m) {
       if (n > 100000000 && m > 10) {
           cerr << "Warning: Performance bottleneck condition triggered - potential sorting overhead with large n and moderate m." << endl;
           abort();
       }
   }
   ```

3. **Limited Container Capacity**:
   ```cpp
   void check_container_capacity_invariant(int n, int maxMatchboxes) {
       if (maxMatchboxes > 50000000 && n > 100000000) {
           cerr << "Warning: Performance bottleneck condition triggered - high number of matchboxes in a single container." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Below is the original C++ code with integrated performance checkers. Each checker is placed at an effective point in the control flow to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Performance checker functions
void check_iteration_invariant(int n, int totalMatchboxes) {
    if (totalMatchboxes > 100000000 && n > 100000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to high total matchbox count and large n." << endl;
        abort();
    }
}

void check_sort_invariant(int n, int m) {
    if (n > 100000000 && m > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - potential sorting overhead with large n and moderate m." << endl;
        abort();
    }
}

void check_container_capacity_invariant(int n, int maxMatchboxes) {
    if (maxMatchboxes > 50000000 && n > 100000000) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of matchboxes in a single container." << endl;
        abort();
    }
}

struct warehouse {
    int matchbox;
    int match;
};

int main() {
    int n, m, i = 0, j, sum, begin = 1;
    cin >> n >> m;
    warehouse s[20], tmp;

    int totalMatchboxes = 0;
    int maxMatchboxes = 0;

    // Input reading and invariant check
    do {
        cin >> s[i].matchbox >> s[i].match;
        totalMatchboxes += s[i].matchbox;
        maxMatchboxes = max(maxMatchboxes, s[i].matchbox);
        i++;
    } while (i < m);

    // Check for potential bottlenecks before sorting
    check_iteration_invariant(n, totalMatchboxes);
    check_container_capacity_invariant(n, maxMatchboxes);

    for (i = 0; i < m - 1; i++) {
        for (j = i + 1; j < m; j++) {
            if (s[i].match < s[j].match) {
                tmp = s[i];
                s[i] = s[j];
                s[j] = tmp;
            }
        }
    }

    // Check for sorting bottleneck
    check_sort_invariant(n, m);

    for (i = 0, begin, sum = 0; i < m; i++) {
        for (j = 0; j < s[i].matchbox; j++) {
            if (begin <= n) {
                begin++;
                sum += s[i].match;
            }
        }
    }
    cout << sum << endl;
    return 0;
}
```

**Explanation of Placement**:
- The **iteration invariant check** is placed after reading the input to assess the total matchboxes that might lead to excessive iterations.
- The **sort invariant check** is placed before sorting to ensure that potential overhead is flagged before execution.
- The **container capacity check** is also placed after input reading, ensuring it detects conditions with high matchbox counts in a single container.

