system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, m, sum(0), summ(0);
  cin >> n >> m;
  int c[m][2];
  for (int i = 0; i < m; i++) {
    cin >> c[i][0];
    cin >> c[i][1];
  }
  for (int i = 0; i < m; i++) {
    for (int j = i; j < m; j++) {
      if (c[j][1] > c[i][1]) {
        swap(c[j], c[i]);
      }
    }
    summ += c[i][0];
  }
  if (summ >= n) {
    int k(0);
    while (n) {
      while (c[k][0] && n) {
        sum += c[k][1];
        c[k][0] -= 1;
        n--;
      }
      k++;
    }
  } else {
    int k(0);
    while (summ) {
      while (c[k][0] && summ) {
        sum += c[k][1];
        c[k][0] -= 1;
        summ--;
      }
      k++;
    }
  }
  cout << sum;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10000000 15
111 5
914124 3
3 9
177790 1
2352 3
32138 9
104477 1
1223 4
18 6
6655580 4
57643 10
94309 2
37 1
227002 10
1733193 7


(G.2) Fast Input

10000000 15
111 5
914124 3
1 9
177790 1
2352 3
32138 9
104477 1
1223 4
18 6
6655580 4
57643 10
94309 2
37 1
227002 10
1733193 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, sum(0), summ(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int c[m][2]; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 7 slow_hit_count: 16, fast_hit_count: 16 */
    cin >> c[i][0]; /* line 8 slow_hit_count: 15, fast_hit_count: 15 */
    cin >> c[i][1]; /* line 9 slow_hit_count: 15, fast_hit_count: 15 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 11 slow_hit_count: 16, fast_hit_count: 16 */
    for (int j = i; j < m; j++) { /* line 12 slow_hit_count: 135, fast_hit_count: 135 */
      if (c[j][1] > c[i][1]) { /* line 13 slow_hit_count: 120, fast_hit_count: 120 */
        swap(c[j], c[i]); /* line 14 slow_hit_count: 34, fast_hit_count: 34 */
      } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    summ += c[i][0]; /* line 17 slow_hit_count: 15, fast_hit_count: 15 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (summ >= n) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    int k(0); /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
    while (n) { /* line 21 slow_hit_count: 16, fast_hit_count: 0 */
      while (c[k][0] && n) { /* line 22 slow_hit_count: 10000015, fast_hit_count: 0 */
        sum += c[k][1]; /* line 23 slow_hit_count: 10000000, fast_hit_count: 0 */
        c[k][0] -= 1; /* line 24 slow_hit_count: 10000000, fast_hit_count: 0 */
        n--; /* line 25 slow_hit_count: 10000000, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      k++; /* line 27 slow_hit_count: 15, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    int k(0); /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
    while (summ) { /* line 31 slow_hit_count: 0, fast_hit_count: 16 */
      while (c[k][0] && summ) { /* line 32 slow_hit_count: 0, fast_hit_count: 10000013 */
        sum += c[k][1]; /* line 33 slow_hit_count: 0, fast_hit_count: 9999998 */
        c[k][0] -= 1; /* line 34 slow_hit_count: 0, fast_hit_count: 9999998 */
        summ--; /* line 35 slow_hit_count: 0, fast_hit_count: 9999998 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      k++; /* line 37 slow_hit_count: 0, fast_hit_count: 15 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  cout << sum; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information, the primary bottleneck appears to occur within the conditional block beginning with `if (summ >= n)`. Specifically, the nested while-loop starting at line 21:

- Line 21: `while (n)` and its subsequent lines (22-25) are executed 10,000,015 times during the slow input run, compared to zero times for the fast input.
- The high count on these lines suggests that the loop iterates extensively, reducing the `n` variable in each iteration until it becomes zero, which is indicative of the root cause for the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

#### Natural Language Performance Invariants

1. **Container Matching Capacity Exceeded**:
   - **Description**: When the total number of matchboxes in all containers (`summ`) is greater than or equal to the number of matchboxes the burglar can carry (`n`), the program enters a loop that iterates over each matchbox to decrement the `n` value one by one. This can lead to inefficient execution if `n` is large.
   - **Invariant**: "If the combined capacity of matchboxes (summ) exceeds or equals the carrying capacity `n`, and `n` is significantly large, excessive iterations will occur, causing slow performance."

2. **High Matchbox Count Handling**:
   - **Description**: If the burglar’s rucksack capacity (`n`) is large relative to the number of available matchboxes distributed across containers, and the number of matchboxes with maximum matches per box is not significantly higher than others, the sorting and selection may become inefficient due to the extensive iteration over matchboxes.
   - **Invariant**: "When the available containers have a high number of matchboxes with similar match counts, reaching the optimal selection requires iterating many times over potentially large portions of these boxes, slowing down the solution."

3. **Suboptimal Sorting for Large `n`**:
   - **Description**: The sorting section of the code does not change between fast and slow runs but plays a role in preparing the dataset for iteration. However, if the selection process must iterate over a large number of sorted matchboxes due to high `n`, the initial sorting contributes to the inefficiency.
   - **Invariant**: "If the final few containers have a disproportionately large number of matchboxes, even after optimal sorting, the program will slow significantly due to the large number of iterations required in handling each matchbox individually."

These invariants highlight scenarios where the given code may encounter performance issues, primarily focusing on high iteration counts due to a large `n` relative to the setup of matchboxes, indicating potential inefficiencies in handling large-scale selection problems.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below, I will provide C++ checker code that corresponds to the performance-characterizing invariants derived earlier.

#### Checker Code for Each Invariant

1. **Container Matching Capacity Exceeded**:
   ```cpp
   void check_capacity_invariant(int summ, int n) {
       if (summ >= n && n > 1000000) { // Assuming a large threshold for n
           cerr << "Warning: Capacity invariant triggered - high matchbox capacity handling detected!" << endl;
           abort();
       }
   }
   ```

2. **High Matchbox Count Handling**:
   ```cpp
   void check_matchbox_handling_invariant(int m, int* b) {
       int similarMatchCount = 0;
       for (int i = 0; i < m - 1; i++) {
           if (b[i] == b[i + 1]) { // Simple condition for detecting similar match counts
               similarMatchCount++;
           }
       }
       if (similarMatchCount > m / 2) { // If more than half have similar counts
           cerr << "Warning: Matchbox handling invariant triggered - similar match counts detected!" << endl;
           abort();
       }
   }
   ```

3. **Suboptimal Sorting for Large `n`**:
   ```cpp
   void check_sorting_invariant(int m, int* a) {
       int largeContainerThreshold = 100000; // Arbitrary threshold for large container
       for (int i = 0; i < m; i++) {
           if (a[i] > largeContainerThreshold) {
               cerr << "Warning: Sorting invariant triggered - large container size detected!" << endl;
               abort();
           }
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented program with the checker functions integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_capacity_invariant(int summ, int n) {
    if (summ >= n && n > 1000000) { // Assuming a large threshold for n
        cerr << "Warning: Capacity invariant triggered - high matchbox capacity handling detected!" << endl;
        abort();
    }
}

void check_matchbox_handling_invariant(int m, int* b) {
    int similarMatchCount = 0;
    for (int i = 0; i < m - 1; i++) {
        if (b[i] == b[i + 1]) { // Simple condition for detecting similar match counts
            similarMatchCount++;
        }
    }
    if (similarMatchCount > m / 2) { // If more than half have similar counts
        cerr << "Warning: Matchbox handling invariant triggered - similar match counts detected!" << endl;
        abort();
    }
}

void check_sorting_invariant(int m, int* a) {
    int largeContainerThreshold = 100000; // Arbitrary threshold for large container
    for (int i = 0; i < m; i++) {
        if (a[i] > largeContainerThreshold) {
            cerr << "Warning: Sorting invariant triggered - large container size detected!" << endl;
            abort();
        }
    }
}

int main() {
    int n, m, sum(0), summ(0);
    cin >> n >> m;
    int c[m][2];
    for (int i = 0; i < m; i++) {
        cin >> c[i][0];
        cin >> c[i][1];
    }

    // Insert checkers after input reading
    check_capacity_invariant(summ, n);
    int b[m];
    for (int i = 0; i < m; i++) b[i] = c[i][1];
    check_matchbox_handling_invariant(m, b);
    int a[m];
    for (int i = 0; i < m; i++) a[i] = c[i][0];
    check_sorting_invariant(m, a);

    for (int i = 0; i < m; i++) {
        for (int j = i; j < m; j++) {
            if (c[j][1] > c[i][1]) {
                swap(c[j], c[i]);
            }
        }
        summ += c[i][0];
    }
    if (summ >= n) {
        int k(0);
        while (n) {
            while (c[k][0] && n) {
                sum += c[k][1];
                c[k][0] -= 1;
                n--;
            }
            k++;
        }
    } else {
        int k(0);
        while (summ) {
            while (c[k][0] && summ) {
                sum += c[k][1];
                c[k][0] -= 1;
                summ--;
            }
            k++;
        }
    }
    cout << sum;
    return 0;
}
```

### Explanation of Integrations

- **After Input Reading**: I placed the invariant checks after reading the input to ensure they are evaluated based on the actual data.
- **Checker Functions**: Implemented as separate functions to keep the main logic clean and modular.
- **Thresholds**: Thresholds are arbitrary but chosen to represent potential performance issues typical to the problem's constraints.

