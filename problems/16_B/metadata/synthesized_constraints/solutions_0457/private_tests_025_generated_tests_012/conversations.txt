system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) {
  return (a.second < b.second);
}
int main() {
  int i, j, k;
  int n, m, a = 0, b, c, d;
  int count = 0;
  int x, y, z;
  vector<pair<int, int> > data;
  cin >> n >> m;
  for (i = 0; i < m; i++) {
    cin >> x >> y;
    data.push_back(make_pair(x, y));
  }
  sort(data.begin(), data.end(), sortbysec);
  reverse(data.begin(), data.end());
  for (j = 0; j < m; j++) {
    while (data[j].first--) {
      if (count < n) {
        a += data[j].second;
        count++;
      } else
        break;
    }
  }
  cout << a;
  data.clear();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000000 2
11823018 6
100000000 9


(G.2) Fast Input

6 2
3 9
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) { /* line 3 slow_hit_count: 2, fast_hit_count: 1 */
  return (a.second < b.second); /* line 4 slow_hit_count: 2, fast_hit_count: 1 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, k; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int n, m, a = 0, b, c, d; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int count = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int x, y, z; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<int, int> > data; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < m; i++) { /* line 13 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> x >> y; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
    data.push_back(make_pair(x, y)); /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  sort(data.begin(), data.end(), sortbysec); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(data.begin(), data.end()); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (j = 0; j < m; j++) { /* line 19 slow_hit_count: 3, fast_hit_count: 3 */
    while (data[j].first--) { /* line 20 slow_hit_count: 111823020, fast_hit_count: 7 */
      if (count < n) { /* line 21 slow_hit_count: 111823018, fast_hit_count: 5 */
        a += data[j].second; /* line 22 slow_hit_count: 111823018, fast_hit_count: 5 */
        count++; /* line 23 slow_hit_count: 111823018, fast_hit_count: 5 */
      } else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << a; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  data.clear(); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit count information, the following observations can be made:

1. **Line 20 (`while (data[j].first--)`)**: This line shows a significant difference in hit counts between the slow input (111,823,020 hits) and the fast input (7 hits). This indicates that the loop runs many more times for the slow input.

2. **Lines 21-23 (`if` block inside the while loop)**: These lines also have a high hit count for the slow input, matching the hit count of the `while` loop. This suggests that the condition `count < n` is true for a large number of iterations and contributes to the accumulation of the `a` variable.

The expensive operation seems to be the repeated decrement of `data[j].first` in the `while` loop, which is iterating over every matchbox for each container before checking if the rucksack is full (`count < n`).

### Phase 2: Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant: High Matchbox Count Per Container**
   - **Natural Language Description**: "When a container has a large number of matchboxes, the `while` loop iterates excessively, potentially leading to slow performance. The slowdown is especially pronounced when the total number of matchboxes significantly exceeds the capacity n of the rucksack."
   - **Suggested Condition**: If the sum of all `ai` (matchboxes in each container) is much larger than `n`, the loop will iterate excessively.

2. **Invariant: Large n Compared to Total Matchboxes**
   - **Natural Language Description**: "If the rucksack capacity `n` is significantly larger than the total number of matchboxes across all containers, the loop may continue processing until `n` is reached, resulting in unnecessary iterations."
   - **Suggested Condition**: If `n` is close to its upper constraint (e.g., `n > 10^8`) and exceeds the sum of all `ai`, performance degradation may occur.

3. **Invariant: Loop Execution Based on Matchbox Distribution**
   - **Natural Language Description**: "When the distribution of matches per matchbox is such that one or more containers have a disproportionate number of matchboxes, the loop processing time increases due to repeated iterations over these containers."
   - **Suggested Condition**: If any single `ai` is very large compared to the sum of all other `ai`, the loop may spend an excessive amount of time processing that single container.

These invariants help to identify potential slowdowns when the input configurations lead to excessive iterations of the loop due to the arrangement and number of matchboxes per container relative to the rucksack capacity.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the checker functions based on the performance invariants identified earlier:

```cpp
void check_high_matchbox_count(const vector<pair<int, int>>& data, int n) {
    int total_matchboxes = 0;
    for (const auto& container : data) {
        total_matchboxes += container.first;
    }
    if (total_matchboxes > 10 * n) { // Example threshold
        cerr << "Warning: High matchbox count per container may lead to excessive iterations!" << endl;
        abort();
    }
}

void check_large_n_compared_to_matchboxes(int total_matchboxes, int n) {
    if (n > total_matchboxes) {
        cerr << "Warning: Rucksack capacity n is significantly larger than total matchboxes!" << endl;
        abort();
    }
}

void check_uneven_distribution(const vector<pair<int, int>>& data) {
    int total_matchboxes = 0;
    for (const auto& container : data) {
        total_matchboxes += container.first;
    }
    for (const auto& container : data) {
        if (container.first > 0.75 * total_matchboxes) { // Example threshold: one container has more than 75% of matchboxes
            cerr << "Warning: Single container dominates matchbox distribution!" << endl;
            abort();
        }
    }
}
```

### Phase 4: Integrating Checker Functions into the Original C++ Program

Here is how you can integrate the checker functions with the existing C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions based on performance-characterizing invariants
void check_high_matchbox_count(const vector<pair<int, int>>& data, int n) {
    int total_matchboxes = 0;
    for (const auto& container : data) {
        total_matchboxes += container.first;
    }
    if (total_matchboxes > 10 * n) { // Example threshold
        cerr << "Warning: High matchbox count per container may lead to excessive iterations!" << endl;
        abort();
    }
}

void check_large_n_compared_to_matchboxes(int total_matchboxes, int n) {
    if (n > total_matchboxes) {
        cerr << "Warning: Rucksack capacity n is significantly larger than total matchboxes!" << endl;
        abort();
    }
}

void check_uneven_distribution(const vector<pair<int, int>>& data) {
    int total_matchboxes = 0;
    for (const auto& container : data) {
        total_matchboxes += container.first;
    }
    for (const auto& container : data) {
        if (container.first > 0.75 * total_matchboxes) { // Example threshold
            cerr << "Warning: Single container dominates matchbox distribution!" << endl;
            abort();
        }
    }
}

int main() {
    int i, j, k;
    int n, m, a = 0, b, c, d;
    int count = 0;
    int x, y, z;
    vector<pair<int, int> > data;
    cin >> n >> m;
    for (i = 0; i < m; i++) {
        cin >> x >> y;
        data.push_back(make_pair(x, y));
    }

    // Insert checker functions after reading input data
    check_high_matchbox_count(data, n);

    int total_matchboxes = 0;
    for (const auto& container : data) {
        total_matchboxes += container.first;
    }
    
    check_large_n_compared_to_matchboxes(total_matchboxes, n);
    check_uneven_distribution(data);

    sort(data.begin(), data.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
        return (a.second < b.second);
    });
    reverse(data.begin(), data.end());
    for (j = 0; j < m; j++) {
        while (data[j].first--) {
            if (count < n) {
                a += data[j].second;
                count++;
            } else
                break;
        }
    }
    cout << a;
    data.clear();
    return 0;
}
```

### Explanation

- **`check_high_matchbox_count`**: This function checks if the total number of matchboxes is excessively large relative to `n`, which could indicate that the loop will iterate excessively.
  
- **`check_large_n_compared_to_matchboxes`**: This function checks if the rucksack capacity `n` is too large compared to the total number of matchboxes, which may lead to unnecessary iterations.

- **`check_uneven_distribution`**: This function checks if any single container has a disproportionate number of matchboxes, which might cause the loop to spend excessive time processing that container.

Each check is inserted immediately after reading and processing the input data, ensuring that the conditions are verified before entering the main computation loop. This placement avoids introducing performance overhead in the critical loops themselves.

