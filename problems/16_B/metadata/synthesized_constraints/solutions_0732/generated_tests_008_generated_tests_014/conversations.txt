system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m, a[10001], b[10001], ans = 0;
int main() {
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    cin >> a[i] >> b[i];
  }
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < m; j++) {
      if (b[i] > b[j]) {
        swap(a[i], a[j]);
        swap(b[i], b[j]);
      }
    }
  }
  for (int i = 0;; i++) {
    if (a[i] >= n) {
      ans += n * b[i];
      break;
    } else {
      ans += b[i] * a[i];
      n -= a[i];
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10000000 15
111 5
914124 3
1 9
177790 1
2352 3
32138 9
104477 1
1223 4
18 6
6655580 4
57643 10
94309 2
37 1
227002 10
1733193 7


(G.2) Fast Input

7 1
10 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, a[10001], b[10001], ans = 0; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 6 slow_hit_count: 16, fast_hit_count: 2 */
    cin >> a[i] >> b[i]; /* line 7 slow_hit_count: 15, fast_hit_count: 1 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 9 slow_hit_count: 16, fast_hit_count: 2 */
    for (int j = 0; j < m; j++) { /* line 10 slow_hit_count: 240, fast_hit_count: 2 */
      if (b[i] > b[j]) { /* line 11 slow_hit_count: 225, fast_hit_count: 1 */
        swap(a[i], a[j]); /* line 12 slow_hit_count: 38, fast_hit_count: 0 */
        swap(b[i], b[j]); /* line 13 slow_hit_count: 38, fast_hit_count: 0 */
      } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0;; i++) { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    if (a[i] >= n) { /* line 18 slow_hit_count: 10009, fast_hit_count: 1 */
      ans += n * b[i]; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      ans += b[i] * a[i]; /* line 22 slow_hit_count: 10008, fast_hit_count: 0 */
      n -= a[i]; /* line 23 slow_hit_count: 10008, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program, we will focus on the provided slow and fast input scenarios, along with their line-level hit counts. We'll then derive performance-characterizing invariants that can help identify conditions under which the program's performance degrades.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Sorting for Maximum Matches (Lines 9-15):** 
   - This section of the code involves a naive sorting mechanism using nested loops (`for (int i = 0; i < m; i++)` and `for (int j = 0; j < m; j++)`) to sort the matchboxes based on the number of matches each can provide. The slow input shows 240 hits on line 10 and 225 hits on line 11, indicating significant time spent here. The sorting is inefficient due to its O(m^2) complexity, which is not problematic for small `m`, but may not scale well with more complex operations or larger `m`.

2. **Selecting Matchboxes (Lines 17-25):**
   - The loop iterates over matchboxes until a condition is met (`a[i] >= n`). For the slow input, line 18 is hit 10009 times, which indicates that the selection loop runs many times because it attempts to fill the rucksack optimally, considering the matchboxes in sorted order. This linear traversal isn't inherently slow for the given constraints (`m` is small), but it's compounded by the repeated operations in the sorting phase.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks, here are performance-characterizing invariants in natural language:

1. **Naive Sorting Limitations:**
   - **Invariant:** "If the number of matchboxes `m` is significant, the naive sorting mechanism can lead to slowdowns because of its quadratic time complexity. This is especially true when `m` approaches its upper constraint, and sorting is not optimized."
   - **Implication:** Use more efficient sorting algorithms or pre-processing to reduce repeated comparisons.

2. **High Iteration Count in Matchbox Selection:**
   - **Invariant:** "The selection phase can become inefficient if the matchboxes are not optimally sorted by match count, causing many iterations. The loop may run for many steps if multiple matchboxes need to be considered before reaching the capacity of the burglar's rucksack."
   - **Implication:** Ensure that the sorting is correctly optimized so that the most valuable matchboxes are considered first, minimizing unnecessary iterations.

3. **Handling Large `n` with Limited `m`:**
   - **Invariant:** "When `n` is large relative to `m`, the program can appear inefficient as it tries to fill the rucksack optimally, but the algorithm's simplicity may cause it to over-process due to lack of early stopping or better decision structuring."
   - **Implication:** Introduce more intelligent stopping conditions or loop optimizations to handle large `n` scenarios more gracefully.

These performance-characterizing invariants provide insights into potential slowdowns and suggest structural improvements to the algorithm that could mitigate inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ checker code snippets for each invariant derived previously:

1. **Naive Sorting Limitations:**

```cpp
void check_sorting_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sorting_invariant triggered - inefficient sorting for significant m" << endl;
        abort();
    }
}

// Usage: Check before the sorting loop
check_sorting_invariant(m > 10); // Arbitrary threshold, as sorting with m close to 20 might indicate inefficiency
```

2. **High Iteration Count in Matchbox Selection:**

```cpp
void check_selection_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: selection_invariant triggered - inefficient matchbox selection" << endl;
        abort();
    }
}

// Usage: Check after reading inputs and before the selection loop
check_selection_invariant(n > 1e7 && m > 5); // Large n with significant m could lead to inefficiency
```

3. **Handling Large `n` with Limited `m`:**

```cpp
void check_large_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: large_n_invariant triggered - large n with limited m causing inefficiency" << endl;
        abort();
    }
}

// Usage: Check immediately after input
check_large_n_invariant(n > 1e7 && m < 5); // Large n with small m could still trigger inefficiencies
```

### Phase 4: Integrating Checker Code into the Original Program

Here is the instrumented C++ code with the checkers from Phase 3 integrated at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m, a[10001], b[10001], ans = 0;

void check_sorting_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sorting_invariant triggered - inefficient sorting for significant m" << endl;
        abort();
    }
}

void check_selection_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: selection_invariant triggered - inefficient matchbox selection" << endl;
        abort();
    }
}

void check_large_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: large_n_invariant triggered - large n with limited m causing inefficiency" << endl;
        abort();
    }
}

int main() {
    cin >> n >> m;

    // Insert check for large n with limited m
    check_large_n_invariant(n > 1e7 && m < 5);

    for (int i = 0; i < m; i++) {
        cin >> a[i] >> b[i];
    }

    // Insert sorting invariant check
    check_sorting_invariant(m > 10);

    // Sort matchboxes based on matches per box
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < m; j++) {
            if (b[i] > b[j]) {
                swap(a[i], a[j]);
                swap(b[i], b[j]);
            }
        }
    }

    // Insert selection invariant check
    check_selection_invariant(n > 1e7 && m > 5);

    for (int i = 0;; i++) {
        if (a[i] >= n) {
            ans += n * b[i];
            break;
        } else {
            ans += b[i] * a[i];
            n -= a[i];
        }
    }
    cout << ans;
}
```

### Explanation:

- **Sorting Invariant Check:** Placed before the sorting loop to ensure that the program doesn't proceed with inefficient sorting for large `m`.
- **Selection Invariant Check:** Added before the matchbox selection loop to ensure the selection process isn't inefficient for high `n` values.
- **Large `n` Invariant Check:** Placed right after reading input to catch scenarios where `n` is significantly large with a small `m` that might not optimize the selection.

These checks help identify potential performance bottlenecks without adding overhead inside tight loops, aiding in the detection of inefficiencies during execution.

