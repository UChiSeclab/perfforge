system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, m, k = 0, l = 0;
  vector<vector<int> > x;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int w, y;
    vector<int> tmp;
    cin >> w >> y;
    tmp.push_back(y);
    tmp.push_back(w);
    x.push_back(tmp);
  }
  sort(x.begin(), x.end());
  for (int i = m - 1; i >= 0; i--) {
    while (k < n && x[i][1] > 0) {
      k += 1;
      x[i][1] -= 1;
      l += x[i][0];
    }
  }
  cout << l;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000000 2
11823018 6
100000000 9


(G.2) Fast Input

1 2
1 9
1 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, k = 0, l = 0; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<int> > x; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> n >> m; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 7 slow_hit_count: 3, fast_hit_count: 3 */
    int w, y; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    vector<int> tmp; /* line 9 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> w >> y; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
    tmp.push_back(y); /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
    tmp.push_back(w); /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
    x.push_back(tmp); /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  sort(x.begin(), x.end()); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = m - 1; i >= 0; i--) { /* line 16 slow_hit_count: 3, fast_hit_count: 3 */
    while (k < n && x[i][1] > 0) { /* line 17 slow_hit_count: 111823020, fast_hit_count: 3 */
      k += 1; /* line 18 slow_hit_count: 111823018, fast_hit_count: 1 */
      x[i][1] -= 1; /* line 19 slow_hit_count: 111823018, fast_hit_count: 1 */
      l += x[i][0]; /* line 20 slow_hit_count: 111823018, fast_hit_count: 1 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cout << l; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided, the main bottleneck in the slow input is related to the nested loop structure, particularly in the following areas:

1. **Lines 17-20**: The `while` loop inside the `for` loop has a significantly higher hit count for the slow input compared to the fast input. Specifically:
   - **Line 17**: The condition `k < n && x[i][1] > 0` is evaluated 111,823,020 times, indicating that the loop iterates excessively for the slow input.
   - **Lines 18-20**: These lines (updating `k`, decrementing `x[i][1]`, and incrementing `l`) are executed a similar number of times, signifying that the operations within this loop are repeated excessively.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant on Large `n` Values and Container Capacity**: 
   - **Natural Language Description**: "The program may experience significant slowdown when the number of matchboxes, `n`, is very large, and there is a container with a large number of matchboxes. This leads to excessive iterations in the inner loop."
   - **Explanation**: The condition `k < n` in the `while` loop indicates that when `n` is large, the loop continues for a large number of iterations as `k` increments slowly. Combined with containers (`x[i][1]`) that have a large number of boxes, this condition leads to excessive operation counts per container.

2. **Invariant on Sorting and Containers with Few Matchboxes**:
   - **Natural Language Description**: "If containers are ordered with fewer matchboxes at the beginning, the required sorting and processing of fewer matchboxes first may not efficiently fill the rucksack, leading to slower completion."
   - **Explanation**: Although the problem primarily revolves around the inner loop, sorting containers with fewer matchboxes lessens the efficiency of the `while` loop optimizing for the maximum matches carried. This may not directly cause a slowdown but can compound inefficiency when `n` is large.

3. **Invariant on Rucksack Capacity Constraint**:
   - **Natural Language Description**: "When the rucksack capacity, `n`, approaches or is at its maximum constraint, and there are many containers with high capacity, the process to fill the rucksack may involve vast numbers of loops, causing slow execution."
   - **Explanation**: The constraint `n <= 2 * 10^8` means that when `n` is large enough, and there are containers with numerous matchboxes, the repetitive nature of filling the rucksack causes the slowdown, especially if `x[i][1]` (number of matchboxes in a container) is large.

These invariants highlight how specific conditions and input characteristics can lead to slower execution paths, mainly due to the nested loop structure exacerbated by large `n` values and container configurations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A burglar got into a matches warehouse and wants to steal as many matches as possible. In the warehouse there are m containers, in the i-th container there are ai matchboxes, and each matchbox contains bi matches. All the matchboxes are of the same size. The burglar's rucksack can hold n matchboxes exactly. Your task is to find out the maximum amount of matches that a burglar can carry away. He has no time to rearrange matches in the matchboxes, that's why he just chooses not more than n matchboxes so that the total amount of matches in them is maximal.

Input

The first line of the input contains integer n (1 ≤ n ≤ 2·108) and integer m (1 ≤ m ≤ 20). The i + 1-th line contains a pair of numbers ai and bi (1 ≤ ai ≤ 108, 1 ≤ bi ≤ 10). All the input numbers are integer.

Output

Output the only number — answer to the problem.

Examples

Input

7 3
5 10
2 5
3 6


Output

62


Input

3 3
1 3
2 2
3 1


Output

7

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants as runtime checks:

1. **Invariant on Large `n` Values and Container Capacity**:
   ```cpp
   void check_large_n_and_container_capacity(int n, const vector<vector<int>>& x) {
       int total_boxes = 0;
       for (const auto& container : x) {
           total_boxes += container[1];
       }
       if (n > 1e8 && total_boxes > 1e8) { // Thresholds based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Sorting and Containers with Few Matchboxes**:
   ```cpp
   void check_sort_efficiency(const vector<vector<int>>& x) {
       if (!is_sorted(x.begin(), x.end(), [](const vector<int>& a, const vector<int>& b) {
           return a[0] > b[0];
       })) {
           cerr << "Warning: Performance bottleneck due to inefficient container order!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Rucksack Capacity Constraint**:
   ```cpp
   void check_rucksack_capacity(int n, int m) {
       if (n > 1e8 && m > 10) { // Arbitrary threshold based on problem constraints
           cerr << "Warning: Performance bottleneck due to large rucksack capacity and container count!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original Program

Now, we integrate the checker functions into the original C++ code to effectively detect the performance bottlenecks without adding unnecessary overhead:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for large n and container capacity
void check_large_n_and_container_capacity(int n, const vector<vector<int>>& x) {
    int total_boxes = 0;
    for (const auto& container : x) {
        total_boxes += container[1];
    }
    if (n > 1e8 && total_boxes > 1e8) { // Thresholds based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
}

// Checker function for sorting efficiency
void check_sort_efficiency(const vector<vector<int>>& x) {
    if (!is_sorted(x.begin(), x.end(), [](const vector<int>& a, const vector<int>& b) {
        return a[0] > b[0];
    })) {
        cerr << "Warning: Performance bottleneck due to inefficient container order!" << endl;
        abort();
    }
}

// Checker function for rucksack capacity constraint
void check_rucksack_capacity(int n, int m) {
    if (n > 1e8 && m > 10) { // Arbitrary threshold based on problem constraints
        cerr << "Warning: Performance bottleneck due to large rucksack capacity and container count!" << endl;
        abort();
    }
}

int main() {
    int n, m, k = 0, l = 0;
    vector<vector<int>> x;
    cin >> n >> m;
    for (int i = 0; i < m; i++) {
        int w, y;
        vector<int> tmp;
        cin >> w >> y;
        tmp.push_back(y);
        tmp.push_back(w);
        x.push_back(tmp);
    }
    
    // Check the performance-characterizing invariants after input
    check_large_n_and_container_capacity(n, x);
    check_rucksack_capacity(n, m);

    sort(x.begin(), x.end());
    
    // Check the sorting efficiency after sorting
    check_sort_efficiency(x);

    for (int i = m - 1; i >= 0; i--) {
        while (k < n && x[i][1] > 0) {
            k += 1;
            x[i][1] -= 1;
            l += x[i][0];
        }
    }
    cout << l;
}
```

### Explanation
- **Placement of Checks**: The checks are placed after reading the inputs and sorting, where they can be most effective without being in tight loops.
- **Thresholds and Conditions**: Conditions are set based on reasonable assumptions and problem constraints (e.g., large values of `n` and container capacities, inefficient ordering).
- **Purpose**: These checks will help identify scenarios that could lead to performance bottlenecks during execution.

