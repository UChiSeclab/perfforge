system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using pll = pair<ll, ll>;
using dd = long double;
namespace {
static bool constexpr dbg = 0;
ll constexpr N = -1;
ll n, a, b;
string s;
void init() { cin >> a >> b >> s; }
bool mv(ll &x, ll &y) {
  if (x == a && y == b) return true;
  for (auto ch : s) {
    if (ch == 'U')
      ++y;
    else if (ch == 'D')
      --y;
    else if (ch == 'L')
      --x;
    else
      ++x;
    if (x == a && y == b) return true;
  }
  return false;
}
void solve() {
  ll x = 0, y = 0;
  if (mv(x, y)) {
    cout << "Yes";
    return;
  }
  ll dx = x, dy = y;
  ll cnt = 0;
  if (dx)
    cnt = a / dx;
  else if (dy)
    cnt = b / dy;
  for (ll i = max(0LL, cnt - 200); i <= cnt + 200; ++i) {
    x = i * dx;
    y = i * dy;
    for (ll _ = 1; _ <= (ll)(200); ++_)
      if (mv(x, y)) {
        cout << "Yes";
        return;
      }
  }
  cout << "No";
  return;
}
}  // namespace
int main() {
  if (!dbg) {
    std::ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
  }
  cout << fixed << setprecision(20);
  init();
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

-746458180 -1000000000
DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL


(G.2) Fast Input

-1000000000 -1000000000
DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using pll = pair<ll, ll>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using dd = long double; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
namespace { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
static bool constexpr dbg = 0; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
ll constexpr N = -1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
ll n, a, b; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
string s; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void init() { cin >> a >> b >> s; } /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
bool mv(ll &x, ll &y) { /* line 12 slow_hit_count: 80201, fast_hit_count: 201 */
  if (x == a && y == b) return true; /* line 13 slow_hit_count: 80201, fast_hit_count: 201 */
  for (auto ch : s) { /* line 14 slow_hit_count: 8100301, fast_hit_count: 20300 */
    if (ch == 'U') /* line 15 slow_hit_count: 8020100, fast_hit_count: 20100 */
      ++y; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    else if (ch == 'D') /* line 17 slow_hit_count: 8020100, fast_hit_count: 20100 */
      --y; /* line 18 slow_hit_count: 4010050, fast_hit_count: 10050 */
    else if (ch == 'L') /* line 19 slow_hit_count: 4010050, fast_hit_count: 10050 */
      --x; /* line 20 slow_hit_count: 4010050, fast_hit_count: 10050 */
    else /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      ++x; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    if (x == a && y == b) return true; /* line 23 slow_hit_count: 8020100, fast_hit_count: 20100 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 25 slow_hit_count: 80201, fast_hit_count: 200 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  ll x = 0, y = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  if (mv(x, y)) { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "Yes"; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  ll dx = x, dy = y; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  ll cnt = 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  if (dx) /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    cnt = a / dx; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  else if (dy) /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    cnt = b / dy; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (ll i = max(0LL, cnt - 200); i <= cnt + 200; ++i) { /* line 39 slow_hit_count: 402, fast_hit_count: 1 */
    x = i * dx; /* line 40 slow_hit_count: 401, fast_hit_count: 1 */
    y = i * dy; /* line 41 slow_hit_count: 401, fast_hit_count: 1 */
    for (ll _ = 1; _ <= (ll)(200); ++_) /* line 42 slow_hit_count: 80601, fast_hit_count: 200 */
      if (mv(x, y)) { /* line 43 slow_hit_count: 80200, fast_hit_count: 200 */
        cout << "Yes"; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
        return; /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "No"; /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
  return; /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
}  // namespace /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  if (!dbg) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    std::ios::sync_with_stdio(0); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(0); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    cout.tie(0); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  cout << fixed << setprecision(20); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  init(); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

After analyzing the hit count information, the following observations can be made:

1. **Line 14-23**: The loop in the `mv` function, which iterates over the string `s`, has significantly higher hit counts for the slow input compared to the fast input. This indicates that the command string `s` is being processed many more times in the slow case.

2. **Line 39-43**: The outer loop in the `solve` function is executed 402 times in the slow input compared to just once in the fast input. This loop, combined with the nested loop from lines 42-43, results in numerous calls to `mv`.

3. **Line 42**: A loop runs up to 200 times for each iteration of the outer loop (line 39). This can lead to significant computational overhead, especially if the `mv` function does not return `true` quickly.

The primary cause of the slowdown seems to be the combination of the large number of iterations in the outer loop and the repeated checks within the `mv` function for each iteration.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are natural language invariants that characterize the conditions under which the program is likely to slow down:

1. **Invariant 1: Large Number of Iterations Over `s`**  
   The program becomes slow when the number of iterations required to reach a solution is large, especially when the command string `s` contains many repeating patterns that cause the robot's movements to be inefficient in reaching the target `(a, b)`.

   **Natural Language Description**:  
   "If the string `s` causes repetitive movements that delay reaching the destination, the computation may slow down due to excessive iterations."

2. **Invariant 2: Inefficient Directional Progress**  
   If the calculated `dx` and `dy` values from the initial execution of `mv` lead to a scenario where `dx` or `dy` is zero or near-zero relative to `a` or `b`, the robot's progress toward `(a, b)` can be inefficiently prolonged.

   **Natural Language Description**:  
   "If the directional progress per cycle `(dx, dy)` is minimal or zero relative to `(a, b)`, the robot may enter a slow path due to redundant loop iterations without substantial positional changes."

3. **Invariant 3: High Loop Execution**  
   In scenarios where `(a, b)` is far from the starting point `(0, 0)`, and the repetitive commands lead to significant loop execution without reaching the target, performance can degrade due to high loop overhead.

   **Natural Language Description**:  
   "When `(a, b)` is very distant from the origin, and the command cycle does not efficiently target `(a, b)`, the outer loops may execute excessively, slowing down computation."

These invariants suggest that specific patterns in the command string `s` or particular values of `(a, b)` relative to the steps induced by the command sequence can cause the robot’s pathfinding logic to enter a slow mode. Thus, optimizing the movement strategy or breaking out of inefficient loops early could mitigate potential slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the natural language invariants in C++

For each invariant derived in Phase 2, I will now implement C++ checker functions that can be integrated into the original program.

**Invariant 1: Large Number of Iterations Over `s`**

```cpp
void check_repetitive_movements(const string &s, long long a, long long b) {
    if (s.size() > 50 && abs(a) > 1e9 / 2 && abs(b) > 1e9 / 2) {
        cerr << "Warning: Performance bottleneck due to repetitive movements leading to excessive iterations!" << endl;
        abort();
    }
}
```

**Invariant 2: Inefficient Directional Progress**

```cpp
void check_inefficient_progress(long long dx, long long dy, long long a, long long b) {
    if ((dx == 0 || dy == 0) && (a != 0 || b != 0)) {
        cerr << "Warning: Performance bottleneck due to inefficient directional progress!" << endl;
        abort();
    }
}
```

**Invariant 3: High Loop Execution**

```cpp
void check_high_loop_execution(long long a, long long b, long long dx, long long dy) {
    if ((abs(a) > 1e9 / 2 || abs(b) > 1e9 / 2) && (dx == 0 || dy == 0)) {
        cerr << "Warning: Performance bottleneck due to high loop execution without progress!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the checker code into the original program

I will now integrate the above checker functions into the original program at appropriate places to avoid impacting performance in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using pll = pair<ll, ll>;
using dd = long double;

namespace {
static bool constexpr dbg = 0;
ll constexpr N = -1;
ll n, a, b;
string s;

void init() { 
    cin >> a >> b >> s; 
}

bool mv(ll &x, ll &y) {
    if (x == a && y == b) return true;
    for (auto ch : s) {
        if (ch == 'U')
            ++y;
        else if (ch == 'D')
            --y;
        else if (ch == 'L')
            --x;
        else
            ++x;
        if (x == a && y == b) return true;
    }
    return false;
}

// Check for performance bottlenecks: repetitive movements
void check_repetitive_movements(const string &s, long long a, long long b) {
    if (s.size() > 50 && abs(a) > 1e9 / 2 && abs(b) > 1e9 / 2) {
        cerr << "Warning: Performance bottleneck due to repetitive movements leading to excessive iterations!" << endl;
        abort();
    }
}

// Check for performance bottlenecks: inefficient progress
void check_inefficient_progress(long long dx, long long dy, long long a, long long b) {
    if ((dx == 0 || dy == 0) && (a != 0 || b != 0)) {
        cerr << "Warning: Performance bottleneck due to inefficient directional progress!" << endl;
        abort();
    }
}

// Check for performance bottlenecks: high loop execution
void check_high_loop_execution(long long a, long long b, long long dx, long long dy) {
    if ((abs(a) > 1e9 / 2 || abs(b) > 1e9 / 2) && (dx == 0 || dy == 0)) {
        cerr << "Warning: Performance bottleneck due to high loop execution without progress!" << endl;
        abort();
    }
}

void solve() {
    ll x = 0, y = 0;
    if (mv(x, y)) {
        cout << "Yes";
        return;
    }
    ll dx = x, dy = y;

    // Insert performance checks
    check_repetitive_movements(s, a, b);
    check_inefficient_progress(dx, dy, a, b);
    check_high_loop_execution(a, b, dx, dy);

    ll cnt = 0;
    if (dx)
        cnt = a / dx;
    else if (dy)
        cnt = b / dy;
    for (ll i = max(0LL, cnt - 200); i <= cnt + 200; ++i) {
        x = i * dx;
        y = i * dy;
        for (ll _ = 1; _ <= (ll)(200); ++_)
            if (mv(x, y)) {
                cout << "Yes";
                return;
            }
    }
    cout << "No";
    return;
}
}  // namespace

int main() {
    if (!dbg) {
        std::ios::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
    cout << fixed << setprecision(20);
    init();
    solve();
    return 0;
}
```

### Explanation:
- **`check_repetitive_movements`** is called after the initial movement check to ensure excessive iterations aren't happening due to repetitive command strings and large target coordinates.
- **`check_inefficient_progress`** is used to detect when the directional change per iteration doesn't help in reaching the target `(a, b)`.
- **`check_high_loop_execution`** ensures that the program doesn't enter an inefficient execution path due to large distances with zero progress.

These checks are strategically placed outside of tight loops to minimize additional overhead while still allowing detection of performance bottlenecks during runtime.

