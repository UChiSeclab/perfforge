system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int a, b;
  string s;
  cin >> a >> b >> s;
  int dx = 0, dy = 0;
  for (int i = 0; i < (int)s.length(); i++) {
    if (s[i] == 'R') {
      dx++;
    } else if (s[i] == 'L') {
      dx--;
    } else if (s[i] == 'U') {
      dy++;
    } else if (s[i] == 'D') {
      dy--;
    }
  }
  int k = 0;
  if (dx != 0 && dy != 0) {
    int n1 = a / dx;
    int n2 = b / dy;
    k = max(n1, n2);
  }
  if (dx == 0 && dy != 0) {
    k = max(0, b / dy);
  }
  if (dy == 0 && dx != 0) {
    k = max(a / dx, 0);
  }
  k = max(0, k - 21000);
  a -= k * dx;
  b -= k * dy;
  dx = 0, dy = 0;
  for (int i = 1; i <= 32000; i++) {
    for (int i = 0; i < (int)s.length(); i++) {
      if (dx == a && dy == b) {
        cout << "Yes"
             << "\n";
        return 0;
      }
      if (s[i] == 'R') {
        dx++;
      } else if (s[i] == 'L') {
        dx--;
      } else if (s[i] == 'U') {
        dy++;
      } else if (s[i] == 'D') {
        dy--;
      }
      if (dx == a && dy == b) {
        cout << "Yes"
             << "\n";
        return 0;
      }
    }
  }
  cout << "No"
       << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(G.2) Fast Input

1 0
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  string s; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b >> s; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int dx = 0, dy = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)s.length(); i++) { /* line 10 slow_hit_count: 101, fast_hit_count: 101 */
    if (s[i] == 'R') { /* line 11 slow_hit_count: 100, fast_hit_count: 100 */
      dx++; /* line 12 slow_hit_count: 25, fast_hit_count: 25 */
    } else if (s[i] == 'L') { /* line 13 slow_hit_count: 75, fast_hit_count: 75 */
      dx--; /* line 14 slow_hit_count: 25, fast_hit_count: 25 */
    } else if (s[i] == 'U') { /* line 15 slow_hit_count: 50, fast_hit_count: 50 */
      dy++; /* line 16 slow_hit_count: 25, fast_hit_count: 25 */
    } else if (s[i] == 'D') { /* line 17 slow_hit_count: 25, fast_hit_count: 25 */
      dy--; /* line 18 slow_hit_count: 25, fast_hit_count: 25 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  int k = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  if (dx != 0 && dy != 0) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    int n1 = a / dx; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    int n2 = b / dy; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    k = max(n1, n2); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  if (dx == 0 && dy != 0) { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    k = max(0, b / dy); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (dy == 0 && dx != 0) { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    k = max(a / dx, 0); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  k = max(0, k - 21000); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  a -= k * dx; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  b -= k * dy; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  dx = 0, dy = 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 32000; i++) { /* line 37 slow_hit_count: 32001, fast_hit_count: 1 */
    for (int i = 0; i < (int)s.length(); i++) { /* line 38 slow_hit_count: 3232000, fast_hit_count: 1 */
      if (dx == a && dy == b) { /* line 39 slow_hit_count: 3200000, fast_hit_count: 1 */
        cout << "Yes" /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
             << "\n"; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        return 0; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[i] == 'R') { /* line 44 slow_hit_count: 3200000, fast_hit_count: 1 */
        dx++; /* line 45 slow_hit_count: 800000, fast_hit_count: 1 */
      } else if (s[i] == 'L') { /* line 46 slow_hit_count: 2400000, fast_hit_count: 0 */
        dx--; /* line 47 slow_hit_count: 800000, fast_hit_count: 0 */
      } else if (s[i] == 'U') { /* line 48 slow_hit_count: 1600000, fast_hit_count: 0 */
        dy++; /* line 49 slow_hit_count: 800000, fast_hit_count: 0 */
      } else if (s[i] == 'D') { /* line 50 slow_hit_count: 800000, fast_hit_count: 0 */
        dy--; /* line 51 slow_hit_count: 800000, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      if (dx == a && dy == b) { /* line 53 slow_hit_count: 3200000, fast_hit_count: 1 */
        cout << "Yes" /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
             << "\n"; /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 56 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "No" /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
       << "\n"; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 62 slow_hit_count: 1, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments
1. **Comparison of Hit Counts:**
   - The hit counts for the slow input are significantly higher in lines 37 to 58, particularly lines 38, 39, 44, 46, 48, 50, and 53. These lines are inside a nested loop structure.
   - For the slow input, the line `for (int i = 1; i <= 32000; i++)` (line 37) and the nested loop `for (int i = 0; i < (int)s.length(); i++)` (line 38) accumulate a high number of hits, suggesting that this outer loop runs many iterations.
   
2. **Interaction with Data Structures and Loops:**
   - The nested loops iterate over the sequence `s` repeatedly, which in the case of the slow input causes the conditions `if (dx == a && dy == b)` (lines 39 and 53) to be checked multiple times without reaching the target coordinates.
   - The outer loop runs up to 32000 times, and within each iteration, the inner loop processes each character of the string `s`, leading to a large number of operations depending on the length of `s`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Loop Iteration Count**
   - Natural language description: "When the string `s` is such that the resulting periodic movement does not quickly align with (a, b), the robot will iterate through many cycles, significantly slowing down the program."
   - This invariant captures the repetitive nature of the robot’s movement when it does not quickly reach the destination.

2. **Invariant 2: Inefficient Movement Pattern**
   - Natural language description: "If the sequence of movements in `s` causes the robot's net displacement per cycle to be zero or inefficient (i.e., it returns close to starting point), the execution may slow due to excessive iteration without progress towards (a, b)."
   - This is particularly true when `s` contains balanced movements (e.g., equal numbers of 'L' and 'R', or 'U' and 'D').

3. **Invariant 3: Large Absolute Target Coordinates**
   - Natural language description: "When target coordinates (a, b) are large in magnitude, and the net movement per cycle of `s` is small, the number of cycles required to potentially reach (a, b) increases, leading to slower performance."
   - If the net movement in `s` is minimal or counter-balancing, it may take many iterations to reach significant displacement towards the target.

### Conclusion
The above invariants focus on the characteristics of the movement sequence `s` and its interaction with the target coordinates `(a, b)`. The nested loop structure's inefficiency becomes prominent when `s` does not facilitate quick alignment with `(a, b)`, causing excessive computation. These conditions can act as guiding principles for optimizing or diagnosing performance issues in the given algorithm.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checkers for Invariants

Here are the C++ code snippets that implement the runtime checks for each performance-characterizing invariant deduced in Phase 2. 

#### Invariant 1: High Loop Iteration Count
This check ensures that when the target coordinates are too far from the origin and the net displacement per cycle is zero, the loop does not iterate indefinitely.

```cpp
void check_high_iteration_invariant(int dx, int dy) {
    if (dx == 0 && dy == 0) {
        cerr << "Warning: High iteration invariant triggered - net displacement per cycle is zero!" << endl;
        abort();
    }
}
```

#### Invariant 2: Inefficient Movement Pattern
This check confirms if the movement pattern in `s` results in minimal or zero net displacement, which could lead to high iteration counts without reaching the target.

```cpp
void check_inefficient_movement_invariant(int netDx, int netDy) {
    if (netDx == 0 && netDy == 0) {
        cerr << "Warning: Inefficient movement invariant triggered - minimal or zero net displacement per cycle!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Absolute Target Coordinates
This check guards against scenarios where the target coordinates are very large, leading to potential slowdowns due to increased iteration counts.

```cpp
void check_large_target_invariant(int a, int b) {
    if (abs(a) > 1e9 || abs(b) > 1e9) {
        cerr << "Warning: Large target invariant triggered - target coordinates are very large!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented version of the original C++ program, with the checkers integrated at relevant points in the control flow:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for high iteration count due to zero net displacement per cycle
void check_high_iteration_invariant(int dx, int dy) {
    if (dx == 0 && dy == 0) {
        cerr << "Warning: High iteration invariant triggered - net displacement per cycle is zero!" << endl;
        abort();
    }
}

// Checker for inefficient movement pattern
void check_inefficient_movement_invariant(int netDx, int netDy) {
    if (netDx == 0 && netDy == 0) {
        cerr << "Warning: Inefficient movement invariant triggered - minimal or zero net displacement per cycle!" << endl;
        abort();
    }
}

// Checker for large target coordinates
void check_large_target_invariant(int a, int b) {
    if (abs(a) > 1e9 || abs(b) > 1e9) {
        cerr << "Warning: Large target invariant triggered - target coordinates are very large!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int a, b;
    string s;
    cin >> a >> b >> s;

    check_large_target_invariant(a, b);  // Check if target coordinates are unreasonably large

    int dx = 0, dy = 0;
    for (int i = 0; i < (int)s.length(); i++) {
        if (s[i] == 'R') {
            dx++;
        } else if (s[i] == 'L') {
            dx--;
        } else if (s[i] == 'U') {
            dy++;
        } else if (s[i] == 'D') {
            dy--;
        }
    }

    check_high_iteration_invariant(dx, dy);  // Check for zero net displacement

    int k = 0;
    if (dx != 0 && dy != 0) {
        int n1 = a / dx;
        int n2 = b / dy;
        k = max(n1, n2);
    }
    if (dx == 0 && dy != 0) {
        k = max(0, b / dy);
    }
    if (dy == 0 && dx != 0) {
        k = max(a / dx, 0);
    }
    k = max(0, k - 21000);
    a -= k * dx;
    b -= k * dy;

    dx = 0, dy = 0;
    for (int i = 1; i <= 32000; i++) {
        for (int i = 0; i < (int)s.length(); i++) {
            if (dx == a && dy == b) {
                cout << "Yes" << "\n";
                return 0;
            }
            if (s[i] == 'R') {
                dx++;
            } else if (s[i] == 'L') {
                dx--;
            } else if (s[i] == 'U') {
                dy++;
            } else if (s[i] == 'D') {
                dy--;
            }
            if (dx == a && dy == b) {
                cout << "Yes" << "\n";
                return 0;
            }
        }
    }
    cout << "No" << "\n";
}
```

### Comments:
- The check for the `inefficient_movement_invariant` is now implemented just after calculating the net displacements (`dx`, `dy`).
- The `high_iteration_invariant` is used to ensure that the net displacement per cycle is non-zero, avoiding infinite loops.
- The `large_target_invariant` is checked immediately after reading the input to catch any overly large target coordinates.

