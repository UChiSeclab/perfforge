system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MX = 100005, INF = 1000000000, mod = 1000000009;
const long long int LINF = 1000000000000000000ll;
const double eps = 1e-9;
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
int ci[256];
int main() {
  ci['U'] = 3;
  ci['D'] = 1;
  ci['L'] = 0;
  ci['R'] = 2;
  int n, x, y, a, b;
  string s;
  cin >> a >> b >> s;
  if (a == 0 && b == 0) {
    puts("Yes");
    return 0;
  }
  n = s.size();
  x = y = 0;
  for (int i = 0; i < n; i++) {
    x += dx[ci[s[i]]];
    y += dy[ci[s[i]]];
    if (a == x && b == y) {
      puts("Yes");
      return 0;
    }
  }
  if (x == 0 && y == 0) {
    puts("No");
    return 0;
  }
  int t = 0;
  if (x > 0) t = max(t, (a - 200) / x);
  if (x < 0) t = max(t, (a + 200) / x);
  if (y > 0) t = max(t, (b - 200) / y);
  if (y < 0) t = max(t, (b + 200) / y);
  x *= t;
  y *= t;
  for (int j = 0; j < 10000; j++) {
    for (int i = 0; i < n; i++) {
      x += dx[ci[s[i]]];
      y += dy[ci[s[i]]];
      if (a == x && b == y) {
        puts("Yes");
        return 0;
      }
    }
  }
  puts("No");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

-746458180 -1000000000
DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL


(G.2) Fast Input

-1000000000 -1000000000
DLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDLDL


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MX = 100005, INF = 1000000000, mod = 1000000009; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long int LINF = 1000000000000000000ll; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int ci[256]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  ci['U'] = 3; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ci['D'] = 1; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  ci['L'] = 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  ci['R'] = 2; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x, y, a, b; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  string s; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> a >> b >> s; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  if (a == 0 && b == 0) { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    puts("Yes"); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  n = s.size(); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  x = y = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 22 slow_hit_count: 101, fast_hit_count: 101 */
    x += dx[ci[s[i]]]; /* line 23 slow_hit_count: 100, fast_hit_count: 100 */
    y += dy[ci[s[i]]]; /* line 24 slow_hit_count: 100, fast_hit_count: 100 */
    if (a == x && b == y) { /* line 25 slow_hit_count: 100, fast_hit_count: 100 */
      puts("Yes"); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (x == 0 && y == 0) { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    puts("No"); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  int t = 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  if (x > 0) t = max(t, (a - 200) / x); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  if (x < 0) t = max(t, (a + 200) / x); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  if (y > 0) t = max(t, (b - 200) / y); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  if (y < 0) t = max(t, (b + 200) / y); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  x *= t; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  y *= t; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 0; j < 10000; j++) { /* line 41 slow_hit_count: 10001, fast_hit_count: 4 */
    for (int i = 0; i < n; i++) { /* line 42 slow_hit_count: 1010000, fast_hit_count: 403 */
      x += dx[ci[s[i]]]; /* line 43 slow_hit_count: 1000000, fast_hit_count: 400 */
      y += dy[ci[s[i]]]; /* line 44 slow_hit_count: 1000000, fast_hit_count: 400 */
      if (a == x && b == y) { /* line 45 slow_hit_count: 1000000, fast_hit_count: 400 */
        puts("Yes"); /* line 46 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  puts("No"); /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts:
1. **Outer Loop (Line 41):** 
   - **Slow Input:** `10001` iterations
   - **Fast Input:** `4` iterations
   - **Observation:** The outer loop iterates significantly more times for the slow input.

2. **Inner Loop (Line 42):** 
   - **Slow Input:** `1010000` iterations in total for all iterations of the outer loop.
   - **Fast Input:** `403` iterations in total for all iterations of the outer loop.
   - **Observation:** This loop's body is executed significantly more often with the slow input.

3. **Movement Update (Lines 43-45):**
   - **Slow Input:** `1,000,000` iterations
   - **Fast Input:** `400` iterations
   - **Observation:** The movement update and check conditions are hit far more often for the slow input, indicating a performance bottleneck.

### Key Insight:
The excessive iterations in the nested loops for the slow input indicate that the algorithm is inefficiently trying to reach the target position `(a, b)` with repetitive movements. This inefficiency arises from not adequately leveraging the repeated pattern in the command string `s` to predict the robot's position after multiple full cycles.

## Phase 2: Derive Performance-Characterizing Invariants

### Performance-Characterizing Invariants:

1. **Repetitive Movement Pattern:**
   - **Description:** "If the robot's movement pattern results in no net change in position after a full cycle of the command string, the program may enter a slow path as it repetitively checks positions without progressing towards the target."
   - **Context:** When the cumulative movement of the command string `s` results in `(0, 0)`, the robot will return to the origin after each full cycle, causing redundant calculations without progress. 

2. **Ineffective Position Checks:**
   - **Description:** "If the robot's current position and the target position `(a, b)` are such that the target lies outside the effective reach of repeated applications of the command sequence, the program execution time may increase significantly."
   - **Context:** When the target `(a, b)` cannot be reached by any integer multiple of the net displacement per cycle of `s`, the algorithm ineffectively attempts to reach it through exhaustive search.

3. **Unbounded Iteration in Simulated Movements:**
   - **Description:** "If the accumulated position change `(x, y)` after processing the command string `s` multiple times does not trend towards `(a, b)`, the nested loops may iteratively simulate many movements without terminating quickly."
   - **Context:** The lack of convergence toward `(a, b)` in the simulated movements leads to prolonged execution, as evident in cases where iterative updates don't effectively progress to the goal.

### Conclusion:
These invariants indicate that understanding the net effect of command sequences and their alignment with target positions is crucial for optimizing the performance of this robot simulation problem. The inefficiencies arise mainly from excessive iteration without strategic positioning based on the command sequence's net movement.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Performance-Characterizing Invariants in C++

### Invariant 1: Repetitive Movement Pattern
```cpp
void check_repetitive_movement_invariant(int x, int y) {
    if (x == 0 && y == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - repetitive movement with no net change!" << endl;
        abort();
    }
}
```

### Invariant 2: Ineffective Position Checks
```cpp
void check_ineffective_position_invariant(int x, int y, int a, int b) {
    if ((a != 0 || b != 0) && (x == 0 && y == 0)) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective position reach!" << endl;
        abort();
    }
}
```

### Invariant 3: Unbounded Iteration in Simulated Movements
```cpp
void check_unbounded_iteration_invariant(int x, int y, int a, int b) {
    if (abs(a) > abs(x) || abs(b) > abs(y)) {
        cerr << "Warning: Performance bottleneck condition triggered - unbounded iteration in simulation!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ code integrating the performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, -1, 0, 1};
int ci[256];

void check_repetitive_movement_invariant(int x, int y) {
    if (x == 0 && y == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - repetitive movement with no net change!" << endl;
        abort();
    }
}

void check_ineffective_position_invariant(int x, int y, int a, int b) {
    if ((a != 0 || b != 0) && (x == 0 && y == 0)) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective position reach!" << endl;
        abort();
    }
}

void check_unbounded_iteration_invariant(int x, int y, int a, int b) {
    if (abs(a) > abs(x) || abs(b) > abs(y)) {
        cerr << "Warning: Performance bottleneck condition triggered - unbounded iteration in simulation!" << endl;
        abort();
    }
}

int main() {
    ci['U'] = 3;
    ci['D'] = 1;
    ci['L'] = 0;
    ci['R'] = 2;
    int n, x, y, a, b;
    string s;
    cin >> a >> b >> s;
    
    n = s.size();
    x = y = 0;
    for (int i = 0; i < n; i++) {
        x += dx[ci[s[i]]];
        y += dy[ci[s[i]]];
    }
    
    // Check for performance invariants
    check_repetitive_movement_invariant(x, y);
    check_ineffective_position_invariant(x, y, a, b);
    check_unbounded_iteration_invariant(x, y, a, b);
    
    x = y = 0;
    for (int i = 0; i < n; i++) {
        x += dx[ci[s[i]]];
        y += dy[ci[s[i]]];
        if (a == x && b == y) {
            puts("Yes");
            return 0;
        }
    }
    if (x == 0 && y == 0) {
        puts("No");
        return 0;
    }
    
    int t = 0;
    if (x > 0) t = max(t, (a - 200) / x);
    if (x < 0) t = max(t, (a + 200) / x);
    if (y > 0) t = max(t, (b - 200) / y);
    if (y < 0) t = max(t, (b + 200) / y);
    
    x *= t;
    y *= t;
    
    for (int j = 0; j < 10000; j++) {
        for (int i = 0; i < n; i++) {
            x += dx[ci[s[i]]];
            y += dy[ci[s[i]]];
            if (a == x && b == y) {
                puts("Yes");
                return 0;
            }
        }
    }
    puts("No");
    return 0;
}
```

### Explanation:
1. **Check Repetitive Movement Invariant:** Before simulating further movements, it checks if the net change after one cycle is zero, which would signal repetitive and ineffective movements.
2. **Check Ineffective Position Invariant:** Ensures that the starting and goal positions are reachable based on the calculated movement per cycle.
3. **Check Unbounded Iteration Invariant:** Ensures the goal `(a, b)` is not outside the capability of the robot's movement pattern.

These checks help diagnose potential performance bottlenecks and ensure the program detects situations leading to inefficient computation paths.

