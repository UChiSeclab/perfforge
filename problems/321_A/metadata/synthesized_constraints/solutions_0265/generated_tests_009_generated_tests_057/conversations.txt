system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class T>
inline void mini(T &a, T b) {
  if (b < a) a = b;
}
template <class T>
inline void maxi(T &a, T b) {
  if (b > a) a = b;
}
int main() {
  long long a, b, c;
  cin >> a >> b;
  string s;
  cin >> s;
  long long x = 0, y = 0;
  for (int i = 0; i < s.size(); i++) {
    if (x == a && y == b) {
      cout << "Yes\n";
      return 0;
    }
    if (s[i] == 'U') y++;
    if (s[i] == 'D') y--;
    if (s[i] == 'L') x--;
    if (s[i] == 'R') x++;
  }
  long long mx, my;
  mx = x;
  my = y;
  int x1 = 0, y1 = 0;
  if (x != 0) x1 = a / x;
  if (y != 0) y1 = b / y;
  if (x * a < 0 && y * b < 0) {
    cout << "No\n";
    return 0;
  }
  long long t;
  if (x * a > 0 && y * b > 0) {
    t = min(x1, y1);
    x += x * (t - 10000);
    y += y * (t - 10000);
  } else if (x * a > 0) {
    x += (x1 - 10000) * x;
    y += (x1 - 10000) * y;
  } else if (y * b > 0) {
    x += (y1 - 10000) * x;
    y += (y1 - 10000) * y;
  }
  int z = 10000;
  while (z--)
    for (int i = 0; i < s.size(); i++) {
      if (x == a && y == b) {
        cout << "Yes\n";
        return 0;
      }
      if (s[i] == 'U') y++;
      if (s[i] == 'D') y--;
      if (s[i] == 'L') x--;
      if (s[i] == 'R') x++;
    }
  cout << "No\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(G.2) Fast Input

1 0
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline void mini(T &a, T b) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (b < a) a = b; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline void maxi(T &a, T b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  if (b > a) a = b; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  long long a, b, c; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> s; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  long long x = 0, y = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < s.size(); i++) { /* line 17 slow_hit_count: 101, fast_hit_count: 2 */
    if (x == a && y == b) { /* line 18 slow_hit_count: 100, fast_hit_count: 2 */
      cout << "Yes\n"; /* line 19 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 20 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    if (s[i] == 'U') y++; /* line 22 slow_hit_count: 100, fast_hit_count: 1 */
    if (s[i] == 'D') y--; /* line 23 slow_hit_count: 100, fast_hit_count: 1 */
    if (s[i] == 'L') x--; /* line 24 slow_hit_count: 100, fast_hit_count: 1 */
    if (s[i] == 'R') x++; /* line 25 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  long long mx, my; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  mx = x; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
  my = y; /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
  int x1 = 0, y1 = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
  if (x != 0) x1 = a / x; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
  if (y != 0) y1 = b / y; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
  if (x * a < 0 && y * b < 0) { /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
    cout << "No\n"; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  long long t; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  if (x * a > 0 && y * b > 0) { /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
    t = min(x1, y1); /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    x += x * (t - 10000); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    y += y * (t - 10000); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (x * a > 0) { /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
    x += (x1 - 10000) * x; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    y += (x1 - 10000) * y; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (y * b > 0) { /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
    x += (y1 - 10000) * x; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    y += (y1 - 10000) * y; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  int z = 10000; /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
  while (z--) /* line 50 slow_hit_count: 10001, fast_hit_count: 0 */
    for (int i = 0; i < s.size(); i++) { /* line 51 slow_hit_count: 1010000, fast_hit_count: 0 */
      if (x == a && y == b) { /* line 52 slow_hit_count: 1000000, fast_hit_count: 0 */
        cout << "Yes\n"; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        return 0; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[i] == 'U') y++; /* line 56 slow_hit_count: 1000000, fast_hit_count: 0 */
      if (s[i] == 'D') y--; /* line 57 slow_hit_count: 1000000, fast_hit_count: 0 */
      if (s[i] == 'L') x--; /* line 58 slow_hit_count: 1000000, fast_hit_count: 0 */
      if (s[i] == 'R') x++; /* line 59 slow_hit_count: 1000000, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "No\n"; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 62 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To diagnose and analyze the performance bottlenecks of the given C program, we will embark on two phases: identifying the inefficient segments and deriving performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The slow input leads to a significant number of hits on lines 50 through 59, particularly in the loop where the robot movements are simulated over the command string `s`.
   - The `while (z--)` loop, specifically, is hit 10,000 times, and within each iteration, the robot's position is updated over the entire length of the string `s` (up to 100 moves per iteration).

2. **Pinpointing Lines with Significant Hits:**
   - Lines 51 to 59 are executed extensively (1,010,000 hits total for the entire nested loop), indicating a performance bottleneck due to repeated operations over the string `s` in the outer `while` loop.

3. **Interaction with Data Structures:**
   - The nested loop structure indicates that the program repeatedly processes the command string `s` for each decrement of `z` in the outer loop, leading to excessive computation when the position `(x, y)` does not match `(a, b)` early on.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Infinite Loop Simulation:**
   - Natural Language Description: "If the command sequence does not guide the robot to the target `(a, b)` within a few repetitions, and if the robot’s movement forms a closed loop or stagnates, the program may slow due to excessive iterations simulating infinite repetition."
   - This suggests that if the pattern in `s` causes the robot to loop back to a previous position without reaching `(a, b)`, the program will inefficiently iterate many times without progress.

2. **Invariant on Initial Movement Pattern:**
   - Natural Language Description: "When the command string starts with moves that repeatedly counteract each other (e.g., 'LR' or 'UD'), the robot may take significantly longer to reach its target unless it quickly aligns with the direct path to `(a, b)`."
   - This addresses situations where the movements do not contribute to reaching the target effectively, leading to wasted computational effort.

3. **Invariant on Large Multipliers for `(x, y)` Movement:**
   - Natural Language Description: "If the intended target `(a, b)` requires large multiples of the net displacement `(mx, my)` from repeating the sequence `s`, the program may slow due to the need to simulate many repetitions."
   - This condition highlights that if the target is far along the vector defined by `(mx, my)`, many iterations in the infinite loop simulation are needed, causing slowdown.

By using these invariants, we can better understand the triggers for slow performance in this program and anticipate future slow scenarios, helping to guide optimization and testing efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

Solution (C++ code):
{solution}


assistant: Let's implement the natural language invariants as runtime checks in C++ (Phase 3), and then integrate those checks into the original C++ program (Phase 4).

### Phase 3: Implement Invariants as C++ Code Checkers

1. **Invariant on Infinite Loop Simulation:**
   - **Checker Code:**
   ```cpp
   void check_infinite_loop_condition(long long x, long long y, long long a, long long b, int mx, int my) {
       if ((x == 0 && mx == 0) || (y == 0 && my == 0)) {
           cerr << "Warning: Infinite loop with no progress towards target!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Initial Movement Pattern:**
   - **Checker Code:**
   ```cpp
   void check_redundant_moves(const string &s) {
       int lr_balance = 0, ud_balance = 0;
       for (char c : s) {
           if (c == 'L') lr_balance++;
           if (c == 'R') lr_balance--;
           if (c == 'U') ud_balance++;
           if (c == 'D') ud_balance--;
       }
       if (lr_balance == 0 && ud_balance == 0) {
           cerr << "Warning: Command sequence results in no net displacement!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Large Multipliers for `(x, y)` Movement:**
   - **Checker Code:**
   ```cpp
   void check_large_multiplier_condition(long long x, long long y, long long a, long long b, long long mx, long long my) {
       if (std::abs(a) > std::abs(mx * 100) || std::abs(b) > std::abs(my * 100)) {
           cerr << "Warning: Large multiplier required for reaching target position!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function: Checks for infinite loop with no progress
void check_infinite_loop_condition(long long x, long long y, long long a, long long b, long long mx, long long my) {
    if ((x == 0 && mx == 0) || (y == 0 && my == 0)) {
        cerr << "Warning: Infinite loop with no progress towards target!" << endl;
        abort();
    }
}

// Function: Checks for redundant moves causing no net displacement
void check_redundant_moves(const string &s) {
    int lr_balance = 0, ud_balance = 0;
    for (char c : s) {
        if (c == 'L') lr_balance++;
        if (c == 'R') lr_balance--;
        if (c == 'U') ud_balance++;
        if (c == 'D') ud_balance--;
    }
    if (lr_balance == 0 && ud_balance == 0) {
        cerr << "Warning: Command sequence results in no net displacement!" << endl;
        abort();
    }
}

// Function: Checks if a large multiplier would be necessary to reach the target
void check_large_multiplier_condition(long long a, long long b, long long mx, long long my) {
    if (std::abs(a) > std::abs(mx * 100) || std::abs(b) > std::abs(my * 100)) {
        cerr << "Warning: Large multiplier required for reaching target position!" << endl;
        abort();
    }
}

int main() {
    long long a, b;
    cin >> a >> b;
    string s;
    cin >> s;

    // Use checker for redundant moves
    check_redundant_moves(s);

    long long x = 0, y = 0;
    for (int i = 0; i < s.size(); i++) {
        if (x == a && y == b) {
            cout << "Yes\n";
            return 0;
        }
        if (s[i] == 'U') y++;
        if (s[i] == 'D') y--;
        if (s[i] == 'L') x--;
        if (s[i] == 'R') x++;
    }
    
    long long mx = x, my = y;
    check_infinite_loop_condition(x, y, a, b, mx, my);

    if (x * a < 0 && y * b < 0) {
        cout << "No\n";
        return 0;
    }

    check_large_multiplier_condition(a, b, mx, my);

    long long t, x1 = 0, y1 = 0;
    if (x != 0) x1 = a / x;
    if (y != 0) y1 = b / y;

    if (x * a > 0 && y * b > 0) {
        t = min(x1, y1);
        x += x * (t - 10000);
        y += y * (t - 10000);
    } else if (x * a > 0) {
        x += (x1 - 10000) * x;
        y += (x1 - 10000) * y;
    } else if (y * b > 0) {
        x += (y1 - 10000) * x;
        y += (y1 - 10000) * y;
    }

    int z = 10000;
    while (z--)
        for (int i = 0; i < s.size(); i++) {
            if (x == a && y == b) {
                cout << "Yes\n";
                return 0;
            }
            if (s[i] == 'U') y++;
            if (s[i] == 'D') y--;
            if (s[i] == 'L') x--;
            if (s[i] == 'R') x++;
        }
    
    cout << "No\n";
}
```

### Explanation
- **Checkers Added:**
  1. **Redundant Moves:** After reading the command string, checks if the moves cancel each other out.
  2. **Infinite Loop Condition:** After the initial loop, checks if further repetition will lead to no progress.
  3. **Large Multiplier:** Ensures that the target is not unreasonably far along the path defined by the command sequence.

- **Placement:**
  - Each checker is invoked where it can prevent unnecessary computation, right after reading inputs or computing key parameters, without adding overhead inside tight loops.

