system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long X[110], Y[110];
long long mat[210][210];
int main(int argc, char** argv) {
  long long a, b;
  cin >> a >> b;
  string PAT;
  cin >> PAT;
  long long x = 0, y = 0;
  X[0] = x, Y[0] = y;
  mat[x + 105][y + 105] = 1;
  int N = PAT.size();
  for (int i = 0; i < PAT.size(); ++i) {
    if (PAT[i] == 'U')
      y++;
    else if (PAT[i] == 'D')
      y--;
    else if (PAT[i] == 'L')
      x--;
    else
      x++;
    mat[x + 105][y + 105] = 1;
    X[i + 1] = x, Y[i + 1] = y;
  }
  long long vx = X[N], vy = Y[N];
  long long mi = 0;
  if (vx && vy)
    mi = min(abs(a / vx), abs(b / vy));
  else if (vx)
    mi = abs(a / vx);
  else if (vy)
    mi = abs(b / vy);
  mi = max(mi - 1000, 0LL);
  a -= vx * mi;
  b -= vy * mi;
  bool ok = 0;
  for (int i = 0; i < 1000000 && !ok; ++i) {
    if (a > -100 && a < 100 && b > -100 && b < 100) {
      if (mat[a + 105][b + 105]) ok = 1;
    }
    a -= vx;
    b -= vy;
  }
  cout << (ok ? "Yes" : "No") << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 4
UUUURRRRDDDDLLLL


(G.2) Fast Input

4 4
UUUURRRRDDDDLLLL


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long X[110], Y[110]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long mat[210][210]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char** argv) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long a, b; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  string PAT; /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> PAT; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  long long x = 0, y = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  X[0] = x, Y[0] = y; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  mat[x + 105][y + 105] = 1; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int N = PAT.size(); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < PAT.size(); ++i) { /* line 14 slow_hit_count: 17, fast_hit_count: 17 */
    if (PAT[i] == 'U') /* line 15 slow_hit_count: 16, fast_hit_count: 16 */
      y++; /* line 16 slow_hit_count: 4, fast_hit_count: 4 */
    else if (PAT[i] == 'D') /* line 17 slow_hit_count: 12, fast_hit_count: 12 */
      y--; /* line 18 slow_hit_count: 4, fast_hit_count: 4 */
    else if (PAT[i] == 'L') /* line 19 slow_hit_count: 8, fast_hit_count: 8 */
      x--; /* line 20 slow_hit_count: 4, fast_hit_count: 4 */
    else /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      x++; /* line 22 slow_hit_count: 4, fast_hit_count: 4 */
    mat[x + 105][y + 105] = 1; /* line 23 slow_hit_count: 16, fast_hit_count: 16 */
    X[i + 1] = x, Y[i + 1] = y; /* line 24 slow_hit_count: 16, fast_hit_count: 16 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  long long vx = X[N], vy = Y[N]; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  long long mi = 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  if (vx && vy) /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    mi = min(abs(a / vx), abs(b / vy)); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  else if (vx) /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    mi = abs(a / vx); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  else if (vy) /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    mi = abs(b / vy); /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  mi = max(mi - 1000, 0LL); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  a -= vx * mi; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  b -= vy * mi; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  bool ok = 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 1000000 && !ok; ++i) { /* line 38 slow_hit_count: 1000001, fast_hit_count: 2 */
    if (a > -100 && a < 100 && b > -100 && b < 100) { /* line 39 slow_hit_count: 1000000, fast_hit_count: 1 */
      if (mat[a + 105][b + 105]) ok = 1; /* line 40 slow_hit_count: 1000000, fast_hit_count: 1 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    a -= vx; /* line 42 slow_hit_count: 1000000, fast_hit_count: 1 */
    b -= vy; /* line 43 slow_hit_count: 1000000, fast_hit_count: 1 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  cout << (ok ? "Yes" : "No") << endl; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 1, fast_hit_count: 1 */


assistant: **Phase 1: Identifying Expensive or Inefficient Code Segments**

Upon analyzing the hit counts of the provided code, the following inefficiencies and expensive segments have been identified:

1. **Loop with Large Iteration Count**: The loop starting at line 38 executes up to 1,000,000 times, which is excessive given the input constraints. This loop's hit count is significantly higher for the slow input compared to the fast input. The loop is designed to repeatedly check if the robot's position can match the target coordinates `(a, b)` by iterating through potential steps.

2. **Ineffective Bounding Condition**: The condition at line 39 checks if the adjusted coordinates `a` and `b` are within a small range. This condition is not effectively limiting the execution of the loop for the slow input, resulting in unnecessary iterations without quickly reaching the conclusion.

3. **Incrementing and Checking Against Matrix**: Lines 42 and 43 repeatedly adjust `a` and `b`, and line 40 checks the matrix for a potential hit. These operations are relatively expensive given the high number of iterations, leading to the large performance discrepancy between the slow and fast inputs.

**Phase 2: Deriving Performance-Characterizing Invariants**

Based on the analysis, here are performance-characterizing invariants that describe conditions under which the code may take a slow path:

1. **Target Coordinates and Vector Multiples**: If the target coordinates `(a, b)` are not quickly reducible to match a multiple of the vector `(vx, vy)` from the command pattern, the loop will iterate excessively.
   - **Natural Language Invariant**: "If the target coordinates `(a, b)` are not within a few multiples of the net displacement vector `(vx, vy)` derived from the command pattern, the program may take a significant amount of time to conclude."

2. **High Iteration Count Due to Minimal Adjustments**: When the net displacement `(vx, vy)` is small or zero for one or both coordinates, the adjustments made per iteration will be minimal, leading to a large number of iterations.
   - **Natural Language Invariant**: "If the net movement per command pattern cycle `(vx, vy)` is minimal in one or both dimensions, the program may perform a large number of iterations, leading to slow performance."

3. **Matrix Check Inefficiency**: If checking against the matrix (lines 39-40) rarely results in a `true` condition due to the bounding limits not capturing the target effectively, the loop will execute its maximum iterations.
   - **Natural Language Invariant**: "If the robot's path rarely intersects the precomputed positions in the bounding region of the matrix, the program might execute many unnecessary iterations before concluding."

These invariants highlight potential scenarios that could lead to performance degradation and can help focus optimization efforts or aid a fuzzer in identifying slow execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

To implement the performance-characterizing invariants as C++ checkers, we'll need to add code that ensures these conditions are monitored at runtime. Here are the checkers based on the natural language invariants identified:

1. **Invariant Checker for Target Coordinates and Vector Multiples**:
   - **Description**: Ensures the target coordinates `(a, b)` are reachable within a practical number of displacement cycles `(vx, vy)`.

```cpp
void check_vector_multiple_invariant(long long a, long long b, long long vx, long long vy) {
    if (vx == 0 && vy == 0 && (a != 0 || b != 0)) {
        cerr << "Warning: Performance bottleneck condition triggered - target not reachable when net vector is zero!" << endl;
        abort();
    }
}
```

2. **Invariant Checker for Minimal Adjustments**:
   - **Description**: Checks if the net movement `(vx, vy)` is too small, leading to slow convergence to the target `(a, b)`.

```cpp
void check_minimal_adjustment_invariant(long long vx, long long vy) {
    if (vx == 0 && vy == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - minimal net movement per cycle!" << endl;
        abort();
    }
}
```

3. **Invariant Checker for Matrix Check Inefficiency**:
   - **Description**: Ensures that the robot's path intersects with precomputed positions effectively.

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - matrix checking inefficiency!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original C++ Program

Next, we incorporate these invariant checks into the original program. The checks will be added at strategic points to avoid adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
long long X[110], Y[110];
long long mat[210][210];

void check_vector_multiple_invariant(long long a, long long b, long long vx, long long vy) {
    if (vx == 0 && vy == 0 && (a != 0 || b != 0)) {
        cerr << "Warning: Performance bottleneck condition triggered - target not reachable when net vector is zero!" << endl;
        abort();
    }
}

void check_minimal_adjustment_invariant(long long vx, long long vy) {
    if (vx == 0 && vy == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - minimal net movement per cycle!" << endl;
        abort();
    }
}

void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - matrix checking inefficiency!" << endl;
        abort();
    }
}

int main(int argc, char** argv) {
    long long a, b;
    cin >> a >> b;
    string PAT;
    cin >> PAT;
    long long x = 0, y = 0;
    X[0] = x, Y[0] = y;
    mat[x + 105][y + 105] = 1;
    int N = PAT.size();
    
    for (int i = 0; i < PAT.size(); ++i) {
        if (PAT[i] == 'U')
            y++;
        else if (PAT[i] == 'D')
            y--;
        else if (PAT[i] == 'L')
            x--;
        else
            x++;
        mat[x + 105][y + 105] = 1;
        X[i + 1] = x, Y[i + 1] = y;
    }
    
    long long vx = X[N], vy = Y[N];
    check_minimal_adjustment_invariant(vx, vy); // Check for minimal net movement

    check_vector_multiple_invariant(a, b, vx, vy); // Check for target reachability

    long long mi = 0;
    if (vx && vy)
        mi = min(abs(a / vx), abs(b / vy));
    else if (vx)
        mi = abs(a / vx);
    else if (vy)
        mi = abs(b / vy);
    mi = max(mi - 1000, 0LL);
    a -= vx * mi;
    b -= vy * mi;

    bool ok = 0;
    for (int i = 0; i < 1000000 && !ok; ++i) {
        if (a > -100 && a < 100 && b > -100 && b < 100) {
            check_matrix_invariant(!mat[a + 105][b + 105]); // Check matrix inefficiency
            if (mat[a + 105][b + 105]) ok = 1;
        }
        a -= vx;
        b -= vy;
    }

    cout << (ok ? "Yes" : "No") << endl;
}
```

### Explanation of Integration

- **`check_vector_multiple_invariant`** and **`check_minimal_adjustment_invariant`** are added after calculating the net displacement `(vx, vy)`. These checks ensure that the trajectory is feasible and not trivial.
- **`check_matrix_invariant`** is placed within the loop to ensure that the checking against precomputed positions is effective. This is done once per iteration before accessing the `mat` array.

These checks aim to provide early feedback about potential performance issues without significantly impacting the program's runtime behavior in non-critical paths.

