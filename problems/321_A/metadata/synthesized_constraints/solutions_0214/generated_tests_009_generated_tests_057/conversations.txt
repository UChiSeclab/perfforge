system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int a, b;
  cin >> a >> b;
  string s;
  cin >> s;
  int dx[256] = {};
  int dy[256] = {};
  dx['L'] = -1;
  dx['R'] = +1;
  dy['D'] = -1;
  dy['U'] = +1;
  int mx = 0, my = 0;
  int l = 0, r = 0;
  set<pair<int, int> > st;
  st.insert(make_pair(0, 0));
  for (int i = (0); i < (int)(s.size()); ++i) {
    mx += dx[s[i]];
    my += dy[s[i]];
    l = min(l, mx);
    r = max(r, mx);
    st.insert(make_pair(mx, my));
  }
  long long move = 0;
  long long x, y;
  if (st.count(make_pair(a, b))) goto check;
  if (mx != 0 && a / mx > 0) {
    move = max(a / mx - 5000, 0);
  } else if (my != 0 && b / my > 0) {
    move = max(b / my - 5000, 0);
  }
  x = mx * move, y = my * move;
  for (int j = (0); j < (int)(10000); ++j) {
    for (int i = (0); i < (int)(s.size()); ++i) {
      x += dx[s[i]];
      y += dy[s[i]];
      st.insert(make_pair(x, y));
    }
  }
check:
  if (st.count(make_pair(a, b)))
    cout << "Yes" << endl;
  else
    cout << "No" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(G.2) Fast Input

1 0
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int dx[256] = {}; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int dy[256] = {}; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  dx['L'] = -1; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  dx['R'] = +1; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  dy['D'] = -1; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  dy['U'] = +1; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int mx = 0, my = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  int l = 0, r = 0; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  set<pair<int, int> > st; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  st.insert(make_pair(0, 0)); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (int)(s.size()); ++i) { /* line 18 slow_hit_count: 101, fast_hit_count: 101 */
    mx += dx[s[i]]; /* line 19 slow_hit_count: 100, fast_hit_count: 100 */
    my += dy[s[i]]; /* line 20 slow_hit_count: 100, fast_hit_count: 100 */
    l = min(l, mx); /* line 21 slow_hit_count: 100, fast_hit_count: 100 */
    r = max(r, mx); /* line 22 slow_hit_count: 100, fast_hit_count: 100 */
    st.insert(make_pair(mx, my)); /* line 23 slow_hit_count: 100, fast_hit_count: 100 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  long long move = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  long long x, y; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  if (st.count(make_pair(a, b))) goto check; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  if (mx != 0 && a / mx > 0) { /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
    move = max(a / mx - 5000, 0); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (my != 0 && b / my > 0) { /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
    move = max(b / my - 5000, 0); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  x = mx * move, y = my * move; /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
  for (int j = (0); j < (int)(10000); ++j) { /* line 34 slow_hit_count: 10001, fast_hit_count: 0 */
    for (int i = (0); i < (int)(s.size()); ++i) { /* line 35 slow_hit_count: 1010000, fast_hit_count: 0 */
      x += dx[s[i]]; /* line 36 slow_hit_count: 1000000, fast_hit_count: 0 */
      y += dy[s[i]]; /* line 37 slow_hit_count: 1000000, fast_hit_count: 0 */
      st.insert(make_pair(x, y)); /* line 38 slow_hit_count: 1000000, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
check: /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
  if (st.count(make_pair(a, b))) /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "Yes" << endl; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "No" << endl; /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck and derive performance-characterizing invariants, let's perform the analysis in two phases as instructed:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The slow input significantly increases the hit counts for lines 34 through 38, with `1010000` hits on the inner loop. In contrast, the fast input does not reach these lines at all.
   - This suggests that the slow input causes the program to enter the nested loop starting at line 34, which iterates `10000 * |s|` times, where `|s|` is the length of the command string.

2. **Pinpoint Inefficient Code:**
   - The nested loop at lines 34-38 is the main source of inefficiency. It involves repetitive updates to the coordinates `x` and `y` and the set `st`, which collects visited positions. This operation is computationally expensive due to the large number of iterations.

3. **Inference on Interaction with Data Structures:**
   - The set `st` is used to track all positions visited by the robot. When the robot's path fails to reach (a, b) before entering this loop, the program attempts to brute-force check all possible placements up to a large number of iterations, which is inefficient.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, let's generate natural language statements to describe conditions under which the program slows down:

1. **Invariant #1: Inefficient Long Loop Execution**
   - **Natural Language Description:** "If the robot's initial movement path, defined by the command string, does not reach the target point (a, b) directly and requires iteration through a long loop, the computation may become slow."
   - **Rationale:** This captures the condition where the initial path doesn't intersect with (a, b), forcing the program to execute an extensive loop to check subsequent positions.

2. **Invariant #2: Inadequate Movement Step Size**
   - **Natural Language Description:** "If the net movement in either x or y direction per cycle of the command string is zero or small, and the difference between the target point and the starting point is large, the performance may degrade due to excessive looping."
   - **Rationale:** This describes scenarios where the robot's cyclic path doesn't contribute significantly towards reaching the target, necessitating additional iterations.

3. **Invariant #3: Repeated Set Operations**
   - **Natural Language Description:** "If the command string leads the robot on a complex path that repeatedly revisits positions within a large set, the overhead of managing this set can slow down execution."
   - **Rationale:** This invariant addresses the cost of repeated insertions into and searches within the set data structure, especially when the string results in revisiting many positions.

### Conclusion:

These invariants collectively describe the key conditions that can lead to performance bottlenecks in the given C program. By identifying these patterns, one can preemptively optimize or avoid such conditions during input generation or algorithm design.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

Solution (C++ code):
{solution}


assistant: Let's integrate the performance-characterizing invariants we derived into the C++ program. Below, I'm providing the checker functions for each invariant and then instrumenting the original C++ code with these checkers.

### Phase 3: Implementing Checkers for Natural Language Invariants

```cpp
#include <iostream>
#include <set>
#include <utility>
#include <string>

using namespace std;

// Checker for Inefficient Long Loop Execution
void check_long_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient long loop execution!" << endl;
        abort();
    }
}

// Checker for Inadequate Movement Step Size
void check_movement_step_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to inadequate movement step size!" << endl;
        abort();
    }
}

// Checker for Repeated Set Operations
void check_repeated_set_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to repeated set operations!" << endl;
        abort();
    }
}
```

### Phase 4: Propagating and Inserting Conditional Checks into the Program

Here is the instrumented C++ code with runtime checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions (as defined above)
void check_long_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient long loop execution!" << endl;
        abort();
    }
}

void check_movement_step_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to inadequate movement step size!" << endl;
        abort();
    }
}

void check_repeated_set_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to repeated set operations!" << endl;
        abort();
    }
}

int main() {
    int a, b;
    cin >> a >> b;
    string s;
    cin >> s;
    int dx[256] = {};
    int dy[256] = {};
    dx['L'] = -1;
    dx['R'] = +1;
    dy['D'] = -1;
    dy['U'] = +1;
    int mx = 0, my = 0;
    int l = 0, r = 0;
    set<pair<int, int>> st;
    st.insert(make_pair(0, 0));
    for (int i = 0; i < (int)(s.size()); ++i) {
        mx += dx[s[i]];
        my += dy[s[i]];
        l = min(l, mx);
        r = max(r, mx);
        st.insert(make_pair(mx, my));
    }
    
    // Checkers for Invariants
    // Check if a and b are unreachable with the initial moves
    check_long_loop_invariant(!st.count(make_pair(a, b)) && s.size() == 100);
    
    // Check if the net movement in x or y is inadequate
    int netMovementX = r - l;
    int netMovementY = my;
    check_movement_step_invariant(netMovementX == 0 && a != 0 || netMovementY == 0 && b != 0);
    
    long long move = 0;
    long long x, y;
    if (st.count(make_pair(a, b))) goto check;
    if (mx != 0 && a / mx > 0) {
        move = max(a / mx - 5000, 0);
    } else if (my != 0 && b / my > 0) {
        move = max(b / my - 5000, 0);
    }
    x = mx * move, y = my * move;
    
    // Check if the set is overutilized with repeating operations
    check_repeated_set_operations_invariant(move == 0 && s.size() == 100);
    
    for (int j = 0; j < 10000; ++j) {
        for (int i = 0; i < (int)(s.size()); ++i) {
            x += dx[s[i]];
            y += dy[s[i]];
            st.insert(make_pair(x, y));
        }
    }
check:
    if (st.count(make_pair(a, b)))
        cout << "Yes" << endl;
    else
        cout << "No" << endl;
    return 0;
}
```

### Explanation of Instrumentation

1. **Long Loop Execution Check:**
   - This check executes before entering the exhaustive loop. It verifies if the sequence of moves might enter an inefficient loop by checking if the target isn't already in the initial set and if the command length is at its maximum (100).

2. **Inadequate Movement Step Size Check:**
   - This check occurs after computing the net movements. It checks if the robot's movement doesn't allow it to change position meaningfully in one axis while a non-zero target is specified.

3. **Repeated Set Operations Check:**
   - This check is triggered if the robot must resort to the exhaustive loop due to ineffective initial movement, where the move is zero and the string length is 100.

These checks ensure that potential performance bottlenecks are flagged before they cause the computation to degrade, aligning with the performance-characterizing invariants derived.

