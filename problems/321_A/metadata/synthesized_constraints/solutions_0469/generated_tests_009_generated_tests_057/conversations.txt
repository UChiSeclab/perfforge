system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int i, j, n, t, m, a, b, cof, k, arr[1000000], dx, dy, p, xx, yy;
string s, s2;
int main() {
  cin >> a >> b;
  cin >> s;
  n = s.length();
  for (i = 0; i < n; i++) {
    if (s[i] == 'U') dy++;
    if (s[i] == 'D') dy--;
    if (s[i] == 'R') dx++;
    if (s[i] == 'L') dx--;
  }
  if (dx != 0)
    k = a / dx;
  else
    k = 1000000000000;
  if (k < 0) k = 0;
  k++;
  if (dy != 0)
    p = b / dy;
  else
    p = 1000000000000;
  if (p < 0) p = 0;
  p++;
  m = min(k, p);
  if (m < 1000) m = 1000;
  xx = dx * m;
  yy = dy * m;
  for (i = 0; i < 1000; i++)
    for (j = n - 1; j >= 0; j--) {
      if ((xx == a) && (yy == b)) {
        cout << "Yes";
        return 0;
      }
      if (s[j] == 'U') yy--;
      if (s[j] == 'D') yy++;
      if (s[j] == 'R') xx--;
      if (s[j] == 'L') xx++;
      if ((xx == a) && (yy == b)) {
        cout << "Yes";
        return 0;
      }
    }
  cout << "No";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(G.2) Fast Input

1 0
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int i, j, n, t, m, a, b, cof, k, arr[1000000], dx, dy, p, xx, yy; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string s, s2; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> s; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  n = s.length(); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 9 slow_hit_count: 101, fast_hit_count: 101 */
    if (s[i] == 'U') dy++; /* line 10 slow_hit_count: 100, fast_hit_count: 100 */
    if (s[i] == 'D') dy--; /* line 11 slow_hit_count: 100, fast_hit_count: 100 */
    if (s[i] == 'R') dx++; /* line 12 slow_hit_count: 100, fast_hit_count: 100 */
    if (s[i] == 'L') dx--; /* line 13 slow_hit_count: 100, fast_hit_count: 100 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (dx != 0) /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    k = a / dx; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    k = 1000000000000; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  if (k < 0) k = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  k++; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  if (dy != 0) /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    p = b / dy; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    p = 1000000000000; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  if (p < 0) p = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  p++; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  m = min(k, p); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  if (m < 1000) m = 1000; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  xx = dx * m; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  yy = dy * m; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < 1000; i++) /* line 31 slow_hit_count: 1001, fast_hit_count: 1 */
    for (j = n - 1; j >= 0; j--) { /* line 32 slow_hit_count: 101000, fast_hit_count: 3 */
      if ((xx == a) && (yy == b)) { /* line 33 slow_hit_count: 100000, fast_hit_count: 3 */
        cout << "Yes"; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
        return 0; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[j] == 'U') yy--; /* line 37 slow_hit_count: 100000, fast_hit_count: 3 */
      if (s[j] == 'D') yy++; /* line 38 slow_hit_count: 100000, fast_hit_count: 3 */
      if (s[j] == 'R') xx--; /* line 39 slow_hit_count: 100000, fast_hit_count: 3 */
      if (s[j] == 'L') xx++; /* line 40 slow_hit_count: 100000, fast_hit_count: 3 */
      if ((xx == a) && (yy == b)) { /* line 41 slow_hit_count: 100000, fast_hit_count: 3 */
        cout << "Yes"; /* line 42 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "No"; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 47 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To address the given task, let's analyze the slow and fast execution paths of the provided C code. We will diagnose why the slow input takes significantly longer and derive conditions that characterize when the program is likely to be slow.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Analysis of Hit Counts:**
   - The loop on line 31-45 is a nested loop, with the outer loop running 1000 times (`for (i = 0; i < 1000; i++)`) and the inner loop running `n` times (where `n` is the length of string `s`).
   - The hit counts for the inner loop are significantly higher for the slow input, indicating that the robot's movement checks and updates (lines 37-41) are exercised more extensively.

2. **Key Observation:**
   - The program checks whether the robot reaches the target coordinates `(a, b)` within these loops by calculating potential positions repeatedly. The slow input causes these calculations to occur much more frequently without reaching the target quickly.

3. **Potential Inefficiency:**
   - The computation of `k` and `p` as potential multipliers for reaching `(a, b)` does not always result in a quick resolution, especially when the command string's net movement (`dx`, `dy`) doesn't lead to the target efficiently.
   - The inner loop's condition `if ((xx == a) && (yy == b))` on lines 33 and 41 leads to frequent execution without necessarily achieving the target early in the loop, resulting in excessive iterations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Non-efficient Net Movement**
   - **Natural Language Description:** "The program may slow down significantly when the net result of the command string's movements (`dx`, `dy`) does not efficiently guide the robot towards the target coordinates `(a, b)`. This inefficiency is exacerbated when the commands cause the robot to circle around the origin without making net progress toward the target."
   - **Rationale:** If the movements don't significantly change `xx` and `yy` towards reaching `(a, b)`, the nested loops will execute many iterations without result.

2. **Invariant 2: Large Loop Iterations**
   - **Natural Language Description:** "If the net movement commands result in zero or near-zero increments (i.e., neither `dx` nor `dy` creates a path closer to `(a, b)`), the nested loop may iterate excessively, resulting in slow performance."
   - **Rationale:** Since the robot's path derived from the command string doesn't lead efficiently to the target, the loop runs repeatedly without progress.

### Conclusion

The slow performance is primarily caused by the inefficient path derived from the command string, which doesn't lead to the target `(a, b)` efficiently, resulting in excessive iterations through the nested loops. To detect these issues in future scenarios, it is important to check for command strings that result in minimal net movement relative to the robot's target.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants derived previously into C++ checker code snippets.

### Phase 3: Implement the Natural Language Invariants in C++

1. **Invariant 1: Non-efficient Net Movement**
   - **Checker Code:**
   ```cpp
   void check_inefficient_net_movement(long long dx, long long dy) {
       if (dx == 0 && dy == 0) {
           cerr << "Warning: Performance bottleneck condition triggered - inefficient net movement (dx and dy are zero)!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Large Loop Iterations**
   - **Checker Code:**
   ```cpp
   void check_large_loop_iterations(long long k, long long p, long long m) {
       if (m >= 1000 && (k == 1000000000000 || p == 1000000000000)) {
           cerr << "Warning: Performance bottleneck condition triggered - large loop iterations due to extreme k or p values!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, let's incorporate these checks into the original C++ code. We should place these checks after the relevant computations to ensure they verify the conditions appropriately.

```cpp
#include <bits/stdc++.h>
using namespace std;
long long int i, j, n, t, m, a, b, cof, k, arr[1000000], dx, dy, p, xx, yy;
string s, s2;

// Checker functions for performance bottlenecks

// Check for inefficient net movement
void check_inefficient_net_movement(long long dx, long long dy) {
    if (dx == 0 && dy == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient net movement (dx and dy are zero)!" << endl;
        abort();
    }
}

// Check for large loop iterations due to extreme values of k or p
void check_large_loop_iterations(long long k, long long p, long long m) {
    if (m >= 1000 && (k == 1000000000000 || p == 1000000000000)) {
        cerr << "Warning: Performance bottleneck condition triggered - large loop iterations due to extreme k or p values!" << endl;
        abort();
    }
}

int main() {
    cin >> a >> b;
    cin >> s;
    n = s.length();
    dx = dy = 0;
    for (i = 0; i < n; i++) {
        if (s[i] == 'U') dy++;
        if (s[i] == 'D') dy--;
        if (s[i] == 'R') dx++;
        if (s[i] == 'L') dx--;
    }

    // Check the net movement immediately after computing dx and dy
    check_inefficient_net_movement(dx, dy);

    if (dx != 0)
        k = a / dx;
    else
        k = 1000000000000;
    if (k < 0) k = 0;
    k++;
    if (dy != 0)
        p = b / dy;
    else
        p = 1000000000000;
    if (p < 0) p = 0;
    p++;
    m = min(k, p);
    if (m < 1000) m = 1000;

    // Check for potential large loop iterations
    check_large_loop_iterations(k, p, m);

    xx = dx * m;
    yy = dy * m;
    for (i = 0; i < 1000; i++)
        for (j = n - 1; j >= 0; j--) {
            if ((xx == a) && (yy == b)) {
                cout << "Yes";
                return 0;
            }
            if (s[j] == 'U') yy--;
            if (s[j] == 'D') yy++;
            if (s[j] == 'R') xx--;
            if (s[j] == 'L') xx++;
            if ((xx == a) && (yy == b)) {
                cout << "Yes";
                return 0;
            }
        }
    cout << "No";
}
```

### Explanation:

1. **`check_inefficient_net_movement`:** This function checks whether the net movement (`dx` and `dy`) results in no progression, which would cause the robot to remain near the origin without progressing to the target.

2. **`check_large_loop_iterations`:** This function is invoked after computing potential multipliers `k` and `p`, checking if they are extreme and leading to large unnecessary loop iterations, which could indicate inefficiency.

These checks are strategically placed to preemptively catch conditions leading to performance bottlenecks, assisting in identifying and preventing inefficient execution paths.

