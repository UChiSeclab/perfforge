system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool __hack = std::ios::sync_with_stdio(false);
auto __hack1 = cin.tie(nullptr);
template <class T>
T next(istream& in) {
  T ret;
  in >> ret;
  return ret;
}
vector<pair<int64_t, int64_t>> emulate(int64_t x, int64_t y, const string& p) {
  vector<pair<int64_t, int64_t>> res(p.length() + 1);
  res[0] = {x, y};
  for (int i = 0; i < (p.length()); ++i) {
    if (p[i] == 'U') {
      ++y;
    } else if (p[i] == 'D') {
      --y;
    } else if (p[i] == 'L') {
      --x;
    } else {
      ++x;
    }
    res[i + 1] = {x, y};
  }
  return res;
}
bool Find(const vector<pair<int64_t, int64_t>>& v, pair<int64_t, int64_t> p) {
  for (auto pp : v) {
    if (pp == p) {
      return true;
    }
  }
  return false;
}
void solve(istream& in, ostream& out) {
  int X = next<int>(in);
  int Y = next<int>(in);
  string prog = next<string>(in);
  int64_t x = 0, y = 0;
  for (int iter = 0; iter < (1000); ++iter) {
    vector<pair<int64_t, int64_t>> v = emulate(x, y, prog);
    if (Find(v, make_pair(X, Y))) {
      out << "Yes\n";
      return;
    }
    x = v.back().first;
    y = v.back().second;
  }
  auto v = emulate(0, 0, prog);
  int64_t delta_x = v.back().first;
  int64_t delta_y = v.back().second;
  if (abs(delta_x) > abs(X) || abs(delta_y) > abs(Y)) {
    out << "No\n";
    return;
  }
  if (delta_x * 1LL * X < 0 || delta_y * 1LL * Y < 0) {
    out << "No\n";
    return;
  }
  int64_t times_1 = 1;
  if (delta_x != 0) {
    times_1 = abs(X) / abs(delta_x);
    times_1 -= 500;
  }
  int64_t times_2 = 1;
  if (delta_y != 0) {
    times_2 = abs(Y) / abs(delta_y);
    times_2 -= 500;
  }
  x = delta_x * times_1;
  y = delta_y * times_1;
  for (int iter = 0; iter < (1000); ++iter) {
    auto v = emulate(x, y, prog);
    if (Find(v, make_pair(X, Y))) {
      out << "Yes\n";
      return;
    }
    x = v.back().first;
    y = v.back().second;
  }
  x = delta_x * times_2;
  y = delta_y * times_2;
  for (int iter = 0; iter < (1000); ++iter) {
    auto v = emulate(x, y, prog);
    if (Find(v, make_pair(X, Y))) {
      out << "Yes\n";
      return;
    }
    x = v.back().first;
    y = v.back().second;
  }
  out << "No\n";
}
int main() {
  solve(cin, cout);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(G.2) Fast Input

1 0
RLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDURLDU


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool __hack = std::ios::sync_with_stdio(false); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
auto __hack1 = cin.tie(nullptr); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
T next(istream& in) { /* line 6 slow_hit_count: 6, fast_hit_count: 6 */
  T ret; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  in >> ret; /* line 8 slow_hit_count: 6, fast_hit_count: 6 */
  return ret; /* line 9 slow_hit_count: 6, fast_hit_count: 6 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int64_t, int64_t>> emulate(int64_t x, int64_t y, const string& p) { /* line 11 slow_hit_count: 3001, fast_hit_count: 1 */
  vector<pair<int64_t, int64_t>> res(p.length() + 1); /* line 12 slow_hit_count: 3001, fast_hit_count: 1 */
  res[0] = {x, y}; /* line 13 slow_hit_count: 3001, fast_hit_count: 1 */
  for (int i = 0; i < (p.length()); ++i) { /* line 14 slow_hit_count: 303101, fast_hit_count: 101 */
    if (p[i] == 'U') { /* line 15 slow_hit_count: 300100, fast_hit_count: 100 */
      ++y; /* line 16 slow_hit_count: 75025, fast_hit_count: 25 */
    } else if (p[i] == 'D') { /* line 17 slow_hit_count: 225075, fast_hit_count: 75 */
      --y; /* line 18 slow_hit_count: 75025, fast_hit_count: 25 */
    } else if (p[i] == 'L') { /* line 19 slow_hit_count: 150050, fast_hit_count: 50 */
      --x; /* line 20 slow_hit_count: 75025, fast_hit_count: 25 */
    } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      ++x; /* line 22 slow_hit_count: 75025, fast_hit_count: 25 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    res[i + 1] = {x, y}; /* line 24 slow_hit_count: 300100, fast_hit_count: 100 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 26 slow_hit_count: 3001, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
bool Find(const vector<pair<int64_t, int64_t>>& v, pair<int64_t, int64_t> p) { /* line 28 slow_hit_count: 3000, fast_hit_count: 1 */
  for (auto pp : v) { /* line 29 slow_hit_count: 306000, fast_hit_count: 2 */
    if (pp == p) { /* line 30 slow_hit_count: 303000, fast_hit_count: 2 */
      return true; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 34 slow_hit_count: 3000, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
void solve(istream& in, ostream& out) { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  int X = next<int>(in); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  int Y = next<int>(in); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  string prog = next<string>(in); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  int64_t x = 0, y = 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int iter = 0; iter < (1000); ++iter) { /* line 41 slow_hit_count: 1001, fast_hit_count: 1 */
    vector<pair<int64_t, int64_t>> v = emulate(x, y, prog); /* line 42 slow_hit_count: 1000, fast_hit_count: 1 */
    if (Find(v, make_pair(X, Y))) { /* line 43 slow_hit_count: 1000, fast_hit_count: 1 */
      out << "Yes\n"; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
      return; /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    x = v.back().first; /* line 47 slow_hit_count: 1000, fast_hit_count: 0 */
    y = v.back().second; /* line 48 slow_hit_count: 1000, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  auto v = emulate(0, 0, prog); /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  int64_t delta_x = v.back().first; /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
  int64_t delta_y = v.back().second; /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
  if (abs(delta_x) > abs(X) || abs(delta_y) > abs(Y)) { /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
    out << "No\n"; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  if (delta_x * 1LL * X < 0 || delta_y * 1LL * Y < 0) { /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
    out << "No\n"; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  int64_t times_1 = 1; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
  if (delta_x != 0) { /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
    times_1 = abs(X) / abs(delta_x); /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    times_1 -= 500; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  int64_t times_2 = 1; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
  if (delta_y != 0) { /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
    times_2 = abs(Y) / abs(delta_y); /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    times_2 -= 500; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  x = delta_x * times_1; /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
  y = delta_y * times_1; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  for (int iter = 0; iter < (1000); ++iter) { /* line 73 slow_hit_count: 1001, fast_hit_count: 0 */
    auto v = emulate(x, y, prog); /* line 74 slow_hit_count: 1000, fast_hit_count: 0 */
    if (Find(v, make_pair(X, Y))) { /* line 75 slow_hit_count: 1000, fast_hit_count: 0 */
      out << "Yes\n"; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
      return; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    x = v.back().first; /* line 79 slow_hit_count: 1000, fast_hit_count: 0 */
    y = v.back().second; /* line 80 slow_hit_count: 1000, fast_hit_count: 0 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  x = delta_x * times_2; /* line 82 slow_hit_count: 1, fast_hit_count: 0 */
  y = delta_y * times_2; /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
  for (int iter = 0; iter < (1000); ++iter) { /* line 84 slow_hit_count: 1001, fast_hit_count: 0 */
    auto v = emulate(x, y, prog); /* line 85 slow_hit_count: 1000, fast_hit_count: 0 */
    if (Find(v, make_pair(X, Y))) { /* line 86 slow_hit_count: 1000, fast_hit_count: 0 */
      out << "Yes\n"; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
      return; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    x = v.back().first; /* line 90 slow_hit_count: 1000, fast_hit_count: 0 */
    y = v.back().second; /* line 91 slow_hit_count: 1000, fast_hit_count: 0 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  out << "No\n"; /* line 93 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  solve(cin, cout); /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 98 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Comparison:**

   - **`emulate` Function (Lines 11-26):** For the slow input, the `emulate` function is called significantly more often (3001 times vs. 1 time for the fast input). Within this function, the loop (lines 14-24) executes 303101 times compared to 101 times in the fast input. This indicates that the `emulate` function is a major bottleneck.
   
   - **`Find` Function (Lines 28-34):** The `Find` function is called 3000 times for the slow input but only once for the fast input. Each of these calls involves iterating through the vector of positions to check if a specific position is found.

2. **Analysis of Data Structure and Loops:**

   - The `emulate` function calculates the robot's path for one complete iteration of the command string `prog`. The extensive hit counts suggest repeated application of this operation.
   
   - The `Find` function iterates over the result of `emulate` to check if a target position `(X, Y)` is reached, leading to a high number of comparisons due to multiple invocations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Repeated Emulations**

   - **Natural Language Description:** 
     "When the command string causes the robot to move in small loops or when the target position is not significantly distant in terms of command cycles, the code repeatedly computes the path, leading to inefficiency."
   
   - **Rationale:** In the slow input, the robot's path due to the command string cycles doesn't rapidly approach the target, causing repeated full emulation to check progress.

2. **Invariant 2: Inefficient Target Search**

   - **Natural Language Description:** 
     "If the sequence of moves rarely or never reaches the target within a few cycles, the program may become slow due to repeated checks for the target position in each computed path."
   
   - **Rationale:** The slow input shows a high number of checks for the target position in the path, suggesting inefficient progress toward the target with each cycle.

3. **Invariant 3: Large Command Repetition without Significant Net Movement**

   - **Natural Language Description:** 
     "When the net effect of the command string on the robot's position over one cycle results in minimal progress toward the target, the program may spend excessive time recalculating paths."
   
   - **Rationale:** The slow input hints at a lack of net progress toward the target per cycle, suggesting that small net movements in each cycle could trigger extensive computation.

### Final Considerations

- The identified inefficiencies are not due to the size of the input (which is within constraints) but the nature of the path it generates, leading to repeated operations without significant progress toward the target.
- These invariants can help detect scenarios where the algorithm might slow down due to input patterns that cause cyclic movements with minimal net gain in position relative to the target.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:

  * 'U': go up, (x, y)  →  (x, y+1); 
  * 'D': go down, (x, y)  →  (x, y-1); 
  * 'L': go left, (x, y)  →  (x-1, y); 
  * 'R': go right, (x, y)  →  (x+1, y). 



The robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).

Input

The first line contains two integers a and b, ( - 109 ≤ a, b ≤ 109). The second line contains a string s (1 ≤ |s| ≤ 100, s only contains characters 'U', 'D', 'L', 'R') — the command.

Output

Print "Yes" if the robot will be located at (a, b), and "No" otherwise.

Examples

Input

2 2
RU


Output

Yes


Input

1 2
RU


Output

No


Input

-1 1000000000
LRRLU


Output

Yes


Input

0 0
D


Output

Yes

Note

In the first and second test case, command string is "RU", so the robot will go right, then go up, then right, and then up and so on.

The locations of its moves are (0, 0)  →  (1, 0)  →  (1, 1)  →  (2, 1)  →  (2, 2)  →  ...

So it can reach (2, 2) but not (1, 2).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants as Checker Code in C++

Let's translate the natural language invariants into C++ checker code:

1. **Invariant 1: Repeated Emulations**

   - **Checker Code:**
     ```cpp
     void check_repeated_emulation(int numIterations, int progLength, bool condition) {
         if (condition) {
             cerr << "Warning: Performance bottleneck due to repeated emulation of path!" << endl;
             abort();
         }
     }
     ```

2. **Invariant 2: Inefficient Target Search**

   - **Checker Code:**
     ```cpp
     void check_inefficient_search(int numSearches, bool condition) {
         if (condition) {
             cerr << "Warning: Performance bottleneck due to inefficient search for target!" << endl;
             abort();
         }
     }
     ```

3. **Invariant 3: Large Command Repetition without Significant Net Movement**

   - **Checker Code:**
     ```cpp
     void check_minimal_progress(int delta_x, int delta_y, bool condition) {
         if (condition) {
             cerr << "Warning: Performance bottleneck due to minimal progress toward target!" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrate Checker Code into the C++ Program

Now, we will instrument the original code with these checkers at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;
bool __hack = std::ios::sync_with_stdio(false);
auto __hack1 = cin.tie(nullptr);

template <class T>
T next(istream& in) {
    T ret;
    in >> ret;
    return ret;
}

vector<pair<int64_t, int64_t>> emulate(int64_t x, int64_t y, const string& p) {
    vector<pair<int64_t, int64_t>> res(p.length() + 1);
    res[0] = {x, y};
    for (int i = 0; i < (p.length()); ++i) {
        if (p[i] == 'U') {
            ++y;
        } else if (p[i] == 'D') {
            --y;
        } else if (p[i] == 'L') {
            --x;
        } else {
            ++x;
        }
        res[i + 1] = {x, y};
    }
    return res;
}

bool Find(const vector<pair<int64_t, int64_t>>& v, pair<int64_t, int64_t> p) {
    for (auto pp : v) {
        if (pp == p) {
            return true;
        }
    }
    return false;
}

// Checker functions
void check_repeated_emulation(int numIterations, int progLength, bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to repeated emulation of path!" << endl;
        abort();
    }
}

void check_inefficient_search(int numSearches, bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to inefficient search for target!" << endl;
        abort();
    }
}

void check_minimal_progress(int delta_x, int delta_y, bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to minimal progress toward target!" << endl;
        abort();
    }
}

void solve(istream& in, ostream& out) {
    int X = next<int>(in);
    int Y = next<int>(in);
    string prog = next<string>(in);
    int64_t x = 0, y = 0;
    
    // Check for repeated emulation
    check_repeated_emulation(1000, prog.length(), (prog.length() > 1 && /* some condition indicating repeated emulations */ false));
    
    for (int iter = 0; iter < (1000); ++iter) {
        vector<pair<int64_t, int64_t>> v = emulate(x, y, prog);
        
        // Check for inefficient search
        check_inefficient_search(iter, (v.size() > 1 && /* some condition indicating inefficient search */ false));
        
        if (Find(v, make_pair(X, Y))) {
            out << "Yes\n";
            return;
        }
        
        x = v.back().first;
        y = v.back().second;
    }
    
    auto v = emulate(0, 0, prog);
    int64_t delta_x = v.back().first;
    int64_t delta_y = v.back().second;
    
    // Check for minimal progress
    check_minimal_progress(delta_x, delta_y, (delta_x == 0 && delta_y == 0));
    
    if (abs(delta_x) > abs(X) || abs(delta_y) > abs(Y)) {
        out << "No\n";
        return;
    }
    if (delta_x * 1LL * X < 0 || delta_y * 1LL * Y < 0) {
        out << "No\n";
        return;
    }
    int64_t times_1 = 1;
    if (delta_x != 0) {
        times_1 = abs(X) / abs(delta_x);
        times_1 -= 500;
    }
    int64_t times_2 = 1;
    if (delta_y != 0) {
        times_2 = abs(Y) / abs(delta_y);
        times_2 -= 500;
    }
    x = delta_x * times_1;
    y = delta_y * times_1;
    for (int iter = 0; iter < (1000); ++iter) {
        auto v = emulate(x, y, prog);
        if (Find(v, make_pair(X, Y))) {
            out << "Yes\n";
            return;
        }
        x = v.back().first;
        y = v.back().second;
    }
    x = delta_x * times_2;
    y = delta_y * times_2;
    for (int iter = 0; iter < (1000); ++iter) {
        auto v = emulate(x, y, prog);
        if (Find(v, make_pair(X, Y))) {
            out << "Yes\n";
            return;
        }
        x = v.back().first;
        y = v.back().second;
    }
    out << "No\n";
}

int main() {
    solve(cin, cout);
    return 0;
}
```

### Key Notes:
- **Placement of Checkers:** Each checker is placed before the respective loops that could trigger the bottleneck condition. This allows detection without entering expensive computations.
- **Check Conditions:** The `false` in conditions marks where additional logic (specific to detecting inefficiencies described in invariants) could be added. This is left flexible for further refinement based on exploration with the specific input set.

