system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
long long k;
int Pow(int x, int a) {
  int ret = 1;
  while (a) {
    if (a & 1) ret = ret * 1ll * x % 998244353;
    x = x * 1ll * x % 998244353, a >>= 1;
  }
  return ret;
}
int J[500006], iJ[500006];
int C(int a, int b) {
  return J[a] * 1ll * iJ[b] % 998244353 * iJ[a - b] % 998244353;
}
void solve() {
  cin >> n >> k;
  if (k >= n) return puts("0"), void();
  J[0] = iJ[0] = 1;
  for (int i = (1), iend = (n << 1); i <= iend; ++i)
    J[i] = J[i - 1] * 1ll * i % 998244353, iJ[i] = Pow(J[i], 998244353 - 2);
  if (k == 0) return cout << J[n] << endl, void();
  int res = 0;
  for (int i = (k), iend = (n); i <= iend; ++i) {
    res = (res + (i - k & 1 ? 998244353 - 1 : 1) * 1ll * C(n, n - i) %
                     998244353 * Pow(n - i, n) % 998244353 * C(i, k)) %
          998244353;
  }
  cout << res * 2 % 998244353 << endl;
}
signed main() { solve(); }


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000 1


(G.2) Fast Input

200000 200000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int Pow(int x, int a) { /* line 5 slow_hit_count: 600000, fast_hit_count: 0 */
  int ret = 1; /* line 6 slow_hit_count: 600000, fast_hit_count: 0 */
  while (a) { /* line 7 slow_hit_count: 16200000, fast_hit_count: 0 */
    if (a & 1) ret = ret * 1ll * x % 998244353; /* line 8 slow_hit_count: 15600000, fast_hit_count: 0 */
    x = x * 1ll * x % 998244353, a >>= 1; /* line 9 slow_hit_count: 15600000, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 11 slow_hit_count: 600000, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int J[500006], iJ[500006]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int C(int a, int b) { /* line 14 slow_hit_count: 400000, fast_hit_count: 0 */
  return J[a] * 1ll * iJ[b] % 998244353 * iJ[a - b] % 998244353; /* line 15 slow_hit_count: 400000, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  if (k >= n) return puts("0"), void(); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  J[0] = iJ[0] = 1; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = (1), iend = (n << 1); i <= iend; ++i) /* line 21 slow_hit_count: 400001, fast_hit_count: 0 */
    J[i] = J[i - 1] * 1ll * i % 998244353, iJ[i] = Pow(J[i], 998244353 - 2); /* line 22 slow_hit_count: 400000, fast_hit_count: 0 */
  if (k == 0) return cout << J[n] << endl, void(); /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
  int res = 0; /* line 24 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = (k), iend = (n); i <= iend; ++i) { /* line 25 slow_hit_count: 200001, fast_hit_count: 0 */
    res = (res + (i - k & 1 ? 998244353 - 1 : 1) * 1ll * C(n, n - i) % /* line 26 slow_hit_count: 200000, fast_hit_count: 0 */
                     998244353 * Pow(n - i, n) % 998244353 * C(i, k)) % /* line 27 slow_hit_count: 200000, fast_hit_count: 0 */
          998244353; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res * 2 % 998244353 << endl; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { solve(); } /* line 32 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C code, we need to analyze the hit counts provided for both the slow and fast inputs. We will then derive performance-characterizing invariants based on this analysis.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `Pow`:** 
   - **Slow Hit Count:** 16,200,000 (line 7), 15,600,000 (lines 8 and 9)
   - **Fast Hit Count:** 0
   - The `Pow` function is heavily utilized during the slow input run. This function performs modular exponentiation, which becomes expensive when called repeatedly.

2. **Function `C`:**
   - **Slow Hit Count:** 400,000 (line 15)
   - **Fast Hit Count:** 0
   - The `C` function (calculating combinations) is invoked frequently during the slow input run.

3. **Loop inside `solve`:** 
   - **Lines 21-22 and 25-27:**
     - Heavy hit count in the slow run, indicating significant iteration over a large range.
     - These loops contribute substantially to the use of `Pow` and `C`, where the computations within these loops are expensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the slow path is triggered by certain conditions related to the specific values of `n` and `k`. Here are performance-characterizing invariants:

1. **Modular Exponentiation Overhead:**
   - **Invariant:** "When the difference between `n` and `k` is large, especially `k` being much smaller than `n`, the function `Pow` is called extensively due to the need for computing powers of `(n - i)` in the loop. This can significantly slow down the program."
   - **Explanation:** If `k` is much smaller compared to `n`, the loop iterates many times, and each iteration involves computing powers of a value near `n`, resulting in high computational overhead.

2. **Combination Calculation Overhead:**
   - **Invariant:** "When `k` is small, the combination calculations become numerous, leading to increased calls to the `C` function. This overhead can slow the program when `n` is large."
   - **Explanation:** The combination calculations are intensive, and their frequency increases when `k` is small relative to `n`.

3. **Loop Iteration Impact:**
   - **Invariant:** "When `k` is small, the nested loops over a range determined by `n` and `k` result in repeated expensive computations, slowing down the program."
   - **Explanation:** The loops perform operations that grow with the range determined by `n - k`, resulting in significant execution time when `k` is small.

These invariants abstract the conditions that lead to slow execution without relying on specific numeric examples from the slow input. They help identify patterns or input configurations likely to cause similar slowdowns in other scenarios, helping in optimizing or diagnosing potential bottlenecks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4, where we implement and integrate the performance checkers into the given C++ code.

### Phase 3: Implement the Natural Language Invariants in C++
Based on the invariants derived earlier, we will implement checker functions in C++.

#### Invariant 1: Modular Exponentiation Overhead
```cpp
void check_pow_invariant(int n, long long k, int i, int threshold) {
    if (n - i >= threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular exponentiation!" << endl;
        abort();
    }
}
```

#### Invariant 2: Combination Calculation Overhead
```cpp
void check_combination_invariant(int n, long long k, int threshold) {
    if (k < threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent combination calculations!" << endl;
        abort();
    }
}
```

#### Invariant 3: Loop Iteration Impact
```cpp
void check_loop_invariant(int n, long long k, int threshold) {
    if (k < threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive loop iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Here is the instrumented C++ code with the checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n;
long long k;

// Checker functions
void check_pow_invariant(int n, long long k, int i, int threshold) {
    if (n - i >= threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular exponentiation!" << endl;
        abort();
    }
}

void check_combination_invariant(int n, long long k, int threshold) {
    if (k < threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent combination calculations!" << endl;
        abort();
    }
}

void check_loop_invariant(int n, long long k, int threshold) {
    if (k < threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive loop iterations!" << endl;
        abort();
    }
}

int Pow(int x, int a) {
  int ret = 1;
  while (a) {
    if (a & 1) ret = ret * 1ll * x % 998244353;
    x = x * 1ll * x % 998244353, a >>= 1;
  }
  return ret;
}

int J[500006], iJ[500006];

int C(int a, int b) {
  return J[a] * 1ll * iJ[b] % 998244353 * iJ[a - b] % 998244353;
}

void solve() {
  cin >> n >> k;

  // Performance checkers to catch bottleneck conditions
  check_combination_invariant(n, k, 1);
  check_loop_invariant(n, k, 1);

  if (k >= n) return puts("0"), void();
  
  J[0] = iJ[0] = 1;
  for (int i = 1, iend = (n << 1); i <= iend; ++i)
    J[i] = J[i - 1] * 1ll * i % 998244353, iJ[i] = Pow(J[i], 998244353 - 2);
  
  if (k == 0) return cout << J[n] << endl, void();
  
  int res = 0;
  for (int i = k, iend = n; i <= iend; ++i) {
    // Check for modular exponentiation overhead
    check_pow_invariant(n, k, i, n / 2); // Arbitrary threshold for demonstration

    res = (res + (i - k & 1 ? 998244353 - 1 : 1) * 1ll * C(n, n - i) %
                     998244353 * Pow(n - i, n) % 998244353 * C(i, k)) %
          998244353;
  }
  
  cout << res * 2 % 998244353 << endl;
}

signed main() {
  solve();
}
```

### Explanation:

- **Checker Placement:**
  - `check_combination_invariant` and `check_loop_invariant` are placed after input reading to ensure the conditions are evaluated once before entering any loops.
  - `check_pow_invariant` is placed inside the loop, but with a condition that ensures it only fires if a certain threshold is surpassed, avoiding excessive checks.

- **Thresholds:**
  - These thresholds are chosen based on heuristics relevant to the problem's constraints and should be adjusted based on profiling data. Here, they are illustrative.

By integrating these checks, we can catch performance bottlenecks dynamically, helping identify problematic input configurations during testing and fuzzing.

