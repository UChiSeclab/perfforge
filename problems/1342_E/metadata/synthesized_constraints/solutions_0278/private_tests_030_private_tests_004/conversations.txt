system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 998244353;
const int G = 3;
#pragma GCC target("avx")
#pragma GCC optimize(3)
#pragma GCC optimize("Ofast")
#pragma GCC optimize("inline")
#pragma GCC optimize("unroll-loops")
inline long long read() {
  long long x = 0, f = 1;
  char c = getchar();
  while (c < '0' || c > '9') {
    if (c == '-') f = -1;
    c = getchar();
  }
  while (c >= '0' && c <= '9') {
    x = (x << 3) + (x << 1) + c - '0';
    c = getchar();
  }
  return x * f;
}
int n, m;
long long t;
int fac[600040], inv[600040];
int qpow(int a, int b) {
  int ans = 1;
  while (b) {
    if (b & 1) ans = (long long)ans * a % mod;
    a = (long long)a * a % mod;
    b >>= 1;
  }
  return ans;
}
const int invG = qpow(G, mod - 2);
int f[600040], g[600040], a[600040];
int tr[600040];
void NTT(int *f, int flag, int n) {
  for (int i = 0; i < n; ++i) {
    if (i < tr[i]) swap(f[i], f[tr[i]]);
  }
  for (int p = 2; p <= n; p <<= 1) {
    int len = (p >> 1);
    int wn = qpow(flag ? G : invG, (mod - 1) / p);
    for (int k = 0; k < n; k += p) {
      int buf = 1;
      for (int i = k; i < k + len; ++i) {
        int tmp = (long long)f[i + len] * buf % mod;
        f[i + len] = (f[i] - tmp + mod) % mod;
        f[i] = (f[i] + tmp) % mod;
        buf = (long long)buf * wn % mod;
      }
    }
  }
  if (!flag) {
    int invn = qpow(n, mod - 2);
    for (int i = 0; i < n; ++i) {
      f[i] = (long long)f[i] * invn % mod;
    }
  }
}
void init(int n) {
  fac[0] = 1;
  for (int i = 1; i <= n; ++i) {
    fac[i] = (long long)fac[i - 1] * i % mod;
  }
  inv[n] = qpow(fac[n], mod - 2);
  for (int i = n - 1; i >= 0; --i) {
    inv[i] = (long long)inv[i + 1] * (i + 1) % mod;
  }
}
int C(int n, int m) {
  return (long long)fac[n] * inv[m] % mod * inv[n - m] % mod;
}
void Solve(int l, int r) {
  if (l + 1 == r) {
    if (!l) return;
    f[l] = (qpow(l, m) - (long long)f[l] * fac[l] % mod + mod) % mod;
    return;
  }
  int mid = (l + r) >> 1;
  Solve(l, mid);
  int lim = r - l;
  for (int i = 0; i < lim; ++i) {
    tr[i] = ((tr[i >> 1] >> 1) | ((i & 1) ? lim >> 1 : 0));
  }
  static int w[600040];
  for (int i = 0; i < lim; ++i) {
    g[i] = inv[i];
  }
  for (int i = l; i < mid; ++i) {
    w[i - l] = (long long)f[i] * inv[i] % mod;
  }
  for (int i = mid; i < r; ++i) {
    w[i - l] = 0;
  }
  NTT(g, 1, lim), NTT(w, 1, lim);
  for (int i = 0; i < lim; ++i) {
    g[i] = (long long)g[i] * w[i] % mod;
  }
  NTT(g, 0, lim);
  for (int i = mid; i < r; ++i) f[i] = (f[i] + g[i - l]) % mod;
  Solve(mid, r);
}
int main() {
  m = read(), t = read();
  if (t >= m) {
    printf("0\n");
    return 0;
  }
  init(m);
  n = m - t;
  if (n == m) {
    printf("%d\n", fac[m]);
    return 0;
  }
  int lim = 1;
  while (lim < n + 1) lim <<= 1;
  Solve(0, lim);
  printf("%d\n", 2LL * f[n] % mod * C(m, n) % mod);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000 100


(G.2) Fast Input

200000 200000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int G = 3; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target("avx") /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize(3) /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("inline") /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("unroll-loops") /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
inline long long read() { /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  long long x = 0, f = 1; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  char c = getchar(); /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  while (c < '0' || c > '9') { /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
    if (c == '-') f = -1; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    c = getchar(); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  while (c >= '0' && c <= '9') { /* line 17 slow_hit_count: 11, fast_hit_count: 14 */
    x = (x << 3) + (x << 1) + c - '0'; /* line 18 slow_hit_count: 9, fast_hit_count: 12 */
    c = getchar(); /* line 19 slow_hit_count: 9, fast_hit_count: 12 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return x * f; /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long t; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int fac[600040], inv[600040]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int qpow(int a, int b) { /* line 26 slow_hit_count: 2097092, fast_hit_count: 1 */
  int ans = 1; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 28 slow_hit_count: 58719041, fast_hit_count: 31 */
    if (b & 1) ans = (long long)ans * a % mod; /* line 29 slow_hit_count: 56621949, fast_hit_count: 30 */
    a = (long long)a * a % mod; /* line 30 slow_hit_count: 56621949, fast_hit_count: 30 */
    b >>= 1; /* line 31 slow_hit_count: 56621949, fast_hit_count: 30 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 33 slow_hit_count: 2097092, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
const int invG = qpow(G, mod - 2); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int f[600040], g[600040], a[600040]; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int tr[600040]; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
void NTT(int *f, int flag, int n) { /* line 38 slow_hit_count: 786429, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 39 slow_hit_count: 14942205, fast_hit_count: 0 */
    if (i < tr[i]) swap(f[i], f[tr[i]]); /* line 40 slow_hit_count: 14155776, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (int p = 2; p <= n; p <<= 1) { /* line 42 slow_hit_count: 2359233, fast_hit_count: 0 */
    int len = (p >> 1); /* line 43 slow_hit_count: 1572804, fast_hit_count: 0 */
    int wn = qpow(flag ? G : invG, (mod - 1) / p); /* line 44 slow_hit_count: 1572804, fast_hit_count: 0 */
    for (int k = 0; k < n; k += p) { /* line 45 slow_hit_count: 14942151, fast_hit_count: 0 */
      int buf = 1; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = k; i < k + len; ++i) { /* line 47 slow_hit_count: 80609283, fast_hit_count: 0 */
        int tmp = (long long)f[i + len] * buf % mod; /* line 48 slow_hit_count: 67239936, fast_hit_count: 0 */
        f[i + len] = (f[i] - tmp + mod) % mod; /* line 49 slow_hit_count: 67239936, fast_hit_count: 0 */
        f[i] = (f[i] + tmp) % mod; /* line 50 slow_hit_count: 67239936, fast_hit_count: 0 */
        buf = (long long)buf * wn % mod; /* line 51 slow_hit_count: 67239936, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  if (!flag) { /* line 55 slow_hit_count: 786429, fast_hit_count: 0 */
    int invn = qpow(n, mod - 2); /* line 56 slow_hit_count: 262143, fast_hit_count: 0 */
    for (int i = 0; i < n; ++i) { /* line 57 slow_hit_count: 4980735, fast_hit_count: 0 */
      f[i] = (long long)f[i] * invn % mod; /* line 58 slow_hit_count: 4718592, fast_hit_count: 0 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 786429, fast_hit_count: 0 */
void init(int n) { /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
  fac[0] = 1; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) { /* line 64 slow_hit_count: 200001, fast_hit_count: 0 */
    fac[i] = (long long)fac[i - 1] * i % mod; /* line 65 slow_hit_count: 200000, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  inv[n] = qpow(fac[n], mod - 2); /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = n - 1; i >= 0; --i) { /* line 68 slow_hit_count: 200001, fast_hit_count: 0 */
    inv[i] = (long long)inv[i + 1] * (i + 1) % mod; /* line 69 slow_hit_count: 200000, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
int C(int n, int m) { /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  return (long long)fac[n] * inv[m] % mod * inv[n - m] % mod; /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
void Solve(int l, int r) { /* line 75 slow_hit_count: 262144, fast_hit_count: 0 */
  if (l + 1 == r) { /* line 76 slow_hit_count: 524287, fast_hit_count: 0 */
    if (!l) return; /* line 77 slow_hit_count: 262144, fast_hit_count: 0 */
    f[l] = (qpow(l, m) - (long long)f[l] * fac[l] % mod + mod) % mod; /* line 78 slow_hit_count: 262143, fast_hit_count: 0 */
    return; /* line 79 slow_hit_count: 262143, fast_hit_count: 0 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = (l + r) >> 1; /* line 81 slow_hit_count: 262143, fast_hit_count: 0 */
  Solve(l, mid); /* line 82 slow_hit_count: 262143, fast_hit_count: 0 */
  int lim = r - l; /* line 83 slow_hit_count: 262143, fast_hit_count: 0 */
  for (int i = 0; i < lim; ++i) { /* line 84 slow_hit_count: 4980735, fast_hit_count: 0 */
    tr[i] = ((tr[i >> 1] >> 1) | ((i & 1) ? lim >> 1 : 0)); /* line 85 slow_hit_count: 4718592, fast_hit_count: 0 */
  } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  static int w[600040]; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < lim; ++i) { /* line 88 slow_hit_count: 4980735, fast_hit_count: 0 */
    g[i] = inv[i]; /* line 89 slow_hit_count: 4718592, fast_hit_count: 0 */
  } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = l; i < mid; ++i) { /* line 91 slow_hit_count: 2621439, fast_hit_count: 0 */
    w[i - l] = (long long)f[i] * inv[i] % mod; /* line 92 slow_hit_count: 2359296, fast_hit_count: 0 */
  } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = mid; i < r; ++i) { /* line 94 slow_hit_count: 2621439, fast_hit_count: 0 */
    w[i - l] = 0; /* line 95 slow_hit_count: 2359296, fast_hit_count: 0 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  NTT(g, 1, lim), NTT(w, 1, lim); /* line 97 slow_hit_count: 262143, fast_hit_count: 0 */
  for (int i = 0; i < lim; ++i) { /* line 98 slow_hit_count: 4980735, fast_hit_count: 0 */
    g[i] = (long long)g[i] * w[i] % mod; /* line 99 slow_hit_count: 4718592, fast_hit_count: 0 */
  } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  NTT(g, 0, lim); /* line 101 slow_hit_count: 262143, fast_hit_count: 0 */
  for (int i = mid; i < r; ++i) f[i] = (f[i] + g[i - l]) % mod; /* line 102 slow_hit_count: 2621439, fast_hit_count: 0 */
  Solve(mid, r); /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
  m = read(), t = read(); /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
  if (t >= m) { /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
    printf("0\n"); /* line 108 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 109 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  init(m); /* line 111 slow_hit_count: 1, fast_hit_count: 0 */
  n = m - t; /* line 112 slow_hit_count: 1, fast_hit_count: 0 */
  if (n == m) { /* line 113 slow_hit_count: 1, fast_hit_count: 0 */
    printf("%d\n", fac[m]); /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
  int lim = 1; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  while (lim < n + 1) lim <<= 1; /* line 118 slow_hit_count: 19, fast_hit_count: 0 */
  Solve(0, lim); /* line 119 slow_hit_count: 1, fast_hit_count: 0 */
  printf("%d\n", 2LL * f[n] % mod * C(m, n) % mod); /* line 120 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 121 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 122 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count data and the provided code, we can identify the following expensive or inefficient code segments:

1. **Function `qpow`:** The `qpow` function is called extremely frequently in the slow input case, specifically line 26 and its loop starting at line 28. The hit count for some lines reaches over 56 million, indicating this function is being called or recursed into very often. It calculates powers using exponentiation by squaring, which is efficient for a single call, but the sheer number of invocations suggests a computational bottleneck.

2. **Function `NTT`:** The `NTT` function is called a significant number of times (786,429 hits on line 38), and within it, lines 47 to 51, which handle nested loops for the number-theoretic transform, are hit tens of millions of times. This function is likely a major contributor to slower performance due to its complex operations and the nested loop structure.

3. **Function `Solve`:** The `Solve` function features recursive calls (line 82 and line 103), and the recursive nature combined with other operations calls the `NTT` function, compounding the problem. It receives 262,144 hits at certain lines, indicating substantial recursion depth or breadth.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Frequent Power Calculations:**
   - When the problem size involves large power calculations, the repeated invocation of the `qpow` function can lead to significant computational overhead. This is particularly pronounced if the sequence of powers required grows with the size of the input due to the nature of the algorithm.
   - **Invariant:** "If the algorithm frequently calculates high powers for a large number of elements, the power calculation function `qpow` might be called excessively, degrading performance."

2. **Costly Recursive and Transform Operations:**
   - The recursion in `Solve`, combined with frequent calls to `NTT`, suggests that deeply nested recursive structures or high branching factors can lead to a slowdown. This is exacerbated by complex mathematical operations within each recursive step.
   - **Invariant:** "If the algorithm employs deep recursion with frequent complex mathematical transformations, such as NTT, the performance may degrade due to the sheer number of operations in recursive calls."

3. **Large-Scale Transformations:**
   - The use of NTT for polynomial multiplication and convolutions on large data sets can cause a slowdown due to the extensive computation required, especially when handling large arrays or matrices as the input size approaches constraints (e.g., n = 200,000).
   - **Invariant:** "If the input size nears its upper constraint and involves transformations like NTT on large data structures, the performance is likely to degrade due to heavy computation and memory usage."

These invariants help in understanding potential slow paths in the algorithm, particularly under conditions of large input sizes and complex recursive transformations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's implement the performance-characterizing invariants as runtime checks in C++.

1. **Frequent Power Calculations Check:**
   - We will check if there are conditions under which the `qpow` function is likely called excessively. This could be when a large number of power calculations are performed for a specific sequence of numbers.

```cpp
void check_qpow_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: qpow_invariant triggered - excessive power calculations" << endl;
        abort();
    }
}
```

2. **Costly Recursive and Transform Operations Check:**
   - We will check if the recursion depth or the number of operations in recursive calls become excessively large. 

```cpp
void check_recursive_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: recursive_invariant triggered - deep recursion or high operations count" << endl;
        abort();
    }
}
```

3. **Large-Scale Transformations Check:**
   - We will check if the transformations, especially involving the NTT on large data, are being frequently applied.

```cpp
void check_ntt_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: ntt_invariant triggered - intense large-scale transformations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Here is how we can integrate the checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 998244353;
const int G = 3;
#pragma GCC target("avx")
#pragma GCC optimize(3)
#pragma GCC optimize("Ofast")
#pragma GCC optimize("inline")
#pragma GCC optimize("unroll-loops")

// Checkers for performance bottlenecks
void check_qpow_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: qpow_invariant triggered - excessive power calculations" << endl;
        abort();
    }
}

void check_recursive_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: recursive_invariant triggered - deep recursion or high operations count" << endl;
        abort();
    }
}

void check_ntt_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: ntt_invariant triggered - intense large-scale transformations" << endl;
        abort();
    }
}

inline long long read() {
    long long x = 0, f = 1;
    char c = getchar();
    while (c < '0' || c > '9') {
        if (c == '-') f = -1;
        c = getchar();
    }
    while (c >= '0' && c <= '9') {
        x = (x << 3) + (x << 1) + c - '0';
        c = getchar();
    }
    return x * f;
}

int n, m;
long long t;
int fac[600040], inv[600040];
int qpow(int a, int b) {
    int ans = 1;
    while (b) {
        if (b & 1) ans = (long long)ans * a % mod;
        a = (long long)a * a % mod;
        b >>= 1;
    }
    return ans;
}

const int invG = qpow(G, mod - 2);
int f[600040], g[600040], a[600040];
int tr[600040];

void NTT(int *f, int flag, int n) {
    for (int i = 0; i < n; ++i) {
        if (i < tr[i]) swap(f[i], f[tr[i]]);
    }
    for (int p = 2; p <= n; p <<= 1) {
        int len = (p >> 1);
        int wn = qpow(flag ? G : invG, (mod - 1) / p);
        for (int k = 0; k < n; k += p) {
            int buf = 1;
            for (int i = k; i < k + len; ++i) {
                int tmp = (long long)f[i + len] * buf % mod;
                f[i + len] = (f[i] - tmp + mod) % mod;
                f[i] = (f[i] + tmp) % mod;
                buf = (long long)buf * wn % mod;
            }
        }
    }
    if (!flag) {
        int invn = qpow(n, mod - 2);
        for (int i = 0; i < n; ++i) {
            f[i] = (long long)f[i] * invn % mod;
        }
    }
}

void init(int n) {
    fac[0] = 1;
    for (int i = 1; i <= n; ++i) {
        fac[i] = (long long)fac[i - 1] * i % mod;
    }
    inv[n] = qpow(fac[n], mod - 2);
    for (int i = n - 1; i >= 0; --i) {
        inv[i] = (long long)inv[i + 1] * (i + 1) % mod;
    }
}

int C(int n, int m) {
    return (long long)fac[n] * inv[m] % mod * inv[n - m] % mod;
}

void Solve(int l, int r) {
    if (l + 1 == r) {
        if (!l) return;
        f[l] = (qpow(l, m) - (long long)f[l] * fac[l] % mod + mod) % mod;
        return;
    }
    int mid = (l + r) >> 1;
    Solve(l, mid);
    int lim = r - l;
    for (int i = 0; i < lim; ++i) {
        tr[i] = ((tr[i >> 1] >> 1) | ((i & 1) ? lim >> 1 : 0));
    }
    static int w[600040];
    for (int i = 0; i < lim; ++i) {
        g[i] = inv[i];
    }
    for (int i = l; i < mid; ++i) {
        w[i - l] = (long long)f[i] * inv[i] % mod;
    }
    for (int i = mid; i < r; ++i) {
        w[i - l] = 0;
    }
    NTT(g, 1, lim), NTT(w, 1, lim);
    for (int i = 0; i < lim; ++i) {
        g[i] = (long long)g[i] * w[i] % mod;
    }
    NTT(g, 0, lim);
    for (int i = mid; i < r; ++i) f[i] = (f[i] + g[i - l]) % mod;
    Solve(mid, r);
}

int main() {
    m = read(), t = read();
    if (t >= m) {
        printf("0\n");
        return 0;
    }

    init(m);

    // Check for frequent power calculations
    check_qpow_invariant(m > 1000);  // Assuming a threshold for excessive power usage

    n = m - t;
    if (n == m) {
        printf("%d\n", fac[m]);
        return 0;
    }

    int lim = 1;
    while (lim < n + 1) lim <<= 1;

    // Check for recursive depth or high operations
    check_recursive_invariant(lim > 1000);  // Threshold on lim to detect deep recursion

    Solve(0, lim);

    // Check for large scale NTT transformations
    check_ntt_invariant(lim > 1000);  // Threshold on lim to detect intense NTT

    printf("%d\n", 2LL * f[n] % mod * C(m, n) % mod);
    return 0;
}
```

### Explanation

- **Check for Frequent Power Calculations:** The `check_qpow_invariant` is placed after initialization to detect excessive power calculations. Threshold choice assumes a level of complexity where performance may degrade.
  
- **Check for Recursive and Transform Operations:** The `check_recursive_invariant` is added after calculating `lim`, right before calling `Solve`. This helps detect if the recursion depth or operations may become excessive.

- **Check for Large-Scale Transformations:** The `check_ntt_invariant` is placed following the `Solve` function call, specifically to check if `lim` indicates a large-scale NTT operation is applied.

These checks are designed to detect potential performance issues early without introducing overhead in critical loops.

