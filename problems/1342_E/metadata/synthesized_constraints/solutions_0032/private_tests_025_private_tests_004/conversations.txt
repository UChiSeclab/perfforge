system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MOD = 998244353;
const int MX = 2e5 + 5;
long long n, k, f[MX];
long long fpow(long long a, long long p) {
  long long res = 1LL;
  while (p) {
    if (p & 1LL) res = res * a % MOD;
    a = a * a % MOD;
    p >>= 1LL;
  }
  return res;
}
long long nCk(long long N, long long K) {
  long long res = f[N];
  res = res * fpow(f[N - K], MOD - 2LL) % MOD;
  res = res * fpow(f[K], MOD - 2LL) % MOD;
  return res % MOD;
}
long long stirling(long long N, long long K) {
  long long res = 0LL;
  for (int j = 0; j <= K; ++j) {
    long long tmp = nCk(K, j) * fpow(j, N) % MOD;
    if ((K - j) & 1) tmp = -tmp;
    res += tmp;
    if (res >= MOD) res -= MOD;
    if (res < 0) res += MOD;
  }
  res = res * fpow(f[K], MOD - 2LL) % MOD;
  return res;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  cin >> n >> k;
  if (k >= n) {
    cout << 0;
    return 0;
  }
  f[0] = 1LL;
  for (int i = 1; i < MX; ++i) f[i] = f[i - 1] * i * 1LL % MOD;
  long long res = nCk(n, k) * stirling(n, n - k) % MOD;
  res = res * f[n - k] % MOD;
  if (k) res = res * 2LL % MOD;
  cout << res;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000 0


(G.2) Fast Input

200000 200000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MX = 2e5 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long n, k, f[MX]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long fpow(long long a, long long p) { /* line 6 slow_hit_count: 600006, fast_hit_count: 0 */
  long long res = 1LL; /* line 7 slow_hit_count: 600006, fast_hit_count: 0 */
  while (p) { /* line 8 slow_hit_count: 16200174, fast_hit_count: 0 */
    if (p & 1LL) res = res * a % MOD; /* line 9 slow_hit_count: 15600168, fast_hit_count: 0 */
    a = a * a % MOD; /* line 10 slow_hit_count: 15600168, fast_hit_count: 0 */
    p >>= 1LL; /* line 11 slow_hit_count: 15600168, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 13 slow_hit_count: 600006, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long nCk(long long N, long long K) { /* line 15 slow_hit_count: 200002, fast_hit_count: 0 */
  long long res = f[N]; /* line 16 slow_hit_count: 200002, fast_hit_count: 0 */
  res = res * fpow(f[N - K], MOD - 2LL) % MOD; /* line 17 slow_hit_count: 200002, fast_hit_count: 0 */
  res = res * fpow(f[K], MOD - 2LL) % MOD; /* line 18 slow_hit_count: 200002, fast_hit_count: 0 */
  return res % MOD; /* line 19 slow_hit_count: 200002, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long stirling(long long N, long long K) { /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
  long long res = 0LL; /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
  for (int j = 0; j <= K; ++j) { /* line 23 slow_hit_count: 200002, fast_hit_count: 0 */
    long long tmp = nCk(K, j) * fpow(j, N) % MOD; /* line 24 slow_hit_count: 200001, fast_hit_count: 0 */
    if ((K - j) & 1) tmp = -tmp; /* line 25 slow_hit_count: 200001, fast_hit_count: 0 */
    res += tmp; /* line 26 slow_hit_count: 200001, fast_hit_count: 0 */
    if (res >= MOD) res -= MOD; /* line 27 slow_hit_count: 200001, fast_hit_count: 0 */
    if (res < 0) res += MOD; /* line 28 slow_hit_count: 200001, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  res = res * fpow(f[K], MOD - 2LL) % MOD; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
  return res; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(nullptr); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  if (k >= n) { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0; /* line 39 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 40 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  f[0] = 1LL; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < MX; ++i) f[i] = f[i - 1] * i * 1LL % MOD; /* line 43 slow_hit_count: 200005, fast_hit_count: 0 */
  long long res = nCk(n, k) * stirling(n, n - k) % MOD; /* line 44 slow_hit_count: 1, fast_hit_count: 0 */
  res = res * f[n - k] % MOD; /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
  if (k) res = res * 2LL % MOD; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  cout << res; /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C++ program, let's walk through the two phases described and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The function `fpow` is extensively called during the slow input run, indicated by the high hit count on lines 6-13. This function is executed multiple times, particularly in lines 17, 18, and 30.
   - The loop inside the `stirling` function (lines 23-28) also shows significant activity for the slow input, suggesting that it contributes to the slowdown.
   - The `nCk` function (lines 15-19) is called repeatedly from within the `stirling` function, exacerbating the number of times `fpow` gets invoked.

2. **Interaction with Data Structures:**
   - The factorial array `f` is precomputed up to `MX = 200005`, which is efficient. However, the use of functions like `fpow` for modular inverses within loops increases computational complexity, especially with large numbers.

3. **Loops and Recursive Calls:**
   - The primary computational expense is due to the nested call of `nCk` and `fpow` inside the loop in the `stirling` function. This results in multiple power computations and modular operations for each loop iteration when calculating Stirling numbers.
   
### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language statements that describe conditions under which the program's performance may degrade:

1. **Invariant 1: High Exponentiation Cost**
   - **Description:** "If the program frequently calculates large exponentiations within the `stirling` function, especially when `n` is large and `k` is small (or zero), the computational cost may become significant."
   - **Rationale:** The `fpow` function is called many times with large powers when computing Stirling numbers, particularly when `k` is low, leading to excessive computational burden.

2. **Invariant 2: Extensive Combinatorial Computations**
   - **Description:** "When `n` is large and `k` is near the lower boundary, the combination calculations (`nCk`) multiply the computational effort, causing slow execution."
   - **Rationale:** The combination calculations become more expensive as they are nested within loops and involve large numbers, especially when `k` is small.

3. **Invariant 3: Nested Loop Complexity**
   - **Description:** "If the value of `k` is significantly lower than `n`, leading to a full execution of the nested loop in the `stirling` function, performance may degrade due to repeated iterations over large data."
   - **Rationale:** The loop runs `k+1` times, and the nested nature of function calls for each iteration compounds the computational expense, especially when each iteration involves heavy computation like exponentiation.

### Recommendations for Performance Improvement:

- **Memoization:** Consider memoizing results of expensive operations like `fpow` to avoid redundant calculations in scenarios with predictable repetition.
- **Avoid Nested Calls in Loops:** Restructure the `stirling` function to minimize nested calls to `nCk` and `fpow` within the loop.

By understanding these invariants, developers can pinpoint potential performance issues and optimize the code to handle large inputs more efficiently without relying on hardcoded examples.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

Solution (C++ code):
{solution}


assistant: Let's proceed with the task by implementing the checker functions for the performance-characterizing invariants in C++ and integrating them into the provided C++ code.

### Phase 3: Implement Checker Code

Here, we will translate each natural language invariant into C++ checker code.

1. **Check for High Exponentiation Cost:**

   - **Invariant Description:** "If the program frequently calculates large exponentiations within the `stirling` function, especially when `n` is large and `k` is small (or zero), the computational cost may become significant."

   ```cpp
   void check_high_exponentiation_cost(bool condition) {
       if (condition) {
           cerr << "Warning: High exponentiation cost - frequent large exponent calculations" << endl;
           abort();
       }
   }
   ```

2. **Check for Extensive Combinatorial Computations:**

   - **Invariant Description:** "When `n` is large and `k` is near the lower boundary, the combination calculations (`nCk`) multiply the computational effort, causing slow execution."

   ```cpp
   void check_combinatorial_computations(bool condition) {
       if (condition) {
           cerr << "Warning: Extensive combinatorial computations - high cost due to low k relative to n" << endl;
           abort();
       }
   }
   ```

3. **Check for Nested Loop Complexity:**

   - **Invariant Description:** "If the value of `k` is significantly lower than `n`, leading to a full execution of the nested loop in the `stirling` function, performance may degrade due to repeated iterations over large data."

   ```cpp
   void check_nested_loop_complexity(bool condition) {
       if (condition) {
           cerr << "Warning: Nested loop complexity - high iterations due to low k relative to n" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code with Original Program

Now, let's integrate these checks into the original C++ code. We'll place the checks after input processing and before significant computational operations to ensure they are effective without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MOD = 998244353;
const int MX = 2e5 + 5;
long long n, k, f[MX];

long long fpow(long long a, long long p) {
    long long res = 1LL;
    while (p) {
        if (p & 1LL) res = res * a % MOD;
        a = a * a % MOD;
        p >>= 1LL;
    }
    return res;
}

long long nCk(long long N, long long K) {
    long long res = f[N];
    res = res * fpow(f[N - K], MOD - 2LL) % MOD;
    res = res * fpow(f[K], MOD - 2LL) % MOD;
    return res % MOD;
}

long long stirling(long long N, long long K) {
    long long res = 0LL;
    for (int j = 0; j <= K; ++j) {
        long long tmp = nCk(K, j) * fpow(j, N) % MOD;
        if ((K - j) & 1) tmp = -tmp;
        res += tmp;
        if (res >= MOD) res -= MOD;
        if (res < 0) res += MOD;
    }
    res = res * fpow(f[K], MOD - 2LL) % MOD;
    return res;
}

// Checker functions
void check_high_exponentiation_cost(bool condition) {
    if (condition) {
        cerr << "Warning: High exponentiation cost - frequent large exponent calculations" << endl;
        abort();
    }
}

void check_combinatorial_computations(bool condition) {
    if (condition) {
        cerr << "Warning: Extensive combinatorial computations - high cost due to low k relative to n" << endl;
        abort();
    }
}

void check_nested_loop_complexity(bool condition) {
    if (condition) {
        cerr << "Warning: Nested loop complexity - high iterations due to low k relative to n" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    cin >> n >> k;

    // Place checker conditions appropriately
    check_high_exponentiation_cost(n > 100000 && k < 1000);
    check_combinatorial_computations(n > 100000 && k < 1000);
    check_nested_loop_complexity(n > 100000 && k < 1000);

    if (k >= n) {
        cout << 0;
        return 0;
    }

    f[0] = 1LL;
    for (int i = 1; i < MX; ++i) f[i] = f[i - 1] * i % MOD;

    long long res = nCk(n, k) * stirling(n, n - k) % MOD;
    res = res * f[n - k] % MOD;
    if (k) res = res * 2LL % MOD;
    cout << res;
}
```

### Explanation of Checker Integration

- **High Exponentiation Cost:** This is checked before any combinatorial and Stirling calculations, focusing on cases where `n` is large and `k` is small.
- **Combinatorial Computations:** Check placed similarly to confirm conditions likely causing combinatorial burden.
- **Nested Loop Complexity:** Checked before entering the critical `stirling` function loop when `k` is low.

This instrumentation helps in proactively catching potential slowdowns during runtime, aiding in both debugging and optimization efforts.

