system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double PI = 4 * atan(1);
const long long mod = 998244353;
long long power(long long a, long long b) {
  long long res = 1;
  while (b > 0) {
    if (b & 1) {
      res = res * a;
      res %= mod;
    }
    b = b >> 1;
    a *= a;
    a %= mod;
  }
  return res;
}
long long modInv(long long a) { return power(a, mod - 2); }
long long ncr(long long n, long long r, vector<long long>& fact) {
  long long res = fact[n];
  res = res * modInv(fact[r]);
  res %= mod;
  res = res * modInv(fact[n - r]);
  res %= mod;
  return res;
}
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  long long n, k;
  cin >> n >> k;
  if (k > n - 1) {
    cout << 0 << "\n";
    return 0;
  }
  vector<long long> fact(n + 1);
  fact[0] = 1;
  for (long long i = 1; i <= n; i++) {
    fact[i] = fact[i - 1] * i;
    fact[i] = (fact[i] % mod + mod) % mod;
  }
  if (k == 0) {
    long long ans = fact[n];
    cout << ans << "\n";
    return 0;
  }
  long long c = n - k;
  long long ans = 0;
  for (long long i = 0; i <= c; i++) {
    long long temp = 0;
    temp = ncr(c, i, fact);
    temp = (temp % mod + mod) % mod;
    temp *= power(c - i, n);
    temp = (temp % mod + mod) % mod;
    if (i % 2)
      ans -= temp;
    else {
      ans += temp;
    }
    ans = (ans % mod + mod) % mod;
  }
  ans = ans * ncr(n, c, fact);
  ans = (ans % mod + mod) % mod;
  ans = ans * 2;
  ans = (ans % mod + mod) % mod;
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000 1


(G.2) Fast Input

200000 200000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = 4 * atan(1); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 998244353; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long a, long long b) { /* line 5 slow_hit_count: 600002, fast_hit_count: 0 */
  long long res = 1; /* line 6 slow_hit_count: 600002, fast_hit_count: 0 */
  while (b > 0) { /* line 7 slow_hit_count: 16200062, fast_hit_count: 0 */
    if (b & 1) { /* line 8 slow_hit_count: 15600060, fast_hit_count: 0 */
      res = res * a; /* line 9 slow_hit_count: 12400056, fast_hit_count: 0 */
      res %= mod; /* line 10 slow_hit_count: 12400056, fast_hit_count: 0 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    b = b >> 1; /* line 12 slow_hit_count: 15600060, fast_hit_count: 0 */
    a *= a; /* line 13 slow_hit_count: 15600060, fast_hit_count: 0 */
    a %= mod; /* line 14 slow_hit_count: 15600060, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 16 slow_hit_count: 600002, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long modInv(long long a) { return power(a, mod - 2); } /* line 18 slow_hit_count: 400002, fast_hit_count: 0 */
long long ncr(long long n, long long r, vector<long long>& fact) { /* line 19 slow_hit_count: 200001, fast_hit_count: 0 */
  long long res = fact[n]; /* line 20 slow_hit_count: 200001, fast_hit_count: 0 */
  res = res * modInv(fact[r]); /* line 21 slow_hit_count: 200001, fast_hit_count: 0 */
  res %= mod; /* line 22 slow_hit_count: 200001, fast_hit_count: 0 */
  res = res * modInv(fact[n - r]); /* line 23 slow_hit_count: 200001, fast_hit_count: 0 */
  res %= mod; /* line 24 slow_hit_count: 200001, fast_hit_count: 0 */
  return res; /* line 25 slow_hit_count: 200001, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  if (k > n - 1) { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << "\n"; /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> fact(n + 1); /* line 37 slow_hit_count: 2, fast_hit_count: 0 */
  fact[0] = 1; /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 1; i <= n; i++) { /* line 39 slow_hit_count: 200001, fast_hit_count: 0 */
    fact[i] = fact[i - 1] * i; /* line 40 slow_hit_count: 200000, fast_hit_count: 0 */
    fact[i] = (fact[i] % mod + mod) % mod; /* line 41 slow_hit_count: 200000, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 0) { /* line 43 slow_hit_count: 1, fast_hit_count: 0 */
    long long ans = fact[n]; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << "\n"; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  long long c = n - k; /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
  long long ans = 0; /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 0; i <= c; i++) { /* line 50 slow_hit_count: 200001, fast_hit_count: 0 */
    long long temp = 0; /* line 51 slow_hit_count: 200000, fast_hit_count: 0 */
    temp = ncr(c, i, fact); /* line 52 slow_hit_count: 200000, fast_hit_count: 0 */
    temp = (temp % mod + mod) % mod; /* line 53 slow_hit_count: 200000, fast_hit_count: 0 */
    temp *= power(c - i, n); /* line 54 slow_hit_count: 200000, fast_hit_count: 0 */
    temp = (temp % mod + mod) % mod; /* line 55 slow_hit_count: 200000, fast_hit_count: 0 */
    if (i % 2) /* line 56 slow_hit_count: 200000, fast_hit_count: 0 */
      ans -= temp; /* line 57 slow_hit_count: 100000, fast_hit_count: 0 */
    else { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      ans += temp; /* line 59 slow_hit_count: 100000, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    ans = (ans % mod + mod) % mod; /* line 61 slow_hit_count: 200000, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  ans = ans * ncr(n, c, fact); /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
  ans = (ans % mod + mod) % mod; /* line 64 slow_hit_count: 1, fast_hit_count: 0 */
  ans = ans * 2; /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
  ans = (ans % mod + mod) % mod; /* line 66 slow_hit_count: 1, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 69 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify performance bottlenecks and derive conditions that lead to slow execution in the given C program, we will follow the outlined tasks and considerations.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The function `power()` is hit significantly more often in the slow input, with a notable number of hits on lines 7, 8, 9, 10, 12, 13, and 14. This indicates that the computation inside `power()` is a potential bottleneck when dealing with the slow input.
   - The loop starting at line 50 and the associated computations at lines 51-61 also have a high hit count for the slow input, suggesting they contribute to the slowdown.

2. **Potential Causes of Slowdown:**
   - The line `temp *= power(c - i, n);` at line 54 suggests that for each iteration of the loop, the `power()` function is called, which has a complexity of \(O(\log(b))\) where \(b\) is the exponent. This becomes expensive when `n` is large and `k` is small, as seen with the slow input `(200000, 1)`.
   - The nested loop over `c` (which is `n - k`) combined with calls to the `ncr()` function (which itself calls `modInv()`) contributes to significant computation when `c` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive performance-characterizing invariants that explain when the program will likely slow down:

1. **Invariant 1: Large Exponent in Power Function**
   - **Natural Language Description:** "If `k` is small compared to `n`, leading to a large exponent in the power function, the computation becomes expensive. Specifically, when `k` is close to zero, and `n` is near its upper bound, the repeated computation of powers with high exponents causes slowdown."
   
2. **Invariant 2: Large Combination Computations**
   - **Natural Language Description:** "If `k` is small, resulting in a large `c` (where `c = n - k`), the program performs extensive combination calculations which slow down performance. This is particularly true when `n` is large, and `c` approaches `n`."

3. **Invariant 3: Loop Over Large Range**
   - **Natural Language Description:** "When the loop in the main function iterates over a large range where `c = n - k`, and each iteration involves complex calculations like power and combination, the whole process becomes computationally intensive, especially when `n` is at its maximum."

### Summary

These invariants help identify that the major performance issue arises due to the extensive use of the power function and combination calculations over large ranges when `k` is small relative to `n`. The input `(200000, 1)` serves as a scenario where these conditions are triggered, leading to slow performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Let's translate the identified performance-characterizing invariants into C++ checker code.

1. **Invariant 1: Large Exponent in Power Function**

```cpp
void check_large_exponent_invariant(long long n, long long k) {
    if (k < n / 2) {  // Assuming that a small k relative to n can lead to large exponents
        cerr << "Warning: Performance bottleneck condition triggered due to large exponent in power function!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Large Combination Computations**

```cpp
void check_large_combination_invariant(long long n, long long k) {
    if (k < n / 10) {  // Assuming a threshold where k being very small leads to large c
        cerr << "Warning: Performance bottleneck condition triggered due to large combination computations!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Loop Over Large Range**

```cpp
void check_large_loop_invariant(long long n, long long k) {
    long long c = n - k;
    if (c > n / 2) {  // Assuming a large range of loop execution when c is close to n
        cerr << "Warning: Performance bottleneck condition triggered due to large loop range!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Below is the instrumented C++ code, incorporating the invariant checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const double PI = 4 * atan(1);
const long long mod = 998244353;

// Function to check for large exponent in the power function
void check_large_exponent_invariant(long long n, long long k) {
    if (k < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to large exponent in power function!" << endl;
        abort();
    }
}

// Function to check for large combination computations
void check_large_combination_invariant(long long n, long long k) {
    if (k < n / 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to large combination computations!" << endl;
        abort();
    }
}

// Function to check for large loop operations
void check_large_loop_invariant(long long n, long long k) {
    long long c = n - k;
    if (c > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to large loop range!" << endl;
        abort();
    }
}

long long power(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1) {
            res = res * a;
            res %= mod;
        }
        b = b >> 1;
        a *= a;
        a %= mod;
    }
    return res;
}

long long modInv(long long a) { return power(a, mod - 2); }

long long ncr(long long n, long long r, vector<long long>& fact) {
    long long res = fact[n];
    res = res * modInv(fact[r]);
    res %= mod;
    res = res * modInv(fact[n - r]);
    res %= mod;
    return res;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    long long n, k;
    cin >> n >> k;

    // Invoke invariant checkers
    check_large_exponent_invariant(n, k);
    check_large_combination_invariant(n, k);
    check_large_loop_invariant(n, k);

    if (k > n - 1) {
        cout << 0 << "\n";
        return 0;
    }

    vector<long long> fact(n + 1);
    fact[0] = 1;
    for (long long i = 1; i <= n; i++) {
        fact[i] = fact[i - 1] * i;
        fact[i] = (fact[i] % mod + mod) % mod;
    }
    
    if (k == 0) {
        long long ans = fact[n];
        cout << ans << "\n";
        return 0;
    }

    long long c = n - k;
    long long ans = 0;
    for (long long i = 0; i <= c; i++) {
        long long temp = 0;
        temp = ncr(c, i, fact);
        temp = (temp % mod + mod) % mod;
        temp *= power(c - i, n);
        temp = (temp % mod + mod) % mod;
        if (i % 2)
            ans -= temp;
        else {
            ans += temp;
        }
        ans = (ans % mod + mod) % mod;
    }
    ans = ans * ncr(n, c, fact);
    ans = (ans % mod + mod) % mod;
    ans = ans * 2;
    ans = (ans % mod + mod) % mod;
    cout << ans << "\n";
    return 0;
}
```

**Comments:** 
- The checkers are placed immediately after reading the inputs to ensure they are evaluated before any heavy computation begins, thus avoiding unnecessary performance degradation within tight loops.
- Each checker is designed to abort execution if conditions likely to cause a slowdown are detected.

