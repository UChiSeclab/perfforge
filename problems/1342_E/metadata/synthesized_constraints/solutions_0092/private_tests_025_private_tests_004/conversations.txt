system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long gcd(long long a, long long b) {
  if (b > a) {
    return gcd(b, a);
  }
  if (b == 0) {
    return a;
  }
  return gcd(b, a % b);
}
long long expo(long long a, long long b, long long m) {
  long long res = 1;
  while (b > 0) {
    if (b & 1) res = (res * a) % m;
    a = (a * a) % m;
    b = b >> 1;
  }
  return res;
}
void extendgcd(long long a, long long b, long long *v) {
  if (b == 0) {
    v[0] = 1;
    v[1] = 0;
    v[2] = a;
    return;
  }
  extendgcd(b, a % b, v);
  long long x = v[1];
  v[1] = v[0] - v[1] * (a / b);
  v[0] = x;
  return;
}
long long mminv(long long a, long long b) {
  long long arr[3];
  extendgcd(a, b, arr);
  return arr[0];
}
long long mminvprime(long long a, long long b) { return expo(a, b - 2, b); }
void swap(long long &x, long long &y) {
  long long temp = x;
  x = y;
  y = temp;
}
long long combination(long long n, long long r, long long m, long long *fact,
                      long long *ifact) {
  long long val1 = fact[n];
  long long val2 = ifact[n - r];
  long long val3 = ifact[r];
  return (((val1 * val2) % m) * val3) % m;
}
void google(long long t) { cout << "Case #" << t << ": "; }
vector<long long> sieve(long long n) {
  long long *arr = new long long[n + 1]();
  vector<long long> vect;
  for (long long i = 2; i <= n; i++)
    if (arr[i] == 0) {
      vect.push_back(i);
      for (long long j = 2 * i; j <= n; j += i) arr[j] = 1;
    }
  return vect;
}
long long mod_add(long long a, long long b, long long m) {
  a = a % m;
  b = b % m;
  return (((a + b) % m) + m) % m;
}
long long mod_mul(long long a, long long b, long long m) {
  a = a % m;
  b = b % m;
  return (((a * b) % m) + m) % m;
}
long long mod_sub(long long a, long long b, long long m) {
  a = a % m;
  b = b % m;
  return (((a - b) % m) + m) % m;
}
long long mod_div(long long a, long long b, long long m) {
  a = a % m;
  b = b % m;
  return (mod_mul(a, mminvprime(b, m), m) + m) % m;
}
long long phin(long long n) {
  long long number = n;
  if (n % 2 == 0) {
    number /= 2;
    while (n % 2 == 0) n /= 2;
  }
  for (long long i = 3; i <= sqrt(n); i += 2) {
    if (n % i == 0) {
      while (n % i == 0) n /= i;
      number = (number / i * (i - 1));
    }
  }
  if (n > 1) number = (number / n * (n - 1));
  return number;
}
void c_p_c() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
}
const long long N = 200000;
long long fact[N + 1];
long long comb(long long a, long long b) {
  return mod_div(mod_div(fact[a], fact[b], 998244353), fact[a - b], 998244353);
}
int32_t main() {
  c_p_c();
  long long n, k;
  cin >> n >> k;
  if (k >= n) {
    cout << 0 << endl;
    return 0;
  }
  fact[0] = 1;
  for (long long i = 1; i <= n; i++)
    fact[i] = mod_mul(fact[i - 1], i, 998244353);
  long long ans = 0;
  long long place = n - k;
  for (long long i = 0; i <= place; i++) {
    long long sa = comb(place, i);
    sa = mod_mul(sa, expo(place - i, n, 998244353), 998244353);
    if (i & 1)
      ans = mod_sub(ans, sa, 998244353);
    else
      ans = mod_add(ans, sa, 998244353);
  }
  ans = mod_mul(ans, comb(n, place), 998244353);
  if (k != 0) ans = mod_mul(ans, 2, 998244353);
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000 0


(G.2) Fast Input

200000 200000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  if (b > a) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
    return gcd(b, a); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    return a; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b, a % b); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long expo(long long a, long long b, long long m) { /* line 12 slow_hit_count: 600005, fast_hit_count: 0 */
  long long res = 1; /* line 13 slow_hit_count: 600005, fast_hit_count: 0 */
  while (b > 0) { /* line 14 slow_hit_count: 16200143, fast_hit_count: 0 */
    if (b & 1) res = (res * a) % m; /* line 15 slow_hit_count: 15600138, fast_hit_count: 0 */
    a = (a * a) % m; /* line 16 slow_hit_count: 15600138, fast_hit_count: 0 */
    b = b >> 1; /* line 17 slow_hit_count: 15600138, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 19 slow_hit_count: 600005, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void extendgcd(long long a, long long b, long long *v) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    v[0] = 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    v[1] = 0; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    v[2] = a; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  extendgcd(b, a % b, v); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  long long x = v[1]; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  v[1] = v[0] - v[1] * (a / b); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  v[0] = x; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
long long mminv(long long a, long long b) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  long long arr[3]; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  extendgcd(a, b, arr); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return arr[0]; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
long long mminvprime(long long a, long long b) { return expo(a, b - 2, b); } /* line 39 slow_hit_count: 400004, fast_hit_count: 0 */
void swap(long long &x, long long &y) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  long long temp = x; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  x = y; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  y = temp; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
long long combination(long long n, long long r, long long m, long long *fact, /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
                      long long *ifact) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  long long val1 = fact[n]; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  long long val2 = ifact[n - r]; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  long long val3 = ifact[r]; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  return (((val1 * val2) % m) * val3) % m; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
void google(long long t) { cout << "Case #" << t << ": "; } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> sieve(long long n) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  long long *arr = new long long[n + 1](); /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> vect; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 2; i <= n; i++) /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    if (arr[i] == 0) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      vect.push_back(i); /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long j = 2 * i; j <= n; j += i) arr[j] = 1; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  return vect; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_add(long long a, long long b, long long m) { /* line 63 slow_hit_count: 100001, fast_hit_count: 0 */
  a = a % m; /* line 64 slow_hit_count: 100001, fast_hit_count: 0 */
  b = b % m; /* line 65 slow_hit_count: 100001, fast_hit_count: 0 */
  return (((a + b) % m) + m) % m; /* line 66 slow_hit_count: 100001, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_mul(long long a, long long b, long long m) { /* line 68 slow_hit_count: 800006, fast_hit_count: 0 */
  a = a % m; /* line 69 slow_hit_count: 800006, fast_hit_count: 0 */
  b = b % m; /* line 70 slow_hit_count: 800006, fast_hit_count: 0 */
  return (((a * b) % m) + m) % m; /* line 71 slow_hit_count: 800006, fast_hit_count: 0 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_sub(long long a, long long b, long long m) { /* line 73 slow_hit_count: 100000, fast_hit_count: 0 */
  a = a % m; /* line 74 slow_hit_count: 100000, fast_hit_count: 0 */
  b = b % m; /* line 75 slow_hit_count: 100000, fast_hit_count: 0 */
  return (((a - b) % m) + m) % m; /* line 76 slow_hit_count: 100000, fast_hit_count: 0 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_div(long long a, long long b, long long m) { /* line 78 slow_hit_count: 400004, fast_hit_count: 0 */
  a = a % m; /* line 79 slow_hit_count: 400004, fast_hit_count: 0 */
  b = b % m; /* line 80 slow_hit_count: 400004, fast_hit_count: 0 */
  return (mod_mul(a, mminvprime(b, m), m) + m) % m; /* line 81 slow_hit_count: 400004, fast_hit_count: 0 */
} /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
long long phin(long long n) { /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  long long number = n; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  if (n % 2 == 0) { /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    number /= 2; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    while (n % 2 == 0) n /= 2; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 3; i <= sqrt(n); i += 2) { /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    if (n % i == 0) { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
      while (n % i == 0) n /= i; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
      number = (number / i * (i - 1)); /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  if (n > 1) number = (number / n * (n - 1)); /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  return number; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
void c_p_c() { /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
const long long N = 200000; /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
long long fact[N + 1]; /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
long long comb(long long a, long long b) { /* line 105 slow_hit_count: 200002, fast_hit_count: 0 */
  return mod_div(mod_div(fact[a], fact[b], 998244353), fact[a - b], 998244353); /* line 106 slow_hit_count: 200002, fast_hit_count: 0 */
} /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
  c_p_c(); /* line 109 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 111 slow_hit_count: 1, fast_hit_count: 1 */
  if (k >= n) { /* line 112 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << endl; /* line 113 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 114 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
  fact[0] = 1; /* line 116 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 1; i <= n; i++) /* line 117 slow_hit_count: 200001, fast_hit_count: 0 */
    fact[i] = mod_mul(fact[i - 1], i, 998244353); /* line 118 slow_hit_count: 200000, fast_hit_count: 0 */
  long long ans = 0; /* line 119 slow_hit_count: 1, fast_hit_count: 0 */
  long long place = n - k; /* line 120 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 0; i <= place; i++) { /* line 121 slow_hit_count: 200002, fast_hit_count: 0 */
    long long sa = comb(place, i); /* line 122 slow_hit_count: 200001, fast_hit_count: 0 */
    sa = mod_mul(sa, expo(place - i, n, 998244353), 998244353); /* line 123 slow_hit_count: 200001, fast_hit_count: 0 */
    if (i & 1) /* line 124 slow_hit_count: 200001, fast_hit_count: 0 */
      ans = mod_sub(ans, sa, 998244353); /* line 125 slow_hit_count: 100000, fast_hit_count: 0 */
    else /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
      ans = mod_add(ans, sa, 998244353); /* line 127 slow_hit_count: 100001, fast_hit_count: 0 */
  } /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
  ans = mod_mul(ans, comb(n, place), 998244353); /* line 129 slow_hit_count: 1, fast_hit_count: 0 */
  if (k != 0) ans = mod_mul(ans, 2, 998244353); /* line 130 slow_hit_count: 1, fast_hit_count: 0 */
  cout << ans << endl; /* line 131 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 132 slow_hit_count: 1, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts for both the slow and fast inputs, some observations can be made:

1. **Exponentiation Function (`expo`)**:
   - The `expo` function is hit significantly more times in the slow input (`16,200,143` times at line 14) and not at all in the fast input.
   - This suggests that the `expo` function is a major contributor to the slow performance due to its repeated execution.

2. **Factorial Calculation**:
   - The loop that computes factorials for all numbers up to `n` (lines 117-118) is executed `200,000` times in the slow input, which suggests that the precomputation of factorials is also contributing to the slow performance when `n` is large.

3. **Combination Computation**:
   - The `comb` function is called `200,002` times in the slow input. This involves calling `mod_div` and subsequently `expo` through `mminvprime`, which are computationally expensive operations given their high hit count.

4. **Main Loop for Calculating the Number of Ways**:
   - The loop at line 121 iterates `200,001` times for the slow input, which involves calling the combination and exponentiation functions repeatedly, indicating a nested loop structure that scales with `n`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language performance invariants:

1. **Invariant 1: Large Value of `n` with Small `k`**:
   - Natural language: "When the number of rooks `n` is large and the specified attacking pairs `k` is significantly less than `n`, the computation becomes slow due to extensive factorial and exponential calculations."
   - Explanation: The factorial computation for `n` and multiple exponentiations with large exponents lead to inefficiencies. When `k` is smaller, the main loop iterates more times (`n-k`), exacerbating the problem.

2. **Invariant 2: Extensive Use of Combinatorial Calculations**:
   - Natural language: "If the input requires extensive combinatorial calculations due to high values of `n` with low values of `k`, the program will slow down due to repeated calculation of binomial coefficients and modular inverses."
   - Explanation: The combination function (`comb`) is called frequently, each involving division operations that are costly due to large number arithmetic.

3. **Invariant 3: Iterative Exponentiation with Large Base and Exponent**:
   - Natural language: "For scenarios where iterative exponentiation is repeatedly used with large bases and exponents, especially in a nested loop context, performance will degrade significantly."
   - Explanation: The `expo` function is called with large parameters multiple times, creating a bottleneck in the algorithm.

4. **Invariant 4: Precomputation Overhead for Large `n`**:
   - Natural language: "For larger values of `n`, the overhead of precomputing factorials can contribute to initial slowdown, affecting overall performance."
   - Explanation: The factorial array precomputation scales linearly with `n`, and for very large `n`, the cost isn't negligible.

These invariants attempt to capture the conditions under which the program encounters slow performance without relying on specific input values, focusing on broader patterns and interactions with the algorithm's structure.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as Checker Code in C++

Let's translate the derived natural language invariants into C++ runtime checks. These checks ensure that if the conditions leading to performance bottlenecks are met, they will trigger warnings and halt execution.

```cpp
void check_large_n_small_k(long long n, long long k) {
    if (n > 100000 && k < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - large n with small k!" << endl;
        abort();
    }
}

void check_extensive_combinatorial_calculation(long long n, long long k) {
    if (n > 100000 && k < n / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive combinatorial calculations!" << endl;
        abort();
    }
}

void check_iterative_exponentiation(long long n, long long k) {
    if (n > 100000 && k < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - large iterative exponentiation!" << endl;
        abort();
    }
}

void check_factorial_precomputation(long long n) {
    if (n > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - large factorial precomputation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ code with the integrated runtime checks. These checks are placed before the operations they are intended to monitor, ensuring they don't add overhead to performance-critical sections like tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long gcd(long long a, long long b) {
    if (b > a) {
        return gcd(b, a);
    }
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}

long long expo(long long a, long long b, long long m) {
    long long res = 1;
    while (b > 0) {
        if (b & 1) res = (res * a) % m;
        a = (a * a) % m;
        b = b >> 1;
    }
    return res;
}

void extendgcd(long long a, long long b, long long *v) {
    if (b == 0) {
        v[0] = 1;
        v[1] = 0;
        v[2] = a;
        return;
    }
    extendgcd(b, a % b, v);
    long long x = v[1];
    v[1] = v[0] - v[1] * (a / b);
    v[0] = x;
    return;
}

long long mminv(long long a, long long b) {
    long long arr[3];
    extendgcd(a, b, arr);
    return arr[0];
}

long long mminvprime(long long a, long long b) {
    return expo(a, b - 2, b);
}

void swap(long long &x, long long &y) {
    long long temp = x;
    x = y;
    y = temp;
}

long long combination(long long n, long long r, long long m, long long *fact, long long *ifact) {
    long long val1 = fact[n];
    long long val2 = ifact[n - r];
    long long val3 = ifact[r];
    return (((val1 * val2) % m) * val3) % m;
}

void google(long long t) {
    cout << "Case #" << t << ": ";
}

vector<long long> sieve(long long n) {
    long long *arr = new long long[n + 1]();
    vector<long long> vect;
    for (long long i = 2; i <= n; i++)
        if (arr[i] == 0) {
            vect.push_back(i);
            for (long long j = 2 * i; j <= n; j += i) arr[j] = 1;
        }
    return vect;
}

long long mod_add(long long a, long long b, long long m) {
    a = a % m;
    b = b % m;
    return (((a + b) % m) + m) % m;
}

long long mod_mul(long long a, long long b, long long m) {
    a = a % m;
    b = b % m;
    return (((a * b) % m) + m) % m;
}

long long mod_sub(long long a, long long b, long long m) {
    a = a % m;
    b = b % m;
    return (((a - b) % m) + m) % m;
}

long long mod_div(long long a, long long b, long long m) {
    a = a % m;
    b = b % m;
    return (mod_mul(a, mminvprime(b, m), m) + m) % m;
}

long long phin(long long n) {
    long long number = n;
    if (n % 2 == 0) {
        number /= 2;
        while (n % 2 == 0) n /= 2;
    }
    for (long long i = 3; i <= sqrt(n); i += 2) {
        if (n % i == 0) {
            while (n % i == 0) n /= i;
            number = (number / i * (i - 1));
        }
    }
    if (n > 1) number = (number / n * (n - 1));
    return number;
}

void c_p_c() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}

const long long N = 200000;
long long fact[N + 1];

long long comb(long long a, long long b) {
    return mod_div(mod_div(fact[a], fact[b], 998244353), fact[a - b], 998244353);
}

// Checker functions
void check_large_n_small_k(long long n, long long k) {
    if (n > 100000 && k < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - large n with small k!" << endl;
        abort();
    }
}

void check_extensive_combinatorial_calculation(long long n, long long k) {
    if (n > 100000 && k < n / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive combinatorial calculations!" << endl;
        abort();
    }
}

void check_iterative_exponentiation(long long n, long long k) {
    if (n > 100000 && k < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - large iterative exponentiation!" << endl;
        abort();
    }
}

void check_factorial_precomputation(long long n) {
    if (n > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - large factorial precomputation!" << endl;
        abort();
    }
}

int32_t main() {
    c_p_c();
    long long n, k;
    cin >> n >> k;

    // Integrating performance checks
    check_large_n_small_k(n, k);
    check_extensive_combinatorial_calculation(n, k);
    check_iterative_exponentiation(n, k);
    check_factorial_precomputation(n);

    if (k >= n) {
        cout << 0 << endl;
        return 0;
    }
    fact[0] = 1;
    for (long long i = 1; i <= n; i++)
        fact[i] = mod_mul(fact[i - 1], i, 998244353);
    long long ans = 0;
    long long place = n - k;
    for (long long i = 0; i <= place; i++) {
        long long sa = comb(place, i);
        sa = mod_mul(sa, expo(place - i, n, 998244353), 998244353);
        if (i & 1)
            ans = mod_sub(ans, sa, 998244353);
        else
            ans = mod_add(ans, sa, 998244353);
    }
    ans = mod_mul(ans, comb(n, place), 998244353);
    if (k != 0) ans = mod_mul(ans, 2, 998244353);
    cout << ans << endl;
}
```

### Explanation of Integration:
- **Placement**: The checker functions are called immediately after reading the inputs `n` and `k`, before any heavy computations begin.
- **Checks**: Each check is designed to detect one of the identified performance bottlenecks and halt execution with a warning if the condition is met. This approach helps in identifying slow-performing scenarios during development and testing.

