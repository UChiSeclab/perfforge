system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k;
long long int fact[400005];
void init() {
  fact[0] = 1;
  for (int i = 1; i < 400005; i++) {
    fact[i] = (fact[i - 1] * i) % 998244353;
  }
}
long long int modexp(long long int x, long long int power) {
  if (power == 0)
    return 1;
  else {
    if (power % 2 != 0)
      return (x * modexp((x * x) % 998244353, power / 2)) % 998244353;
    else {
      return (modexp((x * x) % 998244353, power / 2)) % 998244353;
    }
  }
}
long long int modinv(long long int num) { return modexp(num, 998244353 - 2); }
long long int comb(long long int N, long long int K) {
  long long int n1 = fact[N];
  long long int k1 = fact[K];
  long long int n_k = fact[N - K];
  long long int res =
      (((n1 * modinv(k1)) % 998244353) * modinv(n_k)) % 998244353;
  return res;
}
long long int stirling(long long int N, long long int K) {
  long long int ans = 0;
  for (int i = 0; i <= K; i++) {
    long long int temp = (comb(K, i) * modexp(K - i, n)) % 998244353;
    if (i % 2 == 0)
      ans += temp;
    else
      ans -= temp;
    ans = (ans + 998244353) % 998244353;
  }
  ans = (ans * modinv(fact[K])) % 998244353;
  return ans;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n >> k;
  if (k > n - 1) {
    cout << 0 << endl;
    return 0;
  }
  init();
  long long int res = 0;
  long long int c = n - k;
  res = (res + 2 * (((comb(n, c) * stirling(n, c)) % 998244353) * fact[c]) %
                   998244353) %
        998244353;
  if (k == 0) {
    res = fact[n];
  }
  cout << res << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200000 0


(G.2) Fast Input

200000 200000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long int fact[400005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 5 slow_hit_count: 1, fast_hit_count: 0 */
  fact[0] = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i < 400005; i++) { /* line 7 slow_hit_count: 400005, fast_hit_count: 0 */
    fact[i] = (fact[i - 1] * i) % 998244353; /* line 8 slow_hit_count: 400004, fast_hit_count: 0 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 1, fast_hit_count: 0 */
long long int modexp(long long int x, long long int power) { /* line 11 slow_hit_count: 16200174, fast_hit_count: 0 */
  if (power == 0) /* line 12 slow_hit_count: 16200174, fast_hit_count: 0 */
    return 1; /* line 13 slow_hit_count: 600006, fast_hit_count: 0 */
  else { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    if (power % 2 != 0) /* line 15 slow_hit_count: 15600168, fast_hit_count: 0 */
      return (x * modexp((x * x) % 998244353, power / 2)) % 998244353; /* line 16 slow_hit_count: 12400146, fast_hit_count: 0 */
    else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      return (modexp((x * x) % 998244353, power / 2)) % 998244353; /* line 18 slow_hit_count: 3200022, fast_hit_count: 0 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
long long int modinv(long long int num) { return modexp(num, 998244353 - 2); } /* line 22 slow_hit_count: 400005, fast_hit_count: 0 */
long long int comb(long long int N, long long int K) { /* line 23 slow_hit_count: 200002, fast_hit_count: 0 */
  long long int n1 = fact[N]; /* line 24 slow_hit_count: 200002, fast_hit_count: 0 */
  long long int k1 = fact[K]; /* line 25 slow_hit_count: 200002, fast_hit_count: 0 */
  long long int n_k = fact[N - K]; /* line 26 slow_hit_count: 200002, fast_hit_count: 0 */
  long long int res = /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      (((n1 * modinv(k1)) % 998244353) * modinv(n_k)) % 998244353; /* line 28 slow_hit_count: 200002, fast_hit_count: 0 */
  return res; /* line 29 slow_hit_count: 200002, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
long long int stirling(long long int N, long long int K) { /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
  long long int ans = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i <= K; i++) { /* line 33 slow_hit_count: 200002, fast_hit_count: 0 */
    long long int temp = (comb(K, i) * modexp(K - i, n)) % 998244353; /* line 34 slow_hit_count: 200001, fast_hit_count: 0 */
    if (i % 2 == 0) /* line 35 slow_hit_count: 200001, fast_hit_count: 0 */
      ans += temp; /* line 36 slow_hit_count: 100001, fast_hit_count: 0 */
    else /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      ans -= temp; /* line 38 slow_hit_count: 100000, fast_hit_count: 0 */
    ans = (ans + 998244353) % 998244353; /* line 39 slow_hit_count: 200001, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  ans = (ans * modinv(fact[K])) % 998244353; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
  return ans; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  if (k > n - 1) { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << endl; /* line 50 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 51 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  init(); /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
  long long int res = 0; /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  long long int c = n - k; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
  res = (res + 2 * (((comb(n, c) * stirling(n, c)) % 998244353) * fact[c]) % /* line 56 slow_hit_count: 1, fast_hit_count: 0 */
                   998244353) % /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        998244353; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 0) { /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
    res = fact[n]; /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << endl; /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit counts provided, we can identify several expensive code segments that contribute to the program's inefficiency on the "slow" input.

1. **Factorial Array Initialization (`init` function, lines 5-10):**
   - The `init` function is called once during the slow run, initializing an array of size 400005. This initialization takes place only when k is not greater than n - 1, which is why it doesn't occur in the fast input where k = n.

2. **Modular Exponentiation (`modexp` function, lines 11-21):**
   - This function is hit very frequently in the slow run (16,200,174 times). It's used for calculating powers under modulo and is part of both `modinv` and `stirling` calculations. The nature of recursive calls within `modexp` leads to a large number of invocations, particularly noticeable when n is large and k is small.

3. **Combination and Stirling Calculations (lines 23-43):**
   - The `comb` function is called 200,002 times and `stirling` function is invoked once, but it involves a nested loop (lines 33-39) that iterates 200,002 times. Within this loop, `modexp` is repeatedly called, leading to the high hit count.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: Factorial Initialization Cost**
   - **Natural Language Description:** "When the number of rooks k is significantly less than n, leading to n * n combinations being considered, the factorial initialization for large n becomes a significant overhead."
   - **Threshold Context:** This overhead is reflected when n is close to its upper limit and k is much smaller, such as when k = 0.

2. **Invariant: Recursion Depth in Modular Exponentiation**
   - **Natural Language Description:** "When calculating modular exponentiations for large powers, particularly if these calculations are nested within combinatorial evaluations, the depth and frequency of recursive calls can significantly slow down the program."
   - **Threshold Context:** This is notable when both n and k are large, but k is not maximized, causing the Stirling calculation to iterate through many permutations.

3. **Invariant: Combinatorial and Stirling Function Iterations**
   - **Natural Language Description:** "If the difference between n and k (c = n - k) is large, the Stirling number calculations with extensive combinatorial function calls cause excessive iterations, leading to bottlenecks."
   - **Threshold Context:** This occurs when k is far less than n, particularly when k = 0 or small relative to n, resulting in high iteration counts in combinatorial loops.

### Conclusion

These invariants address the primary causes of inefficiency observed in the slow input scenario by emphasizing the roles of factorial computation, recursive depth in modular arithmetic, and combinatorial iteration based on input parameters n and k. Understanding these conditions helps predict when the program might encounter similar performance challenges in future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Calculate the number of ways to place n rooks on n × n chessboard so that both following conditions are met:

  * each empty cell is under attack; 
  * exactly k pairs of rooks attack each other. 



An empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:

<image> One of the ways to place the rooks for n = 3 and k = 2

Two ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.

The answer might be large, so print it modulo 998244353.

Input

The only line of the input contains two integers n and k (1 ≤ n ≤ 200000; 0 ≤ k ≤ (n(n - 1))/(2)).

Output

Print one integer — the number of ways to place the rooks, taken modulo 998244353.

Examples

Input


3 2


Output


6


Input


3 3


Output


0


Input


4 0


Output


24


Input


1337 42


Output


807905441

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's implement the checker functions based on the performance-characterizing invariants we derived in natural language.

1. **Invariant for Factorial Initialization Cost:**
   - This invariant checks if the factorial initialization might cause overhead when `k` is significantly smaller than `n`.

```cpp
void check_factorial_invariant(int n, int k) {
    if (n > 100000 && k < n / 1000) {
        cerr << "Warning: Factorial initialization overhead due to large n and small k." << endl;
        abort();
    }
}
```

2. **Invariant for Recursion Depth in Modular Exponentiation:**
   - This invariant checks the depth and frequency of recursive calls in the modular exponentiation function.

```cpp
void check_modexp_invariant(int n, int k) {
    if (n > 100000 && k < n / 500) {
        cerr << "Warning: Excessive recursive depth in modular exponentiation." << endl;
        abort();
    }
}
```

3. **Invariant for Combinatorial and Stirling Function Iterations:**
   - This invariant addresses the iterations in combinatorial and Stirling number calculations when `n - k` is large.

```cpp
void check_stirling_invariant(int n, int k) {
    if (n > 100000 && n - k > n / 2) {
        cerr << "Warning: High iteration count in Stirling and combinatorial calculations." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Conditional Checks into the Original Program

Now, we need to integrate these checker functions into the program. We will add these checks after reading the inputs to ensure they catch potential performance bottlenecks before the expensive computations start.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k;
long long int fact[400005];

void init() {
    fact[0] = 1;
    for (int i = 1; i < 400005; i++) {
        fact[i] = (fact[i - 1] * i) % 998244353;
    }
}

long long int modexp(long long int x, long long int power) {
    if (power == 0) return 1;
    else {
        if (power % 2 != 0)
            return (x * modexp((x * x) % 998244353, power / 2)) % 998244353;
        else
            return (modexp((x * x) % 998244353, power / 2)) % 998244353;
    }
}

long long int modinv(long long int num) { return modexp(num, 998244353 - 2); }

long long int comb(long long int N, long long int K) {
    long long int n1 = fact[N];
    long long int k1 = fact[K];
    long long int n_k = fact[N - K];
    long long int res = (((n1 * modinv(k1)) % 998244353) * modinv(n_k)) % 998244353;
    return res;
}

long long int stirling(long long int N, long long int K) {
    long long int ans = 0;
    for (int i = 0; i <= K; i++) {
        long long int temp = (comb(K, i) * modexp(K - i, n)) % 998244353;
        if (i % 2 == 0) ans += temp;
        else ans -= temp;
        ans = (ans + 998244353) % 998244353;
    }
    ans = (ans * modinv(fact[K])) % 998244353;
    return ans;
}

void check_factorial_invariant(int n, int k) {
    if (n > 100000 && k < n / 1000) {
        cerr << "Warning: Factorial initialization overhead due to large n and small k." << endl;
        abort();
    }
}

void check_modexp_invariant(int n, int k) {
    if (n > 100000 && k < n / 500) {
        cerr << "Warning: Excessive recursive depth in modular exponentiation." << endl;
        abort();
    }
}

void check_stirling_invariant(int n, int k) {
    if (n > 100000 && n - k > n / 2) {
        cerr << "Warning: High iteration count in Stirling and combinatorial calculations." << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin >> n >> k;
    
    // Check performance-characterizing invariants
    check_factorial_invariant(n, k);
    check_modexp_invariant(n, k);
    check_stirling_invariant(n, k);
    
    if (k > n - 1) {
        cout << 0 << endl;
        return 0;
    }
    
    init();
    
    long long int res = 0;
    long long int c = n - k;
    res = (res + 2 * (((comb(n, c) * stirling(n, c)) % 998244353) * fact[c]) % 998244353) % 998244353;
    
    if (k == 0) {
        res = fact[n];
    }
    
    cout << res << endl;
    return 0;
}
```
In this code:
- We added three functions that check for potential performance bottlenecks as described by the invariants.
- Each check is placed after reading inputs to ensure that the program aborts before any heavy computation if a bottleneck is likely.
- This way, the program can help in identifying slow scenarios early.

