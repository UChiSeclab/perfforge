system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The winner of the card game popular in Berland "Berlogging" is determined according to the following rules. If at the end of the game there is only one player with the maximum number of points, he is the winner. The situation becomes more difficult if the number of such players is more than one. During each round a player gains or loses a particular number of points. In the course of the game the number of points is registered in the line "name score", where name is a player's name, and score is the number of points gained in this round, which is an integer number. If score is negative, this means that the player has lost in the round. So, if two or more players have the maximum number of points (say, it equals to m) at the end of the game, than wins the one of them who scored at least m points first. Initially each player has 0 points. It's guaranteed that at the end of the game at least one player has a positive number of points.

Input

The first line contains an integer number n (1 ≤ n ≤ 1000), n is the number of rounds played. Then follow n lines, containing the information about the rounds in "name score" format in chronological order, where name is a string of lower-case Latin letters with the length from 1 to 32, and score is an integer number between -1000 and 1000, inclusive.

Output

Print the name of the winner.

Examples

Input

3
mike 3
andrew 5
mike 2


Output

andrew


Input

3
andrew 3
andrew 2
mike 5


Output

andrew

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  map<int, vector<string> > flag;
  map<string, int> mp;
  int n;
  cin >> n;
  while (n--) {
    string name;
    int score;
    cin >> name >> score;
    mp[name] = mp[name] + score;
    if (mp[name] >= 0) {
      for (int i = 0; i <= mp[name]; i++) {
        flag[i].push_back(name);
      }
    }
  }
  int maax = -1;
  map<string, int>::iterator i;
  for (i = mp.begin(); i != mp.end(); ++i) {
    if (i->second > maax) {
      maax = i->second;
    }
  }
  vector<string> winner;
  for (i = mp.begin(); i != mp.end(); ++i) {
    if (i->second == maax) {
      winner.push_back(i->first);
    }
  }
  for (auto i = flag[maax].begin(); i != flag[maax].end(); i++) {
    if (mp[*i] == maax) {
      cout << *i << endl;
      break;
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
kaxqybeultn -110
mgochgrneyieyskhuotrfg -1326
k`xqybeultm 2465
egochgrmeyimyskhuourfg -185
ntluebyxqak -303


(G.2) Fast Input

5
kaxqybeultn -110
mgochgrneyieyskhuotrfg -1326
k`xqybeultm 1249
egochgrmeyimyskhuourfg -185
ntluebyxqak -303


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, vector<string> > flag; /* line 4 slow_hit_count: 2, fast_hit_count: 2 */
  map<string, int> mp; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  int n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 8 slow_hit_count: 6, fast_hit_count: 6 */
    string name; /* line 9 slow_hit_count: 10, fast_hit_count: 10 */
    int score; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> name >> score; /* line 11 slow_hit_count: 5, fast_hit_count: 5 */
    mp[name] = mp[name] + score; /* line 12 slow_hit_count: 5, fast_hit_count: 5 */
    if (mp[name] >= 0) { /* line 13 slow_hit_count: 5, fast_hit_count: 5 */
      for (int i = 0; i <= mp[name]; i++) { /* line 14 slow_hit_count: 2467, fast_hit_count: 1251 */
        flag[i].push_back(name); /* line 15 slow_hit_count: 2466, fast_hit_count: 1250 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int maax = -1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  map<string, int>::iterator i; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = mp.begin(); i != mp.end(); ++i) { /* line 21 slow_hit_count: 6, fast_hit_count: 6 */
    if (i->second > maax) { /* line 22 slow_hit_count: 5, fast_hit_count: 5 */
      maax = i->second; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  vector<string> winner; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = mp.begin(); i != mp.end(); ++i) { /* line 27 slow_hit_count: 6, fast_hit_count: 6 */
    if (i->second == maax) { /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
      winner.push_back(i->first); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto i = flag[maax].begin(); i != flag[maax].end(); i++) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    if (mp[*i] == maax) { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
      cout << *i << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

By analyzing the line-level hit counts, the following observations can be made:

1. **Lines 14 and 15**:
   - These lines have a significantly higher number of hits in the slow input (`2467` hits) compared to the fast input (`1251` hits).
   - The inefficiency arises from the loop `for (int i = 0; i <= mp[name]; i++)`, which iterates from `0` to `mp[name]`, and the complexity is directly dependent on the score values.
   - In the case of the slow input, the scores cause more iterations due to the larger absolute value of the scores involved.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Score Values with Frequent Iterations**:
   - Natural Language Invariant: “If a player achieves high positive scores quickly during the game, the number of iterations in nested loops for tracking scores can greatly increase, leading to slower execution. This is particularly evident when the score values approach their maximum positive limits more frequently.”
   - Explanation: The iteration of the loop up to `mp[name]` is directly proportional to the score a player accumulates. Larger scores lead to more iterations, which affect performance when many entries are processed.

2. **Frequent Score Updates Leading to Large Data Growth**:
   - Natural Language Invariant: “When players frequently accumulate scores, especially with high values, the underlying data structures storing score history grow excessively, increasing computation time required for each update.”
   - Explanation: Each score update can lead to growth in the `flag` map, and if scores are significant and frequent, this growth becomes a performance bottleneck.

3. **Multiple Players with High Scores**:
   - Natural Language Invariant: “When multiple players attain high scores simultaneously, the need to track and compare large score values for several players can strain resources, slowing down the program.”
   - Explanation: When multiple players reach high scores, the program must process and compare these values, which can become computationally expensive with larger sets of such data.

4. **Frequent Access to Large Collections**:
   - Natural Language Invariant: "If the list of names associated with a score level becomes long, frequently accessing and modifying these lists can result in performance degradation."
   - Explanation: As players reach higher scores, their names are added to longer lists within `flag`, making operations on these lists more expensive.

### Summary

The primary performance bottlenecks arise due to the loop's dependency on the accumulated scores and the growth of data structures based on these scores. When scores are high and updates frequent, the code path becomes slow, particularly when dealing with multiple players maintaining high scores. The performance-characterizing invariants highlight that the program's complexity is heavily influenced by the magnitude and frequency of score updates rather than just the number of rounds (`n`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The winner of the card game popular in Berland "Berlogging" is determined according to the following rules. If at the end of the game there is only one player with the maximum number of points, he is the winner. The situation becomes more difficult if the number of such players is more than one. During each round a player gains or loses a particular number of points. In the course of the game the number of points is registered in the line "name score", where name is a player's name, and score is the number of points gained in this round, which is an integer number. If score is negative, this means that the player has lost in the round. So, if two or more players have the maximum number of points (say, it equals to m) at the end of the game, than wins the one of them who scored at least m points first. Initially each player has 0 points. It's guaranteed that at the end of the game at least one player has a positive number of points.

Input

The first line contains an integer number n (1 ≤ n ≤ 1000), n is the number of rounds played. Then follow n lines, containing the information about the rounds in "name score" format in chronological order, where name is a string of lower-case Latin letters with the length from 1 to 32, and score is an integer number between -1000 and 1000, inclusive.

Output

Print the name of the winner.

Examples

Input

3
mike 3
andrew 5
mike 2


Output

andrew


Input

3
andrew 3
andrew 2
mike 5


Output

andrew

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Based on the performance-characterizing invariants derived earlier, here are the proposed C++ checker functions:

1. **Checker for High Score Values with Frequent Iterations**:
```cpp
void check_high_score_iteration(int score) {
    if (score > 500) { // Assume a score threshold indicating potential slowdown
        cerr << "Warning: High score iteration invariant triggered - excessive iterations!" << endl;
        abort();
    }
}
```

2. **Checker for Frequent Score Updates Leading to Large Data Growth**:
```cpp
void check_frequent_score_updates(const map<int, vector<string>>& flag, int maxScore) {
    if (flag.size() > 100 && maxScore > 500) { // Threshold based on simultaneous high scores and large flag map
        cerr << "Warning: Frequent score updates invariant triggered - large data growth!" << endl;
        abort();
    }
}
```

3. **Checker for Multiple Players with High Scores**:
```cpp
void check_multiple_high_score_players(const vector<string>& winnerList) {
    if (winnerList.size() > 5) { // Arbitrary threshold for multiple high-scoring players
        cerr << "Warning: Multiple high score players invariant triggered!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original C++ Program

Below is the instrumented C++ program with the integrated performance checkers. These are placed at strategic points to prevent additional overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check high score iteration
void check_high_score_iteration(int score) {
    if (score > 500) { // Assume a score threshold indicating potential slowdown
        cerr << "Warning: High score iteration invariant triggered - excessive iterations!" << endl;
        abort();
    }
}

// Function to check frequent score updates
void check_frequent_score_updates(const map<int, vector<string>>& flag, int maxScore) {
    if (flag.size() > 100 && maxScore > 500) { // Threshold based on simultaneous high scores and large flag map
        cerr << "Warning: Frequent score updates invariant triggered - large data growth!" << endl;
        abort();
    }
}

// Function to check multiple high score players
void check_multiple_high_score_players(const vector<string>& winnerList) {
    if (winnerList.size() > 5) { // Arbitrary threshold for multiple high-scoring players
        cerr << "Warning: Multiple high score players invariant triggered!" << endl;
        abort();
    }
}

int main() {
    map<int, vector<string>> flag;
    map<string, int> mp;
    int n;
    cin >> n;
    int maxScore = 0; // Track the maximum score encountered

    while (n--) {
        string name;
        int score;
        cin >> name >> score;
        mp[name] = mp[name] + score;

        // Check for high score iteration before the loop
        check_high_score_iteration(mp[name]);

        if (mp[name] >= 0) {
            for (int i = 0; i <= mp[name]; i++) {
                flag[i].push_back(name);
            }
        }

        // Track the maximum score encountered
        if (mp[name] > maxScore) {
            maxScore = mp[name];
        }
    }

    // Check for data growth post-processing
    check_frequent_score_updates(flag, maxScore);

    int maax = -1;
    map<string, int>::iterator i;
    for (i = mp.begin(); i != mp.end(); ++i) {
        if (i->second > maax) {
            maax = i->second;
        }
    }

    vector<string> winner;
    for (i = mp.begin(); i != mp.end(); ++i) {
        if (i->second == maax) {
            winner.push_back(i->first);
        }
    }

    // Check for multiple players with high scores
    check_multiple_high_score_players(winner);

    for (auto i = flag[maax].begin(); i != flag[maax].end(); i++) {
        if (mp[*i] == maax) {
            cout << *i << endl;
            break;
        }
    }
    return 0;
}
```

### Notes:
- These checks are strategically placed to intercept potential performance-degrading scenarios without adding unnecessary overhead to tight loops.
- The thresholds are chosen based on potential bottlenecks and not the specific input values, ensuring they reflect the broader problem constraints (`n <= 1000`, and score range `[-1000, 1000]`).

