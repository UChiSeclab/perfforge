system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The winner of the card game popular in Berland "Berlogging" is determined according to the following rules. If at the end of the game there is only one player with the maximum number of points, he is the winner. The situation becomes more difficult if the number of such players is more than one. During each round a player gains or loses a particular number of points. In the course of the game the number of points is registered in the line "name score", where name is a player's name, and score is the number of points gained in this round, which is an integer number. If score is negative, this means that the player has lost in the round. So, if two or more players have the maximum number of points (say, it equals to m) at the end of the game, than wins the one of them who scored at least m points first. Initially each player has 0 points. It's guaranteed that at the end of the game at least one player has a positive number of points.

Input

The first line contains an integer number n (1 ≤ n ≤ 1000), n is the number of rounds played. Then follow n lines, containing the information about the rounds in "name score" format in chronological order, where name is a string of lower-case Latin letters with the length from 1 to 32, and score is an integer number between -1000 and 1000, inclusive.

Output

Print the name of the winner.

Examples

Input

3
mike 3
andrew 5
mike 2


Output

andrew


Input

3
andrew 3
andrew 2
mike 5


Output

andrew

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  map<int, vector<string> > flag;
  map<string, int> mp;
  int n;
  cin >> n;
  while (n--) {
    string name;
    int score;
    cin >> name >> score;
    mp[name] = mp[name] + score;
    if (mp[name] >= 0) {
      for (int i = 0; i <= mp[name]; i++) {
        flag[i].push_back(name);
      }
    }
  }
  int maax = -1;
  map<string, int>::iterator i;
  for (i = mp.begin(); i != mp.end(); ++i) {
    if (i->second > maax) {
      maax = i->second;
    }
  }
  vector<string> winner;
  for (i = mp.begin(); i != mp.end(); ++i) {
    if (i->second == maax) {
      winner.push_back(i->first);
    }
  }
  for (auto i = flag[maax].begin(); i != flag[maax].end(); i++) {
    if (mp[*i] == maax) {
      cout << *i << endl;
      break;
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
kaxqybeultn -110
mgochgrneyieyskhuotrfg -1326
k`xqybeultm 2465
egochgrmeyimyskhuourfg -185
ntluebyxqak -303


(G.2) Fast Input

5
kaxqybeultn -110
mgochgrneyieyskhuotrfg -1326
k`xqybeultm 1249
egochgrmeyimyskhuourfg -132
ntluebyxqak -303


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, vector<string> > flag; /* line 4 slow_hit_count: 2, fast_hit_count: 2 */
  map<string, int> mp; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  int n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 8 slow_hit_count: 6, fast_hit_count: 6 */
    string name; /* line 9 slow_hit_count: 10, fast_hit_count: 10 */
    int score; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> name >> score; /* line 11 slow_hit_count: 5, fast_hit_count: 5 */
    mp[name] = mp[name] + score; /* line 12 slow_hit_count: 5, fast_hit_count: 5 */
    if (mp[name] >= 0) { /* line 13 slow_hit_count: 5, fast_hit_count: 5 */
      for (int i = 0; i <= mp[name]; i++) { /* line 14 slow_hit_count: 2467, fast_hit_count: 1251 */
        flag[i].push_back(name); /* line 15 slow_hit_count: 2466, fast_hit_count: 1250 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int maax = -1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  map<string, int>::iterator i; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = mp.begin(); i != mp.end(); ++i) { /* line 21 slow_hit_count: 6, fast_hit_count: 6 */
    if (i->second > maax) { /* line 22 slow_hit_count: 5, fast_hit_count: 5 */
      maax = i->second; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  vector<string> winner; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = mp.begin(); i != mp.end(); ++i) { /* line 27 slow_hit_count: 6, fast_hit_count: 6 */
    if (i->second == maax) { /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
      winner.push_back(i->first); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto i = flag[maax].begin(); i != flag[maax].end(); i++) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    if (mp[*i] == maax) { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
      cout << *i << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze and derive performance-characterizing invariants from the provided C code and hit count data, we need to identify where the code behaves differently under the slow and fast inputs and infer conditions that may trigger these differences.

### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit count data, the most significant difference occurs in the following lines:

- **Line 14 (`for (int i = 0; i <= mp[name]; i++)`):** This line shows a significant increase in hit count for the slow input compared to the fast input. Specifically, it was hit 2467 times for the slow input versus 1251 times for the fast input.
- **Line 15 (`flag[i].push_back(name);`):** Correspondingly, this line also shows a similar increase in execution, indicating that it is part of a nested loop or repeated operation causing the slowdown.

The extra hits at these lines suggest a loop that increases with the player's score, `mp[name]`. As points accumulate, these lines are executed repeatedly, contributing to the performance bottleneck.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, let's derive some natural language performance invariants:

1. **High Accumulated Points Invariant:**
   - *Natural language description:* "When a player's score accumulates to a large positive value during the game, the nested loop execution increases significantly, leading to slower performance."
   - *Reasoning:* The loop at line 14 runs from 0 to `mp[name]`, indicating the number of iterations grows linearly with the player's score. If a player's score becomes large, this results in excessive iterations.

2. **Repeated Insertions in Map-based Data Structure Invariant:**
   - *Natural language description:* "If players frequently hit high scores, the flag data structure experiences repeated insertions, which can degrade performance due to excessive pushes."
   - *Reasoning:* The flag map is being populated with scores, resulting in many insertions as player scores increase.

3. **Score Growth with Large Range Invariant:**
   - *Natural language description:* "When a player's score grows significantly and consistently over rounds, causing the loop to iterate excessively, the program execution time may increase considerably."
   - *Reasoning:* A large score range results in more operations within the loop for each score increment.

### Conclusion

These invariants collectively capture conditions where a combination of high scores and frequent updates to a data structure (such as the flag map) results in performance degradation. Notably, such conditions are not just a function of the maximum rounds but also of how the scores evolve over those rounds. The invariants focus on capturing these patterns in a way that could help identify potential slowdowns in future input scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The winner of the card game popular in Berland "Berlogging" is determined according to the following rules. If at the end of the game there is only one player with the maximum number of points, he is the winner. The situation becomes more difficult if the number of such players is more than one. During each round a player gains or loses a particular number of points. In the course of the game the number of points is registered in the line "name score", where name is a player's name, and score is the number of points gained in this round, which is an integer number. If score is negative, this means that the player has lost in the round. So, if two or more players have the maximum number of points (say, it equals to m) at the end of the game, than wins the one of them who scored at least m points first. Initially each player has 0 points. It's guaranteed that at the end of the game at least one player has a positive number of points.

Input

The first line contains an integer number n (1 ≤ n ≤ 1000), n is the number of rounds played. Then follow n lines, containing the information about the rounds in "name score" format in chronological order, where name is a string of lower-case Latin letters with the length from 1 to 32, and score is an integer number between -1000 and 1000, inclusive.

Output

Print the name of the winner.

Examples

Input

3
mike 3
andrew 5
mike 2


Output

andrew


Input

3
andrew 3
andrew 2
mike 5


Output

andrew

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we can create runtime checks to detect the performance bottlenecks.

```cpp
// Check if a player's score accumulates to a large positive value
void check_high_accumulated_points(int score) {
    if (score > 500) { // Threshold can be adjusted based on constraints
        cerr << "Warning: Performance bottleneck condition triggered - high accumulated points!" << endl;
        abort();
    }
}

// Check if a player frequently hits high scores affecting the flag data structure
void check_frequent_high_scores(int score, int currentMax) {
    if (score > 300 && currentMax > 500) { // Hypothetical thresholds
        cerr << "Warning: Performance bottleneck condition triggered - frequent high scores!" << endl;
        abort();
    }
}

// Check if a player's score grows significantly over rounds
void check_score_growth(int score, int iterations) {
    if (score > 300 && iterations > 500) { // Hypothetical thresholds
        cerr << "Warning: Performance bottleneck condition triggered - score growth with large range!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Here is the original C++ program with the runtime checks integrated at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for high accumulated points that could lead to performance bottlenecks
void check_high_accumulated_points(int score) {
    if (score > 500) { // Threshold can be adjusted based on constraints
        cerr << "Warning: Performance bottleneck condition triggered - high accumulated points!" << endl;
        abort();
    }
}

// Function to check frequent high scores affecting the flag data structure
void check_frequent_high_scores(int score, int currentMax) {
    if (score > 300 && currentMax > 500) { // Hypothetical thresholds
        cerr << "Warning: Performance bottleneck condition triggered - frequent high scores!" << endl;
        abort();
    }
}

// Function to check player's score growth significantly over rounds
void check_score_growth(int score, int iterations) {
    if (score > 300 && iterations > 500) { // Hypothetical thresholds
        cerr << "Warning: Performance bottleneck condition triggered - score growth with large range!" << endl;
        abort();
    }
}

int main() {
    map<int, vector<string>> flag;
    map<string, int> mp;
    int n;
    cin >> n;
    while (n--) {
        string name;
        int score;
        cin >> name >> score;
        mp[name] = mp[name] + score;

        // Insert a check for high accumulated points
        check_high_accumulated_points(mp[name]);

        if (mp[name] >= 0) {
            for (int i = 0; i <= mp[name]; i++) {
                flag[i].push_back(name);
            }
        }
    }
    int maax = -1;
    map<string, int>::iterator i;
    for (i = mp.begin(); i != mp.end(); ++i) {
        if (i->second > maax) {
            maax = i->second;
        }
    }
    vector<string> winner;
    for (i = mp.begin(); i != mp.end(); ++i) {
        if (i->second == maax) {
            winner.push_back(i->first);
        }
    }

    // Before determining the winner, check for frequent high scores
    for (auto &entry : flag[maax]) {
        check_frequent_high_scores(mp[entry], maax);
    }

    for (auto i = flag[maax].begin(); i != flag[maax].end(); i++) {
        if (mp[*i] == maax) {
            cout << *i << endl;
            break;
        }
    }
    return 0;
}
```

### Explanation

- The checker functions are designed to capture the conditions described in the natural language invariants.
- The `check_high_accumulated_points` function is called during the score update process to ensure a player’s score doesn’t grow too large.
- The `check_frequent_high_scores` function is called before proceeding to determine the winner, ensuring that frequent high scores don’t overwhelm the data structures.
- Hypothetical thresholds have been used in the checker functions. These thresholds should be adjusted based on problem constraints and further performance analysis.

These checks help identify scenarios that may lead to performance bottlenecks when the program is run with different inputs, thereby assisting in dynamic analysis and optimization.

