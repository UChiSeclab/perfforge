system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.

Input

The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins.

Output

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.

Examples

Input

6
1 2 4 3 3 2


Output

2


Input

1
100


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  vector<int> v;
  int n, i, j, c, c1;
  c1 = 0;
  vector<int>::iterator it, it2;
  cin >> n;
  for (i = 0; i < n; i++) {
    cin >> j;
    v.push_back(j);
  }
  it = v.begin();
  it2 = v.end();
  for (i = 0; i < n; i++) {
    c = count(it, it2, v[i]);
    if (c > c1) c1 = c;
  }
  cout << c1;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1


(G.2) Fast Input

2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v; /* line 4 slow_hit_count: 2, fast_hit_count: 2 */
  int n, i, j, c, c1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  c1 = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int>::iterator it, it2; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 9 slow_hit_count: 101, fast_hit_count: 3 */
    cin >> j; /* line 10 slow_hit_count: 100, fast_hit_count: 2 */
    v.push_back(j); /* line 11 slow_hit_count: 100, fast_hit_count: 2 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  it = v.begin(); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  it2 = v.end(); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 15 slow_hit_count: 101, fast_hit_count: 3 */
    c = count(it, it2, v[i]); /* line 16 slow_hit_count: 100, fast_hit_count: 2 */
    if (c > c1) c1 = c; /* line 17 slow_hit_count: 100, fast_hit_count: 2 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cout << c1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the provided C code and input data, we can analyze the performance bottleneck and derive performance-characterizing invariants as follows:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - The line `for (i = 0; i < n; i++)` (Line 15) and the line `c = count(it, it2, v[i]);` (Line 16) are executed significantly more in the slow input compared to the fast input. Both have 100 hits in the slow input versus only 2 in the fast input.

2. **Pinpointing Lines with Significant Hits:**
   - The `count` function call within the loop is a critical bottleneck because it searches through the entire vector to count occurrences of each element. This becomes inefficient when the vector has many repeated elements, as each call to `count` scans through potentially all elements.

3. **Interaction with Data Structures and Input Constraints:**
   - The vector `v` is used to store all coin values, and the `count` function checks each value's frequency. When many repetitions of the same value exist (as evident in slow input), it leads to repetitive full scans of the vector.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the primary determinant of slow performance is the repeated and expensive search in the vector due to frequent value repetitions. Here are the natural language invariants that describe the conditions under which the program slows down:

1. **Invariant 1: High Frequency of Identical Values**
   - Natural Language Description: "When the frequency of any single coin value approaches the total number of coins (`n`), the program may slow down significantly due to repeated counting operations."
   - Explanation: If a coin value appears too frequently in the input list, the `count` function will perform excessive iterations, degrading performance.

2. **Invariant 2: Large Input Size with Repeated Elements**
   - Natural Language Description: "If the input size is large (close to the upper constraint of `n = 100`) and many elements are repeated, the performance may degrade as the vector is scanned multiple times for the same values."
   - Explanation: Given the upper limit of `n`, performance issues arise when a large list contains many repeated values, causing the `count` operation to be inefficient.

By ensuring these conditions are monitored and, if possible, optimized (e.g., by using a frequency map to store counts rather than repeatedly scanning the vector), we can mitigate the performance bottleneck observed in the slow input scenario.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.

Input

The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins.

Output

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.

Examples

Input

6
1 2 4 3 3 2


Output

2


Input

1
100


Output

1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we need to implement C++ code snippets that detect when the program may slow down due to the identified conditions.

#### Invariant 1: High Frequency of Identical Values
- **Natural Language Description:** "When the frequency of any single coin value approaches the total number of coins (`n`), the program may slow down significantly due to repeated counting operations."
- **Checker Code:**

```cpp
void check_high_frequency_invariant(int max_frequency, int n) {
    if (max_frequency > n / 2) {  // Using n/2 as a threshold for high frequency
        cerr << "Warning: High frequency invariant triggered - excessive repetitions of a single value!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Input Size with Repeated Elements
- **Natural Language Description:** "If the input size is large (close to the upper constraint of `n = 100`) and many elements are repeated, the performance may degrade as the vector is scanned multiple times for the same values."
- **Checker Code:**

```cpp
void check_large_input_repeated_elements(int n, int unique_elements) {
    if (n > 50 && unique_elements < n / 2) {  // Assumption: less than half of elements are unique
        cerr << "Warning: Large input with repeated elements invariant triggered - potential performance degradation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code with the Original Program

Now, let's integrate these checks into the original C++ program to detect when performance bottlenecks are likely to occur. The checks should be placed after reading inputs and calculating necessary statistics to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_high_frequency_invariant(int max_frequency, int n) {
    if (max_frequency > n / 2) {  // Using n/2 as a threshold for high frequency
        cerr << "Warning: High frequency invariant triggered - excessive repetitions of a single value!" << endl;
        abort();
    }
}

void check_large_input_repeated_elements(int n, int unique_elements) {
    if (n > 50 && unique_elements < n / 2) {  // Assumption: less than half of elements are unique
        cerr << "Warning: Large input with repeated elements invariant triggered - potential performance degradation!" << endl;
        abort();
    }
}

int main() {
    vector<int> v;
    int n, i, j, c, c1;
    c1 = 0;
    vector<int>::iterator it, it2;
    
    cin >> n;
    for (i = 0; i < n; i++) {
        cin >> j;
        v.push_back(j);
    }

    it = v.begin();
    it2 = v.end();

    // Count frequency of each element
    map<int, int> frequency_map;
    for (i = 0; i < n; i++) {
        frequency_map[v[i]]++;
    }
    
    int max_frequency = 0;
    for (auto &entry : frequency_map) {
        if (entry.second > max_frequency) {
            max_frequency = entry.second;
        }
    }
    
    int unique_elements = frequency_map.size();

    // Performance invariant checks
    check_high_frequency_invariant(max_frequency, n);
    check_large_input_repeated_elements(n, unique_elements);

    // Calculate the minimum number of pockets needed
    cout << max_frequency;
}
```

### Explanation

- **Check 1 (`check_high_frequency_invariant`):** This check is added after computing the frequency of each coin value. It warns and aborts if any coin value is excessively repeated, which could lead to performance degradation.

- **Check 2 (`check_large_input_repeated_elements`):** This check is added after determining the number of unique elements. It warns and aborts when the input size is large, and there is a high number of repeated elements, potentially leading to slow performance due to repeated counting operations.

These checks are strategically placed after the necessary data has been collected (e.g., frequencies and unique counts) but before the program performs the main computation (outputting the maximum frequency). This ensures the checks do not add overhead to critical loops.

