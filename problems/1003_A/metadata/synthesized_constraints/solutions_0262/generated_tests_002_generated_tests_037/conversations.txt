system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.

Input

The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins.

Output

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.

Examples

Input

6
1 2 4 3 3 2


Output

2


Input

1
100


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void solve() {
  int n;
  vector<set<int> > pockets;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int a;
    cin >> a;
    bool done = false;
    for (int j = 0; j < pockets.size(); j++) {
      int sb = pockets[j].size();
      pockets[j].insert(a);
      if (sb != pockets[j].size()) {
        done = true;
        break;
      }
    }
    if (!done) {
      set<int> temp;
      temp.insert(a);
      pockets.push_back(temp);
    }
  }
  cout << pockets.size() << "\n";
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1


(G.2) Fast Input

2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  vector<set<int> > pockets; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 101, fast_hit_count: 3 */
    int a; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 9 slow_hit_count: 100, fast_hit_count: 2 */
    bool done = false; /* line 10 slow_hit_count: 100, fast_hit_count: 2 */
    for (int j = 0; j < pockets.size(); j++) { /* line 11 slow_hit_count: 4951, fast_hit_count: 2 */
      int sb = pockets[j].size(); /* line 12 slow_hit_count: 4852, fast_hit_count: 1 */
      pockets[j].insert(a); /* line 13 slow_hit_count: 4852, fast_hit_count: 1 */
      if (sb != pockets[j].size()) { /* line 14 slow_hit_count: 4852, fast_hit_count: 1 */
        done = true; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
        break; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    if (!done) { /* line 19 slow_hit_count: 100, fast_hit_count: 2 */
      set<int> temp; /* line 20 slow_hit_count: 198, fast_hit_count: 2 */
      temp.insert(a); /* line 21 slow_hit_count: 99, fast_hit_count: 1 */
      pockets.push_back(temp); /* line 22 slow_hit_count: 99, fast_hit_count: 1 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cout << pockets.size() << "\n"; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the provided C program and hit count data, let's proceed with the analysis to generate performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Analysis:**
   - **Loop Through `pockets`:** The line `for (int j = 0; j < pockets.size(); j++)` (line 11) is hit 4951 times for the slow input compared to just 2 times for the fast input.
   - **Insertion & Size Check:** Lines 12 to 15, which involve checking the size of each pocket and attempting to insert a coin, are hit over 4800 times in the slow input but just once in the fast input.

2. **Inefficient Code Segments:**
   - **Recurrent Looping:** The nested loop iterates over all pockets every time a new coin is processed, leading to excessive checks and insertions, particularly when a high number of coins share the same value. This is the primary cause of the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language invariants explaining conditions under which the code slows down:

1. **Frequent Value Repetition:**
   - **Invariant:** “If the majority of coins have the same value, the program may slow down significantly due to repeated checks and insertions in a growing list of pockets.”
   - **Reasoning:** When many coins share the same value, each coin must be checked against every pocket until one is found where it can be added, increasing operations quadratically as pockets grow.

2. **High Value Frequency:**
   - **Invariant:** “When a single coin value appears frequently enough to require more than half of the total pockets, performance may degrade because the current logic checks each pocket linearly.”
   - **Reasoning:** If a high frequency of a value forces the creation of multiple pockets, the linear search through pockets becomes increasingly costly, especially as the pockets vector grows.

3. **High Number of Unique Pockets:**
   - **Invariant:** “If the number of unique coin values is low relative to the total number of coins, causing high overlap, performance may degrade due to increased pocket allocation and checking.”
   - **Reasoning:** The excessive allocation and checking involved in maintaining pocket criteria (unique values per pocket) become a bottleneck as coin values overlap and require distinct pockets.

### Implementation Suggestions

To improve the program based on these invariants, consider optimizing the logic that inserts coins into pockets, such as by using a more efficient data structure or strategy that minimizes redundant checks (e.g., using a frequency map first to pre-determine required pockets).

These performance-characterizing invariants can help guide future updates, testing, and optimizations to ensure the code handles edge cases efficiently within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.

Input

The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins.

Output

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.

Examples

Input

6
1 2 4 3 3 2


Output

2


Input

1
100


Output

1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

Let's translate the previously identified performance-characterizing invariants into C++ code to detect the conditions at runtime:

1. **Frequent Value Repetition:**
   ```cpp
   void check_frequent_value_invariant(const map<int, int>& frequency) {
       for (const auto& entry : frequency) {
           if (entry.second > 50) { // Arbitrary threshold based on n <= 100
               cerr << "Warning: Performance bottleneck condition triggered - frequent coin value repetition!" << endl;
               abort();
           }
       }
   }
   ```

2. **High Value Frequency:**
   ```cpp
   void check_high_value_frequency_invariant(const map<int, int>& frequency, int n) {
       int maxFrequency = 0;
       for (const auto& entry : frequency) {
           if (entry.second > maxFrequency) {
               maxFrequency = entry.second;
           }
       }
       if (maxFrequency > n / 2) { // More than half the coins are of the same value
           cerr << "Warning: Performance bottleneck condition triggered - high frequency of a single coin value!" << endl;
           abort();
       }
   }
   ```

3. **High Number of Unique Pockets:**
   ```cpp
   void check_unique_pockets_invariant(const vector<set<int>>& pockets) {
       if (pockets.size() > 50) { // Arbitrary threshold to catch potential slowdowns
           cerr << "Warning: Performance bottleneck condition triggered - high number of unique pockets!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Below is the instrumented C++ program with the checks integrated effectively:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_frequent_value_invariant(const map<int, int>& frequency) {
    for (const auto& entry : frequency) {
        if (entry.second > 50) { // Arbitrary threshold based on n <= 100
            cerr << "Warning: Performance bottleneck condition triggered - frequent coin value repetition!" << endl;
            abort();
        }
    }
}

void check_high_value_frequency_invariant(const map<int, int>& frequency, int n) {
    int maxFrequency = 0;
    for (const auto& entry : frequency) {
        if (entry.second > maxFrequency) {
            maxFrequency = entry.second;
        }
    }
    if (maxFrequency > n / 2) { // More than half the coins are of the same value
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of a single coin value!" << endl;
        abort();
    }
}

void check_unique_pockets_invariant(const vector<set<int>>& pockets) {
    if (pockets.size() > 50) { // Arbitrary threshold to catch potential slowdowns
        cerr << "Warning: Performance bottleneck condition triggered - high number of unique pockets!" << endl;
        abort();
    }
}

void solve() {
    int n;
    vector<set<int>> pockets;
    cin >> n;
    
    map<int, int> frequency;
    for (int i = 0; i < n; i++) {
        int a;
        cin >> a;
        frequency[a]++;
    }

    // Insert checks after reading inputs for initial conditions
    check_frequent_value_invariant(frequency);
    check_high_value_frequency_invariant(frequency, n);

    for (int i = 0; i < n; i++) {
        int a;
        bool done = false;
        for (int j = 0; j < pockets.size(); j++) {
            int sb = pockets[j].size();
            pockets[j].insert(a);
            if (sb != pockets[j].size()) {
                done = true;
                break;
            }
        }
        if (!done) {
            set<int> temp;
            temp.insert(a);
            pockets.push_back(temp);
        }
    }

    // Check potential issues after pockets have been populated
    check_unique_pockets_invariant(pockets);

    cout << pockets.size() << "\n";
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    solve();
}
```

### Explanation of Inserted Checks:

- **`check_frequent_value_invariant`:** Checks if a single coin value exceeds a threshold frequency, indicating potential repetition.
  
- **`check_high_value_frequency_invariant`:** Evaluates whether a single coin value represents more than half of the total coins, which could lead to inefficiencies.
  
- **`check_unique_pockets_invariant`:** Ensures the number of sets (pockets) doesn't grow excessively, which would signal inefficient distribution logic.

These checks are strategically placed after reading inputs and after processing the coin distribution to catch potential performance bottlenecks without significantly degrading the program's performance.

