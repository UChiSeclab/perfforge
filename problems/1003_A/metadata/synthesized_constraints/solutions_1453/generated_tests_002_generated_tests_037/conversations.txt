system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.

Input

The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins.

Output

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.

Examples

Input

6
1 2 4 3 3 2


Output

2


Input

1
100


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, a[100];
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  int b = 0, c = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (a[i] == a[j]) c++;
    }
    if (c > b) b = c;
    c = 0;
  }
  cout << b << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1


(G.2) Fast Input

2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a[100]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 6 slow_hit_count: 101, fast_hit_count: 3 */
    cin >> a[i]; /* line 7 slow_hit_count: 100, fast_hit_count: 2 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  int b = 0, c = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 10 slow_hit_count: 101, fast_hit_count: 3 */
    for (int j = 0; j < n; j++) { /* line 11 slow_hit_count: 10100, fast_hit_count: 6 */
      if (a[i] == a[j]) c++; /* line 12 slow_hit_count: 10000, fast_hit_count: 4 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    if (c > b) b = c; /* line 14 slow_hit_count: 100, fast_hit_count: 2 */
    c = 0; /* line 15 slow_hit_count: 100, fast_hit_count: 2 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cout << b << "\n"; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 18 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the provided C program and identify performance-characterizing invariants, we need to examine the code and the hit counts for lines executed under both slow and fast inputs. Our goal is to understand why the program is slower with certain inputs and derive conditions that predict this behavior.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Analyzing Line Hit Counts:**
   - The critical section of the code is the nested loop structure which occurs between lines 10 and 15.
   - Line 11, `for (int j = 0; j < n; j++)`, has a hit count of 10,100 for the slow input and only 6 for the fast input.
   - Line 12, `if (a[i] == a[j]) c++;`, has a high hit count of 10,000 for the slow input compared to 4 for the fast input.
   
2. **Understanding the Code Logic:**
   - The program attempts to count how many times each unique coin value appears by iterating over all pairs of coins (`a[i]`, `a[j]`).
   - The nested loop leads to a time complexity of \(O(n^2)\), which becomes a bottleneck when `n` is large and when there are many repeated coin values.

3. **Interaction with Input:**
   - For the slow input, the array contains many repeated values (specifically, 99 ones) which causes the program to perform many redundant checks, leading to high hit counts on these lines.
   - The fast input, with distinct values, avoids this inefficiency by minimizing redundant comparisons.

### Phase 2: Performance-Characterizing Invariants

1. **Natural Language Invariants:**

   - **Invariant 1:** "When the number of coins `n` is large and there are many repeated coin values, the program experiences a significant slowdown due to the quadratic time complexity of nested loops."
     - This invariant captures the essence of the inefficiency, which is directly related to the nature of the input having many repeated values.

   - **Invariant 2:** "If the frequency of any particular coin value is high relative to `n`, more than half the coins being the same value, then the program will slow down due to extensive repeated comparisons."
     - This statement emphasizes that it's not just the size of `n` but the high frequency of specific values that lead to inefficiencies.

2. **Thresholds:**
   - While the maximum `n` is constrained by the problem (n ≤ 100), the slowdown is primarily triggered when the frequency of any coin value approaches `n` itself, leading to many redundant comparisons.

### Summary

The slowdown in this C program occurs notably due to its \(O(n^2)\) complexity when iterating over pairs of coins to count duplicates. This inefficiency is exacerbated when input coins have many repeated values, such as all coins being the same. The key performance-characterizing invariants focus on the frequency of repeated values and their interaction with the input size `n`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.

Input

The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins.

Output

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.

Examples

Input

6
1 2 4 3 3 2


Output

2


Input

1
100


Output

1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance Characterizing Invariants in C++

Based on the natural language invariants derived earlier, we will implement C++ code checks that can be used to catch these performance bottlenecks at runtime.

1. **Invariant Check for High Repetition of Coin Values**: 

   This check will be implemented to warn if the frequency of any particular coin value is high relative to `n`.

```cpp
void check_high_frequency_invariant(const vector<int>& frequency, int n) {
    for (int i = 0; i < frequency.size(); ++i) {
        if (frequency[i] > n / 2) {
            cerr << "Warning: Performance bottleneck condition triggered due to high frequency of value " << i << endl;
            abort();
        }
    }
}
```

2. **Invariant Check for Large `n` with Many Repeated Coin Values**:

   This check will be implemented to detect if `n` is large and coupled with many repeated values, causing potential slowdowns.

```cpp
void check_repetition_invariant(const vector<int>& coins, int n) {
    if (n >= 100) {
        unordered_map<int, int> valueCount;
        for (int coin : coins) {
            valueCount[coin]++;
        }
        for (const auto& pair : valueCount) {
            if (pair.second > n / 2) {
                cerr << "Warning: Performance bottleneck condition triggered due to repeated coin values." << endl;
                abort();
            }
        }
    }
}
```

### Phase 4: Integrating the Checks into the Original Program

Now, we integrate these checks into the original C++ program, making sure each performance invariant check is placed effectively.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check high frequency invariant
void check_high_frequency_invariant(const vector<int>& frequency, int n) {
    for (int i = 0; i < frequency.size(); ++i) {
        if (frequency[i] > n / 2) {
            cerr << "Warning: Performance bottleneck condition triggered due to high frequency of value " << i << endl;
            abort();
        }
    }
}

// Function to check repetition invariant
void check_repetition_invariant(const vector<int>& coins, int n) {
    if (n >= 100) {
        unordered_map<int, int> valueCount;
        for (int coin : coins) {
            valueCount[coin]++;
        }
        for (const auto& pair : valueCount) {
            if (pair.second > n / 2) {
                cerr << "Warning: Performance bottleneck condition triggered due to repeated coin values." << endl;
                abort();
            }
        }
    }
}

int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    vector<int> frequency(101, 0); // Assuming coins are in the range [1, 100]

    for (int i = 0; i < n; i++) {
        cin >> a[i];
        frequency[a[i]]++;
    }

    // Check high frequency invariant
    check_high_frequency_invariant(frequency, n);

    // Check repetition invariant
    check_repetition_invariant(a, n);

    int b = 0, c = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (a[i] == a[j]) c++;
        }
        if (c > b) b = c;
        c = 0;
    }
    cout << b << "\n";
}
```

### Explanation
- **Invariants Integration**: The invariant checks are implemented right after the input reading and just before the main computation, so they do not introduce significant overhead in tight loops.
- **Abort on Trigger**: Upon identifying the performance bottleneck condition, the program will issue a warning and terminate using `abort()`.
- **Input Constraints**: The checks are implemented considering the constraints (`n <= 100`) to ensure that they are meaningful within the given problem context.

These integrated checks will help in identifying scenarios where the program might experience slowdowns due to high repetition of coin values or high frequency of a particular coin value relative to `n`.

