system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.

Input

The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins.

Output

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.

Examples

Input

6
1 2 4 3 3 2


Output

2


Input

1
100


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, arr[101] = {0, 0}, x;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> x;
    for (int j = 1; j <= 100; j++) {
      if (j == x) arr[j]++;
    }
  }
  sort(arr, arr + 101);
  cout << arr[100] << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1


(G.2) Fast Input

2
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, arr[101] = {0, 0}, x; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 6 slow_hit_count: 101, fast_hit_count: 3 */
    cin >> x; /* line 7 slow_hit_count: 100, fast_hit_count: 2 */
    for (int j = 1; j <= 100; j++) { /* line 8 slow_hit_count: 10100, fast_hit_count: 202 */
      if (j == x) arr[j]++; /* line 9 slow_hit_count: 10000, fast_hit_count: 200 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  sort(arr, arr + 101); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  cout << arr[100] << endl; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the given C program, we first compare the hit counts between slow and fast runs and identify which parts of the code are significantly more active in the slow run.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

1. **Line 6 (`for (int i = 0; i < n; i++)`):** This outer loop runs `n` times, which is 100 in the slow input and 2 in the fast input. The different number of iterations between fast and slow inputs is expected here due to the nature of input size.

2. **Line 8 (`for (int j = 1; j <= 100; j++)`):** This inner loop runs 100 times for each iteration of the outer loop. This results in 10,100 total iterations on the slow input compared to 202 on the fast input.

3. **Line 9 (`if (j == x) arr[j]++;`):** This line is executed each time the condition `j == x` is true, which happens once per execution of the inner loop on average given uniform distribution of input.

**Inefficient Segment:**
The inner loop on lines 8-9 is a repeated operation that unnecessarily checks each possible coin value (1 to 100) for every single coin input. This results in a massive overhead when `n` is large, as seen with 10,100 hits for the slow input, primarily making the program inefficient.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive performance invariants that explain when and why the program slows down:

1. **Invariant 1: High Frequency of Value Checking**
   - **Natural Language Description:** "If the number of distinct coin values is much smaller than the total number of coins (i.e., many coins have the same value), the inner loop checking each coin's value against all possible values (from 1 to 100) leads to unnecessary iterations, significantly slowing down the program."

2. **Invariant 2: Large Input Size with Uniform Values**
   - **Natural Language Description:** "If a large number of coins share the same value, leading to a high frequency of repeated increments for a particular value, this triggers a slowdown due to excessive repetition of the inner loop processing."

3. **Invariant 3: Dominating Single Coin Value**
   - **Natural Language Description:** "If one coin value appears significantly more frequently than others, the overhead of processing the entire value range per coin in a loop becomes a bottleneck, especially when input size approaches the upper constraint (n = 100)."

These invariants characterize the performance issues observed in the code, especially under conditions where the input size is large and values are not diverse. By refactoring the code to use a more efficient counting method, such as directly incrementing `arr[x]` for each coin rather than iterating over all possible values, these slow paths can be minimized.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarp has n coins, the value of the i-th coin is a_i. Polycarp wants to distribute all the coins between his pockets, but he cannot put two coins with the same value into the same pocket.

For example, if Polycarp has got six coins represented as an array a = [1, 2, 4, 3, 3, 2], he can distribute the coins into two pockets as follows: [1, 2, 3], [2, 3, 4].

Polycarp wants to distribute all the coins with the minimum number of used pockets. Help him to do that.

Input

The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of coins.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) — values of coins.

Output

Print only one integer — the minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.

Examples

Input

6
1 2 4 3 3 2


Output

2


Input

1
100


Output

1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement C++ Runtime Checks

Here are the C++ code snippets implementing the performance-characterizing invariants derived from the analysis:

```cpp
void check_high_frequency_of_value(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - high frequency of repeated value checks!" << endl;
        abort();
    }
}

void check_large_input_uniform_values(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - large input with uniform values!" << endl;
        abort();
    }
}

void check_dominating_single_value(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - one value dominates the input!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into Original Solution

Now, let's integrate these checks into the original C++ program. We will analyze the input after reading all values and add these checks at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for performance bottlenecks
void check_high_frequency_of_value(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - high frequency of repeated value checks!" << endl;
        abort();
    }
}

void check_large_input_uniform_values(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - large input with uniform values!" << endl;
        abort();
    }
}

void check_dominating_single_value(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - one value dominates the input!" << endl;
        abort();
    }
}

int main() {
    int n, x;
    cin >> n;
    
    // Read the coins and count each value
    unordered_map<int, int> value_counts;
    for (int i = 0; i < n; i++) {
        cin >> x;
        value_counts[x]++;
    }
    
    // Check conditions after processing input
    check_high_frequency_of_value(value_counts.size() < n / 2); // e.g., only a few distinct values
    check_large_input_uniform_values(n > 80 && value_counts.size() < 10); // large n with few unique values
    check_dominating_single_value(n > 80 && value_counts[x] > n / 2); // more than half are the same value
    
    // Determine maximum frequency
    int max_frequency = 0;
    for (const auto& kvp : value_counts) {
        max_frequency = max(max_frequency, kvp.second);
    }
    
    cout << max_frequency << endl; // number of pockets needed
    return 0;
}
```

### Explanation of Integration

- **Check Placement:** The checks are placed after reading and analyzing the input data to avoid adding overhead during the input loop.
- **Check Logic:**
  - `check_high_frequency_of_value`: Triggers if there are significantly fewer distinct values than half the number of coins, suggesting redundancy in processing many identical values.
  - `check_large_input_uniform_values`: Triggers when `n` is large and the diversity of values is low, indicating potential inefficiency due to repeated operations on similar values.
  - `check_dominating_single_value`: Triggers when a single value dominates the input (appears more than half the time), potentially leading to inefficiency. 

These checks are strategically integrated to capture performance bottlenecks identified in the analysis phase. The program now can provide useful feedback when these conditions are met, aiding in debugging and optimization efforts.

