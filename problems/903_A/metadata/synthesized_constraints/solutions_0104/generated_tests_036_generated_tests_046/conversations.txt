system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  cin >> n;
  while (n--) {
    int x;
    cin >> x;
    bool b = 0;
    for (int i = 0; i <= 100; i++) {
      for (int j = 0; j <= 100; j++) {
        if (3 * i + 7 * j == x) b = 1;
      }
    }
    if (b)
      cout << "YES";
    else
      cout << "NO";
    cout << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

47
1
1
1
1
1
1
1
1
1
1
1
1
1
2
1
1
1
1
1
1
2
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
1
1
1


(G.2) Fast Input

2
2
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 6 slow_hit_count: 48, fast_hit_count: 3 */
    int x; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 8 slow_hit_count: 47, fast_hit_count: 2 */
    bool b = 0; /* line 9 slow_hit_count: 47, fast_hit_count: 2 */
    for (int i = 0; i <= 100; i++) { /* line 10 slow_hit_count: 4794, fast_hit_count: 204 */
      for (int j = 0; j <= 100; j++) { /* line 11 slow_hit_count: 484194, fast_hit_count: 20604 */
        if (3 * i + 7 * j == x) b = 1; /* line 12 slow_hit_count: 479447, fast_hit_count: 20402 */
      } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    if (b) /* line 15 slow_hit_count: 47, fast_hit_count: 2 */
      cout << "YES"; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "NO"; /* line 18 slow_hit_count: 47, fast_hit_count: 2 */
    cout << endl; /* line 19 slow_hit_count: 47, fast_hit_count: 2 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit count information, we can identify the following insights:

1. **Outer Loop (Line 6)**: This loop executes the number of test cases, which is significantly higher for the slow input (47 vs. 2). This alone increases overhead but is expected due to more test cases.

2. **Nested Loops (Lines 10-11)**: These loops are crucial performance bottlenecks. The outer loop iterates 101 times for values of `i`, and the inner loop does the same for `j`, leading to 10,201 iterations per test case. For the slow input which has 47 test cases, this results in 479,447 iterations of the condition check `if (3 * i + 7 * j == x)`.

3. **Condition Check (Line 12)**: This line is executed over 479,447 times in the slow input, compared to only 20,402 times in the fast input. This indicates that a significant amount of time is spent evaluating this condition.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant 1: High Test Case Count**  
   - **Natural Language Description**: "When the number of test cases is large, combined with the inefficient computation in nested loops, performance degrades significantly."
   - **Explanation**: A higher number of test cases (`n`) directly increases the total number of iterations of the nested loops.

2. **Invariant 2: Inefficient Search Space in Nested Loops**  
   - **Natural Language Description**: "When the target number of chunks is such that many combinations of portions need to be checked, the program may run slowly due to exhaustive checking."
   - **Explanation**: The nested loops check all combinations of `3*i + 7*j == x` up to `i, j <= 100`, which is inefficient when `x` requires checking a high portion of these combinations before finding a match or concluding no solution.

3. **Invariant 3: Small Values Leading to Large Iterations**  
   - **Natural Language Description**: "For small values of desired chunks that cannot be easily formed using the available portion sizes, the search space is extensively explored, slowing down the program."
   - **Explanation**: Inputs like `x = 1` or `x = 2` (which appear frequently in the slow input) cannot be formed with the given portions, causing the full loop iteration to be executed without early exit.

These invariants highlight how the combination of both a large number of test cases and ineffective search strategies lead to significant slowdowns. To improve the performance, one might consider optimizing the solution, such as using a more efficient algorithm to determine the possibility of representing `x` as a combination of the given portion sizes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

Solution (C++ code):
{solution}


assistant: Let's implement the invariants identified in the previous phase. Here is how you can translate each of the natural language invariants into C++ code snippets:

### Phase 3: Implement Natural Language Invariants in C++

```cpp
void check_test_case_count(int n) {
    // Invariant 1: High Test Case Count
    if (n > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of test cases!" << endl;
        abort();
    }
}

void check_excessive_loop_iterations(int x) {
    // Invariant 2: Inefficient Search Space in Nested Loops
    if (x <= 10) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient search space for small x!" << endl;
        abort();
    }
}

void check_inefficient_search_space(int x) {
    // Invariant 3: Small Values Leading to Large Iterations
    if (x < 3 || x == 5) {
        cerr << "Warning: Performance bottleneck condition triggered - small x cannot be formed efficiently!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into Original C++ Program

Now, let's integrate these checks at appropriate locations in the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_test_case_count(int n) {
    if (n > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of test cases!" << endl;
        abort();
    }
}

void check_excessive_loop_iterations(int x) {
    if (x <= 10) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient search space for small x!" << endl;
        abort();
    }
}

void check_inefficient_search_space(int x) {
    if (x < 3 || x == 5) {
        cerr << "Warning: Performance bottleneck condition triggered - small x cannot be formed efficiently!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    
    // Insert check for high number of test cases
    check_test_case_count(n);
    
    while (n--) {
        int x;
        cin >> x;
        
        // Insert checks related to inefficient computation
        check_excessive_loop_iterations(x);
        check_inefficient_search_space(x);
        
        bool b = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = 0; j <= 100; j++) {
                if (3 * i + 7 * j == x) b = 1;
            }
        }
        
        if (b)
            cout << "YES";
        else
            cout << "NO";
        cout << endl;
    }
}
```

### Explanation

- **`check_test_case_count(int n)`**: This function checks if the number of test cases exceeds 50, which was identified as a threshold where performance may degrade due to the sheer volume of work.

- **`check_excessive_loop_iterations(int x)`**: This check runs before the nested loops when `x` is small (≤10), as small values lead to inefficient exploration of combinations.

- **`check_inefficient_search_space(int x)`**: This check identifies specific small values of `x` that are impossible or difficult to form (below 3 or exactly 5), which require the full loop iteration to conclude.

These checks are placed strategically to prevent them from adding overhead during critical performance sections (like inside the nested loops), while still capturing the performance bottlenecks early.

