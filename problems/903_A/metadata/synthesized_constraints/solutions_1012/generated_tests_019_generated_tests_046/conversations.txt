system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:5000000000")
const unsigned long long mod = 1000000007;
long long Inf = (long long)2e9;
long long LINF = (long long)1e18 + 1e17;
using namespace std;
int main() {
  int n;
  scanf("%d", &(n));
  while (n--) {
    int x;
    scanf("%d", &(x));
    bool f = false;
    for (int i = 0; i <= 100; i++) {
      bool flag = false;
      for (int j = 0; j <= 100; j++) {
        if (i * 3 + j * 7 == x) {
          flag = 1;
          f = 1;
          break;
        }
      }
    }
    if (f)
      puts("YES");
    else
      puts("NO");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

47
1
1
1
1
1
1
1
1
1
1
1
1
1
2
1
1
1
1
1
1
2
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1


(G.2) Fast Input

2
2
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:5000000000") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const unsigned long long mod = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long Inf = (long long)2e9; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long LINF = (long long)1e18 + 1e17; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &(n)); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 10 slow_hit_count: 48, fast_hit_count: 3 */
    int x; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &(x)); /* line 12 slow_hit_count: 47, fast_hit_count: 2 */
    bool f = false; /* line 13 slow_hit_count: 47, fast_hit_count: 2 */
    for (int i = 0; i <= 100; i++) { /* line 14 slow_hit_count: 4794, fast_hit_count: 204 */
      bool flag = false; /* line 15 slow_hit_count: 4747, fast_hit_count: 202 */
      for (int j = 0; j <= 100; j++) { /* line 16 slow_hit_count: 484194, fast_hit_count: 20604 */
        if (i * 3 + j * 7 == x) { /* line 17 slow_hit_count: 479447, fast_hit_count: 20402 */
          flag = 1; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
          f = 1; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    if (f) /* line 24 slow_hit_count: 47, fast_hit_count: 2 */
      puts("YES"); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      puts("NO"); /* line 27 slow_hit_count: 47, fast_hit_count: 2 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Line-Level Analysis:**

- **Line 14 (`for (int i = 0; i <= 100; i++)`):**
  - **Slow Input Hit Count:** 4794
  - **Fast Input Hit Count:** 204
  - **Observation:** This outer loop runs significantly more times for the slow input, indicating repeated iterations without early termination.

- **Line 16 (`for (int j = 0; j <= 100; j++)`):**
  - **Slow Input Hit Count:** 484,194
  - **Fast Input Hit Count:** 20,604
  - **Observation:** The inner loop runs a massive number of times for the slow input, indicating that the condition `i * 3 + j * 7 == x` is rarely satisfied early.

- **Line 17 (`if (i * 3 + j * 7 == x)`):**
  - **Slow Input Hit Count:** 479,447
  - **Fast Input Hit Count:** 20,402
  - **Observation:** The condition check is performed extensively, suggesting that combinations of `i` and `j` are inefficiently explored, particularly when the desired number of chunks `x` cannot be composed from available portion sizes.

From the analysis, the main performance bottleneck is the nested loop structure iterating over `i` and `j`, both going up to 100, yielding up to 10,000 iterations per query, particularly when the condition is rarely satisfied early or not at all.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Repeated Unsuccessful Combinations:**
   - **Natural Language Description:** "When the desired number of chicken chunks `x` is such that no combination of small (3 chunks) and large (7 chunks) portions can satisfy the requirement early in the iteration, the program spends excessive time exploring combinations."
   - **Reasoning:** Inputs for which no solution exists (e.g., `x = 1`) cause the loops to fully execute all iterations, resulting in unnecessary computation.

2. **Threshold for Combinations:**
   - **Natural Language Description:** "For certain values of `x` that are neither multiples of 3 nor reach a total count quickly with combinations of small and large portions, such as low values like `x = 1` or those requiring many iterations to find a solution, the execution becomes slow."
   - **Reasoning:** Values that require complete iteration over both loops without satisfying the condition early cause slow execution.

3. **High Iteration Count for No-Solution Cases:**
   - **Natural Language Description:** "If the number of desired chunks `x` leads to no possible solution (e.g., `x` is less than 3 or results in a remainder when divided by 3 or 7 with no valid combinations), the program exhibits poor performance due to extensive looping."
   - **Reasoning:** Ensuring quick termination or recognizing impossible cases early would prevent lengthy iterations.

These invariants help characterize scenarios where the nested loop structure leads to performance degradation due to the nature of the input values and the lack of early exits or optimizations in solving the linear combination problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here we translate each of the identified performance-characterizing invariants into C++ code checks:

1. **Repeated Unsuccessful Combinations:**

```cpp
void check_unsuccessful_combinations(int x) {
    if (x < 3 || (x % 3 != 0 && x % 7 != 0 && (x < 10 || x > 90))) {
        cerr << "Warning: Performance bottleneck condition triggered for x = " << x << "!" << endl;
        abort();
    }
}
```

2. **Threshold for Combinations:**

```cpp
void check_threshold_combinations(int x, int iterationCount) {
    if (iterationCount > 10000) {
        cerr << "Warning: High iteration count for x = " << x << "!" << endl;
        abort();
    }
}
```

3. **High Iteration Count for No-Solution Cases:**

```cpp
void check_no_solution_iterations(int x, bool foundSolution) {
    if (!foundSolution && x <= 10) {
        cerr << "Warning: Extensive iterations for no-solution case for x = " << x << "!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original C++ Program

Here's the C++ program with integrated checker functions:

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:5000000000")
const unsigned long long mod = 1000000007;
long long Inf = (long long)2e9;
long long LINF = (long long)1e18 + 1e17;
using namespace std;

// Checker function to detect performance bottlenecks
void check_unsuccessful_combinations(int x) {
    // Detects when x is unlikely to have a solution early in iterations
    if (x < 3 || (x % 3 != 0 && x % 7 != 0 && (x < 10 || x > 90))) {
        cerr << "Warning: Performance bottleneck condition triggered for x = " << x << "!" << endl;
        abort();
    }
}

// Checker function to monitor high iteration counts
void check_threshold_combinations(int x, int iterationCount) {
    if (iterationCount > 10000) {
        cerr << "Warning: High iteration count for x = " << x << "!" << endl;
        abort();
    }
}

// Checker for extensive iterations in no-solution cases
void check_no_solution_iterations(int x, bool foundSolution) {
    if (!foundSolution && x <= 10) {
        cerr << "Warning: Extensive iterations for no-solution case for x = " << x << "!" << endl;
        abort();
    }
}

int main() {
    int n;
    scanf("%d", &(n));
    while (n--) {
        int x;
        scanf("%d", &(x));

        // Insert checker for repeated unsuccessful combinations
        check_unsuccessful_combinations(x);

        bool f = false;
        int iterationCount = 0;
        for (int i = 0; i <= 100; i++) {
            bool flag = false;
            for (int j = 0; j <= 100; j++) {
                iterationCount++;
                if (i * 3 + j * 7 == x) {
                    flag = 1;
                    f = 1;
                    break;
                }
            }
        }

        // Insert checker for high iteration counts
        check_threshold_combinations(x, iterationCount);

        // Insert checker for extensive iterations in no-solution cases
        check_no_solution_iterations(x, f);

        if (f)
            puts("YES");
        else
            puts("NO");
    }
    return 0;
}
```

### Explanation of Inserted Checks:

1. **Check for Repeated Unsuccessful Combinations:**
   - This check is placed after reading the input `x` to determine if the chunks cannot be formed early in the iteration process, preventing unnecessary computation.
   
2. **Check for High Iteration Count:**
   - This check is placed after the nested loops to abort if the iterations exceed a threshold, indicating inefficient search for combinations.

3. **Check for Extensive Iterations in No-Solution Cases:**
   - This is added to detect cases where no valid `(a, b)` combination exists, especially for smaller values of `x`, thus indicating a potential inefficiency.

These checks are strategically placed to help in identifying and aborting on conditions that lead to performance bottlenecks without adding overhead in the tight loop.

