system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }
int lcm(int a, int b) { return a / gcd(a, b) * b; }
long long powmod(long long a, long long b, long long MOD) {
  long long ans = 1;
  while (b) {
    if (b % 2) ans = ans * a % MOD;
    a = a * a % MOD;
    b /= 2;
  }
  return ans;
}
int bj, aa;
void dfs(int a) {
  if (!a) {
    bj = 1;
    return;
  }
  if (a >= 3) dfs(a - 3);
  if (a >= 7) dfs(a - 7);
}
int main() {
  ios::sync_with_stdio(false);
  int t;
  for (cin >> t; t; t--) {
    cin >> aa;
    bj = 0;
    dfs(aa);
    if (!bj)
      puts("NO");
    else
      puts("YES");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
1
12
80


(G.2) Fast Input

3
1
12
8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int gcd(int a, int b) { return b ? gcd(b, a % b) : a; } /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int lcm(int a, int b) { return a / gcd(a, b) * b; } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long powmod(long long a, long long b, long long MOD) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 1; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    if (b % 2) ans = ans * a % MOD; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    a = a * a % MOD; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    b /= 2; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int bj, aa; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int a) { /* line 15 slow_hit_count: 213950, fast_hit_count: 13 */
  if (!a) { /* line 16 slow_hit_count: 213950, fast_hit_count: 13 */
    bj = 1; /* line 17 slow_hit_count: 28663, fast_hit_count: 1 */
    return; /* line 18 slow_hit_count: 28663, fast_hit_count: 1 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (a >= 3) dfs(a - 3); /* line 20 slow_hit_count: 185287, fast_hit_count: 12 */
  if (a >= 7) dfs(a - 7); /* line 21 slow_hit_count: 185287, fast_hit_count: 12 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  for (cin >> t; t; t--) { /* line 26 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> aa; /* line 27 slow_hit_count: 3, fast_hit_count: 3 */
    bj = 0; /* line 28 slow_hit_count: 3, fast_hit_count: 3 */
    dfs(aa); /* line 29 slow_hit_count: 3, fast_hit_count: 3 */
    if (!bj) /* line 30 slow_hit_count: 3, fast_hit_count: 3 */
      puts("NO"); /* line 31 slow_hit_count: 1, fast_hit_count: 2 */
    else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      puts("YES"); /* line 33 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, we'll proceed through the provided phases.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The primary function with significant differences in hit counts is `dfs(int a)`, specifically lines 15 to 21.
   - For the slow input, `dfs(int a)` is called 213,950 times, while for the fast input, it is called only 13 times.
   - The lines within the `dfs` function that execute recursive calls (lines 20 and 21) are hit 185,287 times in the slow input case compared to 12 times in the fast input case.

2. **Inference:**
   - The high number of recursive calls suggests that the recursive depth or branching is causing performance issues.
   - Since the recursion reduces `a` by either 3 or 7, the large number of hits indicates that for certain values of `a`, the solution is not being reached efficiently (i.e., the base case `if (!a)` is not hit early enough).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants in Natural Language:**
   - **Invariant 1:** "If the number of chicken chunks `x` is not divisible by 3 or 7 and requires deep recursion to find a combination, the program will experience slow performance."
   - **Invariant 2:** "When `x` is a large multiple of 3 or 7, or near such multiples that require an extensive search for combination possibilities, the recursive function calls increase significantly, leading to slower execution."
   - **Invariant 3:** "If the recursive solution needs to explore many possibilities due to lack of early termination, especially when `x` results in repeated recursive calls without quickly reducing to zero, the performance will degrade."

2. **Generalization and Input Patterns:**
   - The performance issue is not strictly about the size of `x` but about how `x` can be decomposed into sums of 3s and 7s.
   - Inputs that aren't straightforwardly decomposable using the available operations (i.e., subtracting 3 or 7) will cause more recursive calls, leading to performance hits.

### Conclusion

The recursive function `dfs` is the primary source of inefficiency due to its inability to quickly find a solution for certain values of `x`. Specifically, the heavy recursion when `x` cannot be easily reduced by multiples of 3 or 7 causes the slowdown, especially when many recursive paths have to be explored before concluding that no solution exists. By understanding these patterns, future implementations can optimize for such cases, possibly by memoization or iterative approaches to avoid deep recursion.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants as C++ code snippets and then integrate them into the original program.

### Phase 3: Implementing the Invariants as Checker Code

1. **Invariant 1:** If the number of chicken chunks `x` is not divisible by 3 or 7 and requires deep recursion to find a combination, the program will experience slow performance.

```cpp
void check_divisibility_invariant(int x) {
    if (x % 3 != 0 && x % 7 != 0 && x % 10 != 0) {
        cerr << "Warning: Performance bottleneck condition triggered due to indivisibility by 3, 7, or 10!" << endl;
        abort();
    }
}
```

2. **Invariant 2:** When `x` is a large multiple of 3 or 7, or near such multiples that require an extensive search for combination possibilities, the recursive function calls increase significantly, leading to slower execution.

```cpp
void check_near_multiple_invariant(int x) {
    if (x > 50 && (x % 3 != 0 && x % 7 != 0)) {
        cerr << "Warning: Performance bottleneck triggered - high recursion due to large number not a multiple of 3 or 7!" << endl;
        abort();
    }
}
```

3. **Invariant 3:** If the recursive solution needs to explore many possibilities due to lack of early termination, especially when `x` results in repeated recursive calls without quickly reducing to zero, the performance will degrade.

```cpp
void check_recursive_exploration_invariant(int x) {
    if (x > 20 && x % 10 == 1) {
        cerr << "Warning: Performance degradation likely due to recursive exploration without early termination!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Program

Now, let's integrate these checks into the original C++ code.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_divisibility_invariant(int x) {
    // Check for indivisibility by 3, 7, or 10 as a potential bottleneck
    if (x % 3 != 0 && x % 7 != 0 && x % 10 != 0) {
        cerr << "Warning: Performance bottleneck condition triggered due to indivisibility by 3, 7, or 10!" << endl;
        abort();
    }
}

void check_near_multiple_invariant(int x) {
    // Check if x is large and not a multiple of 3 or 7, indicating potential slow path
    if (x > 50 && (x % 3 != 0 && x % 7 != 0)) {
        cerr << "Warning: Performance bottleneck triggered - high recursion due to large number not a multiple of 3 or 7!" << endl;
        abort();
    }
}

void check_recursive_exploration_invariant(int x) {
    // Check if x is likely to cause recursive exploration issues
    if (x > 20 && x % 10 == 1) {
        cerr << "Warning: Performance degradation likely due to recursive exploration without early termination!" << endl;
        abort();
    }
}

int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }
int lcm(int a, int b) { return a / gcd(a, b) * b; }
long long powmod(long long a, long long b, long long MOD) {
    long long ans = 1;
    while (b) {
        if (b % 2) ans = ans * a % MOD;
        a = a * a % MOD;
        b /= 2;
    }
    return ans;
}

int bj, aa;

void dfs(int a) {
    if (!a) {
        bj = 1;
        return;
    }
    if (a >= 3) dfs(a - 3);
    if (a >= 7) dfs(a - 7);
}

int main() {
    ios::sync_with_stdio(false);
    int t;
    for (cin >> t; t; t--) {
        cin >> aa;

        // Check performance-characterizing invariants before running DFS
        check_divisibility_invariant(aa);
        check_near_multiple_invariant(aa);
        check_recursive_exploration_invariant(aa);

        bj = 0;
        dfs(aa);
        if (!bj)
            puts("NO");
        else
            puts("YES");
    }
    return 0;
}
```

**Explanation:**
- Each checker function is called before the DFS function, ensuring that potential performance issues are flagged before the computationally expensive process begins.
- The checks are set up to trigger when certain conditions are met that are likely to cause slowdowns, based on the invariant descriptions.

