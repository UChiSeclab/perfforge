system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int T;
  cin >> T;
  while (T--) {
    int X;
    cin >> X;
    int flag = 0;
    for (int i = 0; i <= 100; i++) {
      for (int j = 0; j <= 100; j++) {
        if (((3 * i) + (7 * j)) == X) {
          flag = 1;
        }
      }
    }
    if (flag)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

47
1
1
1
1
1
1
1
1
1
1
1
1
1
2
1
1
1
1
1
1
2
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
1
1
1


(G.2) Fast Input

2
2
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int T; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> T; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  while (T--) { /* line 6 slow_hit_count: 48, fast_hit_count: 3 */
    int X; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> X; /* line 8 slow_hit_count: 47, fast_hit_count: 2 */
    int flag = 0; /* line 9 slow_hit_count: 47, fast_hit_count: 2 */
    for (int i = 0; i <= 100; i++) { /* line 10 slow_hit_count: 4794, fast_hit_count: 204 */
      for (int j = 0; j <= 100; j++) { /* line 11 slow_hit_count: 484194, fast_hit_count: 20604 */
        if (((3 * i) + (7 * j)) == X) { /* line 12 slow_hit_count: 479447, fast_hit_count: 20402 */
          flag = 1; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag) /* line 17 slow_hit_count: 47, fast_hit_count: 2 */
      cout << "YES\n"; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "NO\n"; /* line 20 slow_hit_count: 47, fast_hit_count: 2 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and derive performance-characterizing invariants, let's walk through the necessary phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The nested loops starting at lines 10 and 11 have significantly higher hit counts in the slow input. Specifically, line 11 has a hit count of 484,194 on the slow input compared to 20,604 on the fast input.

2. **Pinpointing Problematic Lines**:
   - The loops iterate over a range from 0 to 100, checking each combination of `i` and `j` to see if `3*i + 7*j` equals `X`. This is a brute-force solution that checks every possible combination up to (100, 100).

3. **Interaction with Data Structures/Loops**:
   - The loops are not breaking early even after finding a solution for `X`, which means they continue to execute unnecessarily once the condition is satisfied. This is evident as both `i` and `j` loop through their entire range of 0 to 100 for each test case.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language performance invariants that describe conditions under which the program enters a slow path:

1. **Nested Loop Inefficiency**:
   - "When the number of test cases `n` is large, and the desired number of chunks `X` requires checking many combinations of small and large portions, the program may slow down due to excessive iterations in nested loops."

2. **Early Loop Termination**:
   - "If the program does not terminate loops early after finding a valid combination of portions, it can lead to unnecessary calculations that slow down performance, especially when `X` is difficult to achieve with typical combinations."

3. **Brute Force Combinations**:
   - "If the desired number of chunks `X` often results in checking a vast number of combinations without early exit, the brute-force approach causes performance degradation."

4. **Input Distribution Impact**:
   - "When many test cases have values of `X` that are less common solutions (e.g., involving combinations that are less likely to match with the portions available), performance is impacted as the solution checks all possible combinations each time."

These invariants reflect the inefficiencies primarily due to the brute-force approach and lack of early loop termination when a solution is found for each test case. Implementing an early exit strategy upon finding a valid combination would alleviate some of the performance slowdowns observed in the slow input scenario.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we implement the performance-characterizing invariants as runtime checks in C++.

### Phase 3: Implementing C++ Checker Code

Based on the natural language invariants we derived previously, here are the C++ code snippets that implement these checks:

1. **Nested Loop Inefficiency**:
   - We check if the program is about to execute the nested loops for an excessive number of iterations.

```cpp
void check_nested_loops_invariant(int n, int currentTestCase) {
    if (n > 50 && currentTestCase > 20) { 
        // These thresholds are arbitrary and can be adjusted based on further profiling.
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop iterations due to high n and frequent small X" << endl;
        abort();
    }
}
```

2. **Early Loop Termination**:
   - To detect if a loop is not terminating early, we could add a check on the iteration count for early termination.

```cpp
void check_early_termination_invariant(int i, int j, bool flag) {
    if (i >= 100 && j >= 100 && !flag) {
        cerr << "Warning: Performance bottleneck condition triggered - loops not terminating early on finding a solution" << endl;
        abort();
    }
}
```

3. **Brute Force Combinations**:
   - We can check if `i` and `j` reached their maximum iterations, indicating a brute-force approach inefficiency.

```cpp
void check_brute_force_invariant(int i, int j) {
    if (i > 90 && j > 90) {
        // These thresholds indicate almost full iteration, showing inefficiency.
        cerr << "Warning: Performance bottleneck condition triggered - brute-force combination checking" << endl;
        abort();
    }
}
```

These checks aim to detect potential inefficiencies in the control flow that might lead to slow execution.

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check nested loop inefficiency
void check_nested_loops_invariant(int n, int currentTestCase) {
    if (n > 50 && currentTestCase > 20) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop iterations due to high n and frequent small X" << endl;
        abort();
    }
}

// Function to check early loop termination
void check_early_termination_invariant(int i, int j, bool flag) {
    if (i >= 100 && j >= 100 && !flag) {
        cerr << "Warning: Performance bottleneck condition triggered - loops not terminating early on finding a solution" << endl;
        abort();
    }
}

// Function to check brute force combinations
void check_brute_force_invariant(int i, int j) {
    if (i > 90 && j > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - brute-force combination checking" << endl;
        abort();
    }
}

int main() {
    int T;
    cin >> T;

    // Check for nested loop inefficiency
    check_nested_loops_invariant(T, 0);

    for (int currentTestCase = 1; currentTestCase <= T; ++currentTestCase) {
        int X;
        cin >> X;
        int flag = 0;
        for (int i = 0; i <= 100; i++) {
            for (int j = 0; j <= 100; j++) {
                if (((3 * i) + (7 * j)) == X) {
                    flag = 1;
                    break; // Break early once a solution is found
                }
                // Check for brute force inefficiency
                check_brute_force_invariant(i, j);
            }
            if (flag) break; // Break outer loop early as well
        }
        // Check for early loop termination inefficiency
        check_early_termination_invariant(100, 100, flag);

        if (flag)
            cout << "YES\n";
        else
            cout << "NO\n";
    }
    return 0;
}
```

### Explanation

- **Check Insertion**: The checks are inserted before potentially heavy operations, such as nested loops, and after the loops to ensure that inefficiencies are detected without adding unnecessary overhead within tight loops.
- **Early Loop Breaks**: Added `break` statements to terminate loops once a solution is found, addressing the early loop termination inefficiency.
- **Checker Functions**: Separate functions for each invariant keep the main code readable and isolate the checks for easier maintenance and adjustments. These functions can be adjusted to better detect inefficiencies based on more profiling and testing results.

