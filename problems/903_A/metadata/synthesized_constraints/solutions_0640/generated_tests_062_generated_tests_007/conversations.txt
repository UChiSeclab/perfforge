system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int bfs(int n) {
  queue<int> q;
  q.push(0);
  while (!q.empty()) {
    int u = q.front();
    int v3, v7;
    v3 = u + 3;
    v7 = u + 7;
    if (v3 == n || v7 == n) return 1;
    if (v3 < n) q.push(v3);
    if (v7 < n) q.push(v7);
    q.pop();
  }
  return 0;
}
int main() {
  int t;
  cin >> t;
  for (int i = 1; i <= t; i++) {
    int x;
    cin >> x;
    int r;
    r = bfs(x);
    if (r == 1)
      cout << "YES" << endl;
    else
      cout << "NO" << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
2
9
95


(G.2) Fast Input

3
2
2
2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int bfs(int n) { /* line 3 slow_hit_count: 3, fast_hit_count: 3 */
  queue<int> q; /* line 4 slow_hit_count: 6, fast_hit_count: 6 */
  q.push(0); /* line 5 slow_hit_count: 3, fast_hit_count: 3 */
  while (!q.empty()) { /* line 6 slow_hit_count: 66443, fast_hit_count: 6 */
    int u = q.front(); /* line 7 slow_hit_count: 66442, fast_hit_count: 3 */
    int v3, v7; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    v3 = u + 3; /* line 9 slow_hit_count: 66442, fast_hit_count: 3 */
    v7 = u + 7; /* line 10 slow_hit_count: 66442, fast_hit_count: 3 */
    if (v3 == n || v7 == n) return 1; /* line 11 slow_hit_count: 66442, fast_hit_count: 3 */
    if (v3 < n) q.push(v3); /* line 12 slow_hit_count: 66440, fast_hit_count: 3 */
    if (v7 < n) q.push(v7); /* line 13 slow_hit_count: 66440, fast_hit_count: 3 */
    q.pop(); /* line 14 slow_hit_count: 66440, fast_hit_count: 3 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 16 slow_hit_count: 1, fast_hit_count: 3 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= t; i++) { /* line 21 slow_hit_count: 4, fast_hit_count: 4 */
    int x; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 23 slow_hit_count: 3, fast_hit_count: 3 */
    int r; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    r = bfs(x); /* line 25 slow_hit_count: 3, fast_hit_count: 3 */
    if (r == 1) /* line 26 slow_hit_count: 3, fast_hit_count: 3 */
      cout << "YES" << endl; /* line 27 slow_hit_count: 2, fast_hit_count: 0 */
    else /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "NO" << endl; /* line 29 slow_hit_count: 1, fast_hit_count: 3 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

From the hit count data, we notice:
- The `while (!q.empty())` loop in the `bfs` function (line 6) and the lines within this loop have a significantly higher hit count in the slow run compared to the fast run.
- Lines 7, 9, 10, 11, 12, 13, and 14 are executed around 66,442 times in the slow run but only 3 times in the fast run.

**Analysis:**
- The primary bottleneck is the `bfs` function, which involves a breadth-first search (BFS) algorithm using a queue to explore possible combinations of chicken portions.
- The BFS loop continues to enqueue new values and only exits when a valid combination is found (or all possibilities are exhausted).
- In the slow case, the loop executes many more times, suggesting that it’s exploring a larger search space for inputs like 9 and 95, as opposed to the fast input where all values are 2.

### Phase 2: Derive Performance-Characterizing Invariants

**Invariant #1:**
Natural language description: "When the input value x requires exploring a large number of combinations of small and large chicken portions, the BFS search space grows, leading to slower performance."

**Condition Implementation:**
- The slow path is triggered when neither `v3` nor `v7` quickly equals the target `n`, and the search space needs to explore many combinations, especially when `n - 3a - 7b` is not easily reduced to zero for small values of `a` and `b`. This is because there are many different combinations of 3s and 7s to consider before concluding "NO."

**Invariant #2:**
Natural language description: "If the target number of chicken chunks cannot be quickly satisfied by a small number of combinations of 3s and 7s, the program will explore a significant search space, leading to performance degradation."

**Condition Implementation:**
- When `x` is a number that cannot be easily represented as a sum of multiples of 3 and 7, the search space required to verify this grows, especially if it involves large numbers close to the upper input constraint of 100.

**Invariant #3:**
Natural language description: "The BFS implementation struggles when the target chunk count x results in a deep exploration tree due to the lack of direct or simple combinations of 3s and 7s yielding the target."

**Condition Implementation:**
- Performance slows significantly when the queue expands to explore many levels of the combination tree before proving that no solution exists or finding a solution.

### Summary

These invariants capture the conditions under which the BFS-based solution hits a performance bottleneck. They are framed around the observation that larger search spaces and deeper exploration trees arise when inputs can't be quickly resolved into acceptable sums of the small and large portion sizes. These performance triggers are not specific to the particular values but instead relate broadly to the problem’s structure and constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.

CFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.

Formally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.

Help Ivan to answer this question for several values of x!

Input

The first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.

The i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.

Output

Print n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.

Example

Input

2
6
5


Output

YES
NO

Note

In the first example Ivan can buy two small portions.

In the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checkers

Based on the natural language invariants developed earlier, here is the C++ code for runtime checks:

```cpp
void check_bfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large search space explored!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

We will integrate the checker into the program. The check should be placed before entering the BFS loop to determine if the search space is likely to be large.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_bfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large search space explored!" << endl;
        abort();
    }
}

int bfs(int n) {
    queue<int> q;
    q.push(0);

    // Check for potential large search space before starting BFS
    check_bfs_invariant(n > 50); // Threshold based on problem constraints and observations

    while (!q.empty()) {
        int u = q.front();
        int v3, v7;
        v3 = u + 3;
        v7 = u + 7;
        if (v3 == n || v7 == n) return 1;
        if (v3 < n) q.push(v3);
        if (v7 < n) q.push(v7);
        q.pop();
    }
    return 0;
}

int main() {
    int t;
    cin >> t;
    for (int i = 1; i <= t; i++) {
        int x;
        cin >> x;
        int r;
        r = bfs(x);
        if (r == 1)
            cout << "YES" << endl;
        else
            cout << "NO" << endl;
    }
    return 0;
}
```

### Explanation of Integration:

- **Position of Check**: The `check_bfs_invariant` function is called before starting the BFS loop. This ensures that the check does not add overhead inside the loop.
  
- **Threshold Explanation**: The threshold chosen (`n > 50`) is based on an assumption from the problem constraints (`n` can be at most 100) and an observed performance pattern where larger `n` values lead to more extensive search spaces.

- **Purpose**: This check helps identify when the search space the BFS explores might be too large, leading to performance bottlenecks.

This integrated code should help identify and prevent performance issues when running with a fuzzer or during testing, without significantly impacting the performance of the actual BFS computation.

