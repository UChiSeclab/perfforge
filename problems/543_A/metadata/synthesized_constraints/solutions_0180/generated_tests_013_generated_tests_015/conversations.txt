system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Programmers working on a large project have just received a task to write exactly m lines of code. There are n programmers working on a project, the i-th of them makes exactly ai bugs in every line of code that he writes. 

Let's call a sequence of non-negative integers v1, v2, ..., vn a plan, if v1 + v2 + ... + vn = m. The programmers follow the plan like that: in the beginning the first programmer writes the first v1 lines of the given task, then the second programmer writes v2 more lines of the given task, and so on. In the end, the last programmer writes the remaining lines of the code. Let's call a plan good, if all the written lines of the task contain at most b bugs in total.

Your task is to determine how many distinct good plans are there. As the number of plans can be large, print the remainder of this number modulo given positive integer mod.

Input

The first line contains four integers n, m, b, mod (1 ≤ n, m ≤ 500, 0 ≤ b ≤ 500; 1 ≤ mod ≤ 109 + 7) — the number of programmers, the number of lines of code in the task, the maximum total number of bugs respectively and the modulo you should use when printing the answer.

The next line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 500) — the number of bugs per line for each programmer.

Output

Print a single integer — the answer to the problem modulo mod.

Examples

Input

3 3 3 100
1 1 1


Output

10


Input

3 6 5 1000000007
1 2 3


Output

0


Input

3 5 6 11
1 2 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, -1, 1};
const int N = 501;
long long pd[2][N][N];
int n, m, b;
long long mod;
long long v[N];
long long func(int pos, int qtd, int lin) {
  if (qtd > b) return 0;
  if (lin > m) return 0;
  if (pos == n) return (qtd <= b && lin == m);
  if (pd[pos & 1][qtd][lin] != -1) return pd[pos & 1][qtd][lin];
  long long ret = func(pos + 1, qtd, lin) + func(pos, qtd + v[pos], lin + 1);
  while (ret >= mod) ret -= mod;
  return pd[pos & 1][qtd][lin] = ret;
}
int main() {
  ios::sync_with_stdio(0);
  cin >> n >> m >> b >> mod;
  for (int i = 0; i < n; ++i) cin >> v[i];
  memset(pd, -1, sizeof pd);
  for (int i = n; i >= 0; --i) {
    for (int j = 0; j <= b; ++j)
      for (int k = 0; k <= m; ++k) pd[i & 1][j][k] = -1;
    for (int j = b; j >= 0; --j)
      for (int k = m; k >= 0; --k) func(i, j, k);
  }
  cout << func(0, 0, 0) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

21 35 40 1009
8 4 2 2 4 4 3 2 4 2 0 3 3 4 3 4 3 0 4 2 4


(G.2) Fast Input

21 35 20 1009
8 4 2 2 4 4 3 2 4 2 0 3 3 4 3 4 3 0 4 2 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {1, -1, 0, 0}; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {0, 0, -1, 1}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 501; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long pd[2][N][N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, b; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long mod; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long v[N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long func(int pos, int qtd, int lin) { /* line 10 slow_hit_count: 94465, fast_hit_count: 48385 */
  if (qtd > b) return 0; /* line 11 slow_hit_count: 94465, fast_hit_count: 48385 */
  if (lin > m) return 0; /* line 12 slow_hit_count: 92125, fast_hit_count: 46045 */
  if (pos == n) return (qtd <= b && lin == m); /* line 13 slow_hit_count: 91329, fast_hit_count: 45669 */
  if (pd[pos & 1][qtd][lin] != -1) return pd[pos & 1][qtd][lin]; /* line 14 slow_hit_count: 88377, fast_hit_count: 44157 */
  long long ret = func(pos + 1, qtd, lin) + func(pos, qtd + v[pos], lin + 1); /* line 15 slow_hit_count: 30996, fast_hit_count: 15876 */
  while (ret >= mod) ret -= mod; /* line 16 slow_hit_count: 38888, fast_hit_count: 18480 */
  return pd[pos & 1][qtd][lin] = ret; /* line 17 slow_hit_count: 30996, fast_hit_count: 15876 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> b >> mod; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) cin >> v[i]; /* line 22 slow_hit_count: 22, fast_hit_count: 22 */
  memset(pd, -1, sizeof pd); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n; i >= 0; --i) { /* line 24 slow_hit_count: 23, fast_hit_count: 23 */
    for (int j = 0; j <= b; ++j) /* line 25 slow_hit_count: 924, fast_hit_count: 484 */
      for (int k = 0; k <= m; ++k) pd[i & 1][j][k] = -1; /* line 26 slow_hit_count: 33374, fast_hit_count: 17094 */
    for (int j = b; j >= 0; --j) /* line 27 slow_hit_count: 924, fast_hit_count: 484 */
      for (int k = m; k >= 0; --k) func(i, j, k); /* line 28 slow_hit_count: 33374, fast_hit_count: 17094 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << func(0, 0, 0) << endl; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants, let's break down the provided C program, focusing on the function `func` and its role in the code:

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Line-level Hit Counts Analysis:**
   - The function `func` (line 10) is repeatedly called, with significantly higher hit counts in the slow input compared to the fast input. 
   - The line responsible for recursive calls, `long long ret = func(pos + 1, qtd, lin) + func(pos, qtd + v[pos], lin + 1);` (line 15), also manifests more hit counts in the slow input. This suggests that the recursion depth or breadth is greater for the slow input.
   - The checks `if (qtd > b)` and `if (lin > m)` (lines 11 and 12) are frequently evaluated, indicating that these conditions are critical in limiting unnecessary computations.
   - The memoization check `if (pd[pos & 1][qtd][lin] != -1)` (line 14) is hit often, meaning cached results are checked frequently due to potential repetitive states being reached.

2. **Code Interaction with Data Structures:**
   - The memoization table `pd` is used to store already computed results, but the slow input results in more cache misses or more attempts to compute values that could be cached, leading to excessive recomputation.
   - The nested loops in `main` (lines 24-28) also contribute to high hit counts, especially when combined with the recursive calls in `func`.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Invariant related to recursion depth and memoization:**
   - **Natural Language Description:** "When the problem constraints such as the maximum number of bugs `b` and lines `m` are close to their upper limits, the recursive computation may explore a larger state space, leading to excessive function calls and potential cache misses."
   - **Condition:** This invariant triggers when the problem parameters `b` and `m` are high, relative to their allowed maximum (e.g., near 500), causing deeper recursion and broader exploration.

2. **Invariant related to programmer bug rates (`v` array):**
   - **Natural Language Description:** "If the programmers' bug rates are such that they frequently approach or exceed the maximum allowable bugs `b`, more recursive paths may be ignored or require computation, increasing the computational overhead."
   - **Condition:** This condition is likely when the sum of `v[i]` for several programmers approaches `b`, thus frequently causing `qtd + v[pos] > b` in the recursion.

3. **Invariant related to effective memoization use:**
   - **Natural Language Description:** "If the memoization table is not effectively utilized due to varying states `(qtd, lin)` being recomputed, performance can degrade significantly as redundant calculations are performed."
   - **Condition:** Inefficiency arises when the structure of the problem doesn't allow for effective reuse of precomputed results, particularly when `n` (number of programmers) and `m` (lines to be written) are high, leading to many state variations.

By focusing on the interaction of recursion with parameters `b`, `m`, and the array `v`, these invariants help identify conditions that lead to increased computation and could guide optimizations or future problem constraints adjustments. These conditions abstractly cover potential slow scenarios without relying on specific input data, aligning well with the given constraints (n, m, b <= 500).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Programmers working on a large project have just received a task to write exactly m lines of code. There are n programmers working on a project, the i-th of them makes exactly ai bugs in every line of code that he writes. 

Let's call a sequence of non-negative integers v1, v2, ..., vn a plan, if v1 + v2 + ... + vn = m. The programmers follow the plan like that: in the beginning the first programmer writes the first v1 lines of the given task, then the second programmer writes v2 more lines of the given task, and so on. In the end, the last programmer writes the remaining lines of the code. Let's call a plan good, if all the written lines of the task contain at most b bugs in total.

Your task is to determine how many distinct good plans are there. As the number of plans can be large, print the remainder of this number modulo given positive integer mod.

Input

The first line contains four integers n, m, b, mod (1 ≤ n, m ≤ 500, 0 ≤ b ≤ 500; 1 ≤ mod ≤ 109 + 7) — the number of programmers, the number of lines of code in the task, the maximum total number of bugs respectively and the modulo you should use when printing the answer.

The next line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 500) — the number of bugs per line for each programmer.

Output

Print a single integer — the answer to the problem modulo mod.

Examples

Input

3 3 3 100
1 1 1


Output

10


Input

3 6 5 1000000007
1 2 3


Output

0


Input

3 5 6 11
1 2 1


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checker Code in C++

Based on the natural language descriptions derived in Phase 2, here are the C++ checkers for the performance-characterizing invariants:

1. **Invariant for Recursion Depth and Memoization:**
   - **Checker Code:**
   ```cpp
   void check_recursion_memoization_invariant(int b, int m) {
       if (b > 450 || m > 450) { // Assuming a higher threshold close to the maximum constraint
           cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or broad memoization state space!" << endl;
           abort();
       }
   }
   ```

2. **Invariant for Programmer Bug Rates:**
   - **Checker Code:**
   ```cpp
   void check_bug_rate_invariant(int* v, int n, int b) {
       int bugSum = 0;
       for (int i = 0; i < n; ++i) {
           bugSum += v[i];
           if (bugSum >= b) {
               cerr << "Warning: Performance bottleneck condition triggered - programmers' bug rates approaching maximum allowable!" << endl;
               abort();
           }
       }
   }
   ```

3. **Invariant for Effective Memoization Use:**
   - **Checker Code:**
   ```cpp
   void check_memoization_efficiency(int n, int m) {
       if (n > 15 && m > 450) { // Assume a threshold where memoization might degrade
           cerr << "Warning: Performance bottleneck condition triggered - potential inefficient memoization usage!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original C++ Program

The checkers will be inserted at strategic points in the code to avoid adding overhead in tight loops, ensuring they help detect performance bottlenecks effectively:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 501;
long long pd[2][N][N];
int n, m, b;
long long mod;
long long v[N];

// Checker for recursion depth and memoization use
void check_recursion_memoization_invariant(int b, int m) {
    if (b > 450 || m > 450) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or broad memoization state space!" << endl;
        abort();
    }
}

// Checker for programmer bug rates
void check_bug_rate_invariant(int* v, int n, int b) {
    int bugSum = 0;
    for (int i = 0; i < n; ++i) {
        bugSum += v[i];
        if (bugSum >= b) {
            cerr << "Warning: Performance bottleneck condition triggered - programmers' bug rates approaching maximum allowable!" << endl;
            abort();
        }
    }
}

// Checker for memoization efficiency
void check_memoization_efficiency(int n, int m) {
    if (n > 15 && m > 450) {
        cerr << "Warning: Performance bottleneck condition triggered - potential inefficient memoization usage!" << endl;
        abort();
    }
}

long long func(int pos, int qtd, int lin) {
    if (qtd > b) return 0;
    if (lin > m) return 0;
    if (pos == n) return (qtd <= b && lin == m);
    if (pd[pos & 1][qtd][lin] != -1) return pd[pos & 1][qtd][lin];
    long long ret = func(pos + 1, qtd, lin) + func(pos, qtd + v[pos], lin + 1);
    while (ret >= mod) ret -= mod;
    return pd[pos & 1][qtd][lin] = ret;
}

int main() {
    ios::sync_with_stdio(0);
    cin >> n >> m >> b >> mod;
    for (int i = 0; i < n; ++i) cin >> v[i];
    
    // Insert checkers after reading inputs
    check_recursion_memoization_invariant(b, m);
    check_bug_rate_invariant(v, n, b);
    check_memoization_efficiency(n, m);
    
    memset(pd, -1, sizeof pd);
    for (int i = n; i >= 0; --i) {
        for (int j = 0; j <= b; ++j)
            for (int k = 0; k <= m; ++k) pd[i & 1][j][k] = -1;
        for (int j = b; j >= 0; --j)
            for (int k = m; k >= 0; --k) func(i, j, k);
    }
    cout << func(0, 0, 0) << endl;
    return 0;
}
```

**Explanation of Integrated Checkers:**
- The `check_recursion_memoization_invariant` is placed after the input is read to catch setups where the state space might be excessively large.
- The `check_bug_rate_invariant` checks if the programmers' bug rates approach the maximum allowable bugs, which is crucial for the computation path.
- The `check_memoization_efficiency` determines if the state space for memoization might degrade performance, given specific thresholds for `n` and `m`. 

These checks help expose potential bottlenecks without compromising performance by avoiding placement in tight loops.

