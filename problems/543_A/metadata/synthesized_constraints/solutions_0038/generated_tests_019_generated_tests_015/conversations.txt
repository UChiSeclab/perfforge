system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Programmers working on a large project have just received a task to write exactly m lines of code. There are n programmers working on a project, the i-th of them makes exactly ai bugs in every line of code that he writes. 

Let's call a sequence of non-negative integers v1, v2, ..., vn a plan, if v1 + v2 + ... + vn = m. The programmers follow the plan like that: in the beginning the first programmer writes the first v1 lines of the given task, then the second programmer writes v2 more lines of the given task, and so on. In the end, the last programmer writes the remaining lines of the code. Let's call a plan good, if all the written lines of the task contain at most b bugs in total.

Your task is to determine how many distinct good plans are there. As the number of plans can be large, print the remainder of this number modulo given positive integer mod.

Input

The first line contains four integers n, m, b, mod (1 ≤ n, m ≤ 500, 0 ≤ b ≤ 500; 1 ≤ mod ≤ 109 + 7) — the number of programmers, the number of lines of code in the task, the maximum total number of bugs respectively and the modulo you should use when printing the answer.

The next line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 500) — the number of bugs per line for each programmer.

Output

Print a single integer — the answer to the problem modulo mod.

Examples

Input

3 3 3 100
1 1 1


Output

10


Input

3 6 5 1000000007
1 2 3


Output

0


Input

3 5 6 11
1 2 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
long long m, b, MOD, a[555], dp[555][555], temp[555][555];
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cin >> n >> m >> b >> MOD;
  for (int(i) = (1); (i) <= (n); i++) cin >> a[i];
  dp[0][0] = 1LL;
  for (int(i) = (1); (i) <= (m); i++) {
    memset(temp, 0, sizeof(temp));
    for (int(j) = (0); (j) <= (b); j++) {
      long long res = 0LL;
      int l = i == 1 ? 0 : 1;
      for (int(k) = (l); (k) <= (n); k++) {
        res += dp[k][j];
        if (j + a[k] <= b) temp[k][j + a[k]] += res % MOD;
      }
    }
    memcpy(dp, temp, sizeof(temp));
  }
  long long ans = 0LL;
  for (int(i) = (1); (i) <= (n); i++)
    for (int(j) = (0); (j) <= (b); j++) ans = (ans + dp[i][j]) % MOD;
  cout << ans % MOD << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

21 55 20 1009
8 4 2 2 4 4 3 2 4 2 0 3 3 4 3 4 3 0 4 2 4


(G.2) Fast Input

21 35 20 1009
8 4 2 2 4 4 3 2 4 2 0 3 3 4 3 4 3 0 4 2 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long m, b, MOD, a[555], dp[555][555], temp[555][555]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> b >> MOD; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int(i) = (1); (i) <= (n); i++) cin >> a[i]; /* line 9 slow_hit_count: 22, fast_hit_count: 22 */
  dp[0][0] = 1LL; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int(i) = (1); (i) <= (m); i++) { /* line 11 slow_hit_count: 56, fast_hit_count: 36 */
    memset(temp, 0, sizeof(temp)); /* line 12 slow_hit_count: 55, fast_hit_count: 35 */
    for (int(j) = (0); (j) <= (b); j++) { /* line 13 slow_hit_count: 1210, fast_hit_count: 770 */
      long long res = 0LL; /* line 14 slow_hit_count: 1155, fast_hit_count: 735 */
      int l = i == 1 ? 0 : 1; /* line 15 slow_hit_count: 1155, fast_hit_count: 735 */
      for (int(k) = (l); (k) <= (n); k++) { /* line 16 slow_hit_count: 25431, fast_hit_count: 16191 */
        res += dp[k][j]; /* line 17 slow_hit_count: 24276, fast_hit_count: 15456 */
        if (j + a[k] <= b) temp[k][j + a[k]] += res % MOD; /* line 18 slow_hit_count: 24276, fast_hit_count: 15456 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    memcpy(dp, temp, sizeof(temp)); /* line 21 slow_hit_count: 55, fast_hit_count: 35 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0LL; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int(i) = (1); (i) <= (n); i++) /* line 24 slow_hit_count: 22, fast_hit_count: 22 */
    for (int(j) = (0); (j) <= (b); j++) ans = (ans + dp[i][j]) % MOD; /* line 25 slow_hit_count: 462, fast_hit_count: 462 */
  cout << ans % MOD << '\n'; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

#### Comparison of Line-Level Hit Counts

1. **Line 11 (`for (int(i) = (1); (i) <= (m); i++)`)**:
   - Slow hit count: 56
   - Fast hit count: 36
   - This loop iterates significantly more times on the slow input, suggesting that the number of iterations is a key factor in the slowdown.

2. **Line 13 (`for (int(j) = (0); (j) <= (b); j++)`)**:
   - Slow hit count: 1210
   - Fast hit count: 770
   - This loop also iterates more frequently in the slow input, likely due to the interaction with the `b` variable.

3. **Line 16 (`for (int(k) = (l); (k) <= (n); k++)`)**:
   - Slow hit count: 25,431
   - Fast hit count: 16,191
   - This innermost loop demonstrates a dramatic increase in iteration count, which is a major contributor to the slowdown.

#### Interaction Inferences

- The nested loops (lines 11, 13, and 16) are the primary contributors to the slowdown. Together, they suggest that as `m` and `b` increase, the nested structure results in excessive computation.
- The variables `m` (number of lines to be written) and `b` (maximum total bugs) are directly contributing to the iteration counts, with their upper bounds dictating the complexity of the solution.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Line Count with Tight Bug Constraint**
   - Natural language: "If the total number of lines `m` is large while the maximum allowed bugs `b` is low, the program may enter a slow path due to the intensive computation required to find good plans."
   - Reasoning: A high value of `m` combined with a restrictive `b` leads to increased iterations in loops, as the program must explore numerous combinations to satisfy the constraints.

2. **Invariant 2: High Bug Per Line Variability**
   - Natural language: "When the bug counts per line vary widely among programmers and the sum of these variations approaches or exceeds `b`, performance may degrade."
   - Reasoning: High variability can cause more branching within the nested loops as the program attempts to explore feasible plans, increasing computational demand.

3. **Invariant 3: Large Programmer Count with Moderate Bug Limits**
   - Natural language: "If the number of programmers `n` is high with a moderate bug limit `b`, the search space for 'good' plans increases, causing potential slowdowns."
   - Reasoning: With more programmers, the space of possible plans grows exponentially, especially if `b` does not scale proportionally, leading to more iterations in the nested loops.

These invariants capture the complexity of the problem and help identify scenarios where performance might degrade, offering a framework for optimizing or refactoring the code to handle such cases efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Programmers working on a large project have just received a task to write exactly m lines of code. There are n programmers working on a project, the i-th of them makes exactly ai bugs in every line of code that he writes. 

Let's call a sequence of non-negative integers v1, v2, ..., vn a plan, if v1 + v2 + ... + vn = m. The programmers follow the plan like that: in the beginning the first programmer writes the first v1 lines of the given task, then the second programmer writes v2 more lines of the given task, and so on. In the end, the last programmer writes the remaining lines of the code. Let's call a plan good, if all the written lines of the task contain at most b bugs in total.

Your task is to determine how many distinct good plans are there. As the number of plans can be large, print the remainder of this number modulo given positive integer mod.

Input

The first line contains four integers n, m, b, mod (1 ≤ n, m ≤ 500, 0 ≤ b ≤ 500; 1 ≤ mod ≤ 109 + 7) — the number of programmers, the number of lines of code in the task, the maximum total number of bugs respectively and the modulo you should use when printing the answer.

The next line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 500) — the number of bugs per line for each programmer.

Output

Print a single integer — the answer to the problem modulo mod.

Examples

Input

3 3 3 100
1 1 1


Output

10


Input

3 6 5 1000000007
1 2 3


Output

0


Input

3 5 6 11
1 2 1


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants into Checker Code in C++

Let's translate the performance-characterizing invariants into C++ checker code.

#### Invariant 1: High Line Count with Tight Bug Constraint

```cpp
void check_line_bug_constraint(int m, int b) {
    if (m > 450 && b < 50) {  // Example threshold values, not exact from the input
        cerr << "Warning: Performance bottleneck condition triggered - high line count with tight bug constraint!" << endl;
        abort();
    }
}
```

#### Invariant 2: High Bug Per Line Variability

```cpp
void check_bug_variability(const vector<int>& a, int b) {
    int max_variability = *max_element(a.begin(), a.end()) - *min_element(a.begin(), a.end());
    if (max_variability > 400 && accumulate(a.begin(), a.end(), 0) / a.size() > b / 2) {  // Example conditions
        cerr << "Warning: Performance bottleneck condition triggered - high bug per line variability!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Programmer Count with Moderate Bug Limits

```cpp
void check_programmer_count_constraint(int n, int b) {
    if (n > 50 && b < 250) {  // Example threshold values
        cerr << "Warning: Performance bottleneck condition triggered - large programmer count with moderate bug limits!" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks

Now, let's integrate these checks into the original code to identify potential performance bottlenecks efficiently.

```cpp
#include <bits/stdc++.h>
using namespace std;
int n;
long long m, b, MOD, a[555], dp[555][555], temp[555][555];

// Checkers for performance bottlenecks
void check_line_bug_constraint(int m, int b) {
    if (m > 450 && b < 50) {  // Arbitrary thresholds based on invariant
        cerr << "Warning: Performance bottleneck condition triggered - high line count with tight bug constraint!" << endl;
        abort();
    }
}

void check_bug_variability(const vector<int>& a, int b) {
    int max_variability = *max_element(a.begin(), a.end()) - *min_element(a.begin(), a.end());
    if (max_variability > 400 && accumulate(a.begin(), a.end(), 0) / a.size() > b / 2) {  // Example conditions
        cerr << "Warning: Performance bottleneck condition triggered - high bug per line variability!" << endl;
        abort();
    }
}

void check_programmer_count_constraint(int n, int b) {
    if (n > 50 && b < 250) {  // Example threshold values
        cerr << "Warning: Performance bottleneck condition triggered - large programmer count with moderate bug limits!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m >> b >> MOD;
    vector<int> a(n);
    for (int(i) = (1); (i) <= (n); i++) cin >> a[i];
    
    // Insert performance-checking functions
    check_line_bug_constraint(m, b); // Check for high line count with tight bug constraint
    check_bug_variability(a, b); // Check for high bug per line variability
    check_programmer_count_constraint(n, b); // Check for large programmer count with moderate bug limits

    dp[0][0] = 1LL;
    for (int(i) = (1); (i) <= (m); i++) {
        memset(temp, 0, sizeof(temp));
        for (int(j) = (0); (j) <= (b); j++) {
            long long res = 0LL;
            int l = i == 1 ? 0 : 1;
            for (int(k) = (l); (k) <= (n); k++) {
                res += dp[k][j];
                if (j + a[k] <= b) temp[k][j + a[k]] += res % MOD;
            }
        }
        memcpy(dp, temp, sizeof(temp));
    }
    long long ans = 0LL;
    for (int(i) = (1); (i) <= (n); i++)
        for (int(j) = (0); (j) <= (b); j++) ans = (ans + dp[i][j]) % MOD;
    cout << ans % MOD << '\n';
    return 0;
}
```

### Explanation:

- The checkers are placed after reading inputs and before the core computation loops to avoid unnecessary overhead within tight loops.
- Each condition is defined based on the natural language invariants, and uses example threshold values that reflect general cases where performance might degrade.
- These checks provide early warning signals and terminate execution if the program detects a slowdown condition.

