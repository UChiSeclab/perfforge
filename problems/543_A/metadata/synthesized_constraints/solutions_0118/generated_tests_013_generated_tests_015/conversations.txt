system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Programmers working on a large project have just received a task to write exactly m lines of code. There are n programmers working on a project, the i-th of them makes exactly ai bugs in every line of code that he writes. 

Let's call a sequence of non-negative integers v1, v2, ..., vn a plan, if v1 + v2 + ... + vn = m. The programmers follow the plan like that: in the beginning the first programmer writes the first v1 lines of the given task, then the second programmer writes v2 more lines of the given task, and so on. In the end, the last programmer writes the remaining lines of the code. Let's call a plan good, if all the written lines of the task contain at most b bugs in total.

Your task is to determine how many distinct good plans are there. As the number of plans can be large, print the remainder of this number modulo given positive integer mod.

Input

The first line contains four integers n, m, b, mod (1 ≤ n, m ≤ 500, 0 ≤ b ≤ 500; 1 ≤ mod ≤ 109 + 7) — the number of programmers, the number of lines of code in the task, the maximum total number of bugs respectively and the modulo you should use when printing the answer.

The next line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 500) — the number of bugs per line for each programmer.

Output

Print a single integer — the answer to the problem modulo mod.

Examples

Input

3 3 3 100
1 1 1


Output

10


Input

3 6 5 1000000007
1 2 3


Output

0


Input

3 5 6 11
1 2 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int Nmax = 505;
int Mod;
int dp[Nmax][Nmax];
int S[Nmax][Nmax];
int A[Nmax];
int main() {
  ios::sync_with_stdio(false);
  int N, M, B;
  cin >> N >> M >> B >> Mod;
  for (int i = 1; i <= N; ++i) cin >> A[i];
  dp[0][0] = 1 % Mod;
  for (int i = 1; i <= N; ++i) {
    for (int j = 0; j <= M; ++j) {
      for (int k = 0; k <= B; ++k) {
        S[j][k] = dp[j][k];
        if (j > 0 && k >= A[i]) S[j][k] = (S[j][k] + S[j - 1][k - A[i]]) % Mod;
      }
    }
    for (int j = 1; j <= M; ++j) {
      for (int k = A[i]; k <= B; ++k) {
        dp[j][k] = (dp[j][k] + S[j - 1][k - A[i]]) % Mod;
      }
    }
  }
  int ans = 0;
  for (int i = 0; i <= B; ++i) ans = (ans + dp[M][i]) % Mod;
  cout << ans << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

21 35 40 1009
8 4 2 2 4 4 3 2 4 2 0 3 3 4 3 4 3 0 4 2 4


(G.2) Fast Input

21 35 20 1009
8 4 2 2 4 4 3 2 4 2 0 3 3 4 3 4 3 0 4 2 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int Nmax = 505; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int Mod; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int dp[Nmax][Nmax]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int S[Nmax][Nmax]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int A[Nmax]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int N, M, B; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N >> M >> B >> Mod; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; ++i) cin >> A[i]; /* line 12 slow_hit_count: 22, fast_hit_count: 22 */
  dp[0][0] = 1 % Mod; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; ++i) { /* line 14 slow_hit_count: 22, fast_hit_count: 22 */
    for (int j = 0; j <= M; ++j) { /* line 15 slow_hit_count: 777, fast_hit_count: 777 */
      for (int k = 0; k <= B; ++k) { /* line 16 slow_hit_count: 31752, fast_hit_count: 16632 */
        S[j][k] = dp[j][k]; /* line 17 slow_hit_count: 30996, fast_hit_count: 15876 */
        if (j > 0 && k >= A[i]) S[j][k] = (S[j][k] + S[j - 1][k - A[i]]) % Mod; /* line 18 slow_hit_count: 30996, fast_hit_count: 15876 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 1; j <= M; ++j) { /* line 21 slow_hit_count: 756, fast_hit_count: 756 */
      for (int k = A[i]; k <= B; ++k) { /* line 22 slow_hit_count: 28595, fast_hit_count: 13895 */
        dp[j][k] = (dp[j][k] + S[j - 1][k - A[i]]) % Mod; /* line 23 slow_hit_count: 27860, fast_hit_count: 13160 */
      } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= B; ++i) ans = (ans + dp[M][i]) % Mod; /* line 28 slow_hit_count: 42, fast_hit_count: 22 */
  cout << ans << '\n'; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottleneck in the given C program, we start by examining the hit count differences between the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Hit Count Analysis

1. **Line 16**: The loop `for (int k = 0; k <= B; ++k)` has a hit count of 31,752 for the slow input versus 16,632 for the fast input.
2. **Line 17 & 18**: The statements inside the innermost loop (`S[j][k] = dp[j][k]` and the conditional update) are also executed significantly more times for the slow input.
3. **Line 22**: The loop `for (int k = A[i]; k <= B; ++k)` has a hit count of 28,595 for the slow input versus 13,895 for the fast input.
4. **Line 23**: The update inside this loop is executed 27,860 times for the slow input and 13,160 for the fast, indicating a concentration of activity here.
5. **Line 28**: The final aggregation loop `for (int i = 0; i <= B; ++i)` has a hit count of 42 for the slow input versus 22 for the fast input.

#### Observations

- The loops over `k` (especially in lines 16 and 22) are sensitive to the value of `B`, which dictates the upper bound of the loops. For the slow input, likely more iterations are done, increasing computational effort.
- The logic involving `S[j][k]` and `dp[j][k]` is integral to the performance; these arrays are updated frequently and are tied to the constraints `B` and `A[i]`.
- The discrepancy between slow and fast input is primarily due to larger operations over `k`, suggesting more potential plans to evaluate within `B`'s constraint.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and hit counts, we can derive the following performance-characterizing invariants:

1. **Invariant**: "When the upper bound for bug tolerance (`B`) is high, and many programmers have low bug rates, the program evaluates a substantial number of potential plans, thus slowing down."
    - **Trigger**: High `B` relative to the sum of `A[i]` values allows for many combinations of `v1, v2, ..., vn` to be valid, increasing computational load.

2. **Invariant**: "If the value of `B` is close to `M` times the average of the smallest `A[i]` values, the paths through the nested loops become extensive."
    - **Trigger**: This situation leads to an extensive evaluation of possible sequences, as more `k` values are feasible under these conditions.

3. **Invariant**: "As the number of programmers (`n`) increases, the computation time may increase if the per-programmer bug rate is diverse, causing substantial branching and combination calculations."
    - **Trigger**: Diverse `A[i]` leads to more partitions of `M` into feasible plans, intensifying the nested loop's work.

4. **Invariant**: "The program may slow down if the difference between `M` and `B` is small, meaning most lines could be written with minimal bug overhead, necessitating many checks of `dp` and `S` data structures."
    - **Trigger**: Small `M-B` gap implies higher feasibility of many lines having low cumulative bugs, thus more iterations over potential plans.

These invariants capture the conditions under which the algorithm's complexity balloons due to the input structure and problem constraints. They provide insight into potential future inputs that could result in similar slow performance patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Programmers working on a large project have just received a task to write exactly m lines of code. There are n programmers working on a project, the i-th of them makes exactly ai bugs in every line of code that he writes. 

Let's call a sequence of non-negative integers v1, v2, ..., vn a plan, if v1 + v2 + ... + vn = m. The programmers follow the plan like that: in the beginning the first programmer writes the first v1 lines of the given task, then the second programmer writes v2 more lines of the given task, and so on. In the end, the last programmer writes the remaining lines of the code. Let's call a plan good, if all the written lines of the task contain at most b bugs in total.

Your task is to determine how many distinct good plans are there. As the number of plans can be large, print the remainder of this number modulo given positive integer mod.

Input

The first line contains four integers n, m, b, mod (1 ≤ n, m ≤ 500, 0 ≤ b ≤ 500; 1 ≤ mod ≤ 109 + 7) — the number of programmers, the number of lines of code in the task, the maximum total number of bugs respectively and the modulo you should use when printing the answer.

The next line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 500) — the number of bugs per line for each programmer.

Output

Print a single integer — the answer to the problem modulo mod.

Examples

Input

3 3 3 100
1 1 1


Output

10


Input

3 6 5 1000000007
1 2 3


Output

0


Input

3 5 6 11
1 2 1


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ checkers for each of the performance-characterizing invariants derived earlier:

#### Invariant Checker Code

1. **Invariant 1**: "When the upper bound for bug tolerance (`B`) is high, and many programmers have low bug rates, the program evaluates a substantial number of potential plans, thus slowing down."

```cpp
void check_bug_tolerance_invariant(int B, const std::vector<int>& A) {
    int lowBugRateCount = count_if(A.begin(), A.end(), [](int bugRate) { return bugRate < 5; }); // Example threshold
    if (B > 400 && lowBugRateCount > A.size() / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to high bug tolerance and many low bug rate programmers!" << endl;
        abort();
    }
}
```

2. **Invariant 2**: "If the value of `B` is close to `M` times the average of the smallest `A[i]` values, the paths through the nested loops become extensive."

```cpp
void check_k_path_invariant(int B, int M, const std::vector<int>& A) {
    int minBugRate = *min_element(A.begin(), A.end());
    if (B > M * minBugRate) {
        cerr << "Warning: Performance bottleneck condition triggered due to extensive paths in nested loops!" << endl;
        abort();
    }
}
```

3. **Invariant 3**: "As the number of programmers (`n`) increases, the computation time may increase if the per-programmer bug rate is diverse."

```cpp
void check_programmer_diversity_invariant(int n, const std::vector<int>& A) {
    int uniqueBugRates = unordered_set<int>(A.begin(), A.end()).size();
    if (n > 300 && uniqueBugRates > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to diverse bug rates!" << endl;
        abort();
    }
}
```

4. **Invariant 4**: "The program may slow down if the difference between `M` and `B` is small."

```cpp
void check_bug_margin_invariant(int M, int B) {
    if (M - B < 50) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered due to small margin between M and B!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checks into the provided C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int Nmax = 505;
int Mod;
int dp[Nmax][Nmax];
int S[Nmax][Nmax];
int A[Nmax];

// Checker functions for performance invariants
void check_bug_tolerance_invariant(int B, const std::vector<int>& A) {
    int lowBugRateCount = count_if(A.begin(), A.end(), [](int bugRate) { return bugRate < 5; }); // Example threshold
    if (B > 400 && lowBugRateCount > A.size() / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to high bug tolerance and many low bug rate programmers!" << endl;
        abort();
    }
}

void check_k_path_invariant(int B, int M, const std::vector<int>& A) {
    int minBugRate = *min_element(A.begin(), A.end());
    if (B > M * minBugRate) {
        cerr << "Warning: Performance bottleneck condition triggered due to extensive paths in nested loops!" << endl;
        abort();
    }
}

void check_programmer_diversity_invariant(int n, const std::vector<int>& A) {
    int uniqueBugRates = unordered_set<int>(A.begin(), A.end()).size();
    if (n > 300 && uniqueBugRates > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to diverse bug rates!" << endl;
        abort();
    }
}

void check_bug_margin_invariant(int M, int B) {
    if (M - B < 50) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered due to small margin between M and B!" << endl;
        abort();
    }
}

int main() {
  ios::sync_with_stdio(false);
  int N, M, B;
  cin >> N >> M >> B >> Mod;
  
  vector<int> A(N + 1);
  for (int i = 1; i <= N; ++i) cin >> A[i];

  // Insert checks after reading inputs
  check_bug_tolerance_invariant(B, A);
  check_k_path_invariant(B, M, A);
  check_programmer_diversity_invariant(N, A);
  check_bug_margin_invariant(M, B);

  dp[0][0] = 1 % Mod;
  for (int i = 1; i <= N; ++i) {
    for (int j = 0; j <= M; ++j) {
      for (int k = 0; k <= B; ++k) {
        S[j][k] = dp[j][k];
        if (j > 0 && k >= A[i]) S[j][k] = (S[j][k] + S[j - 1][k - A[i]]) % Mod;
      }
    }
    for (int j = 1; j <= M; ++j) {
      for (int k = A[i]; k <= B; ++k) {
        dp[j][k] = (dp[j][k] + S[j - 1][k - A[i]]) % Mod;
      }
    }
  }
  
  int ans = 0;
  for (int i = 0; i <= B; ++i) ans = (ans + dp[M][i]) % Mod;
  cout << ans << '\n';
}
```

### Explanation

- **Where Checks are Integrated**: The checks are placed after reading the input and before entering the main computation loops. This ensures the checks do not add overhead within the loops themselves.
- **Thresholds**: The thresholds for conditions, such as bug rates and differences between `M` and `B`, are chosen based on observations from the program structure and assumed reasonable limits given constraints.
- **Purpose**: These checks help alert if a performance bottleneck condition is likely before the main computations proceed, which is useful for debugging and improving the code's efficiency for future inputs.

