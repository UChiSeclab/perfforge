system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a non-empty sequence of positive integers a1, a2... ak coprime if the greatest common divisor of all elements of this sequence is equal to 1.

Given an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 109 + 7.

Note that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].

Input

The first line contains one integer number n (1 ≤ n ≤ 100000).

The second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000).

Output

Print the number of coprime subsequences of a modulo 109 + 7.

Examples

Input

3
1 2 3


Output

5


Input

4
1 1 1 1


Output

15


Input

7
1 3 5 15 3 105 35


Output

100

Note

In the first example coprime subsequences are: 

  1. 1
  2. 1, 2
  3. 1, 3
  4. 1, 2, 3
  5. 2, 3



In the second example all subsequences are coprime.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MOD = 1e9 + 7;
const int N = 1e5 + 5;
int n, x, a[N], p[N], f[N], ma = 0;
int main() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> x;
    ma = max(ma, x);
    a[x]++;
  }
  p[0] = 1;
  for (int i = 1; i <= n; i++) p[i] = 2 * p[i - 1] % MOD;
  for (int i = 1; i <= ma; i++) {
    int s = 0;
    for (int j = i; j <= ma; j += i) s += a[j];
    f[i] = (p[s] - 1 + MOD) % MOD;
  }
  for (int i = ma; i > 0; i--) {
    for (int j = 2; i * j <= ma; j++) f[i] = (f[i] - f[i * j] + MOD) % MOD;
  }
  cout << f[1];
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
100000


(G.2) Fast Input

1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, x, a[N], p[N], f[N], ma = 0; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> x; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    ma = max(ma, x); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    a[x]++; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  p[0] = 1; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) p[i] = 2 * p[i - 1] % MOD; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1; i <= ma; i++) { /* line 15 slow_hit_count: 100001, fast_hit_count: 2 */
    int s = 0; /* line 16 slow_hit_count: 100000, fast_hit_count: 1 */
    for (int j = i; j <= ma; j += i) s += a[j]; /* line 17 slow_hit_count: 1266750, fast_hit_count: 2 */
    f[i] = (p[s] - 1 + MOD) % MOD; /* line 18 slow_hit_count: 100000, fast_hit_count: 1 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = ma; i > 0; i--) { /* line 20 slow_hit_count: 100001, fast_hit_count: 2 */
    for (int j = 2; i * j <= ma; j++) f[i] = (f[i] - f[i * j] + MOD) % MOD; /* line 21 slow_hit_count: 1166750, fast_hit_count: 1 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cout << f[1]; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the given code and the hit counts from the slow and fast inputs, we can derive the following performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Over `ma`**:
   - The loop starting at line 15 (`for (int i = 1; i <= ma; i++)`) executes significantly more iterations for the slow input. The `ma` value directly affects the number of iterations, and for the slow input, `ma` is set to `100000`.
   - Inside this loop, the nested loop at line 17 (`for (int j = i; j <= ma; j += i)`) also runs a large number of times, especially when `i` is small, leading to quadratic behavior relative to `ma`.

2. **Second Loop Over `ma`**:
   - The loop starting at line 20 (`for (int i = ma; i > 0; i--)`) also executes many times for the slow input. This loop has a nested loop at line 21 (`for (int j = 2; i * j <= ma; j++),` which can also result in a significant number of operations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Maximum Element (`ma`) Leading to Quadratic Operations**:
   - **Natural Language Invariant**: "If the maximum element in the input array (`ma`) is large, the program engages in operations that are quadratic with respect to `ma`, leading to possible slowdowns. This is particularly evident when `ma` is close to the upper limit, as nested loops perform many operations over potential divisors."
   - **Threshold Consideration**: Given `n ≤ 100000`, when `ma` approaches this value, the number of operations can become prohibitive.

2. **Frequent Divisor Counting**:
   - **Natural Language Invariant**: "When the input contains numbers with small divisors repeatedly, the loops count these divisors in a manner that increases computational complexity. This is exacerbated when `ma` is large, as each potential divisor is checked against a dense range of values."
   - **Threshold Consideration**: This scenario becomes problematic especially when the values in the array are highly composite and `ma` is large.

3. **High Density of Operations on Large Values**:
   - **Natural Language Invariant**: "The computational work increases significantly when the input numbers and thus `ma` require the program to process numerous potential subsequences, leading to high-density operations."

These invariants focus on the structural and algorithmic factors leading to slowdowns, particularly in relation to the `ma` parameter and the nested loops over potential divisors and subsequences. They indicate that the performance bottleneck is largely influenced by the density and range of operations associated with high values of `ma`, rather than merely the size `n` of the input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a non-empty sequence of positive integers a1, a2... ak coprime if the greatest common divisor of all elements of this sequence is equal to 1.

Given an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 109 + 7.

Note that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].

Input

The first line contains one integer number n (1 ≤ n ≤ 100000).

The second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000).

Output

Print the number of coprime subsequences of a modulo 109 + 7.

Examples

Input

3
1 2 3


Output

5


Input

4
1 1 1 1


Output

15


Input

7
1 3 5 15 3 105 35


Output

100

Note

In the first example coprime subsequences are: 

  1. 1
  2. 1, 2
  3. 1, 3
  4. 1, 2, 3
  5. 2, 3



In the second example all subsequences are coprime.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance Characterizing Invariants in C++

Below are the checker functions implemented in C++ to detect the performance bottlenecks described in the natural language invariants:

1. **High Maximum Element (`ma`) Leading to Quadratic Operations**:
   ```cpp
   void check_high_ma_invariant(int ma) {
       if (ma > 50000) {  // Threshold based on potential dense operations
           cerr << "Warning: High 'ma' value detected - potential quadratic operations!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Divisor Counting**:
   ```cpp
   void check_frequent_divisor_counting(int ma, const int* a) {
       int frequentDivisors = 0;
       for (int i = 1; i <= ma; i++) {
           if (a[i] > 0) frequentDivisors++;
       }
       if (frequentDivisors > 50000) {  // Threshold based on divisor density
           cerr << "Warning: Frequent divisor counting detected - high density of operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Here's the instrumented C++ code with the inserted runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MOD = 1e9 + 7;
const int N = 1e5 + 5;
int n, x, a[N], p[N], f[N], ma = 0;

// Checker for high 'ma' value
void check_high_ma_invariant(int ma) {
    if (ma > 50000) {  // Threshold based on potential dense operations
        cerr << "Warning: High 'ma' value detected - potential quadratic operations!" << endl;
        abort();
    }
}

// Checker for frequent divisor counting
void check_frequent_divisor_counting(int ma, const int* a) {
    int frequentDivisors = 0;
    for (int i = 1; i <= ma; i++) {
        if (a[i] > 0) frequentDivisors++;
    }
    if (frequentDivisors > 50000) {  // Threshold based on divisor density
        cerr << "Warning: Frequent divisor counting detected - high density of operations!" << endl;
        abort();
    }
}

int main() {
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> x;
        ma = max(ma, x);
        a[x]++;
    }
    
    // Check for high 'ma' value
    check_high_ma_invariant(ma);
    
    // Check for frequent divisor counting
    check_frequent_divisor_counting(ma, a);

    p[0] = 1;
    for (int i = 1; i <= n; i++) p[i] = 2 * p[i - 1] % MOD;
    for (int i = 1; i <= ma; i++) {
        int s = 0;
        for (int j = i; j <= ma; j += i) s += a[j];
        f[i] = (p[s] - 1 + MOD) % MOD;
    }
    for (int i = ma; i > 0; i--) {
        for (int j = 2; i * j <= ma; j++) f[i] = (f[i] - f[i * j] + MOD) % MOD;
    }
    cout << f[1];
    return 0;
}
```

### Explanation
- **Check for High `ma` Value**: The `check_high_ma_invariant` function examines if `ma` exceeds a threshold suggesting potential quadratic operations.
- **Check for Frequent Divisor Counting**: The `check_frequent_divisor_counting` function evaluates the number of non-zero entries in `a[]`, which denotes frequent divisor activity, suggesting high-density operations.
- These checks are placed after reading inputs and determining the maximum element, `ma`, ensuring they do not add overhead in the critical computation loops. This instrumentation helps detect scenarios leading to performance issues while maintaining efficiency for normal execution paths.

