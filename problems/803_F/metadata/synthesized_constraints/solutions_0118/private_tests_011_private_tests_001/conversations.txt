system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a non-empty sequence of positive integers a1, a2... ak coprime if the greatest common divisor of all elements of this sequence is equal to 1.

Given an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 109 + 7.

Note that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].

Input

The first line contains one integer number n (1 ≤ n ≤ 100000).

The second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000).

Output

Print the number of coprime subsequences of a modulo 109 + 7.

Examples

Input

3
1 2 3


Output

5


Input

4
1 1 1 1


Output

15


Input

7
1 3 5 15 3 105 35


Output

100

Note

In the first example coprime subsequences are: 

  1. 1
  2. 1, 2
  3. 1, 3
  4. 1, 2, 3
  5. 2, 3



In the second example all subsequences are coprime.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;
long long power(long long a, long long b) {
  long long res = 1;
  while (b > 0) {
    if (b % 2 == 1) {
      res = (res * a) % mod;
    }
    a = (a * a) % mod;
    b >>= 1;
  }
  return res;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  int arr[n];
  int max1 = -1;
  for (int i = 0; i < n; i++) {
    cin >> arr[i];
    max1 = max(max1, arr[i]);
  }
  long long freq[max1 + 1], subsequence[max1 + 1];
  for (int i = 0; i <= max1; i++) {
    freq[i] = 0;
    subsequence[i] = 0;
  }
  for (int i = 0; i < n; i++) {
    freq[arr[i]]++;
  }
  for (int i = max1; i > 0; i--) {
    for (int j = i; j <= max1; j += i) {
      subsequence[i] += freq[j];
    }
  }
  long long ans = 0;
  for (int i = max1; i > 0; i--) {
    long long sub = 0;
    for (int j = 2 * i; j <= max1; j += i) {
      sub += subsequence[j];
      sub %= mod;
    }
    subsequence[i] = (power(2, subsequence[i]) - 1 + mod) % mod;
    subsequence[i] -= sub;
    subsequence[i] += mod;
    subsequence[i] %= mod;
  }
  cout << subsequence[1] << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
100000


(G.2) Fast Input

1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long a, long long b) { /* line 4 slow_hit_count: 100000, fast_hit_count: 1 */
  long long res = 1; /* line 5 slow_hit_count: 100000, fast_hit_count: 1 */
  while (b > 0) { /* line 6 slow_hit_count: 100036, fast_hit_count: 2 */
    if (b % 2 == 1) { /* line 7 slow_hit_count: 36, fast_hit_count: 1 */
      res = (res * a) % mod; /* line 8 slow_hit_count: 36, fast_hit_count: 1 */
    } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    a = (a * a) % mod; /* line 10 slow_hit_count: 36, fast_hit_count: 1 */
    b >>= 1; /* line 11 slow_hit_count: 36, fast_hit_count: 1 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 13 slow_hit_count: 100000, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int arr[n]; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int max1 = -1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> arr[i]; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    max1 = max(max1, arr[i]); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  long long freq[max1 + 1], subsequence[max1 + 1]; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= max1; i++) { /* line 27 slow_hit_count: 100002, fast_hit_count: 3 */
    freq[i] = 0; /* line 28 slow_hit_count: 100001, fast_hit_count: 2 */
    subsequence[i] = 0; /* line 29 slow_hit_count: 100001, fast_hit_count: 2 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
    freq[arr[i]]++; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = max1; i > 0; i--) { /* line 34 slow_hit_count: 100001, fast_hit_count: 2 */
    for (int j = i; j <= max1; j += i) { /* line 35 slow_hit_count: 1266750, fast_hit_count: 2 */
      subsequence[i] += freq[j]; /* line 36 slow_hit_count: 1166750, fast_hit_count: 1 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = max1; i > 0; i--) { /* line 40 slow_hit_count: 100001, fast_hit_count: 2 */
    long long sub = 0; /* line 41 slow_hit_count: 100000, fast_hit_count: 1 */
    for (int j = 2 * i; j <= max1; j += i) { /* line 42 slow_hit_count: 1166750, fast_hit_count: 1 */
      sub += subsequence[j]; /* line 43 slow_hit_count: 1066750, fast_hit_count: 0 */
      sub %= mod; /* line 44 slow_hit_count: 1066750, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    subsequence[i] = (power(2, subsequence[i]) - 1 + mod) % mod; /* line 46 slow_hit_count: 100000, fast_hit_count: 1 */
    subsequence[i] -= sub; /* line 47 slow_hit_count: 100000, fast_hit_count: 1 */
    subsequence[i] += mod; /* line 48 slow_hit_count: 100000, fast_hit_count: 1 */
    subsequence[i] %= mod; /* line 49 slow_hit_count: 100000, fast_hit_count: 1 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  cout << subsequence[1] << "\n"; /* line 51 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 52 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 4-13 (`power` function):** This function is called significantly more often in the slow input, with 100,000 hits compared to just 1 hit in the fast input. The repeated calls indicate that this function is a bottleneck, particularly when `b` is large, as the loop iterates more times.

2. **Line 34-38 and 40-50 (nested loops):** These loops iterate with a complexity that appears to be quadratic in terms of `max1`. This results in a high number of loop iterations, especially when `max1` is large, such as in the slow input case.

3. **Line 42-45 (nested loop within line 40 loop):** The inner loop contributes significantly to the hit count due to its nested nature inside a loop that iterates over values up to `max1`. It results in a very high hit count (1,166,750 hits), indicating a potential inefficiency when `max1` is large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant #1: Power Function Bottleneck**
   - **Description:** "If the program calls the `power` function with a large exponent value, it will significantly slow down due to the increased number of iterations in the loop. This is especially true when the sequence of numbers includes high values close to 100,000, leading to high values of `subsequence[i]`."
   - **Reasoning:** The `power` function's loop complexity depends on the binary length of the exponent, causing slowdowns with large `subsequence[i]`.

2. **Invariant #2: Quadratic Complexity in Nested Loops**
   - **Description:** "If the maximum value in the input array (`max1`) is large, the nested loops in the program will iterate excessively, leading to quadratic time complexity. This becomes a performance issue as `max1` approaches the upper limit of the constraints, particularly around 100,000."
   - **Reasoning:** The loops that iterate over divisors and multiples lead to a high number of iterations when `max1` is large, causing performance degradation.

3. **Invariant #3: High Frequency of Divisor Checking**
   - **Description:** "When the input array includes elements with many divisors or high frequency, the computation of subsequences involves numerous checks, slowing down the performance as divisors are recalculated multiple times."
   - **Reasoning:** The inner workings of lines 42-45 show that frequent divisor checks can slow down the algorithm, especially when dealing with large numbers that have many divisors.

These invariants capture the conditions under which the program becomes slow and are designed to apply broadly to inputs that meet the constraints of the problem (e.g., `n <= 100,000`, and array elements `ai <= 100,000`). By focusing on these conditions, future inputs that follow these patterns can be anticipated to trigger similar slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a non-empty sequence of positive integers a1, a2... ak coprime if the greatest common divisor of all elements of this sequence is equal to 1.

Given an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 109 + 7.

Note that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].

Input

The first line contains one integer number n (1 ≤ n ≤ 100000).

The second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000).

Output

Print the number of coprime subsequences of a modulo 109 + 7.

Examples

Input

3
1 2 3


Output

5


Input

4
1 1 1 1


Output

15


Input

7
1 3 5 15 3 105 35


Output

100

Note

In the first example coprime subsequences are: 

  1. 1
  2. 1, 2
  3. 1, 3
  4. 1, 2, 3
  5. 2, 3



In the second example all subsequences are coprime.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Here are the checker functions for each performance-characterizing invariant derived previously:

1. **Invariant #1: Power Function Bottleneck**
   ```cpp
   void check_power_function_invariant(long long exponent) {
       if (exponent > 50000) { // A threshold for large exponents
           cerr << "Warning: Power function bottleneck condition triggered!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Quadratic Complexity in Nested Loops**
   ```cpp
   void check_nested_loops_invariant(int max1) {
       if (max1 > 90000) { // A threshold indicating large maximum values leading to excessive iterations
           cerr << "Warning: Nested loops bottleneck condition triggered!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: High Frequency of Divisor Checking**
   ```cpp
   void check_divisor_frequency_invariant(long long freq[], int size) {
       for (int i = 1; i <= size; i++) {
           if (freq[i] > 1000) { // A threshold indicating high frequency of a value
               cerr << "Warning: High divisor frequency condition triggered!" << endl;
               abort();
           }
       }
   }
   ```

### Phase 4: Integrating the Checker Code with the Original Program

Below is the original C++ code with the integrated checker functions at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;

// Checker functions
void check_power_function_invariant(long long exponent) {
    if (exponent > 50000) { // A threshold for large exponents
        cerr << "Warning: Power function bottleneck condition triggered!" << endl;
        abort();
    }
}

void check_nested_loops_invariant(int max1) {
    if (max1 > 90000) { // A threshold indicating large maximum values leading to excessive iterations
        cerr << "Warning: Nested loops bottleneck condition triggered!" << endl;
        abort();
    }
}

void check_divisor_frequency_invariant(long long freq[], int size) {
    for (int i = 1; i <= size; i++) {
        if (freq[i] > 1000) { // A threshold indicating high frequency of a value
            cerr << "Warning: High divisor frequency condition triggered!" << endl;
            abort();
        }
    }
}

// Power function
long long power(long long a, long long b) {
    check_power_function_invariant(b); // Check for large exponents
    long long res = 1;
    while (b > 0) {
        if (b % 2 == 1) {
            res = (res * a) % mod;
        }
        a = (a * a) % mod;
        b >>= 1;
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    int arr[n];
    int max1 = -1;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
        max1 = max(max1, arr[i]);
    }

    // Check for potential nested loop inefficiency
    check_nested_loops_invariant(max1);

    long long freq[max1 + 1], subsequence[max1 + 1];
    for (int i = 0; i <= max1; i++) {
        freq[i] = 0;
        subsequence[i] = 0;
    }
    for (int i = 0; i < n; i++) {
        freq[arr[i]]++;
    }

    // Check for high frequency of divisors
    check_divisor_frequency_invariant(freq, max1);

    for (int i = max1; i > 0; i--) {
        for (int j = i; j <= max1; j += i) {
            subsequence[i] += freq[j];
        }
    }

    long long ans = 0;
    for (int i = max1; i > 0; i--) {
        long long sub = 0;
        for (int j = 2 * i; j <= max1; j += i) {
            sub += subsequence[j];
            sub %= mod;
        }
        subsequence[i] = (power(2, subsequence[i]) - 1 + mod) % mod;
        subsequence[i] -= sub;
        subsequence[i] += mod;
        subsequence[i] %= mod;
    }
    cout << subsequence[1] << "\n";
}
```

### Comments on Integration

- **Power Function Check:** The check is placed inside the `power` function to monitor the exponent size. This ensures that calls with large exponents are detected early.
- **Nested Loop Check:** The check is placed after calculating `max1` to ensure the program does not proceed with potentially excessive nested iterations.
- **Divisor Frequency Check:** The check occurs after populating the frequency array to catch high frequency values that could lead to inefficient divisor calculations.

