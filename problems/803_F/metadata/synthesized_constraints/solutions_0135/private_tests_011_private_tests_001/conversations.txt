system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a non-empty sequence of positive integers a1, a2... ak coprime if the greatest common divisor of all elements of this sequence is equal to 1.

Given an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 109 + 7.

Note that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].

Input

The first line contains one integer number n (1 ≤ n ≤ 100000).

The second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000).

Output

Print the number of coprime subsequences of a modulo 109 + 7.

Examples

Input

3
1 2 3


Output

5


Input

4
1 1 1 1


Output

15


Input

7
1 3 5 15 3 105 35


Output

100

Note

In the first example coprime subsequences are: 

  1. 1
  2. 1, 2
  3. 1, 3
  4. 1, 2, 3
  5. 2, 3



In the second example all subsequences are coprime.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, a[100001], h[100001], g[100001], x, m, f[100001];
int main() {
  cin >> n;
  a[0] = 1;
  for (int i = 1; i <= n; i++)
    a[i] = a[i - 1] * 2 % 1000000007, cin >> x, f[x]++, m = max(m, x);
  for (int i = m; i >= 1; i--) {
    for (int j = i; j <= m; j += i)
      g[i] += f[j], h[i] = (h[i] - h[j] + 1000000007) % 1000000007;
    h[i] = (h[i] + a[g[i]] - 1) % 1000000007;
  }
  cout << h[1];
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
100000


(G.2) Fast Input

1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, a[100001], h[100001], g[100001], x, m, f[100001]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  a[0] = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    a[i] = a[i - 1] * 2 % 1000000007, cin >> x, f[x]++, m = max(m, x); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = m; i >= 1; i--) { /* line 9 slow_hit_count: 100001, fast_hit_count: 2 */
    for (int j = i; j <= m; j += i) /* line 10 slow_hit_count: 1266750, fast_hit_count: 2 */
      g[i] += f[j], h[i] = (h[i] - h[j] + 1000000007) % 1000000007; /* line 11 slow_hit_count: 1166750, fast_hit_count: 1 */
    h[i] = (h[i] + a[g[i]] - 1) % 1000000007; /* line 12 slow_hit_count: 100000, fast_hit_count: 1 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  cout << h[1]; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 15 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the performance bottleneck for the given C program, let's analyze the code, focusing on the line-level hit counts provided for both the slow and fast inputs. We'll then derive natural language invariants that explain the conditions under which the slowdown occurs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Code and Hit Count Analysis:**
   - **Line 9-12**: The nested loops in these lines are responsible for the majority of the hit counts:
     - Line 9 is executed `100001` times for the slow input versus `2` times for the fast input.
     - Line 10 is executed `1266750` times for the slow input versus `2` times for the fast input.
     - Line 11 is executed `1166750` times for the slow input versus `1` time for the fast input.
     - Line 12 is executed `100000` times for the slow input versus `1` time for the fast input.

2. **Interaction with Data Structures:**
   - The nested loops iterate over the range determined by `m`, the maximum value in the input array. The inner loop increments by `i`, iterating over all multiples of `i` up to `m`.
   - The arrays `f`, `g`, and `h` are used within these loops, affecting the time complexity based on the values of `m` and the distribution of array elements.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language invariants describe conditions under which the program enters a slow path:

1. **Invariant on Maximum Element (`m`):**
   - **Description**: "The program's performance degrades significantly when the maximum element `m` in the input array is large, particularly close to the upper bound of `100000`. This causes the nested loops to iterate many times, processing each divisor multiple times."
   - **Explanation**: As `m` increases, the outer loop starts from `m` and the inner loop iterates over all multiples of `i` up to `m`, leading to a quadratic-like time complexity in terms of the maximum value.

2. **Invariant on Sparse Distribution of Values:**
   - **Description**: "If the input array contains a sparse distribution of high values, the loops perform many unnecessary iterations for indices with zero frequency, exacerbating the problem."
   - **Explanation**: The `f` array stores frequencies of values, and high `m` values with sparse occurrences cause redundant operations where contributions to `g` and `h` are negligible.

3. **Invariant on Input Size and Element Magnitude:**
   - **Description**: "When the input size `n` is small but includes large elements in terms of magnitude (close to 100000), the program may still experience slow performance due to the extensive divisor checking process."
   - **Explanation**: Even with small `n`, large values of `a[i]` require iterating over large ranges, which is computationally expensive irrespective of the number of actual elements.

By recognizing these patterns, performance can be predicted and potentially mitigated by employing strategies such as reducing unnecessary iterations or applying optimizations specific to high-value elements. These insights should help guide improvements and testing for future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a non-empty sequence of positive integers a1, a2... ak coprime if the greatest common divisor of all elements of this sequence is equal to 1.

Given an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 109 + 7.

Note that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].

Input

The first line contains one integer number n (1 ≤ n ≤ 100000).

The second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000).

Output

Print the number of coprime subsequences of a modulo 109 + 7.

Examples

Input

3
1 2 3


Output

5


Input

4
1 1 1 1


Output

15


Input

7
1 3 5 15 3 105 35


Output

100

Note

In the first example coprime subsequences are: 

  1. 1
  2. 1, 2
  3. 1, 3
  4. 1, 2, 3
  5. 2, 3



In the second example all subsequences are coprime.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Below are the C++ snippets implementing the performance-characterizing invariants as runtime checks.

```cpp
// Checker for invariant: Maximum element 'm' is large, causing nested loops to iterate excessively
void check_max_element_invariant(int m) {
    if (m > 50000) {  // Assuming a threshold based on analysis
        cerr << "Warning: Performance bottleneck condition triggered - large maximum element!" << endl;
        abort();
    }
}

// Checker for invariant: Sparse distribution of high values causing redundant operations
void check_sparse_distribution_invariant(int m, int *f) {
    int highValueCount = 0;
    for (int i = m / 2; i <= m; i++) {
        if (f[i] > 0) highValueCount++;
    }
    if (highValueCount < m / 10) {  // Assume sparse is less than 10% of the range
        cerr << "Warning: Performance bottleneck condition triggered - sparse distribution of high values!" << endl;
        abort();
    }
}

// Checker for invariant: Small n with large element magnitudes
void check_size_magnitude_invariant(int n, int m) {
    if (n < 10 && m > 50000) {  // Assuming a combined threshold
        cerr << "Warning: Performance bottleneck condition triggered - small n with large elements!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code in Original Program

Now, let's integrate these checks into the original C++ program for effective performance monitoring.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, a[100001], h[100001], g[100001], x, m, f[100001];

// Checker for invariant: Maximum element 'm' is large, causing nested loops to iterate excessively
void check_max_element_invariant(int m) {
    if (m > 50000) {  // Assuming a threshold based on analysis
        cerr << "Warning: Performance bottleneck condition triggered - large maximum element!" << endl;
        abort();
    }
}

// Checker for invariant: Sparse distribution of high values causing redundant operations
void check_sparse_distribution_invariant(int m, int *f) {
    int highValueCount = 0;
    for (int i = m / 2; i <= m; i++) {
        if (f[i] > 0) highValueCount++;
    }
    if (highValueCount < m / 10) {  // Assume sparse is less than 10% of the range
        cerr << "Warning: Performance bottleneck condition triggered - sparse distribution of high values!" << endl;
        abort();
    }
}

// Checker for invariant: Small n with large element magnitudes
void check_size_magnitude_invariant(int n, int m) {
    if (n < 10 && m > 50000) {  // Assuming a combined threshold
        cerr << "Warning: Performance bottleneck condition triggered - small n with large elements!" << endl;
        abort();
    }
}

int main() {
    cin >> n;
    a[0] = 1;
    for (int i = 1; i <= n; i++)
        a[i] = a[i - 1] * 2 % 1000000007, cin >> x, f[x]++, m = max(m, x);

    // Insert check after input processing
    check_max_element_invariant(m);
    check_sparse_distribution_invariant(m, f);
    check_size_magnitude_invariant(n, m);

    for (int i = m; i >= 1; i--) {
        for (int j = i; j <= m; j += i)
            g[i] += f[j], h[i] = (h[i] - h[j] + 1000000007) % 1000000007;
        h[i] = (h[i] + a[g[i]] - 1) % 1000000007;
    }
    cout << h[1];
}
```

### Comments

- **`check_max_element_invariant`**: This check prevents execution when the maximum element `m` is too large, risking excessive iterations.
- **`check_sparse_distribution_invariant`**: This check identifies sparse distributions of high values, which can lead to redundant operations.
- **`check_size_magnitude_invariant`**: This check detects inefficient scenarios when `n` is small but elements are large, causing unnecessary complexity.

These checks are strategically placed after input processing to effectively monitor performance without introducing overhead in computationally intensive loops.

