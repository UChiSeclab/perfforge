system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call a non-empty sequence of positive integers a1, a2... ak coprime if the greatest common divisor of all elements of this sequence is equal to 1.

Given an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 109 + 7.

Note that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].

Input

The first line contains one integer number n (1 ≤ n ≤ 100000).

The second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000).

Output

Print the number of coprime subsequences of a modulo 109 + 7.

Examples

Input

3
1 2 3


Output

5


Input

4
1 1 1 1


Output

15


Input

7
1 3 5 15 3 105 35


Output

100

Note

In the first example coprime subsequences are: 

  1. 1
  2. 1, 2
  3. 1, 3
  4. 1, 2, 3
  5. 2, 3



In the second example all subsequences are coprime.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long int MAXN = 100000 + 7;
const long long int MOD = 1e09 + 7;
int v[MAXN], all[MAXN], f[MAXN], ans[MAXN];
int main() {
  int n;
  cin >> n;
  all[0] = 1;
  int mx = 0;
  for (int i = 1; i <= n; i++) {
    int a;
    cin >> a;
    v[a]++;
    all[i] = (all[i - 1] << 1) % MOD;
    mx = max(mx, a);
  }
  for (int i = mx; i >= 1; i--) {
    for (int j = i; j <= mx; j += i) {
      f[i] += v[j];
      ans[i] = (ans[i] + MOD - ans[j]) % MOD;
    }
    ans[i] = (MOD + ans[i] + all[f[i]] - 1) % MOD;
  }
  cout << ans[1] << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
100000


(G.2) Fast Input

1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long int MAXN = 100000 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long int MOD = 1e09 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int v[MAXN], all[MAXN], f[MAXN], ans[MAXN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  all[0] = 1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int mx = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
    int a; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    v[a]++; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    all[i] = (all[i - 1] << 1) % MOD; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    mx = max(mx, a); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = mx; i >= 1; i--) { /* line 18 slow_hit_count: 100001, fast_hit_count: 2 */
    for (int j = i; j <= mx; j += i) { /* line 19 slow_hit_count: 1266750, fast_hit_count: 2 */
      f[i] += v[j]; /* line 20 slow_hit_count: 1166750, fast_hit_count: 1 */
      ans[i] = (ans[i] + MOD - ans[j]) % MOD; /* line 21 slow_hit_count: 1166750, fast_hit_count: 1 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    ans[i] = (MOD + ans[i] + all[f[i]] - 1) % MOD; /* line 23 slow_hit_count: 100000, fast_hit_count: 1 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans[1] << endl; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, we need to analyze the line-level hit counts and identify where the slow input leads to significantly more execution than the fast input. Then, we derive natural language performance invariants to describe the conditions under which the program slows down.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - **Line 18:** `for (int i = mx; i >= 1; i--)` shows a hit count of 100001 for the slow input, versus 2 for the fast input.
   - **Line 19:** `for (int j = i; j <= mx; j += i)` shows a hit count of 1,266,750 for the slow input, versus 2 for the fast input.
   - **Lines 20 and 21:** These lines also have significantly higher hit counts for the slow input compared to the fast input, indicating repeated accesses or updates.

2. **Code Interaction with Data Structures:**
   - The innermost loop (`for (int j = i; j <= mx; j += i)`) is likely iterating over a large range of indices due to `mx` being large in the slow input.
   - This loop contributes to significant computation due to repeated additions and updates for each divisor `i`.

3. **Inference of Potential Bottlenecks:**
   - The large value of `mx` from the slow input implies that the outer loop runs many times, and the nested loop runs for a considerable range. This results in extensive computation for each divisor `i`, especially when `mx` is at its maximum constraint (100000).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance invariants:

1. **Large Maximum Element Effect:**
   - Natural Language Description: "If the maximum element `mx` in the array is close to the upper limit (100000), the number of iterations in nested loops increases significantly, potentially leading to a slowdown."
   - This condition is met when `mx` is large, causing both the outer and inner loops to execute extensively.

2. **High Divisor Frequency:**
   - Natural Language Description: "If many numbers in the input array have a common divisor close to the maximum element, the innermost loop will undergo frequent iterations, which can degrade performance."
   - This invariant captures cases where numbers are structured to have multiple common divisors with large inputs, increasing the workload in the loop.

3. **Extensive Use of Power of Twos:**
   - Natural Language Description: "When the frequency of numbers in the input is high, leading to large powers of two computations (`all[f[i]]`), the performance may degrade due to repeated modulo operations."
   - This is particularly evident when the frequency counts (`f[i]`) become large, resulting in extensive computations and modulo operations.

These invariants help identify input patterns that lead to performance issues, allowing for better optimization or detection strategies in future executions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call a non-empty sequence of positive integers a1, a2... ak coprime if the greatest common divisor of all elements of this sequence is equal to 1.

Given an array a consisting of n positive integers, find the number of its coprime subsequences. Since the answer may be very large, print it modulo 109 + 7.

Note that two subsequences are considered different if chosen indices are different. For example, in the array [1, 1] there are 3 different subsequences: [1], [1] and [1, 1].

Input

The first line contains one integer number n (1 ≤ n ≤ 100000).

The second line contains n integer numbers a1, a2... an (1 ≤ ai ≤ 100000).

Output

Print the number of coprime subsequences of a modulo 109 + 7.

Examples

Input

3
1 2 3


Output

5


Input

4
1 1 1 1


Output

15


Input

7
1 3 5 15 3 105 35


Output

100

Note

In the first example coprime subsequences are: 

  1. 1
  2. 1, 2
  3. 1, 3
  4. 1, 2, 3
  5. 2, 3



In the second example all subsequences are coprime.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Performance-Characterizing Invariants in C++

Here are the C++ code snippets implementing the identified performance-characterizing invariants:

1. **Large Maximum Element Effect:**

```cpp
void check_large_max_element_invariant(int mx) {
    if (mx >= 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum element is very large!" << endl;
        abort();
    }
}
```

2. **High Divisor Frequency:**

```cpp
void check_high_divisor_frequency_invariant(int divisorCount) {
    if (divisorCount >= 1000) {  // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - high divisor frequency!" << endl;
        abort();
    }
}
```

3. **Extensive Use of Power of Twos:**

```cpp
void check_extensive_power_of_twos_invariant(int frequency) {
    if (frequency >= 1000) {  // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - extensive power of twos usage!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long int MAXN = 100000 + 7;
const long long int MOD = 1e09 + 7;
int v[MAXN], all[MAXN], f[MAXN], ans[MAXN];

// Check performance bottlenecks
void check_large_max_element_invariant(int mx) {
    if (mx >= 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum element is very large!" << endl;
        abort();
    }
}

void check_high_divisor_frequency_invariant(int divisorCount) {
    if (divisorCount >= 1000) {  // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - high divisor frequency!" << endl;
        abort();
    }
}

void check_extensive_power_of_twos_invariant(int frequency) {
    if (frequency >= 1000) {  // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - extensive power of twos usage!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    all[0] = 1;
    int mx = 0;
    
    for (int i = 1; i <= n; i++) {
        int a;
        cin >> a;
        v[a]++;
        all[i] = (all[i - 1] << 1) % MOD;
        mx = max(mx, a);
    }

    // Check for large maximum element
    check_large_max_element_invariant(mx);

    for (int i = mx; i >= 1; i--) {
        for (int j = i; j <= mx; j += i) {
            f[i] += v[j];
            ans[i] = (ans[i] + MOD - ans[j]) % MOD;
        }

        // Check for high divisor frequency
        check_high_divisor_frequency_invariant(f[i]);

        ans[i] = (MOD + ans[i] + all[f[i]] - 1) % MOD;

        // Check for extensive power of twos usage
        check_extensive_power_of_twos_invariant(f[i]);
    }
    
    cout << ans[1] << endl;
    return 0;
}
```

**Notes on Integration:**
- The checks are placed after necessary calculations but before any tight loops, ensuring they do not introduce overhead into the critical computation sections.
- Appropriate thresholds are selected to identify potential performance issues without prematurely aborting the program.
- The error messages provide insight into the specific bottleneck conditions triggered.

