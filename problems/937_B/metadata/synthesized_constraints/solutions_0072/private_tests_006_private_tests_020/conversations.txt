system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.

The pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches <image>.

Keeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.

In other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.

Input

The only line contains two integers p and y (2 ≤ p ≤ y ≤ 109).

Output

Output the number of the highest suitable branch. If there are none, print -1 instead.

Examples

Input

3 6


Output

5


Input

3 4


Output

-1

Note

In the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.

It immediately follows that there are no valid branches in second sample case.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int32_t main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  long long p, y;
  cin >> p >> y;
  long long lim = min(p, (long long)sqrt(y));
  long long limi = min(1000LL, y - 1);
  for (long long i = 0; i < limi; i++) {
    bool ok = 1;
    if (y - i <= p) ok = 0;
    for (long long j = 2; j <= lim; j++) {
      if ((y - i) % j == 0) ok = 0;
    }
    if (ok) {
      cout << y - i;
      return 0;
    }
  }
  cout << -1 << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1000000000


(G.2) Fast Input

2 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  long long p, y; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> p >> y; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  long long lim = min(p, (long long)sqrt(y)); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  long long limi = min(1000LL, y - 1); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < limi; i++) { /* line 12 slow_hit_count: 1001, fast_hit_count: 2 */
    bool ok = 1; /* line 13 slow_hit_count: 1000, fast_hit_count: 2 */
    if (y - i <= p) ok = 0; /* line 14 slow_hit_count: 1000, fast_hit_count: 2 */
    for (long long j = 2; j <= lim; j++) { /* line 15 slow_hit_count: 31622000, fast_hit_count: 4 */
      if ((y - i) % j == 0) ok = 0; /* line 16 slow_hit_count: 31621000, fast_hit_count: 2 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (ok) { /* line 18 slow_hit_count: 1000, fast_hit_count: 2 */
      cout << y - i; /* line 19 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 20 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cout << -1 << endl; /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 1, fast_hit_count: 0 */


assistant: Let's analyze the provided C code and the hit count information for the fast and slow inputs to understand where the performance bottlenecks arise.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Execution Counts**:
   - The outer loop (`for (long long i = 0; i < limi; i++)`) runs 1001 times for the slow input but only 2 times for the fast input. This is a significant difference.
   - The inner loop (`for (long long j = 2; j <= lim; j++)`) runs a total of 31,622,000 times for the slow input, compared to only 4 times for the fast input. This is the primary source of the slowdown.

2. **Core Problem Identification**:
   - For each iteration of the outer loop, the inner loop checks divisibility up to `lim` (the smaller of `p` and the square root of `y`). This involves 31,622,000 iterations in the slow case due to `lim` being large when `p` and `y` are both 1,000,000,000.
   - The condition `(y - i) % j == 0` is being checked excessively for the slow input, which leads to higher computational cost.

### Phase 2: Derive Performance-Characterizing Invariants in Natural Language

Based on the observations above, here are some performance-characterizing invariants in natural language:

1. **Invariant 1: High Limiting Factor**:
   - "When `p` is large, approaching the upper limit of the constraints, and `y` is also large, the inner loop performs many iterations due to a high limit on the divisor check, leading to a slowdown."

2. **Invariant 2: Extensive Divisibility Testing**:
   - "If the value of `y` minus the current loop index `i` is close to `p`, the program checks many possible divisors, causing the code to execute a large number of unnecessary modulus operations."

3. **Invariant 3: Large Loop Boundary**:
   - "The outer loop iterates up to a large boundary (like 1000), especially when `y - 1` is large, exacerbating the performance issues by repeatedly invoking the inner loop."

These invariants capture the conditions under which the program's performance degrades. They focus on excessive loop iterations and divisibility checks due to the large values and constraints at the edge of the problem space. By addressing these conditions, the program's performance could potentially be improved for similar future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.

The pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches <image>.

Keeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.

In other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.

Input

The only line contains two integers p and y (2 ≤ p ≤ y ≤ 109).

Output

Output the number of the highest suitable branch. If there are none, print -1 instead.

Examples

Input

3 6


Output

5


Input

3 4


Output

-1

Note

In the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.

It immediately follows that there are no valid branches in second sample case.

Solution (C++ code):
{solution}


assistant: Let's proceed with phases 3 and 4 as described. 

### Phase 3: Implement Natural Language Invariants as C++ Code

Here's the C++ code to implement the performance-characterizing invariants:

1. **Invariant 1: High Limiting Factor**
   - "When `p` is large, approaching the upper limit of the constraints, and `y` is also large, the inner loop performs many iterations due to a high limit on the divisor check, leading to a slowdown."

```cpp
void check_high_limiting_factor(long long p, long long y) {
    if (p > 100000000 && y > 100000000) {
        cerr << "Warning: High limiting factor triggered - large divisor checks expected!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Extensive Divisibility Testing**
   - "If the value of `y` minus the current loop index `i` is close to `p`, the program checks many possible divisors, causing the code to execute a large number of unnecessary modulus operations."

```cpp
void check_divisibility_testing(long long y, long long i, long long p) {
    if (y - i <= p + 100) { // Allow a small buffer beyond p to trigger the invariant
        cerr << "Warning: Extensive divisibility testing triggered!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Large Loop Boundary**
   - "The outer loop iterates up to a large boundary (like 1000), especially when `y - 1` is large, exacerbating the performance issues by repeatedly invoking the inner loop."

```cpp
void check_large_loop_boundary(long long y) {
    if (y > 100000000) {
        cerr << "Warning: Large loop boundary triggered - excessive iterations expected!" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks

Here is the instrumented C++ code with the checks integrated at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_high_limiting_factor(long long p, long long y) {
    if (p > 100000000 && y > 100000000) {
        cerr << "Warning: High limiting factor triggered - large divisor checks expected!" << endl;
        abort();
    }
}

void check_divisibility_testing(long long y, long long i, long long p) {
    if (y - i <= p + 100) { // Allow a small buffer beyond p to trigger the invariant
        cerr << "Warning: Extensive divisibility testing triggered!" << endl;
        abort();
    }
}

void check_large_loop_boundary(long long y) {
    if (y > 100000000) {
        cerr << "Warning: Large loop boundary triggered - excessive iterations expected!" << endl;
        abort();
    }
}

int32_t main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    long long p, y;
    cin >> p >> y;

    // Check for high limiting factor
    check_high_limiting_factor(p, y);

    long long lim = min(p, (long long)sqrt(y));
    long long limi = min(1000LL, y - 1);

    // Check for large loop boundary before loop starts
    check_large_loop_boundary(y);

    for (long long i = 0; i < limi; i++) {
        bool ok = 1;
        
        // Check for extensive divisibility testing
        check_divisibility_testing(y, i, p);

        if (y - i <= p) ok = 0;
        for (long long j = 2; j <= lim; j++) {
            if ((y - i) % j == 0) ok = 0;
        }
        if (ok) {
            cout << y - i;
            return 0;
        }
    }
    cout << -1 << endl;
}
```

### Explanation

- **Check Placement**: 
  - `check_high_limiting_factor` is placed right after reading input, ensuring we detect large values of `p` and `y` early.
  - `check_large_loop_boundary` is placed before the loop starts to ensure it's not adding overhead inside the loop.
  - `check_divisibility_testing` is placed inside the loop, but before any expensive operations begin, to minimize overhead while still capturing the condition.

The instrumented code now contains runtime checks that will trigger warnings and abort the program execution if any of the identified performance bottlenecks are encountered. These checks help in detecting and diagnosing performance issues efficiently, especially during testing or fuzzing scenarios.

