=== Invariants Response ===
### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - **Line 10** (`for (long long i = y; i >= 2; i--)`): The loop is executed significantly more times for the slow input (302 times) compared to the fast input (1 time).
   - **Line 13** (`for (long long j = 2; j <= sqrt(i); j++)`): The inner loop is executed an extremely high number of times (9,518,824 times) for the slow input and not at all for the fast input.
   - **Line 14** (`if (i % j == 0)`): This condition is also checked a very high number of times (9,518,523 times) for the slow input.

2. **Interaction with Data Structures, Loops, Recursion**:
   - The outer loop iterates from `y` down to 2, but it stops early if `i <= p or y - i > 300`. This means the loop is potentially iterating many times to find a suitable branch.
   - The inner loop iterates from 2 to the square root of `i`, which can be expensive if `i` is large. For each `i`, it checks for divisibility, which is compounded by the number of iterations of the outer loop.

3. **Inferred Performance Bottlenecks**:
   - The primary bottleneck is the nested loop structure where every potential branch `i` requires checking factors up to its square root, which involves significant computation especially for large values of `i`.
   - The condition `(j >= 2 and j <= p) or (i / j >= 2 and i / j <= p)` is a complex check that contributes to the slowdown due to its frequent evaluation within the inner loop.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants**:

   - **Invariant 1**: "If `y` is significantly larger than `p` and close to the maximum constraint, the outer loop iterating from `y` downward will likely lead to a large number of iterations, especially if the stopping condition isn't met quickly."
   
   - **Invariant 2**: "If the branches being considered after `p` have large values, the inner loop will execute a large number of times due to checking factors up to the square root of those values, leading to a slowdown."
   
   - **Invariant 3**: "In cases where the difference `y - i` is not quickly exceeding a certain threshold, the code will continue to perform factor checks for high values of `i`, prolonging execution time."

2. **Thresholds and Conditions**:

   - The code executes slowly particularly when `y` is much larger than `p` and close to the upper limit (`y <= 10^9`), because this results in many potential branches (`i`) being checked.
   - The nested loop structure becomes problematic when there are many iterations needed to check for factors, especially if `y` and `p` are such that `y - i` does not quickly exceed 300.

By focusing on the size and relationship of variables `p` and `y`, and understanding their impact on loop iterations, these invariants guide us in highlighting performance bottlenecks without depending on specific input values, thereby providing a framework for future performance analysis.

=== Checker Response ===
### Phase 3: Implementing Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we will create runtime checks to detect when the program enters a slow execution path.

1. **Invariant 1**: Check if `y` is significantly larger than `p`.
   - This will help detect when the program might loop excessively.

2. **Invariant 2**: Check if the nested loop iteration count might be large.
   - This will help detect when the inner loop iterates too many times due to large numbers.

3. **Invariant 3**: Check if the difference `y - i` doesn't exceed a threshold quickly.
   - This will help detect prolonged execution in the outer loop.

```cpp
#include <iostream>
#include <cmath>

void check_large_y_vs_p(bool condition) {
    if (condition) {
        std::cerr << "Warning: large_y_vs_p invariant triggered - potential for excessive loop iterations" << std::endl;
        abort();
    }
}

void check_large_inner_loop_iterations(bool condition) {
    if (condition) {
        std::cerr << "Warning: large_inner_loop_iterations invariant triggered - potential for slow factor checking" << std::endl;
        abort();
    }
}

void check_slow_outer_loop_exit(bool condition) {
    if (condition) {
        std::cerr << "Warning: slow_outer_loop_exit invariant triggered - potential for prolonged outer loop execution" << std::endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

We will integrate these checkers into the provided C++ program at strategic points to avoid adding overhead to tight loops.

```cpp
#include <iostream>
#include <cmath>
using namespace std;

// Checker Functions
void check_large_y_vs_p(bool condition) {
    if (condition) {
        cerr << "Warning: large_y_vs_p invariant triggered - potential for excessive loop iterations" << endl;
        abort();
    }
}

void check_large_inner_loop_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: large_inner_loop_iterations invariant triggered - potential for slow factor checking" << endl;
        abort();
    }
}

void check_slow_outer_loop_exit(bool condition) {
    if (condition) {
        cerr << "Warning: slow_outer_loop_exit invariant triggered - potential for prolonged outer loop execution" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    long long p, y;
    cin >> p >> y;
    long long ans = -1;

    // Place check after input to trigger if y is significantly larger than p.
    check_large_y_vs_p(y > p + 1e4); // Arbitrary threshold for demonstration

    for (long long i = y; i >= 2; i--) {
        if (i <= p or y - i > 300) break;

        // Check if the outer loop is likely to run too long without exceeding the threshold.
        check_slow_outer_loop_exit(y - i <= 300 && i > p + 1e4);

        long long cnt = 0;

        // Check for potentially large inner loop iterations.
        check_large_inner_loop_iterations(sqrt(i) > 1e6); // Arbitrary threshold for demonstration

        for (long long j = 2; j <= sqrt(i); j++) {
            if (i % j == 0) {
                if ((j >= 2 and j <= p) or (i / j >= 2 and i / j <= p)) cnt++;
            }
        }

        if (cnt == 0) {
            ans = max(i, ans);
        }
    }
    cout << ans;
    return 0;
}
```

### Explanation

- **`check_large_y_vs_p`**: This check is placed immediately after reading the inputs to detect a potentially large loop due to a large difference between `y` and `p`.
  
- **`check_large_inner_loop_iterations`**: This check is placed before the inner loop to detect if the number of iterations might be large due to `i` being large.
  
- **`check_slow_outer_loop_exit`**: This check is placed within the outer loop to ensure it doesn't run too long without meeting the exit condition.

These checks help identify possible slow execution paths without impacting performance during normal operation.
