system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.

The pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches <image>.

Keeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.

In other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.

Input

The only line contains two integers p and y (2 ≤ p ≤ y ≤ 109).

Output

Output the number of the highest suitable branch. If there are none, print -1 instead.

Examples

Input

3 6


Output

5


Input

3 4


Output

-1

Note

In the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.

It immediately follows that there are no valid branches in second sample case.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  long long p, y;
  cin >> p >> y;
  long long ans = -1;
  for (long long i = y; i >= 2; i--) {
    if (i <= p or y - i > 300) break;
    long long cnt = 0;
    for (long long j = 2; j <= sqrt(i); j++) {
      if (i % j == 0) {
        if ((j >= 2 and j <= p) or (i / j >= 2 and i / j <= p)) cnt++;
      }
    }
    if (cnt == 0) {
      ans = max(i, ans);
    }
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 1000100000


(G.2) Fast Input

2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long p, y; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> p >> y; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = -1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = y; i >= 2; i--) { /* line 10 slow_hit_count: 302, fast_hit_count: 1 */
    if (i <= p or y - i > 300) break; /* line 11 slow_hit_count: 302, fast_hit_count: 1 */
    long long cnt = 0; /* line 12 slow_hit_count: 301, fast_hit_count: 0 */
    for (long long j = 2; j <= sqrt(i); j++) { /* line 13 slow_hit_count: 9518824, fast_hit_count: 0 */
      if (i % j == 0) { /* line 14 slow_hit_count: 9518523, fast_hit_count: 0 */
        if ((j >= 2 and j <= p) or (i / j >= 2 and i / j <= p)) cnt++; /* line 15 slow_hit_count: 3174, fast_hit_count: 0 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt == 0) { /* line 18 slow_hit_count: 301, fast_hit_count: 0 */
      ans = max(i, ans); /* line 19 slow_hit_count: 150, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - **Line 10** (`for (long long i = y; i >= 2; i--)`): The loop is executed significantly more times for the slow input (302 times) compared to the fast input (1 time).
   - **Line 13** (`for (long long j = 2; j <= sqrt(i); j++)`): The inner loop is executed an extremely high number of times (9,518,824 times) for the slow input and not at all for the fast input.
   - **Line 14** (`if (i % j == 0)`): This condition is also checked a very high number of times (9,518,523 times) for the slow input.

2. **Interaction with Data Structures, Loops, Recursion**:
   - The outer loop iterates from `y` down to 2, but it stops early if `i <= p or y - i > 300`. This means the loop is potentially iterating many times to find a suitable branch.
   - The inner loop iterates from 2 to the square root of `i`, which can be expensive if `i` is large. For each `i`, it checks for divisibility, which is compounded by the number of iterations of the outer loop.

3. **Inferred Performance Bottlenecks**:
   - The primary bottleneck is the nested loop structure where every potential branch `i` requires checking factors up to its square root, which involves significant computation especially for large values of `i`.
   - The condition `(j >= 2 and j <= p) or (i / j >= 2 and i / j <= p)` is a complex check that contributes to the slowdown due to its frequent evaluation within the inner loop.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants**:

   - **Invariant 1**: "If `y` is significantly larger than `p` and close to the maximum constraint, the outer loop iterating from `y` downward will likely lead to a large number of iterations, especially if the stopping condition isn't met quickly."
   
   - **Invariant 2**: "If the branches being considered after `p` have large values, the inner loop will execute a large number of times due to checking factors up to the square root of those values, leading to a slowdown."
   
   - **Invariant 3**: "In cases where the difference `y - i` is not quickly exceeding a certain threshold, the code will continue to perform factor checks for high values of `i`, prolonging execution time."

2. **Thresholds and Conditions**:

   - The code executes slowly particularly when `y` is much larger than `p` and close to the upper limit (`y <= 10^9`), because this results in many potential branches (`i`) being checked.
   - The nested loop structure becomes problematic when there are many iterations needed to check for factors, especially if `y` and `p` are such that `y - i` does not quickly exceed 300.

By focusing on the size and relationship of variables `p` and `y`, and understanding their impact on loop iterations, these invariants guide us in highlighting performance bottlenecks without depending on specific input values, thereby providing a framework for future performance analysis.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.

The pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches <image>.

Keeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.

In other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.

Input

The only line contains two integers p and y (2 ≤ p ≤ y ≤ 109).

Output

Output the number of the highest suitable branch. If there are none, print -1 instead.

Examples

Input

3 6


Output

5


Input

3 4


Output

-1

Note

In the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.

It immediately follows that there are no valid branches in second sample case.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we will create runtime checks to detect when the program enters a slow execution path.

1. **Invariant 1**: Check if `y` is significantly larger than `p`.
   - This will help detect when the program might loop excessively.

2. **Invariant 2**: Check if the nested loop iteration count might be large.
   - This will help detect when the inner loop iterates too many times due to large numbers.

3. **Invariant 3**: Check if the difference `y - i` doesn't exceed a threshold quickly.
   - This will help detect prolonged execution in the outer loop.

```cpp
#include <iostream>
#include <cmath>

void check_large_y_vs_p(bool condition) {
    if (condition) {
        std::cerr << "Warning: large_y_vs_p invariant triggered - potential for excessive loop iterations" << std::endl;
        abort();
    }
}

void check_large_inner_loop_iterations(bool condition) {
    if (condition) {
        std::cerr << "Warning: large_inner_loop_iterations invariant triggered - potential for slow factor checking" << std::endl;
        abort();
    }
}

void check_slow_outer_loop_exit(bool condition) {
    if (condition) {
        std::cerr << "Warning: slow_outer_loop_exit invariant triggered - potential for prolonged outer loop execution" << std::endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

We will integrate these checkers into the provided C++ program at strategic points to avoid adding overhead to tight loops.

```cpp
#include <iostream>
#include <cmath>
using namespace std;

// Checker Functions
void check_large_y_vs_p(bool condition) {
    if (condition) {
        cerr << "Warning: large_y_vs_p invariant triggered - potential for excessive loop iterations" << endl;
        abort();
    }
}

void check_large_inner_loop_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: large_inner_loop_iterations invariant triggered - potential for slow factor checking" << endl;
        abort();
    }
}

void check_slow_outer_loop_exit(bool condition) {
    if (condition) {
        cerr << "Warning: slow_outer_loop_exit invariant triggered - potential for prolonged outer loop execution" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    long long p, y;
    cin >> p >> y;
    long long ans = -1;

    // Place check after input to trigger if y is significantly larger than p.
    check_large_y_vs_p(y > p + 1e4); // Arbitrary threshold for demonstration

    for (long long i = y; i >= 2; i--) {
        if (i <= p or y - i > 300) break;

        // Check if the outer loop is likely to run too long without exceeding the threshold.
        check_slow_outer_loop_exit(y - i <= 300 && i > p + 1e4);

        long long cnt = 0;

        // Check for potentially large inner loop iterations.
        check_large_inner_loop_iterations(sqrt(i) > 1e6); // Arbitrary threshold for demonstration

        for (long long j = 2; j <= sqrt(i); j++) {
            if (i % j == 0) {
                if ((j >= 2 and j <= p) or (i / j >= 2 and i / j <= p)) cnt++;
            }
        }

        if (cnt == 0) {
            ans = max(i, ans);
        }
    }
    cout << ans;
    return 0;
}
```

### Explanation

- **`check_large_y_vs_p`**: This check is placed immediately after reading the inputs to detect a potentially large loop due to a large difference between `y` and `p`.
  
- **`check_large_inner_loop_iterations`**: This check is placed before the inner loop to detect if the number of iterations might be large due to `i` being large.
  
- **`check_slow_outer_loop_exit`**: This check is placed within the outer loop to ensure it doesn't run too long without meeting the exit condition.

These checks help identify possible slow execution paths without impacting performance during normal operation.

