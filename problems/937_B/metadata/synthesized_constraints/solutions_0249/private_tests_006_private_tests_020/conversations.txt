system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.

The pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches <image>.

Keeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.

In other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.

Input

The only line contains two integers p and y (2 ≤ p ≤ y ≤ 109).

Output

Output the number of the highest suitable branch. If there are none, print -1 instead.

Examples

Input

3 6


Output

5


Input

3 4


Output

-1

Note

In the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.

It immediately follows that there are no valid branches in second sample case.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int p, y;
  cin >> p >> y;
  map<int, int> a;
  for (int i = 2; i <= min((int)sqrt(y) + 1, p); i++) {
    if (y % i == 0 && i == 2) {
      a[i] = 1;
      a[y - (y % i)] = 1;
    } else if (i % 2 != 0) {
      a[i] = 1;
      a[y - (y % i)] = 1;
    }
  }
  vector<int> ans;
  for (auto it = a.begin(); it != a.end(); it++) {
    ans.push_back(it->first);
  }
  if (ans.empty() || ans[max((int)((ans).size()) - 1, 0)] != y) {
    cout << y;
    return 0;
  }
  for (int i = (int)((ans).size()) - 1; i > 0; i--) {
    if (ans[i] - 1 > p) {
      for (int j = ans[i] - 1; j > ans[i - 1]; j--) {
        int flag = 1;
        for (int k = 2; k <= min((int)sqrt(j), p); k++) {
          if (j % k == 0) {
            flag = 0;
            break;
          }
        }
        if (flag) {
          cout << j;
          return 0;
        }
      }
    }
  }
  cout << "-1";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1000000000


(G.2) Fast Input

2 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int p, y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> p >> y; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, int> a; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= min((int)sqrt(y) + 1, p); i++) { /* line 7 slow_hit_count: 31623, fast_hit_count: 2 */
    if (y % i == 0 && i == 2) { /* line 8 slow_hit_count: 31622, fast_hit_count: 1 */
      a[i] = 1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
      a[y - (y % i)] = 1; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    } else if (i % 2 != 0) { /* line 11 slow_hit_count: 31621, fast_hit_count: 0 */
      a[i] = 1; /* line 12 slow_hit_count: 15811, fast_hit_count: 0 */
      a[y - (y % i)] = 1; /* line 13 slow_hit_count: 15811, fast_hit_count: 0 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> ans; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto it = a.begin(); it != a.end(); it++) { /* line 17 slow_hit_count: 23130, fast_hit_count: 3 */
    ans.push_back(it->first); /* line 18 slow_hit_count: 23129, fast_hit_count: 2 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans.empty() || ans[max((int)((ans).size()) - 1, 0)] != y) { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    cout << y; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (int)((ans).size()) - 1; i > 0; i--) { /* line 24 slow_hit_count: 23129, fast_hit_count: 1 */
    if (ans[i] - 1 > p) { /* line 25 slow_hit_count: 23128, fast_hit_count: 1 */
      for (int j = ans[i] - 1; j > ans[i - 1]; j--) { /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
        int flag = 1; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
        for (int k = 2; k <= min((int)sqrt(j), p); k++) { /* line 28 slow_hit_count: 0, fast_hit_count: 2 */
          if (j % k == 0) { /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
            flag = 0; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
            break; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
        if (flag) { /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
          cout << j; /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
          return 0; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
        } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "-1"; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 42 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants, let's go through the provided code and hit count information.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - **Line 7 (`for (int i = 2; i <= min((int)sqrt(y) + 1, p); i++)`):** This loop is executed 31,623 times for the slow input and only twice for the fast input. This indicates a significant difference in execution frequency.
   - **Lines 11-13:** The condition (`i % 2 != 0`) and corresponding map insertions are executed 31,621 times for the slow input, showing a high frequency of odd numbers checked.
   - **Line 17 (`for (auto it = a.begin(); it != a.end(); it++)`):** This loop iterates 23,130 times for the slow input, indicating a large number of elements in the map `a`.
   - **Line 24 (`for (int i = (int)((ans).size()) - 1; i > 0; i--)`):** This loop is executed 23,129 times, tied to the number of elements in `ans`.

2. **Inefficient Code Segments:**
   - The first major inefficiency appears to be the construction of map `a` where many divisors are checked for each candidate branch y.
   - The loop at line 24 iterates over all potential unreachable branches, which consumes time proportional to the size of `ans`.

### Phase 2: Derive Performance-Characterizing Invariants

Here are natural language statements about the performance-characterizing invariants based on the observed behaviors:

1. **Invariant 1: High Divisor Count**
   - **Description:** "If the difference between y and p is large, leading to a high number of divisors to check up to √y, the execution time increases significantly due to the extensive iteration in the divisor checking loop."
   - **Threshold Context:** Given that y can be 1 billion, an upper bound for divisors checked can be around 31,623 (as observed).

2. **Invariant 2: Dense Occupation Mapping**
   - **Description:** "When a large number of branches within the range (p to y) are checked and stored in a map for occupancy, the program slows down due to increased operations in the vector population step."
   - **Threshold Context:** The map `a` could grow significantly, impacting the subsequent iterations over `ans`.

3. **Invariant 3: Extensive Search Space**
   - **Description:** "If the construction of reachable branches results in a large search space due to numerous potential unreachable branches, performance may degrade due to repeated evaluations."
   - **Threshold Context:** The iteration over a large number of candidate branches in `ans`.

By considering these invariants, the triggers for slow paths can be identified and used to optimize the code or detect potential slowdowns using a fuzzer. This approach abstracts from specific input values and focuses on structural conditions that influence performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.

The pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches <image>.

Keeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.

In other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.

Input

The only line contains two integers p and y (2 ≤ p ≤ y ≤ 109).

Output

Output the number of the highest suitable branch. If there are none, print -1 instead.

Examples

Input

3 6


Output

5


Input

3 4


Output

-1

Note

In the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.

It immediately follows that there are no valid branches in second sample case.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ checker functions for each of the performance-characterizing invariants identified:

1. **Invariant 1: High Divisor Count**
   - Check if the range of divisors to be checked is large.

```cpp
void check_divisor_count_invariant(int p, int y) {
    if (sqrt(y) > p) {
        cerr << "Warning: Divisor count invariant triggered - large number of divisors to check!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Dense Occupation Mapping**
   - Check if the map becomes excessively large.

```cpp
void check_occupation_map_invariant(const std::map<int, int>& a) {
    if (a.size() > 10000) {  // Arbitrary threshold for excessive map size
        cerr << "Warning: Occupation map invariant triggered - map is too large!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Extensive Search Space**
   - Check if the vector `ans` grows too large, indicating a broad search space.

```cpp
void check_search_space_invariant(const std::vector<int>& ans) {
    if (ans.size() > 10000) {  // Arbitrary threshold for vector size
        cerr << "Warning: Search space invariant triggered - search space too large!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Here is the instrumented C++ program with the runtime checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check if the range of divisors is large
void check_divisor_count_invariant(int p, int y) {
    if (sqrt(y) > p) {
        cerr << "Warning: Divisor count invariant triggered - large number of divisors to check!" << endl;
        abort();
    }
}

// Function to check if the map grows excessively
void check_occupation_map_invariant(const map<int, int>& a) {
    if (a.size() > 10000) {  // Arbitrary threshold for excessive map size
        cerr << "Warning: Occupation map invariant triggered - map is too large!" << endl;
        abort();
    }
}

// Function to check if the vector grows too large
void check_search_space_invariant(const vector<int>& ans) {
    if (ans.size() > 10000) {  // Arbitrary threshold for vector size
        cerr << "Warning: Search space invariant triggered - search space too large!" << endl;
        abort();
    }
}

int main() {
    int p, y;
    cin >> p >> y;
    
    // Check if the divisor range invariant is triggered
    check_divisor_count_invariant(p, y);
    
    map<int, int> a;
    for (int i = 2; i <= min((int)sqrt(y) + 1, p); i++) {
        if (y % i == 0 && i == 2) {
            a[i] = 1;
            a[y - (y % i)] = 1;
        } else if (i % 2 != 0) {
            a[i] = 1;
            a[y - (y % i)] = 1;
        }
    }
    
    // Check if the occupation map invariant is triggered
    check_occupation_map_invariant(a);
    
    vector<int> ans;
    for (auto it = a.begin(); it != a.end(); it++) {
        ans.push_back(it->first);
    }
    
    // Check if the search space invariant is triggered
    check_search_space_invariant(ans);
    
    if (ans.empty() || ans[max((int)((ans).size()) - 1, 0)] != y) {
        cout << y;
        return 0;
    }
    for (int i = (int)((ans).size()) - 1; i > 0; i--) {
        if (ans[i] - 1 > p) {
            for (int j = ans[i] - 1; j > ans[i - 1]; j--) {
                int flag = 1;
                for (int k = 2; k <= min((int)sqrt(j), p); k++) {
                    if (j % k == 0) {
                        flag = 0;
                        break;
                    }
                }
                if (flag) {
                    cout << j;
                    return 0;
                }
            }
        }
    }
    cout << "-1";
}
```

### Explanation

- **Divisor Count Check:** This check is placed right after reading inputs, ensuring we don't proceed if the divisor count is excessively high, indicating potential inefficiency.
- **Occupation Map Check:** After the map `a` is populated, we check its size to catch any excessive growth that might degrade performance.
- **Search Space Check:** The vector `ans` is checked after population to prevent large iterations over possible branches.

These checkpoints help in detecting performance bottlenecks without affecting the core logic and while maintaining efficiency.

