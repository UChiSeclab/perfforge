=== Invariants Response ===
**Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Line Comparison**: The most significant differences in line hit counts between the slow and fast runs occur on lines 8 and 9. This indicates that the inner loop is the primary source of the slowdown.
   - **Slow Input Hit Count**: Line 8 is hit 2,023,808 times, and line 9 is hit 2,023,744 times.
   - **Fast Input Hit Count**: Line 8 is hit 63,244 times, and line 9 is hit 63,242 times.

2. **Inefficient Code Interaction**: 
   - The nested loop (lines 8-9) iterates over potential divisors `j` for each `i` in the range from `y` to 2. This loop becomes expensive as it checks divisibility for each number down to its square root.
   - The overall complexity of this loop is approximately O((y-2) * sqrt(y)), making it sensitive to the value of `y`.

3. **Data Structure and Algorithm Interaction**:
   - The variable `i` represents each branch number starting from `y` down to 2. `j` iterates from 2 up to roughly the square root of `i`. The condition `(i % j == 0)` checks if `j` is a divisor of `i`.
   - When `i` is large (close to `y`), this loop checks a large number of potential divisors. As `y` approaches its maximum constraint of 1,000,000,000, the performance degrades because the number of checks increases significantly.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariant 1: Large Upper Limits**
   - "When `y` is close to its upper limit and `p` is small relative to `y`, the time spent checking each branch increases significantly. This is because the nested loop performs a high number of divisor checks for each branch number, especially when `y` is large."

2. **Invariant 2: Divisor Check Complexity**
   - "If the value of `y` is such that a large number of branch numbers are tested for primality, the performance degrades. This occurs when `y` is large relative to `p`, leading to many calculations in the nested loop that checks for divisors up to the square root of each `i`."

3. **Invariant 3: Inefficient Loops**
   - "When the loop iterates through a wide range of branch numbers and spends excessive time in the divisor check loop, the overall computation time increases. This is particularly true when `y` is large, as the divisor loop runs for a longer time."

**Conclusion**

The slow input performance issues arise primarily from a large `y` value, which expands the number of iterations and divisor checks in the nested loop. The inefficiency is compounded when `p` is much smaller than `y`, causing high computational overhead due to extensive primality checks. For future inputs, performance degradation is likely when `y` is near its maximum constraint, especially when `p` is significantly smaller than `y`.

=== Checker Response ===
**Phase 3: Implement the Natural Language Invariants as C++ Checkers**

For the invariants identified in Phase 2, here's how they can be translated into C++ code checkers:

1. **Invariant 1: Large Upper Limits**

   This invariant is about detecting potential slowdowns when `y` is large compared to `p`, which results in the nested loop performing many divisor checks.

   ```cpp
   void check_large_upper_limits(int p, int y) {
       if (y > 1e8 && y > 10 * p) {
           cerr << "Warning: Performance bottleneck condition triggered due to large upper limits!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Divisor Check Complexity**

   This invariant highlights performance degradation when many numbers are tested for primality due to a large `y` value.

   ```cpp
   void check_divisor_check_complexity(int y) {
       int max_divisor_checks = static_cast<int>(sqrt(y));
       if (max_divisor_checks > 1e4) {
           cerr << "Warning: Performance bottleneck due to excessive divisor checks!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Inefficient Loops**

   This invariant emphasizes the inefficiency when the loop iterates over a large range, spending excessive time in divisor checks.

   ```cpp
   void check_inefficient_loops(int p, int y) {
       if (y > 1e8) {
           cerr << "Warning: Performance bottleneck due to inefficient loop range!" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrate Checkers into the Original C++ Program**

Now, let's integrate these checks into the provided C++ program at effective points to avoid adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions to detect potential performance bottlenecks
void check_large_upper_limits(int p, int y) {
    if (y > 1e8 && y > 10 * p) {
        cerr << "Warning: Performance bottleneck condition triggered due to large upper limits!" << endl;
        abort();
    }
}

void check_divisor_check_complexity(int y) {
    int max_divisor_checks = static_cast<int>(sqrt(y));
    if (max_divisor_checks > 1e4) {
        cerr << "Warning: Performance bottleneck due to excessive divisor checks!" << endl;
        abort();
    }
}

void check_inefficient_loops(int p, int y) {
    if (y > 1e8) {
        cerr << "Warning: Performance bottleneck due to inefficient loop range!" << endl;
        abort();
    }
}

int main() {
    int p, y, ans;
    cin >> p >> y;
    
    // Insert checks after reading input, before entering the main heavy loops
    check_large_upper_limits(p, y);
    check_divisor_check_complexity(y);
    check_inefficient_loops(p, y);

    for (int i = y; i >= 2; i--) {
        bool ok = 1;
        for (int j = 2; j * j <= i; j++) {
            if (i % j == 0) ok &= (j > p) && (i / j > p);
        }
        if (ok) {
            ans = i;
            break;
        }
    }
    if (ans <= p) {
        cout << -1 << endl;
        return 0;
    }
    cout << ans << endl;
}
```

**Explanation**:
- The checker functions are placed right after reading the inputs and before the main loop begins. This prevents adding unnecessary overhead inside the performance-critical loops.
- Each checker is designed to detect a specific performance bottleneck condition by checking the values of `p` and `y` against predetermined thresholds. These conditions are aligned with the performance-characterizing invariants derived in Phase 2.
- The use of `abort()` ensures that if any bottleneck condition is met, the program will terminate with a clear warning, making it easy to identify performance issues during testing.
