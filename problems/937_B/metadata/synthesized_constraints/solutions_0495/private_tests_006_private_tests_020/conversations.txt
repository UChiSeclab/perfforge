system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.

The pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches <image>.

Keeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.

In other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.

Input

The only line contains two integers p and y (2 ≤ p ≤ y ≤ 109).

Output

Output the number of the highest suitable branch. If there are none, print -1 instead.

Examples

Input

3 6


Output

5


Input

3 4


Output

-1

Note

In the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.

It immediately follows that there are no valid branches in second sample case.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int p, y, ans;
  cin >> p >> y;
  for (int i = y; i >= 2; i--) {
    bool ok = 1;
    for (int j = 2; j * j <= i; j++) {
      if (i % j == 0) ok &= (j > p) && (i / j > p);
    }
    if (ok) {
      ans = i;
      break;
    }
  }
  if (ans <= p) {
    cout << -1 << endl;
    return 0;
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1000000000


(G.2) Fast Input

2 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int p, y, ans; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> p >> y; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = y; i >= 2; i--) { /* line 6 slow_hit_count: 64, fast_hit_count: 2 */
    bool ok = 1; /* line 7 slow_hit_count: 64, fast_hit_count: 2 */
    for (int j = 2; j * j <= i; j++) { /* line 8 slow_hit_count: 2023808, fast_hit_count: 63244 */
      if (i % j == 0) ok &= (j > p) && (i / j > p); /* line 9 slow_hit_count: 2023744, fast_hit_count: 63242 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    if (ok) { /* line 11 slow_hit_count: 64, fast_hit_count: 2 */
      ans = i; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans <= p) { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << endl; /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
    return 0; /* line 18 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 20 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 1 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Line Comparison**: The most significant differences in line hit counts between the slow and fast runs occur on lines 8 and 9. This indicates that the inner loop is the primary source of the slowdown.
   - **Slow Input Hit Count**: Line 8 is hit 2,023,808 times, and line 9 is hit 2,023,744 times.
   - **Fast Input Hit Count**: Line 8 is hit 63,244 times, and line 9 is hit 63,242 times.

2. **Inefficient Code Interaction**: 
   - The nested loop (lines 8-9) iterates over potential divisors `j` for each `i` in the range from `y` to 2. This loop becomes expensive as it checks divisibility for each number down to its square root.
   - The overall complexity of this loop is approximately O((y-2) * sqrt(y)), making it sensitive to the value of `y`.

3. **Data Structure and Algorithm Interaction**:
   - The variable `i` represents each branch number starting from `y` down to 2. `j` iterates from 2 up to roughly the square root of `i`. The condition `(i % j == 0)` checks if `j` is a divisor of `i`.
   - When `i` is large (close to `y`), this loop checks a large number of potential divisors. As `y` approaches its maximum constraint of 1,000,000,000, the performance degrades because the number of checks increases significantly.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariant 1: Large Upper Limits**
   - "When `y` is close to its upper limit and `p` is small relative to `y`, the time spent checking each branch increases significantly. This is because the nested loop performs a high number of divisor checks for each branch number, especially when `y` is large."

2. **Invariant 2: Divisor Check Complexity**
   - "If the value of `y` is such that a large number of branch numbers are tested for primality, the performance degrades. This occurs when `y` is large relative to `p`, leading to many calculations in the nested loop that checks for divisors up to the square root of each `i`."

3. **Invariant 3: Inefficient Loops**
   - "When the loop iterates through a wide range of branch numbers and spends excessive time in the divisor check loop, the overall computation time increases. This is particularly true when `y` is large, as the divisor loop runs for a longer time."

**Conclusion**

The slow input performance issues arise primarily from a large `y` value, which expands the number of iterations and divisor checks in the nested loop. The inefficiency is compounded when `p` is much smaller than `y`, causing high computational overhead due to extensive primality checks. For future inputs, performance degradation is likely when `y` is near its maximum constraint, especially when `p` is significantly smaller than `y`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The weather is fine today and hence it's high time to climb the nearby pine and enjoy the landscape.

The pine's trunk includes several branches, located one above another and numbered from 2 to y. Some of them (more precise, from 2 to p) are occupied by tiny vile grasshoppers which you're at war with. These grasshoppers are known for their awesome jumping skills: the grasshopper at branch x can jump to branches <image>.

Keeping this in mind, you wisely decided to choose such a branch that none of the grasshoppers could interrupt you. At the same time you wanna settle as high as possible since the view from up there is simply breathtaking.

In other words, your goal is to find the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.

Input

The only line contains two integers p and y (2 ≤ p ≤ y ≤ 109).

Output

Output the number of the highest suitable branch. If there are none, print -1 instead.

Examples

Input

3 6


Output

5


Input

3 4


Output

-1

Note

In the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.

It immediately follows that there are no valid branches in second sample case.

Solution (C++ code):
{solution}


assistant: **Phase 3: Implement the Natural Language Invariants as C++ Checkers**

For the invariants identified in Phase 2, here's how they can be translated into C++ code checkers:

1. **Invariant 1: Large Upper Limits**

   This invariant is about detecting potential slowdowns when `y` is large compared to `p`, which results in the nested loop performing many divisor checks.

   ```cpp
   void check_large_upper_limits(int p, int y) {
       if (y > 1e8 && y > 10 * p) {
           cerr << "Warning: Performance bottleneck condition triggered due to large upper limits!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Divisor Check Complexity**

   This invariant highlights performance degradation when many numbers are tested for primality due to a large `y` value.

   ```cpp
   void check_divisor_check_complexity(int y) {
       int max_divisor_checks = static_cast<int>(sqrt(y));
       if (max_divisor_checks > 1e4) {
           cerr << "Warning: Performance bottleneck due to excessive divisor checks!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Inefficient Loops**

   This invariant emphasizes the inefficiency when the loop iterates over a large range, spending excessive time in divisor checks.

   ```cpp
   void check_inefficient_loops(int p, int y) {
       if (y > 1e8) {
           cerr << "Warning: Performance bottleneck due to inefficient loop range!" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrate Checkers into the Original C++ Program**

Now, let's integrate these checks into the provided C++ program at effective points to avoid adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions to detect potential performance bottlenecks
void check_large_upper_limits(int p, int y) {
    if (y > 1e8 && y > 10 * p) {
        cerr << "Warning: Performance bottleneck condition triggered due to large upper limits!" << endl;
        abort();
    }
}

void check_divisor_check_complexity(int y) {
    int max_divisor_checks = static_cast<int>(sqrt(y));
    if (max_divisor_checks > 1e4) {
        cerr << "Warning: Performance bottleneck due to excessive divisor checks!" << endl;
        abort();
    }
}

void check_inefficient_loops(int p, int y) {
    if (y > 1e8) {
        cerr << "Warning: Performance bottleneck due to inefficient loop range!" << endl;
        abort();
    }
}

int main() {
    int p, y, ans;
    cin >> p >> y;
    
    // Insert checks after reading input, before entering the main heavy loops
    check_large_upper_limits(p, y);
    check_divisor_check_complexity(y);
    check_inefficient_loops(p, y);

    for (int i = y; i >= 2; i--) {
        bool ok = 1;
        for (int j = 2; j * j <= i; j++) {
            if (i % j == 0) ok &= (j > p) && (i / j > p);
        }
        if (ok) {
            ans = i;
            break;
        }
    }
    if (ans <= p) {
        cout << -1 << endl;
        return 0;
    }
    cout << ans << endl;
}
```

**Explanation**:
- The checker functions are placed right after reading the inputs and before the main loop begins. This prevents adding unnecessary overhead inside the performance-critical loops.
- Each checker is designed to detect a specific performance bottleneck condition by checking the values of `p` and `y` against predetermined thresholds. These conditions are aligned with the performance-characterizing invariants derived in Phase 2.
- The use of `abort()` ensures that if any bottleneck condition is met, the program will terminate with a clear warning, making it easy to identify performance issues during testing.

