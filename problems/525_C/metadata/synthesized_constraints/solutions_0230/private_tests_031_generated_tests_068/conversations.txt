system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li.

Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.

Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed:

  * a1 ≤ a2 ≤ a3 ≤ a4
  * a1 = a2
  * a3 = a4



A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7.

Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.

You have to answer the question — what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?

Input

The first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.

The second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks.

Output

The first line of the output must contain a single non-negative integer — the maximum total area of the rectangles that Ilya can make from the available sticks.

Examples

Input

4
2 4 4 2


Output

8


Input

4
2 2 3 5


Output

0


Input

4
100003 100004 100005 100006


Output

10000800015

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long cnt[1000010] = {0};
  long long n, a, ma = -1;
  long long ans = 0, last = 0;
  cin >> n;
  for (long long i = 0; i < n; ++i) {
    cin >> a;
    if (a > ma) ma = a;
    cnt[a]++;
  }
  for (long long i = ma; i >= 1; --i) {
    if ((cnt[i] % 2 == 1) && (cnt[i - 1])) {
      --cnt[i];
      ++cnt[i - 1];
    } else if ((cnt[i] % 2 == 1) && !cnt[i - 1]) {
      --cnt[i];
    }
  }
  ans += ((cnt[ma] / 4) * ma * ma);
  cnt[ma] %= 4;
  last = (cnt[ma] ? ma : 0);
  for (long long i = ma - 1; i >= 1; --i) {
    if (cnt[last] && cnt[i] >= 2) {
      ans += (i * (last));
      cnt[i] -= 2;
      cnt[last] -= 2;
    }
    ans += ((cnt[i] / 4) * i * i);
    cnt[i] %= 4;
    last = (cnt[i] ? i : last);
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8
2 1000000 2 1000000 2 1000000 2 1000000


(G.2) Fast Input

4
2 4 2 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long cnt[1000010] = {0}; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, a, ma = -1; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0, last = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; ++i) { /* line 8 slow_hit_count: 9, fast_hit_count: 5 */
    cin >> a; /* line 9 slow_hit_count: 8, fast_hit_count: 4 */
    if (a > ma) ma = a; /* line 10 slow_hit_count: 8, fast_hit_count: 4 */
    cnt[a]++; /* line 11 slow_hit_count: 8, fast_hit_count: 4 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = ma; i >= 1; --i) { /* line 13 slow_hit_count: 1000001, fast_hit_count: 9 */
    if ((cnt[i] % 2 == 1) && (cnt[i - 1])) { /* line 14 slow_hit_count: 1000000, fast_hit_count: 8 */
      --cnt[i]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      ++cnt[i - 1]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } else if ((cnt[i] % 2 == 1) && !cnt[i - 1]) { /* line 17 slow_hit_count: 1000000, fast_hit_count: 8 */
      --cnt[i]; /* line 18 slow_hit_count: 0, fast_hit_count: 2 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  ans += ((cnt[ma] / 4) * ma * ma); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cnt[ma] %= 4; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  last = (cnt[ma] ? ma : 0); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = ma - 1; i >= 1; --i) { /* line 24 slow_hit_count: 1000000, fast_hit_count: 8 */
    if (cnt[last] && cnt[i] >= 2) { /* line 25 slow_hit_count: 999999, fast_hit_count: 7 */
      ans += (i * (last)); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      cnt[i] -= 2; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      cnt[last] -= 2; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    ans += ((cnt[i] / 4) * i * i); /* line 30 slow_hit_count: 999999, fast_hit_count: 7 */
    cnt[i] %= 4; /* line 31 slow_hit_count: 999999, fast_hit_count: 7 */
    last = (cnt[i] ? i : last); /* line 32 slow_hit_count: 999999, fast_hit_count: 7 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance issue in the given C program, we need to examine the hit count information for the slow and fast inputs and identify any segments of the code that show a stark difference in execution frequency. Here's a breakdown of the analysis and performance-characterizing invariants:

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Hit Count Discrepancy**: 
   - The loops starting at lines 13 and 24 show significant hit count discrepancies. The loop on line 13 runs 1,000,001 times for the slow input compared to just 9 times for the fast input. Similarly, the loop on line 24 runs 1,000,000 times for the slow input against 8 times for the fast input.
   
2. **Data Structure Interaction**:
   - The array `cnt` is crucial here. The loops are iterating over `cnt` from the highest observed stick length downwards.
   - For the slow input, it appears that the array has a large number of entries, increasing the execution time as the loops iterate over a substantial range of indices (close to the maximum stick length).

3. **Key Operations**:
   - The operations inside the loops (lines 14-32) perform checks and modifications based on conditions that relate to array indices. These operations are computationally expensive because of the high number of iterations.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, here are the natural language statements that describe conditions under which the program is likely to slow down:

1. **Invariant 1: Large Range of Stick Lengths**
   - "When there is a large range of stick lengths in the input, the algorithm may enter a slow path due to extensive iteration over potential stick lengths."

2. **Invariant 2: High Frequency of Maximum Length Sticks**
   - "If many sticks are of the maximum possible length or near it, the algorithm may slow down as it performs lengthy iterations to find matching pairs."

3. **Invariant 3: Repeated Processing of Unmatched Sticks**
   - "When the number of sticks of certain lengths repeatedly leads to scenarios where they cannot form rectangles, the program's performance may degrade due to repeated operations on these lengths."

4. **Invariant 4: Imbalance in Pairable Sticks**
   - "If there is an imbalance in the number of sticks needed to form rectangles, especially for large lengths, the performance may suffer because of excess iterations to adjust stick counts."

### Summary

The slow input causes the program to take a significantly longer time because the conditions tied to stick length distribution and maximum length are not favorable for efficient rectangle formation. The loops have excessive iterations due to the large maximum stick length, leading to inefficient processing of stick counts in the `cnt` array. Addressing these conditions could involve optimizing the search and matching mechanism to minimize unnecessary iterations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li.

Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.

Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed:

  * a1 ≤ a2 ≤ a3 ≤ a4
  * a1 = a2
  * a3 = a4



A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7.

Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.

You have to answer the question — what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?

Input

The first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.

The second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks.

Output

The first line of the output must contain a single non-negative integer — the maximum total area of the rectangles that Ilya can make from the available sticks.

Examples

Input

4
2 4 4 2


Output

8


Input

4
2 2 3 5


Output

0


Input

4
100003 100004 100005 100006


Output

10000800015

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we translate the natural language invariants derived earlier into C++ code for runtime checks.

### Phase 3: C++ Code for Performance-Characterizing Invariants

We'll implement the invariants as conditional checks in C++, which will monitor the program's execution at runtime:

1. **Invariant 1: Large Range of Stick Lengths**
   ```cpp
   void check_large_range_invariant(int max_length, int min_length) {
       if ((max_length - min_length) > 1000000) { // Arbitrary threshold based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered due to large range of stick lengths!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: High Frequency of Maximum Length Sticks**
   ```cpp
   void check_max_length_frequency_invariant(int max_length, long long frequency) {
       if (max_length == 1000000 && frequency > 10000) { // Arbitrary frequency threshold
           cerr << "Warning: Performance bottleneck condition triggered due to high frequency of max length sticks!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Repeated Processing of Unmatched Sticks**
   ```cpp
   void check_unmatched_sticks_invariant(const long long cnt[], int size) {
       int unmatched_count = 0;
       for (int i = 0; i <= size; ++i) {
           if (cnt[i] % 2 != 0) {
               unmatched_count++;
           }
       }
       if (unmatched_count > 50000) { // Arbitrary threshold based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered due to many unmatched sticks!" << endl;
           abort();
       }
   }
   ```

4. **Invariant 4: Imbalance in Pairable Sticks**
   ```cpp
   void check_imbalance_invariant(const long long cnt[], int size) {
       int imbalance_count = 0;
       for (int i = 0; i <= size; ++i) {
           if (cnt[i] % 4 != 0) {
               imbalance_count++;
           }
       }
       if (imbalance_count > 50000) { // Arbitrary threshold based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered due to imbalance in pairable sticks!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the C++ Program

Now, let's integrate these runtime checks into the original program. We'll strategically place these checks to capture performance bottlenecks without incurring unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Phase 3: Implementing Checkers
void check_large_range_invariant(int max_length, int min_length) {
    if ((max_length - min_length) > 1000000) { // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered due to large range of stick lengths!" << endl;
        abort();
    }
}

void check_max_length_frequency_invariant(int max_length, long long frequency) {
    if (max_length == 1000000 && frequency > 10000) { // Arbitrary frequency threshold
        cerr << "Warning: Performance bottleneck condition triggered due to high frequency of max length sticks!" << endl;
        abort();
    }
}

void check_unmatched_sticks_invariant(const long long cnt[], int size) {
    int unmatched_count = 0;
    for (int i = 0; i <= size; ++i) {
        if (cnt[i] % 2 != 0) {
            unmatched_count++;
        }
    }
    if (unmatched_count > 50000) { // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered due to many unmatched sticks!" << endl;
        abort();
    }
}

void check_imbalance_invariant(const long long cnt[], int size) {
    int imbalance_count = 0;
    for (int i = 0; i <= size; ++i) {
        if (cnt[i] % 4 != 0) {
            imbalance_count++;
        }
    }
    if (imbalance_count > 50000) { // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered due to imbalance in pairable sticks!" << endl;
        abort();
    }
}

int main() {
    long long cnt[1000010] = {0};
    long long n, a, ma = -1;
    long long ans = 0, last = 0;
    cin >> n;
    long long min_length = 1000001; // Initialize to be higher than max possible length
    for (long long i = 0; i < n; ++i) {
        cin >> a;
        if (a > ma) ma = a;
        if (a < min_length) min_length = a;
        cnt[a]++;
    }

    // Phase 4: Place checkers after input processing
    check_large_range_invariant(ma, min_length);
    check_max_length_frequency_invariant(ma, cnt[ma]);
    check_unmatched_sticks_invariant(cnt, 1000000);
    check_imbalance_invariant(cnt, 1000000);

    for (long long i = ma; i >= 1; --i) {
        if ((cnt[i] % 2 == 1) && (cnt[i - 1])) {
            --cnt[i];
            ++cnt[i - 1];
        } else if ((cnt[i] % 2 == 1) && !cnt[i - 1]) {
            --cnt[i];
        }
    }
    ans += ((cnt[ma] / 4) * ma * ma);
    cnt[ma] %= 4;
    last = (cnt[ma] ? ma : 0);
    for (long long i = ma - 1; i >= 1; --i) {
        if (cnt[last] && cnt[i] >= 2) {
            ans += (i * last);
            cnt[i] -= 2;
            cnt[last] -= 2;
        }
        ans += ((cnt[i] / 4) * i * i);
        cnt[i] %= 4;
        last = (cnt[i] ? i : last);
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are placed after processing the input and populating the `cnt` array. This ensures the checks do not incur overhead within the computational loops.
- **Check Conditions**: Each check evaluates a specific invariant condition and aborts the program if triggered, providing a warning message to help with debugging and performance tuning. The thresholds used are arbitrary and should be tuned according to further profiling and problem constraints.

