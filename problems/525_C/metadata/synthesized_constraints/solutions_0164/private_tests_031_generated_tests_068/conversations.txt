system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li.

Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.

Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed:

  * a1 ≤ a2 ≤ a3 ≤ a4
  * a1 = a2
  * a3 = a4



A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7.

Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.

You have to answer the question — what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?

Input

The first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.

The second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks.

Output

The first line of the output must contain a single non-negative integer — the maximum total area of the rectangles that Ilya can make from the available sticks.

Examples

Input

4
2 4 4 2


Output

8


Input

4
2 2 3 5


Output

0


Input

4
100003 100004 100005 100006


Output

10000800015

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, i, temp, b[1000001], mx, ans, lel;
long long r[1000001];
pair<long long, long long> a[100001];
bool comp(pair<long long, long long> a, pair<long long, long long> b) {
  return a.first > b.first or a.first == b.first and a.second > b.second;
}
int main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(0);
  cin >> n;
  for (i = 1; i <= n; i++) {
    cin >> temp;
    b[temp]++;
    mx = max(temp, mx);
  }
  for (i = mx; i >= 1; i--) {
    if ((b[i] + r[i]) % 2 == 1 and b[i]) {
      b[i]--, r[i - 1]++;
    }
  }
  vector<long long> kek;
  for (i = mx; i >= 1; i--) {
    b[i] = b[i] + r[i];
    for (int j = 0; j < b[i] - b[i] % 2; j++) kek.push_back(i);
  }
  for (int i = 0; i < kek.size(); i += 4) {
    if (i + 3 < kek.size()) {
      ans += kek[i] * kek[i + 2];
    }
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8
2 1000000 2 1000000 2 1000000 2 1000000


(G.2) Fast Input

4
2 4 2 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, i, temp, b[1000001], mx, ans, lel; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long r[1000001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> a[100001]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool comp(pair<long long, long long> a, pair<long long, long long> b) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  return a.first > b.first or a.first == b.first and a.second > b.second; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base ::sync_with_stdio(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= n; i++) { /* line 13 slow_hit_count: 9, fast_hit_count: 5 */
    cin >> temp; /* line 14 slow_hit_count: 8, fast_hit_count: 4 */
    b[temp]++; /* line 15 slow_hit_count: 8, fast_hit_count: 4 */
    mx = max(temp, mx); /* line 16 slow_hit_count: 8, fast_hit_count: 4 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = mx; i >= 1; i--) { /* line 18 slow_hit_count: 1000001, fast_hit_count: 9 */
    if ((b[i] + r[i]) % 2 == 1 and b[i]) { /* line 19 slow_hit_count: 1000000, fast_hit_count: 8 */
      b[i]--, r[i - 1]++; /* line 20 slow_hit_count: 0, fast_hit_count: 2 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> kek; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = mx; i >= 1; i--) { /* line 24 slow_hit_count: 1000001, fast_hit_count: 9 */
    b[i] = b[i] + r[i]; /* line 25 slow_hit_count: 1000000, fast_hit_count: 8 */
    for (int j = 0; j < b[i] - b[i] % 2; j++) kek.push_back(i); /* line 26 slow_hit_count: 1000008, fast_hit_count: 10 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < kek.size(); i += 4) { /* line 28 slow_hit_count: 3, fast_hit_count: 2 */
    if (i + 3 < kek.size()) { /* line 29 slow_hit_count: 2, fast_hit_count: 1 */
      ans += kek[i] * kek[i + 2]; /* line 30 slow_hit_count: 2, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C program and identify performance bottlenecks, we'll follow the structured approach outlined in the task.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The `for` loops on lines 18 and 24 have extremely high hit counts for the slow input, with 1,000,001 iterations compared to much fewer for the fast input (9).
   - Line 26 involves a nested operation (`for` loop) inside the outer loop on line 24, contributing significantly to the performance lag, with 1,000,008 hits for the slow input.

2. **Pinpointing Lines/Functions with Significant Hits**:
   - **Lines 18-20**: This loop iterates from `mx` down to 1, adjusting the `b` and `r` arrays based on certain conditions. This is a critical section since it processes a large range of values repeatedly.
   - **Lines 24-26**: This loop is responsible for populating the `kek` vector, with another nested loop inside. The hit count indicates this section is being executed for a wide range of values, leading to a large number of operations.
   - **Line 26**: The nested loop here could be causing a large number of operations due to `b[i] - b[i] % 2` evaluations and vector insertions.

3. **Data Structure and Loop Interactions**:
   - The program uses arrays `b` and `r` with sizes tied to the potential range of stick lengths (up to 1,000,000), and it involves complex conditionals and nested loops that iterate over these large ranges.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, we can derive the following performance-characterizing invariants:

1. **High Stick Length Values**:
   - Natural language description: "When the maximum stick length (`mx`) is very large, nearing the upper bound of stick lengths, the loops iterating over possible stick lengths from `mx` down to 1 can cause a significant performance slowdown."

2. **Frequent Adjustments on Large Arrays**:
   - Natural language description: "If the input contains multiple stick lengths close to the maximum possible size, the nested operations on large arrays (`b` and `r`) can lead to numerous adjustments and checks, degrading performance."

3. **Populate Large Vector Operations**:
   - Natural language description: "Repeatedly populating and processing a large vector (`kek`), especially when derived from high values of stick lengths, can trigger excessive operations and significantly slow down the program."

4. **Nested Loop Complexity**:
   - Natural language description: "The combination of nested loops processing each possible stick length, especially when iterating over a wide range and performing conditional checks, may cause execution time to increase dramatically."

These invariants are crafted to encapsulate potential slowdowns without relying on specific values from the provided slow input, instead highlighting general patterns and conditions that lead to inefficient execution paths. By understanding and addressing these performance triggers, we can optimize the program for both current and future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li.

Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.

Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed:

  * a1 ≤ a2 ≤ a3 ≤ a4
  * a1 = a2
  * a3 = a4



A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7.

Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.

You have to answer the question — what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?

Input

The first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.

The second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks.

Output

The first line of the output must contain a single non-negative integer — the maximum total area of the rectangles that Ilya can make from the available sticks.

Examples

Input

4
2 4 4 2


Output

8


Input

4
2 2 3 5


Output

0


Input

4
100003 100004 100005 100006


Output

10000800015

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived in the previous phase:

1. **High Stick Length Values**:
   ```cpp
   void check_max_length_invariant(long long mx) {
       if (mx >= 1000000) {  // High threshold indicating potential slowdowns due to large loop iterations
           cerr << "Warning: Performance bottleneck condition triggered due to high stick length!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Adjustments on Large Arrays**:
   ```cpp
   void check_large_array_operations(long long n, long long max_length) {
       if (n > 10000 && max_length > 500000) {  // Assuming a threshold where n is large and lengths are close to maximum
           cerr << "Warning: Performance bottleneck condition triggered due to frequent adjustments on large arrays!" << endl;
           abort();
       }
   }
   ```

3. **Populate Large Vector Operations**:
   ```cpp
   void check_large_vector_operations(const vector<long long>& kek) {
       if (kek.size() > 200000) {  // Threshold for large vector size which may indicate performance issues
           cerr << "Warning: Performance bottleneck condition triggered due to large vector operations!" << endl;
           abort();
       }
   }
   ```

4. **Nested Loop Complexity**:
   ```cpp
   void check_nested_loop_complexity(long long n, long long max_length) {
       if (n > 10000 && max_length > 500000) {  // Check for scenarios where nested loops run extensively
           cerr << "Warning: Performance bottleneck condition triggered due to nested loop complexity!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here is the instrumented C++ program with the checker code integrated at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, i, temp, b[1000001], mx, ans, lel;
long long r[1000001];
pair<long long, long long> a[100001];

// Function to check performance bottlenecks due to high stick lengths
void check_max_length_invariant(long long mx) {
    if (mx >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high stick length!" << endl;
        abort();
    }
}

// Function to check performance bottlenecks due to frequent adjustments on large arrays
void check_large_array_operations(long long n, long long max_length) {
    if (n > 10000 && max_length > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered due to frequent adjustments on large arrays!" << endl;
        abort();
    }
}

// Function to check performance bottlenecks due to large vector operations
void check_large_vector_operations(const vector<long long>& kek) {
    if (kek.size() > 200000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large vector operations!" << endl;
        abort();
    }
}

// Function to check performance bottlenecks due to nested loop complexity
void check_nested_loop_complexity(long long n, long long max_length) {
    if (n > 10000 && max_length > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered due to nested loop complexity!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> n;
    for (i = 1; i <= n; i++) {
        cin >> temp;
        b[temp]++;
        mx = max(temp, mx);
    }

    // Check for performance bottlenecks after reading inputs
    check_max_length_invariant(mx);
    check_large_array_operations(n, mx);

    for (i = mx; i >= 1; i--) {
        if ((b[i] + r[i]) % 2 == 1 && b[i]) {
            b[i]--, r[i - 1]++;
        }
    }

    vector<long long> kek;
    for (i = mx; i >= 1; i--) {
        b[i] = b[i] + r[i];
        for (int j = 0; j < b[i] - b[i] % 2; j++) kek.push_back(i);
    }

    // Check for performance bottlenecks before processing the kek vector
    check_large_vector_operations(kek);

    for (int i = 0; i < kek.size(); i += 4) {
        if (i + 3 < kek.size()) {
            ans += kek[i] * kek[i + 2];
        }
    }

    cout << ans << "\n";
    return 0;
}
```

### Explanation of Integrated Checks

- The check for high stick length values is inserted after calculating the maximum stick length (`mx`).
- The check for large array operations and nested loop complexity is placed after input processing, where the sizes of arrays and potential loop iterations are determined.
- The vector size check is conducted before the final loop to ensure potential large vector operations are flagged.

This instrumented code provides runtime checks for the identified performance bottlenecks, aiding in detecting slow execution paths without degrading performance by adding checks inside tight loops.

