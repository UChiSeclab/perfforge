system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li.

Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.

Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed:

  * a1 ≤ a2 ≤ a3 ≤ a4
  * a1 = a2
  * a3 = a4



A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7.

Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.

You have to answer the question — what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?

Input

The first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.

The second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks.

Output

The first line of the output must contain a single non-negative integer — the maximum total area of the rectangles that Ilya can make from the available sticks.

Examples

Input

4
2 4 4 2


Output

8


Input

4
2 2 3 5


Output

0


Input

4
100003 100004 100005 100006


Output

10000800015

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using pi = pair<int, int>;
const int mxn = 1e6;
int n, cnt[mxn + 5][2];
void solve() {
  cin >> n;
  for (int i = 0; i < n; ++i) {
    int l;
    cin >> l;
    ++cnt[l][0];
  }
  for (int i = 1e6; i >= 2; --i) {
    if ((cnt[i][0] & 1) && cnt[i][1] != cnt[i][0]) {
      --cnt[i][0];
      ++cnt[i - 1][0];
      ++cnt[i - 1][1];
    }
  }
  int j = 1e6;
  ll ans = 0;
  for (int i = 1e6; i >= 1; --i) {
    if (cnt[i][0] <= 1) continue;
    ans += cnt[i][0] / 4 * 1ll * i * i;
    cnt[i][0] %= 4;
    while (j > 0 && (j >= i || cnt[j][0] <= 1)) --j;
    if (j == 0) break;
    int add = min(cnt[j][0] / 2, cnt[i][0] / 2);
    ans += add * 1ll * i * j;
    cnt[j][0] -= add;
  }
  cout << ans << '\n';
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int t;
  t = 1;
  while (t--) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

45
4685 272 3481 3942 952 3020 329 4371 2923 2057 4526 2791 1674 3269 829 2713 3006 2166 1228 2795 983 1065 3875 4028 3429 1172 697 734 4393 1176 2820 1173 4598 2281 2549 4341 1504 172 4230 1193 3022 3742 1232 3433 1871


(G.2) Fast Input

45
4685 272 3481 3942 952 3020 329 4371 2923 2057 4526 2791 1674 3269 829 2713 3006 2166 1228 2795 983 1065 3875 4028 3429 3720 697 734 4393 1176 2820 1173 4598 2281 2549 4341 1504 172 4230 1193 3022 3742 1232 3433 1871


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using pi = pair<int, int>; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int mxn = 1e6; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, cnt[mxn + 5][2]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 10 slow_hit_count: 46, fast_hit_count: 46 */
    int l; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> l; /* line 12 slow_hit_count: 45, fast_hit_count: 45 */
    ++cnt[l][0]; /* line 13 slow_hit_count: 45, fast_hit_count: 45 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1e6; i >= 2; --i) { /* line 15 slow_hit_count: 1000000, fast_hit_count: 1000000 */
    if ((cnt[i][0] & 1) && cnt[i][1] != cnt[i][0]) { /* line 16 slow_hit_count: 999999, fast_hit_count: 999999 */
      --cnt[i][0]; /* line 17 slow_hit_count: 44, fast_hit_count: 45 */
      ++cnt[i - 1][0]; /* line 18 slow_hit_count: 44, fast_hit_count: 45 */
      ++cnt[i - 1][1]; /* line 19 slow_hit_count: 44, fast_hit_count: 45 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  int j = 1e6; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  ll ans = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1e6; i >= 1; --i) { /* line 24 slow_hit_count: 998829, fast_hit_count: 1000001 */
    if (cnt[i][0] <= 1) continue; /* line 25 slow_hit_count: 998829, fast_hit_count: 1000000 */
    ans += cnt[i][0] / 4 * 1ll * i * i; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
    cnt[i][0] %= 4; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
    while (j > 0 && (j >= i || cnt[j][0] <= 1)) --j; /* line 28 slow_hit_count: 1000001, fast_hit_count: 0 */
    if (j == 0) break; /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
    int add = min(cnt[j][0] / 2, cnt[i][0] / 2); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    ans += add * 1ll * i * j; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    cnt[j][0] -= add; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  t = 1; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 42 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants for the given C program, let's proceed with the tasks outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - Lines 15 (`for (int i = 1e6; i >= 2; --i)`) and 16 (`if ((cnt[i][0] & 1) && cnt[i][1] != cnt[i][0])`) are heavily hit in both fast and slow inputs, but the loop on line 15 is executed a maximum of one million times due to its range.
   - Line 28 (`while (j > 0 && (j >= i || cnt[j][0] <= 1)) --j;`) is hit significantly in the slow input but not at all in the fast input.

2. **Pinpoint Significant Hits:**
   - The inner loop on line 28 seems to be a bottleneck for the slow input as it is hit extensively. This suggests that the decrement operation on `j` is likely causing a slowdown due to repeated iterations when conditions do not allow early termination.

3. **Inference on Data Structures and Algorithms:**
   - The `cnt` array and its manipulation within loops (particularly the while loop) are central to the performance. The array acts as a histogram of stick lengths, and the inefficient decrementing in the while loop suggests a mismatch or insufficient pairings.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language performance invariants:

1. **Histogram Depletion:**
   - **Invariant:** "If the decrementing of the index `j` in the while loop (due to insufficient large pairs of sticks to form rectangles) continues for most iterations, the program execution slows significantly. This is likely when there are many non-pairing stick lengths or when sticks are spread across a wide range of lengths."
   
2. **Uneven Distribution:**
   - **Invariant:** "When there is an uneven distribution of stick lengths such that many lengths have odd occurrences, the loop handling reductions (lines 15-19) triggers frequently, increasing overhead through multiple adjustments and shifts."

3. **Exhaustive Pair Search:**
   - **Invariant:** "When attempting to form rectangles, if the potential largest length `i` frequently fails to pair with a smaller length `j` due to insufficient counts in `cnt`, the program spends excessive time iterating and reducing indices. This often occurs when lengths vary widely without sufficient repetition."

### Conclusion

In summary, the critical slowdowns occur due to high loop iteration counts caused by inefficient pairing and decrement operations. These are heavily influenced by the distribution and quantity of available stick lengths. By understanding these patterns, one can predict and simulate slow scenarios without relying on specific input values, enhancing robustness against performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li.

Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.

Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed:

  * a1 ≤ a2 ≤ a3 ≤ a4
  * a1 = a2
  * a3 = a4



A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7.

Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.

You have to answer the question — what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?

Input

The first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.

The second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks.

Output

The first line of the output must contain a single non-negative integer — the maximum total area of the rectangles that Ilya can make from the available sticks.

Examples

Input

4
2 4 4 2


Output

8


Input

4
2 2 3 5


Output

0


Input

4
100003 100004 100005 100006


Output

10000800015

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the natural language invariants we derived into C++ checker code:

#### Invariant 1: Histogram Depletion

```cpp
void check_histogram_depletion(int j, int cnt[], int range) {
    if (j < range) {
        cerr << "Warning: Histogram depletion invariant triggered - excessive decrementing of j due to insufficient pairings!" << endl;
        abort();
    }
}
```

#### Invariant 2: Uneven Distribution

```cpp
void check_uneven_distribution(int cnt[], int range) {
    int odd_count = 0;
    for (int i = 0; i < range; ++i) {
        if (cnt[i] & 1) ++odd_count;
    }
    if (odd_count > range / 2) {
        cerr << "Warning: Uneven distribution invariant triggered - many odd occurrences in stick lengths!" << endl;
        abort();
    }
}
```

#### Invariant 3: Exhaustive Pair Search

```cpp
void check_exhaustive_pair_search(int cnt[], int range) {
    int insufficient_pairs = 0;
    for (int i = 0; i < range; ++i) {
        if (cnt[i] < 2) ++insufficient_pairs;
    }
    if (insufficient_pairs > range / 2) {
        cerr << "Warning: Exhaustive pair search invariant triggered - frequent failures in pairing!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Next, we integrate these checks into the provided C++ code at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using pi = pair<int, int>;
const int mxn = 1e6;
int n, cnt[mxn + 5][2];

// Checker functions based on invariants
void check_histogram_depletion(int j, int range) {
    if (j < range) {
        cerr << "Warning: Histogram depletion invariant triggered - excessive decrementing of j due to insufficient pairings!" << endl;
        abort();
    }
}

void check_uneven_distribution(int cnt[][2], int range) {
    int odd_count = 0;
    for (int i = 0; i < range; ++i) {
        if (cnt[i][0] & 1) ++odd_count;
    }
    if (odd_count > range / 2) {
        cerr << "Warning: Uneven distribution invariant triggered - many odd occurrences in stick lengths!" << endl;
        abort();
    }
}

void check_exhaustive_pair_search(int cnt[][2], int range) {
    int insufficient_pairs = 0;
    for (int i = 0; i < range; ++i) {
        if (cnt[i][0] < 2) ++insufficient_pairs;
    }
    if (insufficient_pairs > range / 2) {
        cerr << "Warning: Exhaustive pair search invariant triggered - frequent failures in pairing!" << endl;
        abort();
    }
}

void solve() {
    cin >> n;
    for (int i = 0; i < n; ++i) {
        int l;
        cin >> l;
        ++cnt[l][0];
    }

    // Insert check for uneven distribution after input processing
    check_uneven_distribution(cnt, mxn + 5);

    for (int i = 1e6; i >= 2; --i) {
        if ((cnt[i][0] & 1) && cnt[i][1] != cnt[i][0]) {
            --cnt[i][0];
            ++cnt[i - 1][0];
            ++cnt[i - 1][1];
        }
    }
    int j = 1e6;
    ll ans = 0;
    for (int i = 1e6; i >= 1; --i) {
        if (cnt[i][0] <= 1) continue;
        ans += cnt[i][0] / 4 * 1ll * i * i;
        cnt[i][0] %= 4;
        while (j > 0 && (j >= i || cnt[j][0] <= 1)) --j;

        // Insert check for histogram depletion inside the loop
        check_histogram_depletion(j, 1);

        if (j == 0) break;
        int add = min(cnt[j][0] / 2, cnt[i][0] / 2);
        ans += add * 1ll * i * j;
        cnt[j][0] -= add;
    }

    // Insert exhaustive pair search check before final output
    check_exhaustive_pair_search(cnt, mxn + 5);

    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    t = 1;
    while (t--) solve();
}
```

### Explanation of Inserted Checks

- **Uneven Distribution Check:** Added after input processing to quickly determine if there's a significant number of lengths with odd occurrences that could cause inefficiencies.
- **Histogram Depletion Check:** Added inside the second loop to catch inefficient decrementing of `j` when pairings are insufficient.
- **Exhaustive Pair Search Check:** Added before final output to ensure no excessive pair search failures caused inefficiencies.

These checks will help detect inefficiencies and potential performance bottlenecks during runtime, aiding in identifying problematic input cases.

