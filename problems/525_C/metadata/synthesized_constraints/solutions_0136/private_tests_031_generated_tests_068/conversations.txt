system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li.

Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.

Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed:

  * a1 ≤ a2 ≤ a3 ≤ a4
  * a1 = a2
  * a3 = a4



A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7.

Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.

You have to answer the question — what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?

Input

The first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.

The second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks.

Output

The first line of the output must contain a single non-negative integer — the maximum total area of the rectangles that Ilya can make from the available sticks.

Examples

Input

4
2 4 4 2


Output

8


Input

4
2 2 3 5


Output

0


Input

4
100003 100004 100005 100006


Output

10000800015

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long a[1000009];
vector<long long> v;
int main() {
  long long i, j, k, n, m;
  while (scanf("%lld", &n) == 1) {
    memset(a, 0, sizeof(a));
    v.clear();
    long long mx = 0;
    for (i = 0; i < n; i++) {
      scanf("%lld", &k);
      mx = max(k, mx);
      a[k]++;
    }
    long long pre = 0;
    for (i = mx; i >= 1; i--) {
      if (pre) {
        if (a[i] % 2) {
          a[i]++;
          pre = 0;
        } else if (a[i] == 0)
          pre = 0;
        else
          pre = 1;
      } else {
        if (a[i] % 2) {
          a[i]--;
          pre = 1;
        } else
          pre = 0;
      }
      a[i] /= 2;
    }
    long long ans = 0;
    for (i = mx; i >= 1; i--) {
      for (j = 0; j < a[i]; j++) v.push_back(i);
    }
    for (i = 0; i + 1 < v.size(); i += 2) {
      ans += v[i] * v[i + 1];
    }
    printf("%lld\n", ans);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8
2 1000000 2 1000000 2 1000000 2 1000000


(G.2) Fast Input

4
2 4 2 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long a[1000009]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> v; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  long long i, j, k, n, m; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  while (scanf("%lld", &n) == 1) { /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    memset(a, 0, sizeof(a)); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    v.clear(); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    long long mx = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 0; i < n; i++) { /* line 11 slow_hit_count: 9, fast_hit_count: 5 */
      scanf("%lld", &k); /* line 12 slow_hit_count: 8, fast_hit_count: 4 */
      mx = max(k, mx); /* line 13 slow_hit_count: 8, fast_hit_count: 4 */
      a[k]++; /* line 14 slow_hit_count: 8, fast_hit_count: 4 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    long long pre = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = mx; i >= 1; i--) { /* line 17 slow_hit_count: 1000001, fast_hit_count: 9 */
      if (pre) { /* line 18 slow_hit_count: 1000000, fast_hit_count: 8 */
        if (a[i] % 2) { /* line 19 slow_hit_count: 0, fast_hit_count: 2 */
          a[i]++; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
          pre = 0; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        } else if (a[i] == 0) /* line 22 slow_hit_count: 0, fast_hit_count: 2 */
          pre = 0; /* line 23 slow_hit_count: 0, fast_hit_count: 2 */
        else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
          pre = 1; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        if (a[i] % 2) { /* line 27 slow_hit_count: 1000000, fast_hit_count: 6 */
          a[i]--; /* line 28 slow_hit_count: 0, fast_hit_count: 2 */
          pre = 1; /* line 29 slow_hit_count: 0, fast_hit_count: 2 */
        } else /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
          pre = 0; /* line 31 slow_hit_count: 1000000, fast_hit_count: 4 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      a[i] /= 2; /* line 33 slow_hit_count: 1000000, fast_hit_count: 8 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    long long ans = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = mx; i >= 1; i--) { /* line 36 slow_hit_count: 1000001, fast_hit_count: 9 */
      for (j = 0; j < a[i]; j++) v.push_back(i); /* line 37 slow_hit_count: 1000004, fast_hit_count: 9 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 0; i + 1 < v.size(); i += 2) { /* line 39 slow_hit_count: 3, fast_hit_count: 1 */
      ans += v[i] * v[i + 1]; /* line 40 slow_hit_count: 2, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%lld\n", ans); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem of performance bottlenecks in the given C code, we need to analyze the line-level hit counts and identify code segments that perform inefficiently. Based on this analysis, we will then derive performance characterizing invariants. Let's break down the tasks:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Key Observations from Hit Counts:**
   - **Line 17 (`for (i = mx; i >= 1; i--)`)**: The loop is hit 1,000,001 times in the slow input, but only 9 times in the fast input. This indicates a significant inefficiency when `mx` is large.
   - **Lines 18-33** (inside the loop): Each line inside this loop also receives a high hit count, especially lines 18 and 33, suggesting that the loop operations are expensive.
   - **Line 36 (`for (i = mx; i >= 1; i--)`)**: Similar to the previous loop, this line also has a high hit count (1,000,001 for the slow input compared to 9 for the fast input), indicating repeated processing.
   - **Line 37 (`v.push_back(i)`)**: This operation is executed 1,000,004 times in the slow input, further contributing to inefficiency due to the high hit count.

2. **Inference about Loops and Data Structures:**
   - The significant difference in hit counts between slow and fast inputs indicates that the inefficiency arises from processing all stick lengths up to `mx`, possibly because of the large maximum stick length in the slow input.
   - The `a[]` array, used for counting stick lengths, leads to many iterations when `mx` is large, resulting in redundant operations when most counts are zero.
   - Vector `v` is frequently updated with elements, leading to potential overhead in memory allocation and resizing operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are the performance-characterizing invariants that describe conditions under which the program slows down:

1. **Invariant 1: Large Maximum Stick Length**
   - **Natural Language Description**: "If the maximum stick length `mx` is close to the upper bound of possible stick lengths and significantly exceeds the average length of other sticks, the program may enter a slow path due to excessive iteration and redundant operations over lengths with zero count."
   - This invariant reflects the inefficiency when `mx` dominates the loop iterations, causing unnecessary processing for non-existent stick lengths.

2. **Invariant 2: High Density of Maximum Length Sticks**
   - **Natural Language Description**: "When a large number of sticks are of the maximum possible length, leading to a situation where the significant portion of the array `a[]` consists of non-zero values for these high indices, the vector resizing and array operations may degrade performance."
   - This captures the scenario where the presence of many maximum-length sticks leads to repeated operations in both the counting and vector-pushing phases.

3. **Invariant 3: Repeated Large Vector Operations**
   - **Natural Language Description**: "If the vector `v` requires frequent resizing due to a high number of operations being performed on it, especially when `n` is large and the value range of sticks is high, the program may experience performance degradation due to memory handling overhead."
   - This addresses the inefficiency due to repeated memory operations associated with vector `v`.

These invariants help to identify input patterns that trigger slow execution and suggest ways to optimize the code by focusing on these conditions. Note that these statements are abstracted to cover potential future scenarios within the constraints given in the problem description.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length li.

Ilya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.

Sticks with lengths a1, a2, a3 and a4 can make a rectangle if the following properties are observed:

  * a1 ≤ a2 ≤ a3 ≤ a4
  * a1 = a2
  * a3 = a4



A rectangle can be made of sticks with lengths of, for example, 3 3 3 3 or 2 2 4 4. A rectangle cannot be made of, for example, sticks 5 5 5 7.

Ilya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.

You have to answer the question — what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?

Input

The first line of the input contains a positive integer n (1 ≤ n ≤ 105) — the number of the available sticks.

The second line of the input contains n positive integers li (2 ≤ li ≤ 106) — the lengths of the sticks.

Output

The first line of the output must contain a single non-negative integer — the maximum total area of the rectangles that Ilya can make from the available sticks.

Examples

Input

4
2 4 4 2


Output

8


Input

4
2 2 3 5


Output

0


Input

4
100003 100004 100005 100006


Output

10000800015

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Based on the natural language invariants derived in Phase 2, here are the C++ code snippets implementing these checks:

#### Invariant 1: Large Maximum Stick Length
```cpp
void check_large_max_length_invariant(long long mx, long long average_length) {
    if (mx > 5 * average_length) {  // Threshold based on the problem's context, adjust as appropriate
        cerr << "Warning: Performance bottleneck due to large maximum stick length!" << endl;
        abort();
    }
}
```

#### Invariant 2: High Density of Maximum Length Sticks
```cpp
void check_high_density_max_length_invariant(long long max_count, long long n) {
    if (max_count > n / 2) {  // More than half of the sticks are of maximum length
        cerr << "Warning: Performance bottleneck due to high density of maximum length sticks!" << endl;
        abort();
    }
}
```

#### Invariant 3: Repeated Large Vector Operations
```cpp
void check_large_vector_operations_invariant(size_t vector_size, long long n) {
    if (vector_size > n / 2) {  // Vector grows large relative to input size
        cerr << "Warning: Performance bottleneck due to repeated large vector operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, let's integrate these checks into the original C++ code, ensuring that they are placed effectively in the control flow:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_max_length_invariant(long long mx, long long average_length) {
    if (mx > 5 * average_length) {
        cerr << "Warning: Performance bottleneck due to large maximum stick length!" << endl;
        abort();
    }
}

void check_high_density_max_length_invariant(long long max_count, long long n) {
    if (max_count > n / 2) {
        cerr << "Warning: Performance bottleneck due to high density of maximum length sticks!" << endl;
        abort();
    }
}

void check_large_vector_operations_invariant(size_t vector_size, long long n) {
    if (vector_size > n / 2) {
        cerr << "Warning: Performance bottleneck due to repeated large vector operations!" << endl;
        abort();
    }
}

long long a[1000009];
vector<long long> v;

int main() {
    long long i, j, k, n, m;
    while (scanf("%lld", &n) == 1) {
        memset(a, 0, sizeof(a));
        v.clear();
        long long mx = 0;
        long long total_length = 0;
        
        for (i = 0; i < n; i++) {
            scanf("%lld", &k);
            mx = max(k, mx);
            a[k]++;
            total_length += k;
        }
        
        // Calculate average length
        long long average_length = total_length / n;
        
        // Check for large maximum stick length
        check_large_max_length_invariant(mx, average_length);
        
        // Check for high density of maximum length sticks
        check_high_density_max_length_invariant(a[mx], n);
        
        long long pre = 0;
        for (i = mx; i >= 1; i--) {
            if (pre) {
                if (a[i] % 2) {
                    a[i]++;
                    pre = 0;
                } else if (a[i] == 0)
                    pre = 0;
                else
                    pre = 1;
            } else {
                if (a[i] % 2) {
                    a[i]--;
                    pre = 1;
                } else
                    pre = 0;
            }
            a[i] /= 2;
        }
        
        long long ans = 0;
        for (i = mx; i >= 1; i--) {
            for (j = 0; j < a[i]; j++) {
                v.push_back(i);
            }
        }
        
        // Check for large vector operations
        check_large_vector_operations_invariant(v.size(), n);
        
        for (i = 0; i + 1 < v.size(); i += 2) {
            ans += v[i] * v[i + 1];
        }
        
        printf("%lld\n", ans);
    }
    return 0;
}
```

**Explanation of Check Placement:**
- **`check_large_max_length_invariant`**: Placed after calculating `mx` and `average_length` to detect if `mx` is disproportionately large relative to the average stick length.
- **`check_high_density_max_length_invariant`**: After reading inputs and counting lengths, ensures there isn't an overly dominant length.
- **`check_large_vector_operations_invariant`**: Before processing the vector `v` for rectangle area calculation, it checks if vector operations might be causing performance degradation.

These checks will help identify the conditions that lead to slow performance, aiding in optimization efforts and providing insights when used with fuzzers.

