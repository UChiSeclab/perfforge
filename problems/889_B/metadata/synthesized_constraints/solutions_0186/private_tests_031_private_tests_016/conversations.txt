system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = (int)1E9;
char str[100005 * 2];
int cnt[26];
vector<string> ss;
int main() {
  int n;
  cin >> n;
  for (int i = (0); i < (n); i++) {
    scanf("%s", str);
    ss.push_back(str);
    memset(cnt, 0, sizeof(cnt));
    int len = strlen(str);
    for (int j = (0); j < (len); j++) cnt[str[j] - 'a']++;
    for (int c = (0); c < (26); c++)
      if (cnt[c] >= 2) return puts("NO"), 0;
  }
  for (int c = (0); c < (26); c++) {
    vector<pair<int, int> > hits;
    vector<string> newss;
    for (int i = (0); i < (ss.size()); i++) {
      bool merged = false;
      for (int j = (0); j < (ss[i].size()); j++) {
        if (ss[i][j] == 'a' + c) {
          hits.push_back(pair<int, int>(i, j));
          merged = true;
          break;
        }
      }
      if (!merged) newss.push_back(ss[i]);
    }
    if (hits.empty()) continue;
    memset(str, 0, sizeof(str));
    int allb = INF;
    for (int i = (0); i < (hits.size()); i++) {
      int si = hits[i].first, p = hits[i].second, b = 100005 - p;
      allb = min(allb, b);
      for (int j = (0); j < (ss[si].size()); j++) {
        if (str[b + j] == 0)
          str[b + j] = ss[si][j];
        else if (str[b + j] != ss[si][j])
          return puts("NO"), 0;
      }
    }
    ss = newss;
    ss.push_back(str + allb);
    string &lss = ss.back();
    memset(cnt, 0, sizeof(cnt));
    for (int j = (0); j < (lss.size()); j++) cnt[lss[j] - 'a']++;
    for (int c = (0); c < (26); c++)
      if (cnt[c] >= 2) return puts("NO"), 0;
  }
  sort(ss.begin(), ss.end());
  for (int i = (0); i < (ss.size()); i++) printf("%s", ss[i].c_str());
  puts("");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
za
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
r
s
t
u
v
w
x
y
z


(G.2) Fast Input

2
aa
b


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = (int)1E9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char str[100005 * 2]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[26]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> ss; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (n); i++) { /* line 10 slow_hit_count: 26, fast_hit_count: 1 */
    scanf("%s", str); /* line 11 slow_hit_count: 25, fast_hit_count: 1 */
    ss.push_back(str); /* line 12 slow_hit_count: 25, fast_hit_count: 1 */
    memset(cnt, 0, sizeof(cnt)); /* line 13 slow_hit_count: 25, fast_hit_count: 1 */
    int len = strlen(str); /* line 14 slow_hit_count: 25, fast_hit_count: 1 */
    for (int j = (0); j < (len); j++) cnt[str[j] - 'a']++; /* line 15 slow_hit_count: 51, fast_hit_count: 3 */
    for (int c = (0); c < (26); c++) /* line 16 slow_hit_count: 675, fast_hit_count: 1 */
      if (cnt[c] >= 2) return puts("NO"), 0; /* line 17 slow_hit_count: 650, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int c = (0); c < (26); c++) { /* line 19 slow_hit_count: 27, fast_hit_count: 0 */
    vector<pair<int, int> > hits; /* line 20 slow_hit_count: 26, fast_hit_count: 0 */
    vector<string> newss; /* line 21 slow_hit_count: 26, fast_hit_count: 0 */
    for (int i = (0); i < (ss.size()); i++) { /* line 22 slow_hit_count: 676, fast_hit_count: 0 */
      bool merged = false; /* line 23 slow_hit_count: 650, fast_hit_count: 0 */
      for (int j = (0); j < (ss[i].size()); j++) { /* line 24 slow_hit_count: 1299, fast_hit_count: 0 */
        if (ss[i][j] == 'a' + c) { /* line 25 slow_hit_count: 675, fast_hit_count: 0 */
          hits.push_back(pair<int, int>(i, j)); /* line 26 slow_hit_count: 26, fast_hit_count: 0 */
          merged = true; /* line 27 slow_hit_count: 26, fast_hit_count: 0 */
          break; /* line 28 slow_hit_count: 26, fast_hit_count: 0 */
        } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      if (!merged) newss.push_back(ss[i]); /* line 31 slow_hit_count: 650, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    if (hits.empty()) continue; /* line 33 slow_hit_count: 26, fast_hit_count: 0 */
    memset(str, 0, sizeof(str)); /* line 34 slow_hit_count: 25, fast_hit_count: 0 */
    int allb = INF; /* line 35 slow_hit_count: 25, fast_hit_count: 0 */
    for (int i = (0); i < (hits.size()); i++) { /* line 36 slow_hit_count: 51, fast_hit_count: 0 */
      int si = hits[i].first, p = hits[i].second, b = 100005 - p; /* line 37 slow_hit_count: 26, fast_hit_count: 0 */
      allb = min(allb, b); /* line 38 slow_hit_count: 26, fast_hit_count: 0 */
      for (int j = (0); j < (ss[si].size()); j++) { /* line 39 slow_hit_count: 54, fast_hit_count: 0 */
        if (str[b + j] == 0) /* line 40 slow_hit_count: 28, fast_hit_count: 0 */
          str[b + j] = ss[si][j]; /* line 41 slow_hit_count: 27, fast_hit_count: 0 */
        else if (str[b + j] != ss[si][j]) /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
          return puts("NO"), 0; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    ss = newss; /* line 46 slow_hit_count: 25, fast_hit_count: 0 */
    ss.push_back(str + allb); /* line 47 slow_hit_count: 25, fast_hit_count: 0 */
    string &lss = ss.back(); /* line 48 slow_hit_count: 25, fast_hit_count: 0 */
    memset(cnt, 0, sizeof(cnt)); /* line 49 slow_hit_count: 25, fast_hit_count: 0 */
    for (int j = (0); j < (lss.size()); j++) cnt[lss[j] - 'a']++; /* line 50 slow_hit_count: 52, fast_hit_count: 0 */
    for (int c = (0); c < (26); c++) /* line 51 slow_hit_count: 675, fast_hit_count: 0 */
      if (cnt[c] >= 2) return puts("NO"), 0; /* line 52 slow_hit_count: 650, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  sort(ss.begin(), ss.end()); /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = (0); i < (ss.size()); i++) printf("%s", ss[i].c_str()); /* line 55 slow_hit_count: 25, fast_hit_count: 0 */
  puts(""); /* line 56 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the slow performance for the given C program, we need to analyze the line-level hit counts from both fast and slow inputs. By identifying where the slow input incurs significantly more hits than the fast input, we can pinpoint which sections of the code are potential performance bottlenecks.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Lines with High Discrepancy in Hit Counts:**
   - **Line 10 (`for` loop over `n`):** Slow input hit count is 26, whereas fast input hit count is 1. This indicates that the loop executes for each input string, which is expected given the slow input size is larger.
   - **Lines 16-17 (`for` loop over character counts):** The hit count for the slow input is 675 and 650, respectively, compared to 1 for the fast input. This suggests repeated checks for duplicate characters in the strings, which could be inefficient if strings are long or numerous.
   - **Lines 19-52 (Outer `for` loop over characters and associated operations):** High hit counts here indicate that the program iterates over character occurrences and attempts to merge strings based on these occurrences. The nested loops and operations within this section are likely contributing to the slowdown.

2. **Potential Performance Issues:**
   - **Repeated Character Count Checks:** The program spends a lot of time checking character counts, especially if each string in the input has potential duplicates.
   - **Merge Operations:** The merging of strings based on character matches involves nested loops (lines 22-31) and manipulations (lines 36-52), resulting in a high computational cost.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are the natural language performance invariants that describe conditions under which the program is likely to enter a slow path:

1. **Duplicate Character Frequency in Strings:**
   - **Invariant:** "When input strings frequently contain duplicate characters, the program spends excessive time checking and returning 'NO' early, impacting performance due to repeated character count evaluations."
   - **Reason:** The high hit count for character checks suggests that the presence of duplicate characters leads to unnecessary computations.

2. **Inefficient Merging Due to Sparse Character Matches:**
   - **Invariant:** "If the input strings are numerous and distinct (e.g., single or few characters each), the merging operations can become inefficient, leading to performance degradation as the program tries to concatenate strings based on character positions."
   - **Reason:** The slow input shows that when strings are sparse and distinct, the program over-iterates during character position checks and merges, causing unnecessary complexity.

3. **Excessive Iterations Over Distinct Characters:**
   - **Invariant:** "For inputs where each string consists of unique and non-repeating characters, the code's attempt to merge and check all character positions results in excessive iterations, slowing the overall execution."
   - **Reason:** The line-level hit counts indicate that the outer loop over characters incurs high costs when strings have unique characters, leading to redundant checks.

These performance invariants help in identifying key areas where the program's performance can degrade, aligning with the observed behavior in the provided slow input scenario.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 as per the given tasks:

### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets that implement the performance-checking conditions based on the natural language invariants derived earlier.

1. **Checker for Duplicate Character Frequency in Strings:**

```cpp
void check_duplicate_characters_invariant(int *cnt) {
    for (int c = 0; c < 26; c++) {
        if (cnt[c] >= 2) {
            cerr << "Warning: Performance bottleneck condition triggered - duplicate character detected!" << endl;
            abort();
        }
    }
}
```

2. **Checker for Inefficient Merging Due to Sparse Character Matches:**

```cpp
void check_sparse_character_matches(int num_strings, int *cnt) {
    if (num_strings > 20) { // Arbitrary threshold for demonstration
        for (int c = 0; c < 26; c++) {
            if (cnt[c] == 0) {
                cerr << "Warning: Performance bottleneck condition triggered - inefficient merging due to sparse matches!" << endl;
                abort();
            }
        }
    }
}
```

3. **Checker for Excessive Iterations Over Distinct Characters:**

```cpp
void check_excessive_iterations(int string_length, int num_strings) {
    if (string_length > 50 && num_strings > 10) { // Arbitrary thresholds for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations over distinct characters!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Conditional Checks into the Original Program

Now, we will integrate these checker functions into the original C++ code, ensuring they are called at appropriate points to detect performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = (int)1E9;
char str[100005 * 2];
int cnt[26];
vector<string> ss;

void check_duplicate_characters_invariant(int *cnt) {
    for (int c = 0; c < 26; c++) {
        if (cnt[c] >= 2) {
            cerr << "Warning: Performance bottleneck condition triggered - duplicate character detected!" << endl;
            abort();
        }
    }
}

void check_sparse_character_matches(int num_strings, int *cnt) {
    if (num_strings > 20) { // Arbitrary threshold for demonstration
        for (int c = 0; c < 26; c++) {
            if (cnt[c] == 0) {
                cerr << "Warning: Performance bottleneck condition triggered - inefficient merging due to sparse matches!" << endl;
                abort();
            }
        }
    }
}

void check_excessive_iterations(int string_length, int num_strings) {
    if (string_length > 50 && num_strings > 10) { // Arbitrary thresholds for demonstration
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations over distinct characters!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        scanf("%s", str);
        ss.push_back(str);
        memset(cnt, 0, sizeof(cnt));
        int len = strlen(str);
        for (int j = 0; j < len; j++) cnt[str[j] - 'a']++;
        
        // Check for duplicate characters in each string
        check_duplicate_characters_invariant(cnt);

        // Check for excessive iterations over distinct characters
        check_excessive_iterations(len, n);
    }

    for (int c = 0; c < 26; c++) {
        vector<pair<int, int>> hits;
        vector<string> newss;
        for (int i = 0; i < ss.size(); i++) {
            bool merged = false;
            for (int j = 0; j < ss[i].size(); j++) {
                if (ss[i][j] == 'a' + c) {
                    hits.push_back(pair<int, int>(i, j));
                    merged = true;
                    break;
                }
            }
            if (!merged) newss.push_back(ss[i]);
        }
        
        // Check for sparse character matches
        check_sparse_character_matches(ss.size(), cnt);

        if (hits.empty()) continue;
        memset(str, 0, sizeof(str));
        int allb = INF;
        for (int i = 0; i < hits.size(); i++) {
            int si = hits[i].first, p = hits[i].second, b = 100005 - p;
            allb = min(allb, b);
            for (int j = 0; j < ss[si].size(); j++) {
                if (str[b + j] == 0)
                    str[b + j] = ss[si][j];
                else if (str[b + j] != ss[si][j])
                    return puts("NO"), 0;
            }
        }
        ss = newss;
        ss.push_back(str + allb);
        string &lss = ss.back();
        memset(cnt, 0, sizeof(cnt));
        for (int j = 0; j < lss.size(); j++) cnt[lss[j] - 'a']++;
        check_duplicate_characters_invariant(cnt);
    }
    
    sort(ss.begin(), ss.end());
    for (int i = 0; i < ss.size(); i++) printf("%s", ss[i].c_str());
    puts("");
    return 0;
}
```

**Explanation of Changes:**
- **Checker Functions:** Three checker functions are added to check for performance bottlenecks identified in Phase 2.
- **Integration Points:** Checkers are called:
  - After counting characters in each string to catch duplicate character issues.
  - Before and after major loops to check for excessive iterations and inefficient merging based on sparse character matches.
  
These enhancements help detect performance issues at runtime, focusing on the critical paths identified during the analysis.

