system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
string A[26], s;
bool vis[26];
int n, h[26], q[26];
bool cmp(int x, int y) { return A[x] < A[y]; }
int main() {
  scanf("%d", &n);
  for (int i = 0; i <= 25; ++i) h[i] = 0;
  for (int cas = 1; cas <= n; ++cas) {
    cin >> s;
    int len = s.length();
    for (int i = 0; i <= len - 1; ++i) {
      h[s[i] - 'a']++;
      if (h[s[i] - 'a'] > 1) {
        printf("NO\n");
        return 0;
      }
    }
    for (int i = 0; i <= 25; ++i) h[i] = 0;
    for (int i = 0; i <= len - 1; ++i) {
      int c = s[i] - 'a';
      if (A[c].length() == 0) A[c] = A[c] + (char)('a' + c);
      int pos = 0, lenA = A[c].length();
      for (int j = 0; j <= lenA - 1; ++j)
        if (A[c][j] == 'a' + c) pos = j;
      int l = i - 1, r = pos - 1;
      for (; l >= 0 && r >= 0; l--, r--)
        if (s[l] != A[c][r]) {
          printf("NO\n");
          return 0;
        }
      int L = l;
      l = i + 1, r = pos + 1;
      for (; l < len && r < lenA; l++, r++)
        if (s[l] != A[c][r]) {
          printf("NO\n");
          return 0;
        }
      int R = l;
      for (int j = L; j >= 0; --j) A[c] = s[j] + A[c];
      for (int j = R; j <= len - 1; ++j) A[c] = A[c] + s[j];
    }
  }
  for (int i = 0; i <= 25; ++i) vis[i] = true;
  for (int i = 25; i >= 0; --i) {
    for (int j = i + 1; j <= 25; ++j) {
      for (int k = 0; k <= 25; ++k) h[k] = 0;
      int leni = A[i].length(), lenj = A[j].length();
      for (int k = 0; k <= leni - 1; ++k) ++h[A[i][k] - 'a'];
      for (int k = 0; k <= lenj - 1; ++k) ++h[A[j][k] - 'a'];
      int let = -1, posi = 0, posj = 0;
      for (int k = 0; k <= 25; ++k)
        if (h[k] > 1) {
          let = k;
          break;
        }
      if (let < 0) continue;
      for (int k = 0; k <= leni - 1; ++k)
        if (A[i][k] == 'a' + let) posi = k;
      for (int k = 0; k <= lenj - 1; ++k)
        if (A[j][k] == 'a' + let) posj = k;
      int l = posi - 1, r = posj - 1;
      for (; l >= 0 && r >= 0; l--, r--)
        if (A[i][l] != A[j][r]) {
          printf("NO\n");
          return 0;
        }
      int L = r;
      l = posi + 1, r = posj + 1;
      for (; l < leni && r < lenj; ++l, ++r)
        if (A[i][l] != A[j][r]) {
          printf("NO\n");
          return 0;
        }
      int R = r;
      for (int k = L; k >= 0; --k) A[i] = A[j][k] + A[i];
      for (int k = R; k <= lenj - 1; ++k) A[i] = A[i] + A[j][k];
    }
    for (int j = 0; j <= 25; ++j) h[j] = 0;
    for (int j = 0; j <= (int)A[i].length() - 1; ++j) ++h[A[i][j] - 'a'];
    for (int j = 0; j <= 25; ++j)
      if (h[j] > 1) {
        printf("NO\n");
        return 0;
      }
  }
  for (int i = 1; i <= 25; ++i)
    for (int j = 0; j <= i - 1; ++j)
      if (vis[j]) {
        for (int k = 0; k <= 25; ++k) h[k] = 0;
        int leni = A[i].length(), lenj = A[j].length();
        for (int k = 0; k <= leni - 1; ++k) ++h[A[i][k] - 'a'];
        for (int k = 0; k <= lenj - 1; ++k) ++h[A[j][k] - 'a'];
        int let = -1, posi = 0, posj = 0;
        for (int k = 0; k <= 25; ++k)
          if (h[k] > 1) {
            let = k;
            break;
          }
        if (let < 0) continue;
        vis[i] = false;
        break;
      }
  for (int i = 0; i <= 25; ++i) q[i] = i;
  sort(q, q + 26, cmp);
  for (int i = 0; i <= 25; ++i)
    if (vis[q[i]]) cout << A[q[i]];
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

16
ngv
ng
jngvu
g
gv
vu
i
n
jngv
u
ngvu
jng
jn
l
j
gvu


(G.2) Fast Input

16
ngv
gn
jngvu
g
gv
vu
i
n
jngv
u
ngvu
jng
jn
l
j
gvu


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
string A[26], s; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[26]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, h[26], q[26]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(int x, int y) { return A[x] < A[y]; } /* line 6 slow_hit_count: 117, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 25; ++i) h[i] = 0; /* line 9 slow_hit_count: 27, fast_hit_count: 27 */
  for (int cas = 1; cas <= n; ++cas) { /* line 10 slow_hit_count: 17, fast_hit_count: 2 */
    cin >> s; /* line 11 slow_hit_count: 16, fast_hit_count: 2 */
    int len = s.length(); /* line 12 slow_hit_count: 16, fast_hit_count: 2 */
    for (int i = 0; i <= len - 1; ++i) { /* line 13 slow_hit_count: 52, fast_hit_count: 7 */
      h[s[i] - 'a']++; /* line 14 slow_hit_count: 36, fast_hit_count: 5 */
      if (h[s[i] - 'a'] > 1) { /* line 15 slow_hit_count: 36, fast_hit_count: 5 */
        printf("NO\n"); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
        return 0; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i <= 25; ++i) h[i] = 0; /* line 20 slow_hit_count: 432, fast_hit_count: 54 */
    for (int i = 0; i <= len - 1; ++i) { /* line 21 slow_hit_count: 52, fast_hit_count: 5 */
      int c = s[i] - 'a'; /* line 22 slow_hit_count: 36, fast_hit_count: 4 */
      if (A[c].length() == 0) A[c] = A[c] + (char)('a' + c); /* line 23 slow_hit_count: 36, fast_hit_count: 4 */
      int pos = 0, lenA = A[c].length(); /* line 24 slow_hit_count: 36, fast_hit_count: 4 */
      for (int j = 0; j <= lenA - 1; ++j) /* line 25 slow_hit_count: 178, fast_hit_count: 10 */
        if (A[c][j] == 'a' + c) pos = j; /* line 26 slow_hit_count: 142, fast_hit_count: 6 */
      int l = i - 1, r = pos - 1; /* line 27 slow_hit_count: 36, fast_hit_count: 4 */
      for (; l >= 0 && r >= 0; l--, r--) /* line 28 slow_hit_count: 61, fast_hit_count: 4 */
        if (s[l] != A[c][r]) { /* line 29 slow_hit_count: 25, fast_hit_count: 0 */
          printf("NO\n"); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
          return 0; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      int L = l; /* line 33 slow_hit_count: 36, fast_hit_count: 4 */
      l = i + 1, r = pos + 1; /* line 34 slow_hit_count: 36, fast_hit_count: 4 */
      for (; l < len && r < lenA; l++, r++) /* line 35 slow_hit_count: 61, fast_hit_count: 4 */
        if (s[l] != A[c][r]) { /* line 36 slow_hit_count: 25, fast_hit_count: 1 */
          printf("NO\n"); /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
          return 0; /* line 38 slow_hit_count: 0, fast_hit_count: 1 */
        } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      int R = l; /* line 40 slow_hit_count: 36, fast_hit_count: 3 */
      for (int j = L; j >= 0; --j) A[c] = s[j] + A[c]; /* line 41 slow_hit_count: 46, fast_hit_count: 6 */
      for (int j = R; j <= len - 1; ++j) A[c] = A[c] + s[j]; /* line 42 slow_hit_count: 46, fast_hit_count: 6 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 25; ++i) vis[i] = true; /* line 45 slow_hit_count: 27, fast_hit_count: 0 */
  for (int i = 25; i >= 0; --i) { /* line 46 slow_hit_count: 27, fast_hit_count: 0 */
    for (int j = i + 1; j <= 25; ++j) { /* line 47 slow_hit_count: 351, fast_hit_count: 0 */
      for (int k = 0; k <= 25; ++k) h[k] = 0; /* line 48 slow_hit_count: 8775, fast_hit_count: 0 */
      int leni = A[i].length(), lenj = A[j].length(); /* line 49 slow_hit_count: 325, fast_hit_count: 0 */
      for (int k = 0; k <= leni - 1; ++k) ++h[A[i][k] - 'a']; /* line 50 slow_hit_count: 636, fast_hit_count: 0 */
      for (int k = 0; k <= lenj - 1; ++k) ++h[A[j][k] - 'a']; /* line 51 slow_hit_count: 689, fast_hit_count: 0 */
      int let = -1, posi = 0, posj = 0; /* line 52 slow_hit_count: 325, fast_hit_count: 0 */
      for (int k = 0; k <= 25; ++k) /* line 53 slow_hit_count: 8575, fast_hit_count: 0 */
        if (h[k] > 1) { /* line 54 slow_hit_count: 8260, fast_hit_count: 0 */
          let = k; /* line 55 slow_hit_count: 10, fast_hit_count: 0 */
          break; /* line 56 slow_hit_count: 10, fast_hit_count: 0 */
        } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      if (let < 0) continue; /* line 58 slow_hit_count: 325, fast_hit_count: 0 */
      for (int k = 0; k <= leni - 1; ++k) /* line 59 slow_hit_count: 60, fast_hit_count: 0 */
        if (A[i][k] == 'a' + let) posi = k; /* line 60 slow_hit_count: 50, fast_hit_count: 0 */
      for (int k = 0; k <= lenj - 1; ++k) /* line 61 slow_hit_count: 60, fast_hit_count: 0 */
        if (A[j][k] == 'a' + let) posj = k; /* line 62 slow_hit_count: 50, fast_hit_count: 0 */
      int l = posi - 1, r = posj - 1; /* line 63 slow_hit_count: 10, fast_hit_count: 0 */
      for (; l >= 0 && r >= 0; l--, r--) /* line 64 slow_hit_count: 30, fast_hit_count: 0 */
        if (A[i][l] != A[j][r]) { /* line 65 slow_hit_count: 20, fast_hit_count: 0 */
          printf("NO\n"); /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
          return 0; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      int L = r; /* line 69 slow_hit_count: 10, fast_hit_count: 0 */
      l = posi + 1, r = posj + 1; /* line 70 slow_hit_count: 10, fast_hit_count: 0 */
      for (; l < leni && r < lenj; ++l, ++r) /* line 71 slow_hit_count: 30, fast_hit_count: 0 */
        if (A[i][l] != A[j][r]) { /* line 72 slow_hit_count: 20, fast_hit_count: 0 */
          printf("NO\n"); /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
          return 0; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
      int R = r; /* line 76 slow_hit_count: 10, fast_hit_count: 0 */
      for (int k = L; k >= 0; --k) A[i] = A[j][k] + A[i]; /* line 77 slow_hit_count: 10, fast_hit_count: 0 */
      for (int k = R; k <= lenj - 1; ++k) A[i] = A[i] + A[j][k]; /* line 78 slow_hit_count: 10, fast_hit_count: 0 */
    } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j <= 25; ++j) h[j] = 0; /* line 80 slow_hit_count: 702, fast_hit_count: 0 */
    for (int j = 0; j <= (int)A[i].length() - 1; ++j) ++h[A[i][j] - 'a']; /* line 81 slow_hit_count: 53, fast_hit_count: 0 */
    for (int j = 0; j <= 25; ++j) /* line 82 slow_hit_count: 702, fast_hit_count: 0 */
      if (h[j] > 1) { /* line 83 slow_hit_count: 676, fast_hit_count: 0 */
        printf("NO\n"); /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
        return 0; /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 25; ++i) /* line 88 slow_hit_count: 26, fast_hit_count: 0 */
    for (int j = 0; j <= i - 1; ++j) /* line 89 slow_hit_count: 311, fast_hit_count: 0 */
      if (vis[j]) { /* line 90 slow_hit_count: 290, fast_hit_count: 0 */
        for (int k = 0; k <= 25; ++k) h[k] = 0; /* line 91 slow_hit_count: 6993, fast_hit_count: 0 */
        int leni = A[i].length(), lenj = A[j].length(); /* line 92 slow_hit_count: 259, fast_hit_count: 0 */
        for (int k = 0; k <= leni - 1; ++k) ++h[A[i][k] - 'a']; /* line 93 slow_hit_count: 447, fast_hit_count: 0 */
        for (int k = 0; k <= lenj - 1; ++k) ++h[A[j][k] - 'a']; /* line 94 slow_hit_count: 378, fast_hit_count: 0 */
        int let = -1, posi = 0, posj = 0; /* line 95 slow_hit_count: 259, fast_hit_count: 0 */
        for (int k = 0; k <= 25; ++k) /* line 96 slow_hit_count: 6913, fast_hit_count: 0 */
          if (h[k] > 1) { /* line 97 slow_hit_count: 6658, fast_hit_count: 0 */
            let = k; /* line 98 slow_hit_count: 4, fast_hit_count: 0 */
            break; /* line 99 slow_hit_count: 4, fast_hit_count: 0 */
          } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
        if (let < 0) continue; /* line 101 slow_hit_count: 259, fast_hit_count: 0 */
        vis[i] = false; /* line 102 slow_hit_count: 4, fast_hit_count: 0 */
        break; /* line 103 slow_hit_count: 4, fast_hit_count: 0 */
      } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 25; ++i) q[i] = i; /* line 105 slow_hit_count: 27, fast_hit_count: 0 */
  sort(q, q + 26, cmp); /* line 106 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i <= 25; ++i) /* line 107 slow_hit_count: 27, fast_hit_count: 0 */
    if (vis[q[i]]) cout << A[q[i]]; /* line 108 slow_hit_count: 26, fast_hit_count: 0 */
  cout << endl; /* line 109 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 110 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 111 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Based on the hit count information, we can identify several areas in the code that receive significantly higher hit counts for the slow input compared to the fast input:

1. **Line 10 and 11:** The outer loop and reading input have similar hit counts. However, the inner logic after reading the input seems to be significantly more complex for the slow input.

2. **Line 25 to 52:** The loop and operations to build or compare strings hit frequently in the slow input, especially the nested loops (lines 25 and 28). This suggests that string manipulations and comparisons are potentially expensive operations.

3. **Lines 47-83:** There are multiple nested loops used to compare strings and build character frequency counts. The loops (especially lines 53-58 and 80-83) have extremely high hit counts on the slow input, suggesting these operations are repeated excessively.

4. **Lines 88-104:** Similar to the above section, this part involves nested loops and condition checks with high hit counts on the slow run, indicating a potential inefficiency due to repeated operations.

### Phase 2: Deriving Performance-Characterizing Invariants

Here are some potential performance invariants in natural language for this program:

1. **String Comparison Complexity:**
   - **Invariant:** "If the algorithm involves comparing or merging substrings many times with the same characters, especially in nested loops, it can slow down computation. This is exacerbated when the number of characters with frequent overlap is high."
   - **Implication:** The nested loops for checking and merging strings by character frequency can become bottlenecks when there are repeated characters across different strings being processed, leading to excessive comparisons and conditional checks.

2. **Character Frequency Checks:**
   - **Invariant:** "If character frequency checks are performed repeatedly across large and complex sets of strings, the hit count of these operations can be excessive, leading to a slowdown."
   - **Implication:** The high number of loops to set and reset character frequency counts across strings (often with similar structures) implies significant overhead in scenarios where characters repeat in different contexts but require exhaustive checking.

3. **Nested Loop Overheads:**
   - **Invariant:** "If nested loops operate on data structures where elements are repeatedly accessed or modified, especially under conditions where the data structure's size approaches the input constraint limits, performance decreases."
   - **Implication:** The complex nature of nested loops operating on string arrays and character mappings can lead to performance hits, especially when processing becomes non-trivial due to many overlapping conditions or combined strings.

4. **String Construction and Merging:**
   - **Invariant:** "Excessive concatenation or modification of strings within loop bodies can degrade performance, particularly if operations are conditioned on complex multilevel checks."
   - **Implication:** The process of concatenating or adjusting strings (lines 41-42 and 77-78) can lead to performance degradation, especially when the strings undergo frequent modifications through various iterations.

By focusing on these performance-triggering conditions, we can abstractly understand what input scenarios and code paths may cause slowdowns without specific slow inputs, thus aiding future optimizations and improvements.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the natural language invariants derived in Phase 2, here are the checker functions implemented in C++:

1. **String Comparison Complexity:**
   ```cpp
   void check_string_comparison_invariant(int loopIterations, int repeatedComparisons) {
       if (loopIterations > 1000 && repeatedComparisons > 100) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive string comparisons!" << endl;
           abort();
       }
   }
   ```

2. **Character Frequency Checks:**
   ```cpp
   void check_character_frequency_invariant(int frequencyChecks, int uniqueChars) {
       if (frequencyChecks > 5000 && uniqueChars < 5) {
           cerr << "Warning: Performance bottleneck condition triggered - frequent character checks on similar strings!" << endl;
           abort();
       }
   }
   ```

3. **Nested Loop Overheads:**
   ```cpp
   void check_nested_loop_invariant(int nestedLoops, int stringSize) {
       if (nestedLoops > 500 && stringSize > 50) {
           cerr << "Warning: Performance bottleneck condition triggered - nested loops on large data structures!" << endl;
           abort();
       }
   }
   ```

4. **String Construction and Merging:**
   ```cpp
   void check_string_construction_invariant(int concatenationOps, int maxStringLength) {
       if (concatenationOps > 200 && maxStringLength > 100) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive string concatenations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into the Original C++ Code

Below is the instrumented C++ code with the performance-characterizing invariants integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

string A[26], s;
bool vis[26];
int n, h[26], q[26];

bool cmp(int x, int y) { return A[x] < A[y]; }

void check_string_comparison_invariant(int loopIterations, int repeatedComparisons) {
    if (loopIterations > 1000 && repeatedComparisons > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive string comparisons!" << endl;
        abort();
    }
}

void check_character_frequency_invariant(int frequencyChecks, int uniqueChars) {
    if (frequencyChecks > 5000 && uniqueChars < 5) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent character checks on similar strings!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int nestedLoops, int stringSize) {
    if (nestedLoops > 500 && stringSize > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - nested loops on large data structures!" << endl;
        abort();
    }
}

void check_string_construction_invariant(int concatenationOps, int maxStringLength) {
    if (concatenationOps > 200 && maxStringLength > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive string concatenations!" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &n);
    int loopIterations = 0, repeatedComparisons = 0, frequencyChecks = 0, uniqueChars = 0;
    int nestedLoops = 0, concatenationOps = 0, maxStringLength = 0;

    for (int i = 0; i <= 25; ++i) h[i] = 0;
    for (int cas = 1; cas <= n; ++cas) {
        cin >> s;
        int len = s.length();
        for (int i = 0; i <= len - 1; ++i) {
            h[s[i] - 'a']++;
            if (h[s[i] - 'a'] > 1) {
                printf("NO\n");
                return 0;
            }
        }
        for (int i = 0; i <= 25; ++i) h[i] = 0;
        for (int i = 0; i <= len - 1; ++i) {
            int c = s[i] - 'a';
            if (A[c].length() == 0) A[c] = A[c] + (char)('a' + c);
            int pos = 0, lenA = A[c].length();
            for (int j = 0; j <= lenA - 1; ++j) {
                if (A[c][j] == 'a' + c) pos = j;
                repeatedComparisons++;
            }
            int l = i - 1, r = pos - 1;
            for (; l >= 0 && r >= 0; l--, r--) {
                if (s[l] != A[c][r]) {
                    printf("NO\n");
                    return 0;
                }
                loopIterations++;
            }
            int L = l;
            l = i + 1, r = pos + 1;
            for (; l < len && r < lenA; l++, r++) {
                if (s[l] != A[c][r]) {
                    printf("NO\n");
                    return 0;
                }
                loopIterations++;
            }
            int R = l;
            for (int j = L; j >= 0; --j) {
                A[c] = s[j] + A[c];
                concatenationOps++;
            }
            for (int j = R; j <= len - 1; ++j) {
                A[c] = A[c] + s[j];
                concatenationOps++;
            }
        }
    }

    for (int i = 0; i <= 25; ++i) vis[i] = true;
    for (int i = 25; i >= 0; --i) {
        for (int j = i + 1; j <= 25; ++j) {
            for (int k = 0; k <= 25; ++k) h[k] = 0;
            int leni = A[i].length(), lenj = A[j].length();
            for (int k = 0; k <= leni - 1; ++k) ++h[A[i][k] - 'a'];
            for (int k = 0; k <= lenj - 1; ++k) ++h[A[j][k] - 'a'];
            int let = -1, posi = 0, posj = 0;
            for (int k = 0; k <= 25; ++k) {
                frequencyChecks++;
                if (h[k] > 1) {
                    let = k;
                    break;
                }
            }
            if (let < 0) continue;
            for (int k = 0; k <= leni - 1; ++k)
                if (A[i][k] == 'a' + let) posi = k;
            for (int k = 0; k <= lenj - 1; ++k)
                if (A[j][k] == 'a' + let) posj = k;
            int l = posi - 1, r = posj - 1;
            for (; l >= 0 && r >= 0; l--, r--) {
                if (A[i][l] != A[j][r]) {
                    printf("NO\n");
                    return 0;
                }
                nestedLoops++;
            }
            int L = r;
            l = posi + 1, r = posj + 1;
            for (; l < leni && r < lenj; ++l, ++r) {
                if (A[i][l] != A[j][r]) {
                    printf("NO\n");
                    return 0;
                }
                nestedLoops++;
            }
            int R = r;
            for (int k = L; k >= 0; --k) A[i] = A[j][k] + A[i];
            for (int k = R; k <= lenj - 1; ++k) A[i] = A[i] + A[j][k];
        }
        for (int j = 0; j <= 25; ++j) h[j] = 0;
        for (int j = 0; j <= (int)A[i].length() - 1; ++j) ++h[A[i][j] - 'a'];
        for (int j = 0; j <= 25; ++j)
            if (h[j] > 1) {
                printf("NO\n");
                return 0;
            }
    }

    for (int i = 1; i <= 25; ++i)
        for (int j = 0; j <= i - 1; ++j)
            if (vis[j]) {
                for (int k = 0; k <= 25; ++k) h[k] = 0;
                int leni = A[i].length(), lenj = A[j].length();
                for (int k = 0; k <= leni - 1; ++k) ++h[A[i][k] - 'a'];
                for (int k = 0; k <= lenj - 1; ++k) ++h[A[j][k] - 'a'];
                int let = -1, posi = 0, posj = 0;
                for (int k = 0; k <= 25; ++k)
                    if (h[k] > 1) {
                        let = k;
                        break;
                    }
                if (let < 0) continue;
                vis[i] = false;
                break;
            }
    for (int i = 0; i <= 25; ++i) q[i] = i;
    sort(q, q + 26, cmp);
    for (int i = 0; i <= 25; ++i)
        if (vis[q[i]]) cout << A[q[i]];
    cout << endl;

    // Check invariants at the end
    check_string_comparison_invariant(loopIterations, repeatedComparisons);
    check_character_frequency_invariant(frequencyChecks, uniqueChars);
    check_nested_loop_invariant(nestedLoops, s.length());
    check_string_construction_invariant(concatenationOps, maxStringLength);

    return 0;
}
```

### Explanation of Check Placement

- The checks are placed after the major computational sections to ensure they do not add overhead within the loops themselves.
- The counters (`loopIterations`, `repeatedComparisons`, etc.) are incremented throughout the loops to capture relevant metrics.
- The checks themselves are designed to abort if a bottleneck condition is triggered, helping with early detection of performance issues during testing and fuzzing.

