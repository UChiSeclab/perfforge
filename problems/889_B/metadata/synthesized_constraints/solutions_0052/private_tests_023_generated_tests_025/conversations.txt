system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class X, class Y>
void minimize(X &x, const Y &y) {
  if (x > y) x = y;
}
template <class X, class Y>
void maximize(X &x, const Y &y) {
  if (x < y) x = y;
}
template <class T>
T Abs(const T &x) {
  return (x < 0 ? -x : x);
}
const string NO = "NO";
void answerNO(void) {
  cout << NO << endl;
  exit(EXIT_SUCCESS);
}
bool havePath[226][226], need[226][226];
int countIn[226], countOut[226];
bool compare(const string &s, const string &t) { return s + t < t + s; }
void process(void) {
  int needChar = 0;
  int n;
  cin >> n;
  for (int love = 0, _n = (n); love < _n; love = love + 1) {
    string s;
    cin >> s;
    int mask = 0;
    for (__typeof((s).begin()) it = (s).begin(); it != (s).end(); it++) {
      if ((((mask) >> (*it - 'a')) & 1)) answerNO();
      mask |= (1LL << (*it - 'a'));
    }
    for (int i = 0, _n = ((int)s.size() - 1); i < _n; i = i + 1) {
      int x = s[i] - 'a';
      int y = s[i + 1] - 'a';
      need[x][y] = true;
    }
    needChar |= mask;
  }
  for (int i = 0, _n = (26); i < _n; i = i + 1) havePath[i][i] = true;
  for (int i = 0, _n = (26); i < _n; i = i + 1)
    for (int j = 0, _n = (26); j < _n; j = j + 1) havePath[i][j] |= need[i][j];
  for (int k = 0, _n = (26); k < _n; k = k + 1)
    for (int i = 0, _n = (26); i < _n; i = i + 1)
      for (int j = 0, _n = (26); j < _n; j = j + 1)
        havePath[i][j] |= havePath[i][k] && havePath[k][j];
  for (int i = 0, _n = (26); i < _n; i = i + 1)
    for (int j = 0, _n = (26); j < _n; j = j + 1)
      if (i != j && havePath[i][j] && havePath[j][i]) answerNO();
  for (int i = 0, _n = (26); i < _n; i = i + 1)
    for (int j = 0, _n = (26); j < _n; j = j + 1)
      if (need[i][j]) {
        countIn[j]++;
        countOut[i]++;
      }
  for (int i = 0, _n = (26); i < _n; i = i + 1)
    if (countIn[i] > 1 || countOut[i] > 1) answerNO();
  vector<string> str;
  for (int i = 0, _n = (26); i < _n; i = i + 1)
    if (countOut[i] > 0 && countIn[i] == 0) {
      int tmp = i;
      string s;
      while (countOut[tmp] > 0) {
        s.push_back(tmp + 'a');
        for (int j = 0, _n = (26); j < _n; j = j + 1)
          if (need[tmp][j]) {
            tmp = j;
            break;
          }
      }
      s.push_back(tmp + 'a');
      str.push_back(s);
    }
  for (int i = 0, _n = (26); i < _n; i = i + 1)
    if ((((needChar) >> (i)) & 1) && countIn[i] == 0 && countOut[i] == 0)
      str.push_back(string(1, i + 'a'));
  sort((str).begin(), (str).end(), compare);
  for (__typeof((str).begin()) it = (str).begin(); it != (str).end(); it++)
    cout << *it;
  cout << endl;
}
int main(void) {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  process();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

33
aqzwlyfjcuktsr
gidpnvaqzwlyfj
vaqzwlyf
pnvaqzwlyfjcuktsrbx
jcuktsrbxme
uktsrb
hgidpnvaqzw
vaqzwlyfjcu
hgid
vaqzwlyfjcukts
pnvaqzwl
pnvaqzwlyfj
gidpnvaqzwlyfjcukt
aqzwlyfjcuktsrbxme
gidpnvaqzwlyfjcuktsrb
aqzw
lyfjcuktsrbxme
rbxm
wlyfjcukt
pnvaqzwlyfjcuktsr
nvaqzwly
d
zwlyf
hgidpnva
gidpnvaqzwlyfjcuktsrbxm
gidpn
fjcuktsrbxmeo
fjcuktsrbx
gidpnva
zwlyfjc
rb
tsrbxm
dpnvaqzwlyfjcuktsrbxm


(G.2) Fast Input

33
aqzwlyfjcuktsr
gidpnvaqzwlyfj
vaqzwlyf
pnwaqzwlyfjcuktsrbx
jcuktsrbxme
uktsrb
hgidpnvaqzw
vaqzwlyfjcu
hgid
vaqzwlyfjcukts
pnvaqzwl
pnvaqzwlyfj
gidpnvaqzwlyfjcukt
aqzwlyfjcuktsrbxme
gidpnvaqzwlyfjcuktsrb
aqzw
lyfjcuktsrbxme
rbxm
wlyfjcukt
pnvaqzwlyfjcuktsr
nvaqzwly
d
zwlyf
hgidpnva
gidpnvaqzwlyfjcuktsrbxm
gidpn
fjcuktsrbxmeo
fjcuktsrbx
gidpnva
zwlyfjc
rb
tsrbxm
dpnvaqzwlyfjcuktsrbxm


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class X, class Y> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void minimize(X &x, const Y &y) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > y) x = y; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <class X, class Y> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void maximize(X &x, const Y &y) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  if (x < y) x = y; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
T Abs(const T &x) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return (x < 0 ? -x : x); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const string NO = "NO"; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void answerNO(void) { /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
  cout << NO << endl; /* line 17 slow_hit_count: 0, fast_hit_count: 1 */
  exit(EXIT_SUCCESS); /* line 18 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
bool havePath[226][226], need[226][226]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int countIn[226], countOut[226]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
bool compare(const string &s, const string &t) { return s + t < t + s; } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
void process(void) { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int needChar = 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int love = 0, _n = (n); love < _n; love = love + 1) { /* line 27 slow_hit_count: 34, fast_hit_count: 4 */
    string s; /* line 28 slow_hit_count: 33, fast_hit_count: 4 */
    cin >> s; /* line 29 slow_hit_count: 33, fast_hit_count: 4 */
    int mask = 0; /* line 30 slow_hit_count: 33, fast_hit_count: 4 */
    for (__typeof((s).begin()) it = (s).begin(); it != (s).end(); it++) { /* line 31 slow_hit_count: 385, fast_hit_count: 46 */
      if ((((mask) >> (*it - 'a')) & 1)) answerNO(); /* line 32 slow_hit_count: 352, fast_hit_count: 43 */
      mask |= (1LL << (*it - 'a')); /* line 33 slow_hit_count: 352, fast_hit_count: 42 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0, _n = ((int)s.size() - 1); i < _n; i = i + 1) { /* line 35 slow_hit_count: 352, fast_hit_count: 36 */
      int x = s[i] - 'a'; /* line 36 slow_hit_count: 319, fast_hit_count: 33 */
      int y = s[i + 1] - 'a'; /* line 37 slow_hit_count: 319, fast_hit_count: 33 */
      need[x][y] = true; /* line 38 slow_hit_count: 319, fast_hit_count: 33 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    needChar |= mask; /* line 40 slow_hit_count: 33, fast_hit_count: 3 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0, _n = (26); i < _n; i = i + 1) havePath[i][i] = true; /* line 42 slow_hit_count: 27, fast_hit_count: 0 */
  for (int i = 0, _n = (26); i < _n; i = i + 1) /* line 43 slow_hit_count: 27, fast_hit_count: 0 */
    for (int j = 0, _n = (26); j < _n; j = j + 1) havePath[i][j] |= need[i][j]; /* line 44 slow_hit_count: 702, fast_hit_count: 0 */
  for (int k = 0, _n = (26); k < _n; k = k + 1) /* line 45 slow_hit_count: 27, fast_hit_count: 0 */
    for (int i = 0, _n = (26); i < _n; i = i + 1) /* line 46 slow_hit_count: 702, fast_hit_count: 0 */
      for (int j = 0, _n = (26); j < _n; j = j + 1) /* line 47 slow_hit_count: 18252, fast_hit_count: 0 */
        havePath[i][j] |= havePath[i][k] && havePath[k][j]; /* line 48 slow_hit_count: 17576, fast_hit_count: 0 */
  for (int i = 0, _n = (26); i < _n; i = i + 1) /* line 49 slow_hit_count: 27, fast_hit_count: 0 */
    for (int j = 0, _n = (26); j < _n; j = j + 1) /* line 50 slow_hit_count: 702, fast_hit_count: 0 */
      if (i != j && havePath[i][j] && havePath[j][i]) answerNO(); /* line 51 slow_hit_count: 676, fast_hit_count: 0 */
  for (int i = 0, _n = (26); i < _n; i = i + 1) /* line 52 slow_hit_count: 27, fast_hit_count: 0 */
    for (int j = 0, _n = (26); j < _n; j = j + 1) /* line 53 slow_hit_count: 702, fast_hit_count: 0 */
      if (need[i][j]) { /* line 54 slow_hit_count: 676, fast_hit_count: 0 */
        countIn[j]++; /* line 55 slow_hit_count: 25, fast_hit_count: 0 */
        countOut[i]++; /* line 56 slow_hit_count: 25, fast_hit_count: 0 */
      } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0, _n = (26); i < _n; i = i + 1) /* line 58 slow_hit_count: 27, fast_hit_count: 0 */
    if (countIn[i] > 1 || countOut[i] > 1) answerNO(); /* line 59 slow_hit_count: 26, fast_hit_count: 0 */
  vector<string> str; /* line 60 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = 0, _n = (26); i < _n; i = i + 1) /* line 61 slow_hit_count: 27, fast_hit_count: 0 */
    if (countOut[i] > 0 && countIn[i] == 0) { /* line 62 slow_hit_count: 26, fast_hit_count: 0 */
      int tmp = i; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
      string s; /* line 64 slow_hit_count: 2, fast_hit_count: 0 */
      while (countOut[tmp] > 0) { /* line 65 slow_hit_count: 26, fast_hit_count: 0 */
        s.push_back(tmp + 'a'); /* line 66 slow_hit_count: 25, fast_hit_count: 0 */
        for (int j = 0, _n = (26); j < _n; j = j + 1) /* line 67 slow_hit_count: 343, fast_hit_count: 0 */
          if (need[tmp][j]) { /* line 68 slow_hit_count: 343, fast_hit_count: 0 */
            tmp = j; /* line 69 slow_hit_count: 25, fast_hit_count: 0 */
            break; /* line 70 slow_hit_count: 25, fast_hit_count: 0 */
          } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      s.push_back(tmp + 'a'); /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
      str.push_back(s); /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0, _n = (26); i < _n; i = i + 1) /* line 76 slow_hit_count: 27, fast_hit_count: 0 */
    if ((((needChar) >> (i)) & 1) && countIn[i] == 0 && countOut[i] == 0) /* line 77 slow_hit_count: 26, fast_hit_count: 0 */
      str.push_back(string(1, i + 'a')); /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  sort((str).begin(), (str).end(), compare); /* line 79 slow_hit_count: 1, fast_hit_count: 0 */
  for (__typeof((str).begin()) it = (str).begin(); it != (str).end(); it++) /* line 80 slow_hit_count: 2, fast_hit_count: 0 */
    cout << *it; /* line 81 slow_hit_count: 1, fast_hit_count: 0 */
  cout << endl; /* line 82 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
int main(void) { /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  process(); /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 88 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 89 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance bottlenecks in the given C program, we need to analyze the line-level hit counts for both the slow and fast inputs, and then derive performance-characterizing invariants based on this analysis.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - Lines 45-48 have significantly high hit counts in the slow input and zero for the fast input. This part of the code is a triple nested loop implementing the Floyd-Warshall algorithm to determine transitive closure (checking connectivity between all pairs of nodes).

2. **Pinpointed Expensive Operations:**
   - The nested loop in lines 45-48, specifically `havePath[i][j] |= havePath[i][k] && havePath[k][j];` on line 48, shows extremely high hit counts, suggesting repeated evaluations for connectivity among all pairs of nodes.
   - The combination of loops at these lines explores all possible paths between nodes, making it a costly operation when the graph (as represented by `need`) becomes densely connected.

3. **Interaction with Data Structures:**
   - The `need` and `havePath` 2D arrays are used extensively in the nested loops, representing graph edges and transitive closure, respectively.
   - The performance hit is likely due to the algorithm exploring many possible edges, especially in scenarios where the strings have many overlapping characters or if the graph has complex cyclic dependencies.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Density of Character Overlaps**
   - **Natural Language Description:** "If the set of input strings has many overlapping characters leading to a densely connected graph representation, the transitive closure operations may become computationally expensive."
   - **Explanation:** This captures cases where the `need` array results in many true values, causing the Floyd-Warshall algorithm to perform excessive operations.

2. **Invariant 2: Complex Cyclic Dependencies**
   - **Natural Language Description:** "If there are complex cyclic dependencies among characters of the input strings, indicating cycles in the graph, performance may degrade due to repeated connectivity checks."
   - **Explanation:** Cycles or complex interdependencies among characters force the algorithm to repeatedly confirm connectivity, resulting in high computation.

3. **Invariant 3: Broad Character Set Utilization**
   - **Natural Language Description:** "If a large subset of possible characters is utilized in the strings, this will increase the state space for path computations, slowing down the algorithm."
   - **Explanation:** A larger character set results in a larger matrix for the transitive closure operations, increasing computational demand.

### Conclusion

The performance bottleneck in the given program arises primarily due to the dense connectivity and cyclic paths in the character graph generated from input strings. By understanding these patterns, one can avoid or optimize around them to achieve better performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the invariants derived in Phase 2, we can implement the checker functions as follows:

1. **Invariant 1: High Density of Character Overlaps**
   ```cpp
   void check_dense_graph(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck triggered due to dense graph of character overlaps!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Complex Cyclic Dependencies**
   ```cpp
   void check_cyclic_dependencies(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck triggered due to complex cyclic dependencies!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Broad Character Set Utilization**
   ```cpp
   void check_character_set_size(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck triggered due to large character set utilization!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here is the instrumented C++ code with the performance checkers inserted at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance bottlenecks
void check_dense_graph(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to dense graph of character overlaps!" << endl;
        abort();
    }
}

void check_cyclic_dependencies(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to complex cyclic dependencies!" << endl;
        abort();
    }
}

void check_character_set_size(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to large character set utilization!" << endl;
        abort();
    }
}

template <class X, class Y>
void minimize(X &x, const Y &y) {
    if (x > y) x = y;
}

template <class X, class Y>
void maximize(X &x, const Y &y) {
    if (x < y) x = y;
}

template <class T>
T Abs(const T &x) {
    return (x < 0 ? -x : x);
}

const string NO = "NO";

void answerNO(void) {
    cout << NO << endl;
    exit(EXIT_SUCCESS);
}

bool havePath[226][226], need[226][226];
int countIn[226], countOut[226];

bool compare(const string &s, const string &t) { return s + t < t + s; }

void process(void) {
    int needChar = 0;
    int n;
    cin >> n;
    for (int love = 0, _n = (n); love < _n; love = love + 1) {
        string s;
        cin >> s;
        int mask = 0;
        for (__typeof((s).begin()) it = (s).begin(); it != (s).end(); it++) {
            if ((((mask) >> (*it - 'a')) & 1)) answerNO();
            mask |= (1LL << (*it - 'a'));
        }
        for (int i = 0, _n = ((int)s.size() - 1); i < _n; i = i + 1) {
            int x = s[i] - 'a';
            int y = s[i + 1] - 'a';
            need[x][y] = true;
        }
        needChar |= mask;
    }

    // Check for large character set utilization
    check_character_set_size(__builtin_popcount(needChar) > 20); // Example threshold

    for (int i = 0, _n = (26); i < _n; i = i + 1) havePath[i][i] = true;
    for (int i = 0, _n = (26); i < _n; i = i + 1)
        for (int j = 0, _n = (26); j < _n; j = j + 1) havePath[i][j] |= need[i][j];
    
    for (int k = 0, _n = (26); k < _n; k = k + 1)
        for (int i = 0, _n = (26); i < _n; i = i + 1)
            for (int j = 0, _n = (26); j < _n; j = j + 1)
                havePath[i][j] |= havePath[i][k] && havePath[k][j];
    
    // Check for complex cyclic dependencies
    for (int i = 0, _n = (26); i < _n; i = i + 1)
        for (int j = 0, _n = (26); j < _n; j = j + 1)
            if (i != j && havePath[i][j] && havePath[j][i])
                check_cyclic_dependencies(true);
    
    for (int i = 0, _n = (26); i < _n; i = i + 1)
        for (int j = 0, _n = (26); j < _n; j = j + 1)
            if (need[i][j]) {
                countIn[j]++;
                countOut[i]++;
            }

    // Check for dense graph of character overlaps
    check_dense_graph(std::accumulate(&countIn[0], &countIn[26], 0) > 13); // Example threshold

    for (int i = 0, _n = (26); i < _n; i = i + 1)
        if (countIn[i] > 1 || countOut[i] > 1) answerNO();
    
    vector<string> str;
    for (int i = 0, _n = (26); i < _n; i = i + 1)
        if (countOut[i] > 0 && countIn[i] == 0) {
            int tmp = i;
            string s;
            while (countOut[tmp] > 0) {
                s.push_back(tmp + 'a');
                for (int j = 0, _n = (26); j < _n; j = j + 1)
                    if (need[tmp][j]) {
                        tmp = j;
                        break;
                    }
            }
            s.push_back(tmp + 'a');
            str.push_back(s);
        }
    
    for (int i = 0, _n = (26); i < _n; i = i + 1)
        if ((((needChar) >> (i)) & 1) && countIn[i] == 0 && countOut[i] == 0)
            str.push_back(string(1, i + 'a'));
    
    sort((str).begin(), (str).end(), compare);
    for (__typeof((str).begin()) it = (str).begin(); it != (str).end(); it++)
        cout << *it;
    cout << endl;
}

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    process();
    return 0;
}
```

**Notes:**
- The performance checkers are placed strategically outside the core nested loops to minimize added overhead.
- Example thresholds are used for the conditions in each checker function, and these should be adapted to more accurately reflect the domain-specific constraints and expected performance characteristics.
- The checkers are designed to help identify scenarios that trigger performance bottlenecks during the execution of the program.

