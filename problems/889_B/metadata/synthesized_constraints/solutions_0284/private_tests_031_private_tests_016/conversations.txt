system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 100002;
int n;
string a[N];
bool mark[32];
void cleanm() {
  for (int i = (0); i < (26); ++(i)) mark[i] = false;
}
set<string> st;
set<string>::iterator it1, it2;
bool hmm(const string &a, const string &b) {
  for (int i = (0); i < (((int)a.size())); ++(i)) {
    for (int j = (0); j < (((int)b.size())); ++(j)) {
      if (a[i] == b[j]) return true;
    }
  }
  return false;
}
string CONC(const string &a, const string &b) {
  int bg = -1;
  for (int i = (0); i < (((int)a.size())); ++(i)) {
    if (a[i] == b[0]) {
      bg = i;
      break;
    }
  }
  if (bg == -1) return "";
  string result = "";
  for (int i = (0); i < (bg); ++(i)) {
    result += a[i];
  }
  int j = bg;
  for (int i = (0); i < (((int)b.size())); ++(i)) {
    if (j < ((int)a.size()) && a[j] != b[i]) return "";
    result += b[i];
    ++j;
  }
  for (j = j; j < ((int)a.size()); ++j) result += a[j];
  cleanm();
  for (int i = (0); i < (((int)result.size())); ++(i)) {
    if (mark[result[i] - 'a'])
      return "";
    else
      mark[result[i] - 'a'] = true;
  }
  return result;
}
int main() {
  scanf("%d", &n);
  int sm = 0;
  bool vata = false;
  for (int i = (0); i < (n); ++(i)) {
    a[i] = "";
    char z;
    if (i == 0) scanf("%c", &z);
    while (scanf("%c", &z)) {
      if (z == '\n') break;
      a[i] += z;
    }
    cleanm();
    for (int j = (0); j < (((int)a[i].size())); ++(j)) {
      if (mark[a[i][j] - 'a']) {
        vata = true;
      } else
        mark[a[i][j] - 'a'] = true;
    }
    st.insert(a[i]);
  }
  if (vata) {
    cout << "NO" << endl;
    return 0;
  }
  n = ((int)st.size());
  for (int i = (0); i < (n); ++(i)) {
    bool found = false;
    for (it1 = st.begin(); it1 != st.end(); ++it1) {
      if (found) break;
      for (it2 = st.begin(); it2 != st.end(); ++it2) {
        if (found) break;
        if (it1 != it2) {
          string s1 = (*it1);
          string s2 = (*it2);
          if (hmm(s1, s2)) {
            string p = CONC(s1, s2);
            string q = CONC(s2, s1);
            if (p != "") {
              st.erase(s1);
              st.erase(s2);
              st.insert(p);
            } else if (q != "") {
              st.erase(s1);
              st.erase(s2);
              st.insert(q);
            } else {
              cout << "NO" << endl;
              return 0;
            }
            found = true;
            break;
          }
        }
      }
      if (found) break;
    }
  }
  for (it1 = st.begin(); it1 != st.end(); ++it1) cout << (*it1);
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
za
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
r
s
t
u
v
w
x
y
z


(G.2) Fast Input

2
aa
b


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 100002; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
string a[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool mark[32]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void cleanm() { /* line 7 slow_hit_count: 27, fast_hit_count: 2 */
  for (int i = (0); i < (26); ++(i)) mark[i] = false; /* line 8 slow_hit_count: 729, fast_hit_count: 54 */
} /* line 9 slow_hit_count: 27, fast_hit_count: 2 */
set<string> st; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
set<string>::iterator it1, it2; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
bool hmm(const string &a, const string &b) { /* line 12 slow_hit_count: 13824, fast_hit_count: 0 */
  for (int i = (0); i < (((int)a.size())); ++(i)) { /* line 13 slow_hit_count: 28199, fast_hit_count: 0 */
    for (int j = (0); j < (((int)b.size())); ++(j)) { /* line 14 slow_hit_count: 29326, fast_hit_count: 0 */
      if (a[i] == b[j]) return true; /* line 15 slow_hit_count: 14951, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 18 slow_hit_count: 13823, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
string CONC(const string &a, const string &b) { /* line 20 slow_hit_count: 2, fast_hit_count: 0 */
  int bg = -1; /* line 21 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = (0); i < (((int)a.size())); ++(i)) { /* line 22 slow_hit_count: 2, fast_hit_count: 0 */
    if (a[i] == b[0]) { /* line 23 slow_hit_count: 2, fast_hit_count: 0 */
      bg = i; /* line 24 slow_hit_count: 2, fast_hit_count: 0 */
      break; /* line 25 slow_hit_count: 2, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (bg == -1) return ""; /* line 28 slow_hit_count: 2, fast_hit_count: 0 */
  string result = ""; /* line 29 slow_hit_count: 4, fast_hit_count: 0 */
  for (int i = (0); i < (bg); ++(i)) { /* line 30 slow_hit_count: 2, fast_hit_count: 0 */
    result += a[i]; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  int j = bg; /* line 33 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = (0); i < (((int)b.size())); ++(i)) { /* line 34 slow_hit_count: 5, fast_hit_count: 0 */
    if (j < ((int)a.size()) && a[j] != b[i]) return ""; /* line 35 slow_hit_count: 3, fast_hit_count: 0 */
    result += b[i]; /* line 36 slow_hit_count: 3, fast_hit_count: 0 */
    ++j; /* line 37 slow_hit_count: 3, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (j = j; j < ((int)a.size()); ++j) result += a[j]; /* line 39 slow_hit_count: 3, fast_hit_count: 0 */
  cleanm(); /* line 40 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = (0); i < (((int)result.size())); ++(i)) { /* line 41 slow_hit_count: 6, fast_hit_count: 0 */
    if (mark[result[i] - 'a']) /* line 42 slow_hit_count: 4, fast_hit_count: 0 */
      return ""; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      mark[result[i] - 'a'] = true; /* line 45 slow_hit_count: 4, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return result; /* line 47 slow_hit_count: 2, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  int sm = 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  bool vata = false; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (n); ++(i)) { /* line 53 slow_hit_count: 26, fast_hit_count: 3 */
    a[i] = ""; /* line 54 slow_hit_count: 25, fast_hit_count: 2 */
    char z; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    if (i == 0) scanf("%c", &z); /* line 56 slow_hit_count: 25, fast_hit_count: 2 */
    while (scanf("%c", &z)) { /* line 57 slow_hit_count: 51, fast_hit_count: 5 */
      if (z == '\n') break; /* line 58 slow_hit_count: 51, fast_hit_count: 5 */
      a[i] += z; /* line 59 slow_hit_count: 26, fast_hit_count: 3 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    cleanm(); /* line 61 slow_hit_count: 25, fast_hit_count: 2 */
    for (int j = (0); j < (((int)a[i].size())); ++(j)) { /* line 62 slow_hit_count: 51, fast_hit_count: 5 */
      if (mark[a[i][j] - 'a']) { /* line 63 slow_hit_count: 26, fast_hit_count: 3 */
        vata = true; /* line 64 slow_hit_count: 0, fast_hit_count: 1 */
      } else /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
        mark[a[i][j] - 'a'] = true; /* line 66 slow_hit_count: 26, fast_hit_count: 2 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    st.insert(a[i]); /* line 68 slow_hit_count: 25, fast_hit_count: 2 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  if (vata) { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "NO" << endl; /* line 71 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 72 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  n = ((int)st.size()); /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = (0); i < (n); ++(i)) { /* line 75 slow_hit_count: 26, fast_hit_count: 0 */
    bool found = false; /* line 76 slow_hit_count: 25, fast_hit_count: 0 */
    for (it1 = st.begin(); it1 != st.end(); ++it1) { /* line 77 slow_hit_count: 624, fast_hit_count: 0 */
      if (found) break; /* line 78 slow_hit_count: 600, fast_hit_count: 0 */
      for (it2 = st.begin(); it2 != st.end(); ++it2) { /* line 79 slow_hit_count: 15023, fast_hit_count: 0 */
        if (found) break; /* line 80 slow_hit_count: 14424, fast_hit_count: 0 */
        if (it1 != it2) { /* line 81 slow_hit_count: 14424, fast_hit_count: 0 */
          string s1 = (*it1); /* line 82 slow_hit_count: 13824, fast_hit_count: 0 */
          string s2 = (*it2); /* line 83 slow_hit_count: 13824, fast_hit_count: 0 */
          if (hmm(s1, s2)) { /* line 84 slow_hit_count: 13824, fast_hit_count: 0 */
            string p = CONC(s1, s2); /* line 85 slow_hit_count: 1, fast_hit_count: 0 */
            string q = CONC(s2, s1); /* line 86 slow_hit_count: 1, fast_hit_count: 0 */
            if (p != "") { /* line 87 slow_hit_count: 1, fast_hit_count: 0 */
              st.erase(s1); /* line 88 slow_hit_count: 1, fast_hit_count: 0 */
              st.erase(s2); /* line 89 slow_hit_count: 1, fast_hit_count: 0 */
              st.insert(p); /* line 90 slow_hit_count: 1, fast_hit_count: 0 */
            } else if (q != "") { /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
              st.erase(s1); /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
              st.erase(s2); /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
              st.insert(q); /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
            } else { /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
              cout << "NO" << endl; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
              return 0; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
            } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
            found = true; /* line 99 slow_hit_count: 1, fast_hit_count: 0 */
            break; /* line 100 slow_hit_count: 1, fast_hit_count: 0 */
          } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
      if (found) break; /* line 104 slow_hit_count: 600, fast_hit_count: 0 */
    } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  for (it1 = st.begin(); it1 != st.end(); ++it1) cout << (*it1); /* line 107 slow_hit_count: 25, fast_hit_count: 0 */
  cout << endl; /* line 108 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 109 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 110 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information for both the slow and fast inputs, we can identify the following areas of interest:

1. **Function `hmm`**:
   - **Hit Count**: This function has a high hit count of 13,824 on the slow input and 0 on the fast input.
   - **Analysis**: The function uses two nested loops iterating over the size of the input strings `a` and `b`. This results in a time complexity of O(m * n) for each call, where m and n are the lengths of these strings. The slow input likely causes this function to be called excessively due to a high comparison count between distinct pairs of strings.

2. **Nested Loops in `main` Function**:
   - **Hit Count**: Lines inside the nested loops where `it1` and `it2` iterate through the set `st` have a high hit count. Specifically, line 79 (15,023 hits) and line 84 (13,824 hits) are significant indicators of expensive operations.
   - **Analysis**: These loops iterate over all pairs of strings in the set, calling the `hmm` function for each pair. The excessively high number of loop iterations and subsequent function calls lead to significant performance degradation on the slow input.

3. **Function `CONC`**:
   - **Hit Count**: This function is called 2 times for the slow input (lines 85, 86) but has no hits for the fast input.
   - **Analysis**: Although it is not hit as often as other parts, it involves multiple checks and operations that can be expensive when invoked frequently in the context of the surrounding loops.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, the following performance-characterizing invariants can be identified:

1. **Invariant on Pairwise String Comparison**:
   - **Natural Language Description**: "If the number of distinct strings is large, the repeated pairwise comparison of strings can lead to a significant performance bottleneck, especially when the strings have even minimal overlap."
   - **Explanation**: The use of nested loops to compare each pair of strings results in O(n^2) operations when the number of strings is high, which can be costly.

2. **Invariant on Complexity from Nested Iterations**:
   - **Natural Language Description**: "The performance degrades when there are many unique strings, causing extensive nested iterations that check for common characters between every pair of strings."
   - **Explanation**: The nested loops in the main function lead to a high number of iterations proportional to n^2, where n is the number of strings, contributing to the slowdown.

3. **Invariant on Function Calls in Loops**:
   - **Natural Language Description**: "Excessive invocation of utility functions like `hmm` in deeply nested loops can result in considerable computational overhead if the data set contains numerous strings with potential overlaps."
   - **Explanation**: The `hmm` function is invoked within nested loops, exacerbating the slowdown due to its O(m * n) complexity for each call.

The above invariants focus on patterns that lead to inefficient execution paths, especially considering the constraints given (e.g., n <= 100). They abstract away specific input sizes and values but point to structural inefficiencies in the algorithm.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

For each invariant identified earlier, we'll write C++ code to check the respective conditions at runtime.

1. **Invariant on Pairwise String Comparison**:
    - **Checker Code**:
    ```cpp
    void check_pairwise_comparison_invariant(int numStrings) {
        // Assuming a threshold where n > 1000 leads to performance issues
        if (numStrings > 1000) {
            cerr << "Warning: Performance bottleneck - excessive pairwise string comparisons due to large number of strings!" << endl;
            abort();
        }
    }
    ```

2. **Invariant on Complexity from Nested Iterations**:
    - **Checker Code**:
    ```cpp
    void check_nested_iterations_invariant(int sizeOfSet) {
        // Assuming a threshold where sizeOfSet > 1000 leads to performance issues
        if (sizeOfSet > 1000) {
            cerr << "Warning: Performance bottleneck - extensive nested iterations due to large set size!" << endl;
            abort();
        }
    }
    ```

3. **Invariant on Function Calls in Loops**:
    - **Checker Code**:
    ```cpp
    void check_function_call_invariant(int numOfCalls) {
        // Assumed threshold for function calls leading to performance issues
        if (numOfCalls > 10000) {
            cerr << "Warning: Performance bottleneck - excessive function calls in nested loops!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrating the Checker Code into the Original Program

Below is the original C++ program with integrated performance checks added in appropriate locations to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 100002;
int n;
string a[N];
bool mark[32];

// Checker functions
void check_pairwise_comparison_invariant(int numStrings) {
    if (numStrings > 1000) {
        cerr << "Warning: Performance bottleneck - excessive pairwise string comparisons due to large number of strings!" << endl;
        abort();
    }
}

void check_nested_iterations_invariant(int sizeOfSet) {
    if (sizeOfSet > 1000) {
        cerr << "Warning: Performance bottleneck - extensive nested iterations due to large set size!" << endl;
        abort();
    }
}

void check_function_call_invariant(int numOfCalls) {
    if (numOfCalls > 10000) {
        cerr << "Warning: Performance bottleneck - excessive function calls in nested loops!" << endl;
        abort();
    }
}

void cleanm() {
    for (int i = 0; i < 26; ++i) mark[i] = false;
}

set<string> st;
set<string>::iterator it1, it2;

bool hmm(const string &a, const string &b) {
    for (int i = 0; i < (int)a.size(); ++i) {
        for (int j = 0; j < (int)b.size(); ++j) {
            if (a[i] == b[j]) return true;
        }
    }
    return false;
}

string CONC(const string &a, const string &b) {
    int bg = -1;
    for (int i = 0; i < (int)a.size(); ++i) {
        if (a[i] == b[0]) {
            bg = i;
            break;
        }
    }
    if (bg == -1) return "";
    string result = "";
    for (int i = 0; i < bg; ++i) {
        result += a[i];
    }
    int j = bg;
    for (int i = 0; i < (int)b.size(); ++i) {
        if (j < (int)a.size() && a[j] != b[i]) return "";
        result += b[i];
        ++j;
    }
    for (j = j; j < (int)a.size(); ++j) result += a[j];
    cleanm();
    for (int i = 0; i < (int)result.size(); ++i) {
        if (mark[result[i] - 'a'])
            return "";
        else
            mark[result[i] - 'a'] = true;
    }
    return result;
}

int main() {
    scanf("%d", &n);
    int sm = 0;
    bool vata = false;
    
    check_pairwise_comparison_invariant(n);  // Check for bottleneck due to number of strings

    for (int i = 0; i < n; ++i) {
        a[i] = "";
        char z;
        if (i == 0) scanf("%c", &z);
        while (scanf("%c", &z)) {
            if (z == '\n') break;
            a[i] += z;
        }
        cleanm();
        for (int j = 0; j < (int)a[i].size(); ++j) {
            if (mark[a[i][j] - 'a']) {
                vata = true;
            } else
                mark[a[i][j] - 'a'] = true;
        }
        st.insert(a[i]);
    }
    
    if (vata) {
        cout << "NO" << endl;
        return 0;
    }

    int numOfCalls = 0; // Track number of function calls

    n = (int)st.size();

    check_nested_iterations_invariant(n);  // Check for bottleneck due to set size

    for (int i = 0; i < n; ++i) {
        bool found = false;
        for (it1 = st.begin(); it1 != st.end(); ++it1) {
            if (found) break;
            for (it2 = st.begin(); it2 != st.end(); ++it2) {
                if (found) break;
                if (it1 != it2) {
                    string s1 = (*it1);
                    string s2 = (*it2);
                    if (hmm(s1, s2)) {
                        string p = CONC(s1, s2);
                        string q = CONC(s2, s1);
                        numOfCalls += 2; // Count function calls

                        check_function_call_invariant(numOfCalls);  // Check for excessive function calls

                        if (p != "") {
                            st.erase(s1);
                            st.erase(s2);
                            st.insert(p);
                        } else if (q != "") {
                            st.erase(s1);
                            st.erase(s2);
                            st.insert(q);
                        } else {
                            cout << "NO" << endl;
                            return 0;
                        }
                        found = true;
                        break;
                    }
                }
            }
            if (found) break;
        }
    }
    for (it1 = st.begin(); it1 != st.end(); ++it1) cout << (*it1);
    cout << endl;
    return 0;
}
```

### Explanation

- **Checker Integration**: The checkers are placed strategically:
  - `check_pairwise_comparison_invariant` is invoked after reading the number of strings to detect potential slowdowns early.
  - `check_nested_iterations_invariant` is called after determining the size of the set, monitoring nested iterations.
  - `check_function_call_invariant` is incremented with each call to `CONC` to track the number of function calls and detect excessive calls. 

These checks help to ensure that potential performance bottlenecks are identified at runtime, providing useful feedback during testing and development.

