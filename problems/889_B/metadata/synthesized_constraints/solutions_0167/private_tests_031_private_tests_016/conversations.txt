system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
char str[1000001];
int n;
vector<string> v;
vector<vector<int> > g;
vector<bool> vis;
vector<string> sol;
void DFS(int u) {
  if (vis[u]) {
    puts("NO");
    exit(0);
  }
  vis[u] = true;
  sol.back() += char(u + 'a');
  if (g[u].empty()) return;
  DFS(g[u][0]);
}
int main() {
  scanf("%d", &n);
  vector<bool> seen(26);
  for (int i = 0; i < n; ++i) {
    scanf("%s", str);
    v.push_back(str);
    set<char> s;
    for (int i = 0; str[i]; ++i) {
      s.insert(str[i]);
      seen[str[i] - 'a'] = true;
    }
    if (s.size() != v.back().size()) {
      puts("NO");
      return 0;
    }
  }
  sort(v.begin(), v.end());
  v.resize(unique(v.begin(), v.end()) - v.begin());
  if (v.size() > 700) {
    puts("NO");
    return 0;
  }
  for (int it = 0; it < 2; ++it) {
    for (int i = 0; i < v.size(); ++i)
      for (int j = i + 1; j < v.size(); ++j) {
        if ((int)v[i].find(v[j]) != -1) {
          v[j] = v.back();
          v.pop_back();
          --j;
        }
      }
    reverse(v.begin(), v.end());
  }
  g.resize(26);
  vector<int> in(g.size());
  set<pair<int, int> > e;
  for (int i = 0; i < v.size(); ++i) {
    string s = v[i];
    for (int j = 0; j + 1 < s.size(); ++j) {
      int u = s[j] - 'a';
      int v = s[j + 1] - 'a';
      if (e.insert(make_pair(u, v)).second) {
        g[u].push_back(v);
        ++in[v];
      }
    }
  }
  for (int i = 0; i < g.size(); ++i) {
    if (g[i].size() > 1) {
      puts("NO");
      return 0;
    }
  }
  vis.resize(g.size());
  for (int i = 0; i < g.size(); ++i)
    if (seen[i] && !vis[i] && in[i] == 0) {
      sol.push_back(string());
      DFS(i);
    }
  for (int i = 0; i < g.size(); ++i)
    if (seen[i] && !vis[i]) {
      puts("NO");
      return 0;
    }
  sort(sol.begin(), sol.end());
  string ans = "";
  for (auto x : sol) ans += x;
  set<char> zz;
  for (auto x : ans) zz.insert(x);
  if (zz.size() != ans.size())
    ans = "NO";
  else {
    set<int> S;
    for (int i = 0; i < v.size(); ++i) {
      int occ = 0;
      for (int j = 0; j + v[i].size() <= ans.size(); ++j)
        if (ans.substr(j, v[i].size()) == v[i]) ++occ;
      if (!occ) {
        ans = "NO";
        break;
      }
      S.insert(occ);
    }
    if (S.size() != 1) ans = "NO";
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
za
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
r
s
t
u
v
w
x
y
z


(G.2) Fast Input

2
aa
b


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char str[1000001]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> v; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<int> > g; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<bool> vis; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> sol; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void DFS(int u) { /* line 9 slow_hit_count: 25, fast_hit_count: 0 */
  if (vis[u]) { /* line 10 slow_hit_count: 25, fast_hit_count: 0 */
    puts("NO"); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    exit(0); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  vis[u] = true; /* line 14 slow_hit_count: 25, fast_hit_count: 0 */
  sol.back() += char(u + 'a'); /* line 15 slow_hit_count: 25, fast_hit_count: 0 */
  if (g[u].empty()) return; /* line 16 slow_hit_count: 25, fast_hit_count: 0 */
  DFS(g[u][0]); /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  vector<bool> seen(26); /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; ++i) { /* line 22 slow_hit_count: 26, fast_hit_count: 1 */
    scanf("%s", str); /* line 23 slow_hit_count: 25, fast_hit_count: 1 */
    v.push_back(str); /* line 24 slow_hit_count: 25, fast_hit_count: 1 */
    set<char> s; /* line 25 slow_hit_count: 25, fast_hit_count: 1 */
    for (int i = 0; str[i]; ++i) { /* line 26 slow_hit_count: 51, fast_hit_count: 3 */
      s.insert(str[i]); /* line 27 slow_hit_count: 26, fast_hit_count: 2 */
      seen[str[i] - 'a'] = true; /* line 28 slow_hit_count: 26, fast_hit_count: 2 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    if (s.size() != v.back().size()) { /* line 30 slow_hit_count: 25, fast_hit_count: 1 */
      puts("NO"); /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 32 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end()); /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  v.resize(unique(v.begin(), v.end()) - v.begin()); /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
  if (v.size() > 700) { /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
    puts("NO"); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  for (int it = 0; it < 2; ++it) { /* line 41 slow_hit_count: 3, fast_hit_count: 0 */
    for (int i = 0; i < v.size(); ++i) /* line 42 slow_hit_count: 51, fast_hit_count: 0 */
      for (int j = i + 1; j < v.size(); ++j) { /* line 43 slow_hit_count: 626, fast_hit_count: 0 */
        if ((int)v[i].find(v[j]) != -1) { /* line 44 slow_hit_count: 577, fast_hit_count: 0 */
          v[j] = v.back(); /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
          v.pop_back(); /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
          --j; /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
        } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    reverse(v.begin(), v.end()); /* line 50 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  g.resize(26); /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
  vector<int> in(g.size()); /* line 53 slow_hit_count: 2, fast_hit_count: 0 */
  set<pair<int, int> > e; /* line 54 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = 0; i < v.size(); ++i) { /* line 55 slow_hit_count: 25, fast_hit_count: 0 */
    string s = v[i]; /* line 56 slow_hit_count: 48, fast_hit_count: 0 */
    for (int j = 0; j + 1 < s.size(); ++j) { /* line 57 slow_hit_count: 25, fast_hit_count: 0 */
      int u = s[j] - 'a'; /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
      int v = s[j + 1] - 'a'; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
      if (e.insert(make_pair(u, v)).second) { /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
        g[u].push_back(v); /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
        ++in[v]; /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < g.size(); ++i) { /* line 66 slow_hit_count: 27, fast_hit_count: 0 */
    if (g[i].size() > 1) { /* line 67 slow_hit_count: 26, fast_hit_count: 0 */
      puts("NO"); /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  vis.resize(g.size()); /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < g.size(); ++i) /* line 73 slow_hit_count: 27, fast_hit_count: 0 */
    if (seen[i] && !vis[i] && in[i] == 0) { /* line 74 slow_hit_count: 26, fast_hit_count: 0 */
      sol.push_back(string()); /* line 75 slow_hit_count: 24, fast_hit_count: 0 */
      DFS(i); /* line 76 slow_hit_count: 24, fast_hit_count: 0 */
    } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < g.size(); ++i) /* line 78 slow_hit_count: 27, fast_hit_count: 0 */
    if (seen[i] && !vis[i]) { /* line 79 slow_hit_count: 26, fast_hit_count: 0 */
      puts("NO"); /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  sort(sol.begin(), sol.end()); /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
  string ans = ""; /* line 84 slow_hit_count: 2, fast_hit_count: 0 */
  for (auto x : sol) ans += x; /* line 85 slow_hit_count: 25, fast_hit_count: 0 */
  set<char> zz; /* line 86 slow_hit_count: 1, fast_hit_count: 0 */
  for (auto x : ans) zz.insert(x); /* line 87 slow_hit_count: 26, fast_hit_count: 0 */
  if (zz.size() != ans.size()) /* line 88 slow_hit_count: 1, fast_hit_count: 0 */
    ans = "NO"; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    set<int> S; /* line 91 slow_hit_count: 2, fast_hit_count: 0 */
    for (int i = 0; i < v.size(); ++i) { /* line 92 slow_hit_count: 25, fast_hit_count: 0 */
      int occ = 0; /* line 93 slow_hit_count: 24, fast_hit_count: 0 */
      for (int j = 0; j + v[i].size() <= ans.size(); ++j) /* line 94 slow_hit_count: 623, fast_hit_count: 0 */
        if (ans.substr(j, v[i].size()) == v[i]) ++occ; /* line 95 slow_hit_count: 599, fast_hit_count: 0 */
      if (!occ) { /* line 96 slow_hit_count: 24, fast_hit_count: 0 */
        ans = "NO"; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
      S.insert(occ); /* line 100 slow_hit_count: 24, fast_hit_count: 0 */
    } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    if (S.size() != 1) ans = "NO"; /* line 102 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 104 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 105 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 106 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the C program provided and generate performance-characterizing invariants, we'll go through the phases outlined in the task.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Hit Counts:

1. **Line 9 (DFS function call):** The DFS function is invoked frequently during the slow input run but not at all during the fast input. This indicates a potentially deep or repetitive recursive exploration that doesn't occur with the fast input.

2. **Line 22 (Loop over string inputs):** While this loop runs 26 times for the slow input, it only runs once for the fast input, suggesting a greater complexity of input data in the slow case.

3. **Lines 41-50 (Nested Loops for Substring Checking):** These lines form a nested loop that runs 626 times for the slow input and is not executed for the fast input. The double loop checks for substring relationships, which is computationally expensive, especially with many distinct strings.

4. **Line 94-95 (Substring Counting):** This loop iterates extensively (623 times) for the slow input, suggesting that substring counting is a significant part of the slowdown.

5. **Line 73-79 (Graph Processing):** The loop over the graph size and subsequent DFS calls are hit many times, indicating a non-trivial graph traversal which is absent in the fast input scenario.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified segments, we can derive the following natural language performance invariants:

1. **DFS and Graph Traversal:**
   - **Invariant:** "The program may encounter performance degradation when processing a large number of distinct characters or strings that form a complex graph requiring deep or extensive recursive traversal (e.g., multiple disconnected components or chains in the graph)."
   
2. **Substring Checking in Nested Loops:**
   - **Invariant:** "When there is a high number of distinct substrings with potential overlap in the input (e.g., many single-character strings), the nested loop operations may lead to an exponential increase in checks, slowing down the execution significantly."
   
3. **Substring Counting:**
   - **Invariant:** "Performance may degrade when there are many strings and the potential good string is long, requiring extensive substring occurrence checks. This is especially costly if each string needs to be checked against many potential positions in a large good string."
   
These invariants help in understanding under what input conditions the algorithm is likely to perform poorly. The checks or conditions triggering these can be implemented in a fuzzer to detect such slow scenarios:

- **Graph Complexity:** Check if the input leads to a graph with many nodes (distinct characters) requiring complex graph traversal.
- **String Count and Length:** Examine the number of strings and their length to identify when nested loops for substring operations could cause excessive computation.
- **Potential Good String Length:** Check if the potential good string length (formed by the graph traversal) requires too many substring comparisons.

These invariants align with the input constraints and provide general conditions that can trigger slow performance without relying on specific numeric values from the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ code snippets to check those conditions at runtime:

1. **DFS and Graph Traversal:**

   The invariant concerned potential performance degradation due to complex graph formations and deep recursive DFS calls.

   ```cpp
   void check_graph_traversal_invariant(int nodes, int dfsCalls) {
       if (nodes > 25 && dfsCalls > 50) {  // Assuming there shouldn't be too many nodes with deep DFS calls
           cerr << "Warning: Performance bottleneck due to complex graph traversal!" << endl;
           abort();
       }
   }
   ```

2. **Substring Checking in Nested Loops:**

   The invariant involved expensive nested loop operations due to a high number of distinct substrings.

   ```cpp
   void check_substring_nested_loops_invariant(int stringCount, int operationsCount) {
       if (stringCount > 20 && operationsCount > 500) {  // Example thresholds for potential performance hit
           cerr << "Warning: Performance bottleneck due to nested loop operations on substrings!" << endl;
           abort();
       }
   }
   ```

3. **Substring Counting:**

   This invariant highlighted the high cost of checking substring occurrences over large potential good strings.

   ```cpp
   void check_substring_counting_invariant(int potentialGoodStringLength, int checkCount) {
       if (potentialGoodStringLength > 100 && checkCount > 600) {  // Thresholds indicating expensive substring checks
           cerr << "Warning: Performance bottleneck due to extensive substring counting!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Conditional Checks into the Original Program

Now, integrate the above checker functions into the original C++ program at appropriate points to avoid additional overhead:

```cpp
#include <bits/stdc++.h>
using namespace std;

char str[1000001];
int n;
vector<string> v;
vector<vector<int>> g;
vector<bool> vis;
vector<string> sol;

void check_graph_traversal_invariant(int nodes, int dfsCalls) {
    if (nodes > 25 && dfsCalls > 50) {
        cerr << "Warning: Performance bottleneck due to complex graph traversal!" << endl;
        abort();
    }
}

void check_substring_nested_loops_invariant(int stringCount, int operationsCount) {
    if (stringCount > 20 && operationsCount > 500) {
        cerr << "Warning: Performance bottleneck due to nested loop operations on substrings!" << endl;
        abort();
    }
}

void check_substring_counting_invariant(int potentialGoodStringLength, int checkCount) {
    if (potentialGoodStringLength > 100 && checkCount > 600) {
        cerr << "Warning: Performance bottleneck due to extensive substring counting!" << endl;
        abort();
    }
}

void DFS(int u) {
    static int dfsCalls = 0;
    ++dfsCalls;  // Increment DFS call count
    if (vis[u]) {
        puts("NO");
        exit(0);
    }
    vis[u] = true;
    sol.back() += char(u + 'a');
    if (g[u].empty()) return;
    DFS(g[u][0]);

    // Check DFS invariant during traversal
    check_graph_traversal_invariant(g.size(), dfsCalls);
}

int main() {
    scanf("%d", &n);
    vector<bool> seen(26);
    int operationsCount = 0;  // To count operations in nested loops

    for (int i = 0; i < n; ++i) {
        scanf("%s", str);
        v.push_back(str);
        set<char> s;
        for (int i = 0; str[i]; ++i) {
            s.insert(str[i]);
            seen[str[i] - 'a'] = true;
        }
        if (s.size() != v.back().size()) {
            puts("NO");
            return 0;
        }
    }

    sort(v.begin(), v.end());
    v.resize(unique(v.begin(), v.end()) - v.begin());

    if (v.size() > 700) {
        puts("NO");
        return 0;
    }

    for (int it = 0; it < 2; ++it) {
        for (int i = 0; i < v.size(); ++i)
            for (int j = i + 1; j < v.size(); ++j) {
                operationsCount++;  // Increment operations count
                if ((int)v[i].find(v[j]) != -1) {
                    v[j] = v.back();
                    v.pop_back();
                    --j;
                }
            }
        reverse(v.begin(), v.end());
    }

    // Check nested loop operations invariant after potential heavy operations
    check_substring_nested_loops_invariant(v.size(), operationsCount);

    g.resize(26);
    vector<int> in(g.size());
    set<pair<int, int>> e;
    for (int i = 0; i < v.size(); ++i) {
        string s = v[i];
        for (int j = 0; j + 1 < s.size(); ++j) {
            int u = s[j] - 'a';
            int v = s[j + 1] - 'a';
            if (e.insert(make_pair(u, v)).second) {
                g[u].push_back(v);
                ++in[v];
            }
        }
    }

    for (int i = 0; i < g.size(); ++i) {
        if (g[i].size() > 1) {
            puts("NO");
            return 0;
        }
    }

    vis.resize(g.size());
    for (int i = 0; i < g.size(); ++i)
        if (seen[i] && !vis[i] && in[i] == 0) {
            sol.push_back(string());
            DFS(i);
        }

    for (int i = 0; i < g.size(); ++i)
        if (seen[i] && !vis[i]) {
            puts("NO");
            return 0;
        }

    sort(sol.begin(), sol.end());
    string ans = "";
    for (auto x : sol) ans += x;
    set<char> zz;
    for (auto x : ans) zz.insert(x);
    if (zz.size() != ans.size())
        ans = "NO";
    else {
        set<int> S;
        int checkCount = 0;  // For counting substring checks
        for (int i = 0; i < v.size(); ++i) {
            int occ = 0;
            for (int j = 0; j + v[i].size() <= ans.size(); ++j) {
                checkCount++;  // Increment check count
                if (ans.substr(j, v[i].size()) == v[i]) ++occ;
            }
            if (!occ) {
                ans = "NO";
                break;
            }
            S.insert(occ);
        }
        if (S.size() != 1) ans = "NO";

        // Check substring counting invariant after checks
        check_substring_counting_invariant(ans.size(), checkCount);
    }

    cout << ans << endl;
    return 0;
}
```

**Comments:**
- **Graph Traversal Check**: The `check_graph_traversal_invariant` function is invoked during DFS traversal to ensure that recursive calls do not exceed a reasonable depth, taking into account the number of graph nodes.
- **Nested Loop Operations Check**: The `check_substring_nested_loops_invariant` function is placed after the nested loop operations, counting how many times strings are compared in the loop, which can lead to inefficiency.
- **Substring Counting Check**: The `check_substring_counting_invariant` function is invoked after the substring counting, checking if the potential good string requires too many checks, which could indicate a performance issue.

These checker functions are integrated thoughtfully to help future profiling or fuzzing tasks identify the conditions under which the code's performance might degrade.

