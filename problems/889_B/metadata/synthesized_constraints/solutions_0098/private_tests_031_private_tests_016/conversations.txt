system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const long long MOD = 1e9 + 7;
const double PI = acos(-1.0);
string str[101000];
int take[30];
string temp[3000];
string tmp[1000];
map<string, int> mp;
int main() {
  int n;
  cin >> n;
  if (n > 27 * 13) {
    cout << "NO" << endl;
    return 0;
  }
  for (int i = 1; i <= n; ++i) {
    cin >> str[i];
    if (str[i].length() > 26) {
      cout << "NO" << endl;
      return 0;
    }
  }
  for (int i = 1; i <= n; ++i) {
    mp.clear();
    string ss;
    for (int j = 0; j < str[i].length(); ++j) {
      ss.clear();
      for (int k = j; k < str[i].length(); ++k)
        ss.push_back(str[i][k]), mp[ss] = 1;
    }
    for (int j = 1; j <= n; ++j) {
      if (j == i) continue;
      if (mp[str[j]] == 1) {
        str[j].clear();
      }
    }
  }
  while (1) {
    int jjudge = 0;
    for (int i = 1; i <= n; ++i) {
      memset(take, 0, sizeof take);
      for (int j = 0; j < str[i].length(); ++j) {
        if (!take[str[i][j] - 'a'])
          take[str[i][j] - 'a'] = 1;
        else {
          cout << "NO" << endl;
          return 0;
        }
      }
      for (int jj = 1; jj <= n; ++jj) {
        if (i == jj) continue;
        int p = 0;
        for (int j = 0; j < str[jj].length(); ++j) {
          tmp[++p].clear();
          for (int k = 0; k <= j; ++k) tmp[p].push_back(str[jj][k]);
        }
        int pp = 0;
        for (int j = 0; j < str[i].length(); ++j) {
          temp[++pp].clear();
          for (int k = j; k < str[i].length(); ++k)
            temp[pp].push_back(str[i][k]);
        }
        int judge = 0;
        for (int j = 1; j <= p; ++j) {
          for (int k = 1; k <= pp; ++k)
            if (tmp[j] == temp[k]) {
              for (int l = j; l < str[jj].length(); ++l)
                str[i].push_back(str[jj][l]);
              str[jj].clear();
              judge = 1;
              break;
            }
        }
        if (!judge) {
          p = 0;
          for (int j = 0; j < str[jj].length(); ++j) {
            tmp[++p].clear();
            for (int k = j; k < str[jj].length(); ++k)
              tmp[p].push_back(str[jj][k]);
          }
          pp = 0;
          for (int j = 0; j < str[i].length(); ++j) {
            temp[++pp].clear();
            for (int k = 0; k < j; ++k) temp[pp].push_back(str[i][k]);
          }
          for (int j = 1; j <= p; ++j) {
            for (int k = 1; k <= pp; ++k) {
              if (tmp[j] == temp[k]) {
                for (int l = k - 1; l < str[i].length(); ++l)
                  str[jj].push_back(str[i][l]);
                str[i] = str[jj];
                str[jj].clear();
                judge = 1;
                break;
              }
            }
          }
        }
        if (judge) {
          jjudge = 1;
        }
      }
    }
    if (!jjudge) break;
  }
  for (int i = 1; i <= n; ++i) {
    mp.clear();
    string ss;
    for (int j = 0; j < str[i].length(); ++j) {
      ss.clear();
      for (int k = j; k < str[i].length(); ++k)
        ss.push_back(str[i][k]), mp[ss] = 1;
    }
    for (int j = 1; j <= n; ++j) {
      if (j == i) continue;
      if (mp[str[j]] == 1) {
        str[j].clear();
      }
    }
  }
  sort(str + 1, str + n + 1);
  string ans;
  ans.clear();
  for (int i = 1; i <= n; ++i) ans += str[i];
  memset(take, 0, sizeof take);
  for (int i = 0; i < ans.length(); ++i) {
    if (!take[ans[i] - 'a'])
      take[ans[i] - 'a'] = 1;
    else {
      cout << "NO" << endl;
      return 0;
    }
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
za
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
r
s
t
u
v
w
x
y
z


(G.2) Fast Input

2
aa
b


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3f3f3f3f; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1.0); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string str[101000]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int take[30]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string temp[3000]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
string tmp[1000]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
map<string, int> mp; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  if (n > 27 * 13) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "NO" << endl; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) { /* line 18 slow_hit_count: 26, fast_hit_count: 3 */
    cin >> str[i]; /* line 19 slow_hit_count: 25, fast_hit_count: 2 */
    if (str[i].length() > 26) { /* line 20 slow_hit_count: 25, fast_hit_count: 2 */
      cout << "NO" << endl; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) { /* line 25 slow_hit_count: 26, fast_hit_count: 3 */
    mp.clear(); /* line 26 slow_hit_count: 25, fast_hit_count: 2 */
    string ss; /* line 27 slow_hit_count: 50, fast_hit_count: 4 */
    for (int j = 0; j < str[i].length(); ++j) { /* line 28 slow_hit_count: 50, fast_hit_count: 5 */
      ss.clear(); /* line 29 slow_hit_count: 25, fast_hit_count: 3 */
      for (int k = j; k < str[i].length(); ++k) /* line 30 slow_hit_count: 51, fast_hit_count: 7 */
        ss.push_back(str[i][k]), mp[ss] = 1; /* line 31 slow_hit_count: 26, fast_hit_count: 4 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 1; j <= n; ++j) { /* line 33 slow_hit_count: 650, fast_hit_count: 6 */
      if (j == i) continue; /* line 34 slow_hit_count: 625, fast_hit_count: 4 */
      if (mp[str[j]] == 1) { /* line 35 slow_hit_count: 600, fast_hit_count: 2 */
        str[j].clear(); /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  while (1) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    int jjudge = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= n; ++i) { /* line 42 slow_hit_count: 26, fast_hit_count: 1 */
      memset(take, 0, sizeof take); /* line 43 slow_hit_count: 25, fast_hit_count: 1 */
      for (int j = 0; j < str[i].length(); ++j) { /* line 44 slow_hit_count: 50, fast_hit_count: 2 */
        if (!take[str[i][j] - 'a']) /* line 45 slow_hit_count: 25, fast_hit_count: 2 */
          take[str[i][j] - 'a'] = 1; /* line 46 slow_hit_count: 25, fast_hit_count: 1 */
        else { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
          cout << "NO" << endl; /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
          return 0; /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
        } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      for (int jj = 1; jj <= n; ++jj) { /* line 52 slow_hit_count: 650, fast_hit_count: 0 */
        if (i == jj) continue; /* line 53 slow_hit_count: 625, fast_hit_count: 0 */
        int p = 0; /* line 54 slow_hit_count: 600, fast_hit_count: 0 */
        for (int j = 0; j < str[jj].length(); ++j) { /* line 55 slow_hit_count: 1200, fast_hit_count: 0 */
          tmp[++p].clear(); /* line 56 slow_hit_count: 600, fast_hit_count: 0 */
          for (int k = 0; k <= j; ++k) tmp[p].push_back(str[jj][k]); /* line 57 slow_hit_count: 1224, fast_hit_count: 0 */
        } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
        int pp = 0; /* line 59 slow_hit_count: 600, fast_hit_count: 0 */
        for (int j = 0; j < str[i].length(); ++j) { /* line 60 slow_hit_count: 1200, fast_hit_count: 0 */
          temp[++pp].clear(); /* line 61 slow_hit_count: 600, fast_hit_count: 0 */
          for (int k = j; k < str[i].length(); ++k) /* line 62 slow_hit_count: 1224, fast_hit_count: 0 */
            temp[pp].push_back(str[i][k]); /* line 63 slow_hit_count: 624, fast_hit_count: 0 */
        } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
        int judge = 0; /* line 65 slow_hit_count: 600, fast_hit_count: 0 */
        for (int j = 1; j <= p; ++j) { /* line 66 slow_hit_count: 1200, fast_hit_count: 0 */
          for (int k = 1; k <= pp; ++k) /* line 67 slow_hit_count: 1198, fast_hit_count: 0 */
            if (tmp[j] == temp[k]) { /* line 68 slow_hit_count: 598, fast_hit_count: 0 */
              for (int l = j; l < str[jj].length(); ++l) /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
                str[i].push_back(str[jj][l]); /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
              str[jj].clear(); /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
              judge = 1; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
              break; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
            } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
        if (!judge) { /* line 76 slow_hit_count: 600, fast_hit_count: 0 */
          p = 0; /* line 77 slow_hit_count: 600, fast_hit_count: 0 */
          for (int j = 0; j < str[jj].length(); ++j) { /* line 78 slow_hit_count: 1200, fast_hit_count: 0 */
            tmp[++p].clear(); /* line 79 slow_hit_count: 600, fast_hit_count: 0 */
            for (int k = j; k < str[jj].length(); ++k) /* line 80 slow_hit_count: 1224, fast_hit_count: 0 */
              tmp[p].push_back(str[jj][k]); /* line 81 slow_hit_count: 624, fast_hit_count: 0 */
          } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
          pp = 0; /* line 83 slow_hit_count: 600, fast_hit_count: 0 */
          for (int j = 0; j < str[i].length(); ++j) { /* line 84 slow_hit_count: 1200, fast_hit_count: 0 */
            temp[++pp].clear(); /* line 85 slow_hit_count: 600, fast_hit_count: 0 */
            for (int k = 0; k < j; ++k) temp[pp].push_back(str[i][k]); /* line 86 slow_hit_count: 624, fast_hit_count: 0 */
          } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
          for (int j = 1; j <= p; ++j) { /* line 88 slow_hit_count: 1200, fast_hit_count: 0 */
            for (int k = 1; k <= pp; ++k) { /* line 89 slow_hit_count: 1198, fast_hit_count: 0 */
              if (tmp[j] == temp[k]) { /* line 90 slow_hit_count: 598, fast_hit_count: 0 */
                for (int l = k - 1; l < str[i].length(); ++l) /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
                  str[jj].push_back(str[i][l]); /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
                str[i] = str[jj]; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
                str[jj].clear(); /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
                judge = 1; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
                break; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
              } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
            } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
        if (judge) { /* line 101 slow_hit_count: 600, fast_hit_count: 0 */
          jjudge = 1; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
    if (!jjudge) break; /* line 106 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) { /* line 108 slow_hit_count: 26, fast_hit_count: 0 */
    mp.clear(); /* line 109 slow_hit_count: 25, fast_hit_count: 0 */
    string ss; /* line 110 slow_hit_count: 50, fast_hit_count: 0 */
    for (int j = 0; j < str[i].length(); ++j) { /* line 111 slow_hit_count: 50, fast_hit_count: 0 */
      ss.clear(); /* line 112 slow_hit_count: 25, fast_hit_count: 0 */
      for (int k = j; k < str[i].length(); ++k) /* line 113 slow_hit_count: 51, fast_hit_count: 0 */
        ss.push_back(str[i][k]), mp[ss] = 1; /* line 114 slow_hit_count: 26, fast_hit_count: 0 */
    } /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 1; j <= n; ++j) { /* line 116 slow_hit_count: 650, fast_hit_count: 0 */
      if (j == i) continue; /* line 117 slow_hit_count: 625, fast_hit_count: 0 */
      if (mp[str[j]] == 1) { /* line 118 slow_hit_count: 600, fast_hit_count: 0 */
        str[j].clear(); /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
  sort(str + 1, str + n + 1); /* line 123 slow_hit_count: 1, fast_hit_count: 0 */
  string ans; /* line 124 slow_hit_count: 1, fast_hit_count: 0 */
  ans.clear(); /* line 125 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) ans += str[i]; /* line 126 slow_hit_count: 26, fast_hit_count: 0 */
  memset(take, 0, sizeof take); /* line 127 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < ans.length(); ++i) { /* line 128 slow_hit_count: 26, fast_hit_count: 0 */
    if (!take[ans[i] - 'a']) /* line 129 slow_hit_count: 25, fast_hit_count: 0 */
      take[ans[i] - 'a'] = 1; /* line 130 slow_hit_count: 25, fast_hit_count: 0 */
    else { /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "NO" << endl; /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 136 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 137 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To diagnose the performance issues in the given C code, let's analyze the hit counts and deduce the bottlenecks.

### Phase 1: Identify Expensive or Inefficient Code Segments

After comparing the hit counts between the slow and fast inputs, we observe:

1. **Lines with High Hit Counts in Slow Input:**
   - The nested loops starting from line 25 and line 52, involving `mp` (a map for storing substrings) and operations on `str[]`, contribute significantly to the slowdown.
   - The lines between 66 and 101 show particularly heavy activity, indicating repeated comparisons and modifications of strings.
   - Lines 55-63 and subsequent blocks have repeated operations on substrings, which can become computationally expensive due to the quadratic or worse nature of substring handling.

2. **Data Structure Involvement:**
   - The `map<string, int> mp` is frequently cleared and repopulated in loops, which is costly given the number of string operations.
   - The use of `tmp` and `temp` arrays to store substrings for comparison creates high overhead, especially when their sizes grow with the input size.

3. **Loop and Recursion Dynamics:**
   - Nested loops with multiple iterations over potentially large strings (up to 26 characters) cause the performance drop. The complexity increases with the number of strings and their lengths, and it becomes excessive with a larger input set.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

Given the observations, here are the performance-characterizing invariants:

1. **Invariant #1: Substring Map Operations**
   - **Description:** "When the input contains a large number of distinct strings, each requiring computation of all possible substrings to check for occurrences, the operations on the substring map (`mp`) can become a bottleneck. This occurs particularly when the majority of strings have a length approaching the maximum possible (26 characters)."

2. **Invariant #2: Nested Loop Complexity**
   - **Description:** "When the number of strings `n` is large and each string has a significant length, the nested loops that generate and compare substrings result in a combinatorial increase in operations. The slowdown is especially evident when these strings have overlapping prefixes or suffixes, causing repeated operations."

3. **Invariant #3: Repeated String Combinations**
   - **Description:** "If the strings contain numerous common substrings, the repeated attempts to build and compare all potential combinations of these strings incur high computational costs. This situation arises when the input strings can be permuted into multiple lexicographical orderings, causing the algorithm to exhaustively explore these permutations."

4. **Invariant #4: Sorting and Reconstruction**
   - **Description:** "When the list of strings requires frequent sorting or rearrangement due to attempted reconstructions, the overhead of these operations increases with the size of the input. This is exacerbated if many strings share common characters, leading to high collision and reconstruction attempts."

These invariants abstract the specific performance characteristics demonstrated in the slow input scenario without relying on specific values, offering a broad diagnostic to identify potential slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring.

You are given a set of strings. A string (not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non-empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print "NO" (without quotes).

A substring of a string is a contiguous subsequence of letters in the string. For example, "ab", "c", "abc" are substrings of string "abc", while "ac" is not a substring of that string.

The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap.

String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.

Input

The first line contains integer n (1 ≤ n ≤ 105) — the number of strings in the set.

Each of the next n lines contains a non-empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct.

The total length of the strings doesn't exceed 105.

Output

Print the non-empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print "NO" (without quotes) if there are no good strings.

Examples

Input

4
mail
ai
lru
cf


Output

cfmailru


Input

3
kek
preceq
cheburek


Output

NO

Note

One can show that in the first sample only two good strings with minimum length exist: "cfmailru" and "mailrucf". The first string is lexicographically minimum.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, the following C++ code snippets will check for the conditions that may lead to slow performance:

### Invariant #1: Substring Map Operations

```cpp
void check_substring_map_invariant(int stringCount, int stringLength) {
    if (stringCount > 20 && stringLength > 20) {
        cerr << "Warning: Performance bottleneck due to extensive substring map operations!" << endl;
        abort();
    }
}
```

### Invariant #2: Nested Loop Complexity

```cpp
void check_nested_loop_invariant(int numStrings, int avgLength) {
    if (numStrings > 20 && avgLength > 20) {
        cerr << "Warning: Nested loop complexity bottleneck triggered!" << endl;
        abort();
    }
}
```

### Invariant #3: Repeated String Combinations

```cpp
void check_repeated_combinations_invariant(int numStrings, int maxCommonSubstrings) {
    if (numStrings > 20 && maxCommonSubstrings > 20) {
        cerr << "Warning: Repeated string combinations bottleneck triggered!" << endl;
        abort();
    }
}
```

### Invariant #4: Sorting and Reconstruction

```cpp
void check_sorting_reconstruction_invariant(int totalLength) {
    if (totalLength > 100) {
        cerr << "Warning: Sorting and reconstruction bottleneck due to large input size!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const long long MOD = 1e9 + 7;
const double PI = acos(-1.0);
string str[101000];
int take[30];
string temp[3000];
string tmp[1000];
map<string, int> mp;

// Function to check for performance bottlenecks due to substring map operations
void check_substring_map_invariant(int stringCount, int stringLength) {
    if (stringCount > 20 && stringLength > 20) {
        cerr << "Warning: Performance bottleneck due to extensive substring map operations!" << endl;
        abort();
    }
}

// Function to check for performance bottlenecks due to nested loop complexity
void check_nested_loop_invariant(int numStrings, int avgLength) {
    if (numStrings > 20 && avgLength > 20) {
        cerr << "Warning: Nested loop complexity bottleneck triggered!" << endl;
        abort();
    }
}

// Function to check for performance bottlenecks due to repeated string combinations
void check_repeated_combinations_invariant(int numStrings, int maxCommonSubstrings) {
    if (numStrings > 20 && maxCommonSubstrings > 20) {
        cerr << "Warning: Repeated string combinations bottleneck triggered!" << endl;
        abort();
    }
}

// Function to check for performance bottlenecks due to sorting and reconstruction
void check_sorting_reconstruction_invariant(int totalLength) {
    if (totalLength > 100) {
        cerr << "Warning: Sorting and reconstruction bottleneck due to large input size!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    
    // Insert check before processing to catch potential bottlenecks early
    check_sorting_reconstruction_invariant(n * 26);  // Roughly estimating the potential total length

    if (n > 27 * 13) {
        cout << "NO" << endl;
        return 0;
    }
    
    for (int i = 1; i <= n; ++i) {
        cin >> str[i];
        if (str[i].length() > 26) {
            cout << "NO" << endl;
            return 0;
        }
    }

    // Insert check based on string properties before complex operations
    check_substring_map_invariant(n, 26); // Assume max length of string is 26
    check_nested_loop_invariant(n, 13);   // Average length threshold
    check_repeated_combinations_invariant(n, 13); // Assume potential max common substrings

    for (int i = 1; i <= n; ++i) {
        mp.clear();
        string ss;
        for (int j = 0; j < str[i].length(); ++j) {
            ss.clear();
            for (int k = j; k < str[i].length(); ++k)
                ss.push_back(str[i][k]), mp[ss] = 1;
        }
        for (int j = 1; j <= n; ++j) {
            if (j == i) continue;
            if (mp[str[j]] == 1) {
                str[j].clear();
            }
        }
    }

    while (1) {
        int jjudge = 0;
        for (int i = 1; i <= n; ++i) {
            memset(take, 0, sizeof take);
            for (int j = 0; j < str[i].length(); ++j) {
                if (!take[str[i][j] - 'a'])
                    take[str[i][j] - 'a'] = 1;
                else {
                    cout << "NO" << endl;
                    return 0;
                }
            }
            for (int jj = 1; jj <= n; ++jj) {
                if (i == jj) continue;
                int p = 0;
                for (int j = 0; j < str[jj].length(); ++j) {
                    tmp[++p].clear();
                    for (int k = 0; k <= j; ++k) tmp[p].push_back(str[jj][k]);
                }
                int pp = 0;
                for (int j = 0; j < str[i].length(); ++j) {
                    temp[++pp].clear();
                    for (int k = j; k < str[i].length(); ++k)
                        temp[pp].push_back(str[i][k]);
                }
                int judge = 0;
                for (int j = 1; j <= p; ++j) {
                    for (int k = 1; k <= pp; ++k)
                        if (tmp[j] == temp[k]) {
                            for (int l = j; l < str[jj].length(); ++l)
                                str[i].push_back(str[jj][l]);
                            str[jj].clear();
                            judge = 1;
                            break;
                        }
                }
                if (!judge) {
                    p = 0;
                    for (int j = 0; j < str[jj].length(); ++j) {
                        tmp[++p].clear();
                        for (int k = j; k < str[jj].length(); ++k)
                            tmp[p].push_back(str[jj][k]);
                    }
                    pp = 0;
                    for (int j = 0; j < str[i].length(); ++j) {
                        temp[++pp].clear();
                        for (int k = 0; k < j; ++k) temp[pp].push_back(str[i][k]);
                    }
                    for (int j = 1; j <= p; ++j) {
                        for (int k = 1; k <= pp; ++k) {
                            if (tmp[j] == temp[k]) {
                                for (int l = k - 1; l < str[i].length(); ++l)
                                    str[jj].push_back(str[i][l]);
                                str[i] = str[jj];
                                str[jj].clear();
                                judge = 1;
                                break;
                            }
                        }
                    }
                }
                if (judge) {
                    jjudge = 1;
                }
            }
        }
        if (!jjudge) break;
    }
    for (int i = 1; i <= n; ++i) {
        mp.clear();
        string ss;
        for (int j = 0; j < str[i].length(); ++j) {
            ss.clear();
            for (int k = j; k < str[i].length(); ++k)
                ss.push_back(str[i][k]), mp[ss] = 1;
        }
        for (int j = 1; j <= n; ++j) {
            if (j == i) continue;
            if (mp[str[j]] == 1) {
                str[j].clear();
            }
        }
    }
    sort(str + 1, str + n + 1);
    string ans;
    ans.clear();
    for (int i = 1; i <= n; ++i) ans += str[i];
    memset(take, 0, sizeof take);
    for (int i = 0; i < ans.length(); ++i) {
        if (!take[ans[i] - 'a'])
            take[ans[i] - 'a'] = 1;
        else {
            cout << "NO" << endl;
            return 0;
        }
    }
    cout << ans << endl;
}
```

### Comments on Added Checks

- **Check for `check_sorting_reconstruction_invariant`:** Placed early in the `main` function to catch scenarios that may cause issues with sorting or rearranging of large numbers of strings.
- **Check for `check_substring_map_invariant`:** Added after input reading to detect potential bottlenecks when computing substrings for each string.
- **Check for `check_nested_loop_invariant`:** Positioned before nested loops to ensure they don't become a performance issue with large inputs.
- **Check for `check_repeated_combinations_invariant`:** Added to handle cases where repeated combinations of substrings lead to high computational expense.

These checks are inserted at strategic points to effectively detect potential performance bottlenecks without adding unnecessary overhead.

