system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, .... 

<image>

The Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.

Input

The first line of input contains two integers a and b (1 ≤ a, b ≤ 100). 

The second line contains two integers c and d (1 ≤ c, d ≤ 100).

Output

Print the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.

Examples

Input

20 2
9 19


Output

82


Input

2 1
16 12


Output

-1

Note

In the first sample testcase, Rick's 5th scream and Morty's 8th time are at time 82. 

In the second sample testcase, all Rick's screams will be at odd times and Morty's will be at even times, so they will never scream at the same time.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long N = 1e7 + 5;
void solve() {
  long long a, b, c, d;
  cin >> a >> b >> c >> d;
  for (long long i = 0; i < N; i++) {
    long long x = b + i * a;
    double y = ((1.0) * (x - d)) / c;
    if (ceil(y) == floor(y) && y >= 0) {
      cout << x << "\n";
      return;
    }
  }
  cout << -1 << "\n";
}
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  clock_t start = clock();
  long long t = 1;
  while (t--) {
    solve();
  }
  clock_t stop = clock();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 1
2 2


(G.2) Fast Input

2 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 1e7 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long a, b, c, d; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b >> c >> d; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < N; i++) { /* line 7 slow_hit_count: 10000006, fast_hit_count: 2 */
    long long x = b + i * a; /* line 8 slow_hit_count: 10000005, fast_hit_count: 2 */
    double y = ((1.0) * (x - d)) / c; /* line 9 slow_hit_count: 10000005, fast_hit_count: 2 */
    if (ceil(y) == floor(y) && y >= 0) { /* line 10 slow_hit_count: 10000005, fast_hit_count: 2 */
      cout << x << "\n"; /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
      return; /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cout << -1 << "\n"; /* line 15 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  clock_t start = clock(); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  long long t = 1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  clock_t stop = clock(); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown, let's analyze the provided code and hit count information.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Analysis**: 
   - The for-loop on line 7: `for (long long i = 0; i < N; i++)` has a hit count of 10,000,006 for the slow input compared to 2 for the fast input. This indicates a significant difference in execution time.
   - The lines within the loop (lines 8-10) also have high hit counts for the slow input, each with 10,000,005 hits, compared to 2 for the fast input. This shows the loop iterates many more times for the slow input.

2. **Code Behavior**:
   - The loop generates Rick's scream times (`x = b + i * a`) and checks if they coincide with any of Morty's scream times (`y = (x - d) / c`).
   - The condition `if (ceil(y) == floor(y) && y >= 0)` checks whether a valid Morty's scream time exists that matches Rick's scream time.

3. **Data Interaction**:
   - The high number of iterations in the loop for the slow input suggests it takes many attempts to match Morty's scream time or never finds a match.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are the performance-characterizing invariants:

1. **Invariant: Matching Scream Times with Close Intervals**:
   - **Natural Language Description**: "When the intervals `a` and `c` are close in value, and the initial offsets `b` and `d` are also close, the loop may iterate many times without finding a match, causing a slowdown."
   - **Explanation**: This describes scenarios where the screams are too frequent relative to each other without coinciding, leading to many loop iterations.

2. **Invariant: High Initial Offset Difference**:
   - **Natural Language Description**: "If the difference between initial scream offsets `b` and `d` is small compared to `a` and `c`, the computation may result in excessive attempts to match scream times, slowing down the program."
   - **Explanation**: A small difference means the sequences of screams continue parallel without intersecting, prompting many iterations.

3. **Invariant: Small Interval Values**:
   - **Natural Language Description**: "When both scream intervals `a` and `c` are small, the number of potential checks for matching scream times increases significantly, potentially slowing down computation."
   - **Explanation**: Smaller intervals lead to more frequent checks, increasing the number of iterations.

These invariants capture the conditions under which the program is likely to enter a slow execution path, where the loop iterates excessively due to the properties of the input values interacting unfavorably.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, .... 

<image>

The Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.

Input

The first line of input contains two integers a and b (1 ≤ a, b ≤ 100). 

The second line contains two integers c and d (1 ≤ c, d ≤ 100).

Output

Print the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.

Examples

Input

20 2
9 19


Output

82


Input

2 1
16 12


Output

-1

Note

In the first sample testcase, Rick's 5th scream and Morty's 8th time are at time 82. 

In the second sample testcase, all Rick's screams will be at odd times and Morty's will be at even times, so they will never scream at the same time.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each of the natural language invariants derived, let's implement runtime checks in C++.

1. **Invariant: Matching Scream Times with Close Intervals**:
    - **Checker Code**:
    ```cpp
    void check_close_intervals(int a, int b, int c, int d) {
        if (abs(a - c) <= 1 && abs(b - d) <= 1) {
            cerr << "Warning: Performance bottleneck condition triggered due to close intervals!" << endl;
            abort();
        }
    }
    ```

2. **Invariant: High Initial Offset Difference**:
    - **Checker Code**:
    ```cpp
    void check_small_offset_difference(int a, int b, int c, int d) {
        if (abs(b - d) < min(a, c)) {
            cerr << "Warning: Performance bottleneck condition triggered due to small offset difference!" << endl;
            abort();
        }
    }
    ```

3. **Invariant: Small Interval Values**:
    - **Checker Code**:
    ```cpp
    void check_small_intervals(int a, int c) {
        if (a <= 2 && c <= 2) {
            cerr << "Warning: Performance bottleneck condition triggered due to small interval values!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrate the Checker Code into the Original Program

Now, we will integrate these checker codes into the original C++ program at appropriate places to detect the conditions without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long N = 1e7 + 5;

void check_close_intervals(int a, int b, int c, int d) {
    if (abs(a - c) <= 1 && abs(b - d) <= 1) {
        cerr << "Warning: Performance bottleneck condition triggered due to close intervals!" << endl;
        abort();
    }
}

void check_small_offset_difference(int a, int b, int c, int d) {
    if (abs(b - d) < min(a, c)) {
        cerr << "Warning: Performance bottleneck condition triggered due to small offset difference!" << endl;
        abort();
    }
}

void check_small_intervals(int a, int c) {
    if (a <= 2 && c <= 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to small interval values!" << endl;
        abort();
    }
}

void solve() {
  long long a, b, c, d;
  cin >> a >> b >> c >> d;

  // Insert performance checks after reading input to avoid overhead in tight loop
  check_close_intervals(a, b, c, d);
  check_small_offset_difference(a, b, c, d);
  check_small_intervals(a, c);

  for (long long i = 0; i < N; i++) {
    long long x = b + i * a;
    double y = ((1.0) * (x - d)) / c;
    if (ceil(y) == floor(y) && y >= 0) {
      cout << x << "\n";
      return;
    }
  }
  cout << -1 << "\n";
}

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  clock_t start = clock();
  long long t = 1;
  while (t--) {
    solve();
  }
  clock_t stop = clock();
  return 0;
}
```

### Explanation:

- **Check Placement**: The checks are placed immediately after reading the input, which ensures they are executed once per call to `solve()` without adding any overhead inside the loop.
- **Abort on Failure**: Each check aborts the program if the condition is met, issuing a warning message to help diagnose performance bottlenecks caused by input conditions.

