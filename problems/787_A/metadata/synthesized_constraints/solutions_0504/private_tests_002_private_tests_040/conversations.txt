system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, .... 

<image>

The Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.

Input

The first line of input contains two integers a and b (1 ≤ a, b ≤ 100). 

The second line contains two integers c and d (1 ≤ c, d ≤ 100).

Output

Print the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.

Examples

Input

20 2
9 19


Output

82


Input

2 1
16 12


Output

-1

Note

In the first sample testcase, Rick's 5th scream and Morty's 8th time are at time 82. 

In the second sample testcase, all Rick's screams will be at odd times and Morty's will be at even times, so they will never scream at the same time.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int a, b, c, d;
  cin >> a >> b >> c >> d;
  for (int i = 0; i < 10000; i++) {
    for (int j = 0; j < 10000; j++) {
      if (j * c == b - d + i * a) {
        cout << b + a * i;
        return 0;
      }
    }
  }
  cout << "-1" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 3
2 2


(G.2) Fast Input

2 3
2 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b, c, d; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b >> c >> d; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 10000; i++) { /* line 6 slow_hit_count: 10001, fast_hit_count: 1 */
    for (int j = 0; j < 10000; j++) { /* line 7 slow_hit_count: 100010000, fast_hit_count: 1 */
      if (j * c == b - d + i * a) { /* line 8 slow_hit_count: 100000000, fast_hit_count: 1 */
        cout << b + a * i; /* line 9 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 10 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "-1" << endl; /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 15 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided problem statement and the C program, let's analyze the performance bottleneck and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The nested loops in lines 6 and 7 have significantly higher hit counts for the slow input compared to the fast input. Specifically, line 6 has a hit count of 10,001 for the slow input, compared to 1 for the fast input. Line 7 has an even more dramatic difference, with a hit count of 100,010,000 for the slow input, compared to just 1 for the fast input. 
   - This indicates that the loops are executing many more iterations for the slow input, suggesting that the condition inside the nested loops (line 8) is rarely satisfied in the slow case, leading to excessive computation.
   
2. **Interaction with Data Structures or Loops:**
   - The inner loop (line 7) iterates over 10,000 potential values of `j` for each value of `i`, which means the program is effectively testing 100 million combinations of `(i, j)` for the slow input.
   - This suggests the complexity of the approach is O(n^2) where n is the range of the loops (10,000 in this case), which is problematic given the constraints if the early exit condition (`j * c == b - d + i * a`) is not met early in the process.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Iteration Count in Nested Loops**
   - Natural Language Description: "If the condition inside the nested loops rarely holds true, the program will iterate through nearly all combinations of `i` and `j`, leading to significant slowdowns."
   - This occurs when the sequences generated by `b + a * i` and `d + c * j` rarely coincide for low values of `i` and `j`.

2. **Invariant 2: Similar Incremental Steps (a ≈ c)**
   - Natural Language Description: "When the incremental step `a` for Rick's screams is similar to the step `c` for Morty's screams, the likelihood of them screaming at the same time early in the sequence decreases, causing more iterations."
   - This is because, with similar increments, the sequences progress in parallel without intersecting frequently, increasing the effort needed to find a common time.

3. **Invariant 3: Initial Offset Difference (b - d)**
   - Natural Language Description: "A large initial offset difference `(b - d)` or a scenario where the offsets lead to parallel progress without early intersections causes extended computations."
   - The condition `j * c == b - d + i * a` relies heavily on aligning these sequences, so significant initial disparities without appropriate step adjustments prolong the execution.

These invariants help identify scenarios that can lead to performance degradation in the program, allowing developers to anticipate and mitigate slow performance when testing or running the program in different environments or with different inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, .... 

<image>

The Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.

Input

The first line of input contains two integers a and b (1 ≤ a, b ≤ 100). 

The second line contains two integers c and d (1 ≤ c, d ≤ 100).

Output

Print the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.

Examples

Input

20 2
9 19


Output

82


Input

2 1
16 12


Output

-1

Note

In the first sample testcase, Rick's 5th scream and Morty's 8th time are at time 82. 

In the second sample testcase, all Rick's screams will be at odd times and Morty's will be at even times, so they will never scream at the same time.

Solution (C++ code):
{solution}


assistant: Let's begin with Phase 3, where we'll implement the runtime checks in C++ for the performance-characterizing invariants derived earlier.

### Phase 3: Implement Checker Code for Invariants

1. **Invariant 1: High Iteration Count in Nested Loops**
   - We'll check if the condition inside the nested loop is rarely met and assess potential excessive iteration.

```cpp
void check_high_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count in nested loops!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Similar Incremental Steps (a ≈ c)**
   - We implement a check for similar step values `a` and `c` that might cause fewer intersection opportunities early in the sequence.

```cpp
void check_similar_steps_invariant(int a, int c) {
    if (abs(a - c) < 5) { // Threshold for "similar steps" can be adjusted based on testing
        cerr << "Warning: Performance bottleneck condition triggered - similar incremental steps!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Initial Offset Difference (b - d)**
   - We add a check for an initial offset difference that might lead to less frequent intersections.

```cpp
void check_initial_offset_difference(int b, int d) {
    if (abs(b - d) > 50) { // Example threshold for significant initial offset
        cerr << "Warning: Performance bottleneck condition triggered - large initial offset difference!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code with Original Program

Now, we'll integrate these checks into the provided C++ program, ensuring they are placed effectively to diagnose performance issues without affecting the program's control flow negatively.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance bottlenecks
void check_high_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count in nested loops!" << endl;
        abort();
    }
}

void check_similar_steps_invariant(int a, int c) {
    if (abs(a - c) < 5) {
        cerr << "Warning: Performance bottleneck condition triggered - similar incremental steps!" << endl;
        abort();
    }
}

void check_initial_offset_difference(int b, int d) {
    if (abs(b - d) > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - large initial offset difference!" << endl;
        abort();
    }
}

int main() {
    int a, b, c, d;
    cin >> a >> b >> c >> d;

    // Insert invariant checks at logical places
    check_similar_steps_invariant(a, c); // Check for similar step increments
    check_initial_offset_difference(b, d); // Check for large initial offset difference

    int iteration_count = 0; // Track iteration count for high iteration check

    for (int i = 0; i < 10000; i++) {
        for (int j = 0; j < 10000; j++) {
            iteration_count++;
            if (j * c == b - d + i * a) {
                cout << b + a * i;
                return 0;
            }
        }
    }

    // Assess if too many iterations occurred
    check_high_iteration_invariant(iteration_count > 1000000); // Example threshold 

    cout << "-1" << endl;
    return 0;
}
```

**Explanation of Instrumented Code:**

- **Checker Function Calls:**
  - **`check_similar_steps_invariant(a, c)`** and **`check_initial_offset_difference(b, d)`** are executed after reading inputs to preemptively catch conditions that might lead to slow execution.
  - **`check_high_iteration_invariant(iteration_count > 1000000)`** is placed after the nested loops to assess whether a large number of iterations were executed, indicating potential inefficiency.

- **Placement Considerations:**
  - Checks are placed outside tight loops to avoid adding unnecessary overhead during execution, which could itself skew performance.
  - Conditions and thresholds used in the checks are based on reasonable assumptions for the problem and can be adjusted based on further analysis or testing.

