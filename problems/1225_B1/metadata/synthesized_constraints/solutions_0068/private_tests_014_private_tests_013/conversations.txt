system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show, the episode of which will be shown in i-th day.

The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.

How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 ≤ d ≤ n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.

Input

The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.

The first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.

It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100.

Output

Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.

Example

Input


4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 2 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


Output


2
1
4
5

Note

In the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.

In the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.

In the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.

In the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int mod = 1000007;
int main() {
  int q;
  cin >> q;
  while (q--) {
    int n, k, d;
    cin >> n >> k >> d;
    int arr_s[n];
    for (int i = 0; i < n; i++) {
      cin >> arr_s[i];
    }
    vector<pair<int, int>> vec;
    int j = 0, i = 0, type = arr_s[0];
    while (i < n) {
      if (type == arr_s[i])
        j++;
      else {
        vec.push_back({type, j});
        j = 1;
        type = arr_s[i];
      }
      i++;
    }
    vec.push_back({type, j});
    int res = -1;
    for (i = 0; i < vec.size(); i++) {
      set<int> set_res;
      int sub_res = 0;
      j = i;
      while (j < vec.size() && sub_res < d) {
        set_res.insert(vec[j].first);
        sub_res += vec[j].second;
        j++;
      }
      if (sub_res >= d) {
        if (res == -1) {
          res = set_res.size();
        } else
          res = min(res, (int)set_res.size());
        if (res == 1) break;
      }
    }
    cout << res << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
100 100 100
100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1


(G.2) Fast Input

1
100 100 1
100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int mod = 1000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int q; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  while (q--) { /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    int n, k, d; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n >> k >> d; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    int arr_s[n]; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) { /* line 11 slow_hit_count: 101, fast_hit_count: 101 */
      cin >> arr_s[i]; /* line 12 slow_hit_count: 100, fast_hit_count: 100 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    vector<pair<int, int>> vec; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
    int j = 0, i = 0, type = arr_s[0]; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    while (i < n) { /* line 16 slow_hit_count: 101, fast_hit_count: 101 */
      if (type == arr_s[i]) /* line 17 slow_hit_count: 100, fast_hit_count: 100 */
        j++; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
      else { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        vec.push_back({type, j}); /* line 20 slow_hit_count: 99, fast_hit_count: 99 */
        j = 1; /* line 21 slow_hit_count: 99, fast_hit_count: 99 */
        type = arr_s[i]; /* line 22 slow_hit_count: 99, fast_hit_count: 99 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      i++; /* line 24 slow_hit_count: 100, fast_hit_count: 100 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    vec.push_back({type, j}); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    int res = -1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 0; i < vec.size(); i++) { /* line 28 slow_hit_count: 101, fast_hit_count: 1 */
      set<int> set_res; /* line 29 slow_hit_count: 100, fast_hit_count: 1 */
      int sub_res = 0; /* line 30 slow_hit_count: 100, fast_hit_count: 1 */
      j = i; /* line 31 slow_hit_count: 100, fast_hit_count: 1 */
      while (j < vec.size() && sub_res < d) { /* line 32 slow_hit_count: 5150, fast_hit_count: 2 */
        set_res.insert(vec[j].first); /* line 33 slow_hit_count: 5050, fast_hit_count: 1 */
        sub_res += vec[j].second; /* line 34 slow_hit_count: 5050, fast_hit_count: 1 */
        j++; /* line 35 slow_hit_count: 5050, fast_hit_count: 1 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      if (sub_res >= d) { /* line 37 slow_hit_count: 100, fast_hit_count: 1 */
        if (res == -1) { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
          res = set_res.size(); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
        } else /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
          res = min(res, (int)set_res.size()); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        if (res == 1) break; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    cout << res << endl; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants from the given C program, we can follow a structured approach as outlined in the task. Here's how we can proceed:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**: 
   - Analyze the provided hit counts for both slow and fast inputs.
   - The loop over `vec` (lines 28-42) experiences a dramatic increase in hits for the slow input (from 1 to 101 iterations on line 28, and from 2 to 5150 on line 32).

2. **Pinpoint Lines with More Hits on Slow Input**:
   - The line `while (j < vec.size() && sub_res < d)` (line 32) is executed 5150 times for the slow input while only 2 times for the fast input.
   - The lines inside this loop (lines 33-35) are also heavily hit, indicating they contribute to the slowdown.

3. **Infer Interaction with Data Structures**:
   - The code constructs a vector `vec` containing pairs of a show type and its consecutive occurrences.
   - The nested loops and use of a `set` to track unique shows (lines 28-42) suggest the slowdown is due to repeated expensive operations for larger segments.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Invariant 1: Large `d` Relative to `n`**:
   - **Natural Language Description**: "The program becomes slow when `d` is large relative to `n`, particularly when `d` approaches `n`, as this leads to larger segments being processed repeatedly to find minimal subscriptions."
   - **Reasoning**: This occurs because the inner loop (line 32) processes large segments when `d` is close to `n`, leading to more iterations and operations in the nested loop.

2. **Invariant 2: High Diversity in Show Types**:
   - **Natural Language Description**: "When there is a high diversity of show types within a segment of length `d`, the program might slow down due to repeated insertion and size calculation of the set of unique shows."
   - **Reasoning**: A diverse set of shows leads to larger `set_res` sizes and more operations in the loop (lines 28-42).

3. **Invariant 3: Segment Combinations**:
   - **Natural Language Description**: "The performance degrades if many different combinations of shows in segments are possible, especially if `k` is close to `n`, as the code attempts to compute minimal subscriptions over extensive possible arrangements."
   - **Reasoning**: The dynamic nature of constructing possible show combinations over segments (lines 28-42) requires checking many possibilities, which compounds the slowdown.

### Conclusion

The slow performance observed is primarily due to a combination of high values for `d` and `n`, and a high variety of show types (`k`). These factors contribute to increased operations in the nested loop, particularly affecting the number of times the set operations (like insertion and size calculations) are performed. By understanding these conditions, developers can look for ways to optimize these operations, perhaps by employing more efficient data structures or algorithms to handle segments and unique show types more effectively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show, the episode of which will be shown in i-th day.

The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.

How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 ≤ d ≤ n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.

Input

The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.

The first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.

It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100.

Output

Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.

Example

Input


4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 2 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


Output


2
1
4
5

Note

In the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.

In the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.

In the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.

In the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Performance-Characterizing Invariants in C++

Here, I will transform the identified natural language invariants into C++ code snippets to serve as runtime checks. These checks will help detect potential performance bottlenecks.

#### Invariant 1: Large `d` Relative to `n`
```cpp
void check_large_d_relative_to_n(int d, int n) {
    if (d > n / 2) { // Assuming a threshold where d being more than half of n could trigger a slowdown
        cerr << "Warning: Performance bottleneck condition triggered - large d relative to n!" << endl;
        abort();
    }
}
```

#### Invariant 2: High Diversity in Show Types
```cpp
void check_high_diversity(int k, int n) {
    if (k > n / 2) { // Assuming high diversity when k is more than half of n
        cerr << "Warning: Performance bottleneck condition triggered - high diversity in show types!" << endl;
        abort();
    }
}
```

#### Invariant 3: Segment Combinations
```cpp
void check_segment_combinations(int d, int k) {
    if (d * k > 1000) { // Arbitrary threshold assuming a large number of combinations can cause slowdown
        cerr << "Warning: Performance bottleneck condition triggered - potential large segment combinations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's integrate these checkers into the original C++ program. We will carefully place the checks to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
int mod = 1000007;

// Checker functions
void check_large_d_relative_to_n(int d, int n) {
    if (d > n / 2) { // Assuming a threshold where d being more than half of n could trigger a slowdown
        cerr << "Warning: Performance bottleneck condition triggered - large d relative to n!" << endl;
        abort();
    }
}

void check_high_diversity(int k, int n) {
    if (k > n / 2) { // Assuming high diversity when k is more than half of n
        cerr << "Warning: Performance bottleneck condition triggered - high diversity in show types!" << endl;
        abort();
    }
}

void check_segment_combinations(int d, int k) {
    if (d * k > 1000) { // Arbitrary threshold assuming a large number of combinations can cause slowdown
        cerr << "Warning: Performance bottleneck condition triggered - potential large segment combinations!" << endl;
        abort();
    }
}

int main() {
    int q;
    cin >> q;
    while (q--) {
        int n, k, d;
        cin >> n >> k >> d;
        // Insert performance checks immediately after reading inputs
        check_large_d_relative_to_n(d, n);
        check_high_diversity(k, n);
        check_segment_combinations(d, k);

        int arr_s[n];
        for (int i = 0; i < n; i++) {
            cin >> arr_s[i];
        }
        vector<pair<int, int>> vec;
        int j = 0, i = 0, type = arr_s[0];
        while (i < n) {
            if (type == arr_s[i])
                j++;
            else {
                vec.push_back({type, j});
                j = 1;
                type = arr_s[i];
            }
            i++;
        }
        vec.push_back({type, j});
        int res = -1;
        for (i = 0; i < vec.size(); i++) {
            set<int> set_res;
            int sub_res = 0;
            j = i;
            while (j < vec.size() && sub_res < d) {
                set_res.insert(vec[j].first);
                sub_res += vec[j].second;
                j++;
            }
            if (sub_res >= d) {
                if (res == -1) {
                    res = set_res.size();
                } else
                    res = min(res, (int)set_res.size());
                if (res == 1) break;
            }
        }
        cout << res << endl;
    }
}
```

### Explanation
- **Invariant 1 Check**: Placed right after reading `n` and `d`, checks if `d` is relatively large compared to `n`.
- **Invariant 2 Check**: Placed after reading `k`, checks if there is high diversity of show types relative to `n`.
- **Invariant 3 Check**: Also placed after reading `n`, `k`, and `d`, assesses the potential size of combinations impacting performance.

These checks are strategically placed after input reading to avoid adding any overhead inside performance-critical loops. They are designed to help identify conditions that could potentially lead to performance bottlenecks efficiently.

