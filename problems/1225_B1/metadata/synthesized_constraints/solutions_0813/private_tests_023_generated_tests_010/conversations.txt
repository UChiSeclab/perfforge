system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show, the episode of which will be shown in i-th day.

The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.

How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 ≤ d ≤ n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.

Input

The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.

The first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.

It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100.

Output

Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.

Example

Input


4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 2 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


Output


2
1
4
5

Note

In the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.

In the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.

In the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.

In the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int t;
const int N = 2e5 + 2, M = 1e6 + 5;
void Solve() {
  int n, k, d, res = 0;
  cin >> n >> k >> d;
  set<int> st;
  int c[M], a[N];
  for (int i = 0; i < n; ++i) cin >> a[i], c[a[i]] = 0;
  for (int i = 0; i < d; ++i) {
    st.insert(a[i]);
    c[a[i]]++;
  }
  res = st.size();
  for (int i = d; i < n; ++i) {
    st.insert(a[i]);
    c[a[i]]++;
    c[a[i - d]]--;
    if (c[a[i - d]] == 0) st.erase(a[i - d]);
    res = min(res, int(st.size()));
  }
  cout << res << endl;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cin >> t;
  while (t--) {
    Solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
4 4 1
3 3 1 2
4 4 1
4 1 4 1
1 1 1
1
3 2 1
2 1 2
4 4 2
3 2 2 2
4 2 4
1 2 2 2
1 4 1
4
2 3 1
2 3
2 2 1
2 2
4 4 2
1 2 4 2
4 4 1
2 4 4 3
4 3 1
1 3 1 3
1 1 1
1
2 2 2
2 1
2 4 1
1 4
2 4 1
3 4
1 2 1
1
2 4 2
2 1
3 1 2
1 1 1
2 4 1
1 4
2 3 1
3 3
4 2 2
2 1 2 2
3 2 2
2 2 1
4 3 1
2 2 1 2
2 3 1
1 3
4 4 4
3 2 2 3
1 4 1
1
2 1 2
1 1
1 4 1
4
2 3 1
3 3


(G.2) Fast Input

4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 3 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int t; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 2e5 + 2, M = 1e6 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void Solve() { /* line 5 slow_hit_count: 30, fast_hit_count: 4 */
  int n, k, d, res = 0; /* line 6 slow_hit_count: 30, fast_hit_count: 4 */
  cin >> n >> k >> d; /* line 7 slow_hit_count: 30, fast_hit_count: 4 */
  set<int> st; /* line 8 slow_hit_count: 60, fast_hit_count: 8 */
  int c[M], a[N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) cin >> a[i], c[a[i]] = 0; /* line 10 slow_hit_count: 107, fast_hit_count: 38 */
  for (int i = 0; i < d; ++i) { /* line 11 slow_hit_count: 74, fast_hit_count: 21 */
    st.insert(a[i]); /* line 12 slow_hit_count: 44, fast_hit_count: 17 */
    c[a[i]]++; /* line 13 slow_hit_count: 44, fast_hit_count: 17 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  res = st.size(); /* line 15 slow_hit_count: 30, fast_hit_count: 4 */
  for (int i = d; i < n; ++i) { /* line 16 slow_hit_count: 63, fast_hit_count: 21 */
    st.insert(a[i]); /* line 17 slow_hit_count: 33, fast_hit_count: 17 */
    c[a[i]]++; /* line 18 slow_hit_count: 33, fast_hit_count: 17 */
    c[a[i - d]]--; /* line 19 slow_hit_count: 33, fast_hit_count: 17 */
    if (c[a[i - d]] == 0) st.erase(a[i - d]); /* line 20 slow_hit_count: 33, fast_hit_count: 17 */
    res = min(res, int(st.size())); /* line 21 slow_hit_count: 33, fast_hit_count: 17 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << endl; /* line 23 slow_hit_count: 30, fast_hit_count: 4 */
} /* line 24 slow_hit_count: 30, fast_hit_count: 4 */
int main() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> t; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 29 slow_hit_count: 31, fast_hit_count: 5 */
    Solve(); /* line 30 slow_hit_count: 30, fast_hit_count: 4 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C code, we need to compare the line-level hit counts between the slow and fast inputs and identify the segments responsible for the slowdown. Here's how we can approach this:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**

   - **Line 5 (`void Solve() {`)**: This line is essentially the entry point into the `Solve` function. It gets hit significantly more in the slow input (30 times) compared to the fast input (4 times). This indicates more test cases are processed in the slow input.
   
   - **Lines 8-13 (Initialization and First Loop)**: The initialization of the set `st` and the first loop running from `0` to `d` is substantially more frequent in the slow input. The hit count for line 11 (`for (int i = 0; i < d; ++i)`) is 74 for slow input versus 21 for fast input. The operations in this loop (lines 12 and 13) also follow this trend. This suggests that initializing and maintaining the set for the first `d` days is expensive, particularly when `d` is large relative to `n`.
   
   - **Lines 16-21 (Sliding Window Loop)**: This loop also shows a higher hit count for the slow input (hit 63 times at line 16 versus 21 times for fast input). Inside this loop, operations on the set `st` (like insertion and deletion) are more frequent, implying that the sliding window operations contribute to the slowdown. This is especially noticeable if the number of distinct shows (`k`) is large compared to `d`.

2. **Inference on Code Interaction:**

   - The program frequently manipulates a set to track distinct shows over a sliding window of `d` days. Operations on the set (insertion, deletion) are costly if `d` is close to `n`, especially when the number of distinct shows (`k`) is large, leading to frequent updating of the set.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language statements describing conditions that trigger the slowdown:

1. **High `d` to `n` Ratio with Significant Distinct Shows:**
   - "If the number of days `d` for which shows need to be continuously watched is large compared to the total number of days `n`, and there are many distinct shows (`k` is large), the program may experience performance degradation due to frequent updates and operations on the set tracking these shows."

2. **High Frequency of Set Operations:**
   - "The performance may degrade when the set used to track distinct shows for `d` consecutive days is frequently modified, especially if `d` approaches `n` and there are multiple shows with overlapping appearances across the `d` days."

These invariants capture the essence of the problem by identifying that the combination of a large sliding window and many distinct show types results in a high number of costly operations, which are the primary contributors to the slowdown.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show, the episode of which will be shown in i-th day.

The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.

How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 ≤ d ≤ n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.

Input

The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.

The first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.

It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100.

Output

Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.

Example

Input


4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 2 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


Output


2
1
4
5

Note

In the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.

In the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.

In the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.

In the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checkers

Here is the implementation of the two performance-characterizing invariants identified in the previous phase:

1. **High `d` to `n` Ratio with Significant Distinct Shows:**

   This check will trigger if the number of days `d` is large compared to `n` and the number of distinct shows `k` approaches `d`.

   ```cpp
   void check_high_d_ratio_invariant(int n, int d, int k) {
       if ((d >= n * 0.8) && (k >= d * 0.8)) {
           cerr << "Warning: Performance bottleneck condition triggered - high d to n ratio with many distinct shows!" << endl;
           abort();
       }
   }
   ```

2. **High Frequency of Set Operations:**

   This check ensures that the set operations are not excessive by checking if `d` is large and `k` is close to `d`, indicating frequent updates.

   ```cpp
   void check_frequent_set_operations_invariant(int d, int k) {
       if ((d >= 50) && (k >= d * 0.7)) {
           cerr << "Warning: Performance bottleneck condition triggered - frequent set operations due to large d and many distinct shows!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Code

Below is the original C++ code with integrated checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

int t;
const int N = 2e5 + 2, M = 1e6 + 5;

void check_high_d_ratio_invariant(int n, int d, int k) {
    if ((d >= n * 0.8) && (k >= d * 0.8)) {
        cerr << "Warning: Performance bottleneck condition triggered - high d to n ratio with many distinct shows!" << endl;
        abort();
    }
}

void check_frequent_set_operations_invariant(int d, int k) {
    if ((d >= 50) && (k >= d * 0.7)) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent set operations due to large d and many distinct shows!" << endl;
        abort();
    }
}

void Solve() {
    int n, k, d, res = 0;
    cin >> n >> k >> d;

    // Insert invariant checks here
    check_high_d_ratio_invariant(n, d, k);
    check_frequent_set_operations_invariant(d, k);

    set<int> st;
    int c[M], a[N];
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        c[a[i]] = 0;
    }
    for (int i = 0; i < d; ++i) {
        st.insert(a[i]);
        c[a[i]]++;
    }
    res = st.size();
    for (int i = d; i < n; ++i) {
        st.insert(a[i]);
        c[a[i]]++;
        c[a[i - d]]--;
        if (c[a[i - d]] == 0) st.erase(a[i - d]);
        res = min(res, int(st.size()));
    }
    cout << res << endl;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cin >> t;
    while (t--) {
        Solve();
    }
    return 0;
}
```

### Explanation

- The **`check_high_d_ratio_invariant`** checks if both `d` is a significant portion of `n` and `k` is a significant portion of `d`. If true, this likely causes a slowdown due to a large window size relative to the total days, necessitating many operations.
  
- The **`check_frequent_set_operations_invariant`** checks if `d` is large and if `k` is also close to `d`, meaning the set operations will be frequent, which may lead to a performance bottleneck.

Both checks are placed immediately after reading the input parameters `n`, `k`, and `d` to ensure they do not add overhead inside the tight loops. This design choice maintains performance while still providing early detection of potential bottlenecks.

