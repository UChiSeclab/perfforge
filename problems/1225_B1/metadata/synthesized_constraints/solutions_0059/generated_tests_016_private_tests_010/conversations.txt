system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show, the episode of which will be shown in i-th day.

The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.

How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 ≤ d ≤ n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.

Input

The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.

The first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.

It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100.

Output

Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.

Example

Input


4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 2 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


Output


2
1
4
5

Note

In the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.

In the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.

In the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.

In the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k, d;
const int MAXN = 2e5 + 7;
const int MAXK = 1e6 + 7;
int hist[MAXK], arr[MAXN];
int uniq = 0;
inline void add(int pos, int x) {
  if (x == 1 && hist[pos] == 0) uniq++;
  hist[pos] += x;
  if (x == -1 && hist[pos] == 0) uniq--;
}
inline void init() {
  fill(hist, hist + MAXK, 0);
  uniq = 0;
}
inline void solve() {
  init();
  for (int i = 0; i < n; i++) cin >> arr[i];
  for (int i = 0; i < d; i++) {
    add(arr[i], 1);
  }
  int ans = uniq;
  for (int i = d; i < n; i++) {
    add(arr[i - d], -1);
    add(arr[i], 1);
    ans = min(ans, uniq);
  }
  cout << ans << '\n';
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  int t = 0;
  cin >> t;
  while (cin >> n >> k >> d) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
6 9 4
8 8 2 5 8 9
5 3 4
1 3 1 2 1
10 5 10
3 2 4 2 1 1 2 2 3 4
7 7 3
4 6 2 6 4 5 2
9 9 6
4 6 7 2 5 5 7 4 8
6 5 4
2 3 2 3 5 5
8 3 4
2 3 2 3 2 1 1 3
10 6 9
6 2 4 1 4 5 5 2 1 1
8 7 2
4 4 5 6 2 5 3 4
1 9 1
3


(G.2) Fast Input

1
100 10 100
9 2 2 3 5 2 2 3 4 9 5 3 6 2 1 4 4 8 6 2 3 10 4 1 5 2 8 8 3 9 2 7 2 3 4 2 2 8 9 7 10 3 7 7 4 4 8 8 9 7 1 8 10 3 6 8 1 9 4 6 5 6 9 2 9 6 7 10 5 8 7 10 6 1 9 2 10 10 10 9 6 5 6 9 2 8 1 2 2 5 6 6 3 3 7 10 10 1 6 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, d; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 2e5 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXK = 1e6 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int hist[MAXK], arr[MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int uniq = 0; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline void add(int pos, int x) { /* line 8 slow_hit_count: 93, fast_hit_count: 100 */
  if (x == 1 && hist[pos] == 0) uniq++; /* line 9 slow_hit_count: 93, fast_hit_count: 100 */
  hist[pos] += x; /* line 10 slow_hit_count: 93, fast_hit_count: 100 */
  if (x == -1 && hist[pos] == 0) uniq--; /* line 11 slow_hit_count: 93, fast_hit_count: 100 */
} /* line 12 slow_hit_count: 93, fast_hit_count: 100 */
inline void init() { /* line 13 slow_hit_count: 10, fast_hit_count: 1 */
  fill(hist, hist + MAXK, 0); /* line 14 slow_hit_count: 10, fast_hit_count: 1 */
  uniq = 0; /* line 15 slow_hit_count: 10, fast_hit_count: 1 */
} /* line 16 slow_hit_count: 10, fast_hit_count: 1 */
inline void solve() { /* line 17 slow_hit_count: 10, fast_hit_count: 1 */
  init(); /* line 18 slow_hit_count: 10, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> arr[i]; /* line 19 slow_hit_count: 80, fast_hit_count: 101 */
  for (int i = 0; i < d; i++) { /* line 20 slow_hit_count: 57, fast_hit_count: 101 */
    add(arr[i], 1); /* line 21 slow_hit_count: 47, fast_hit_count: 100 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = uniq; /* line 23 slow_hit_count: 10, fast_hit_count: 1 */
  for (int i = d; i < n; i++) { /* line 24 slow_hit_count: 33, fast_hit_count: 1 */
    add(arr[i - d], -1); /* line 25 slow_hit_count: 23, fast_hit_count: 0 */
    add(arr[i], 1); /* line 26 slow_hit_count: 23, fast_hit_count: 0 */
    ans = min(ans, uniq); /* line 27 slow_hit_count: 23, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 29 slow_hit_count: 10, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 10, fast_hit_count: 1 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0), cout.tie(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> t; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  while (cin >> n >> k >> d) solve(); /* line 36 slow_hit_count: 11, fast_hit_count: 2 */
} /* line 37 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - **Lines with Significant Difference:**
     - **Line 24** (`for (int i = d; i < n; i++)`): Slow hit count is 33, while fast is 1. This indicates that the loop iterates significantly more times in the slow case.
     - **Line 25** (`add(arr[i - d], -1)`): Slow hit count is 23, fast 0. This suggests the removal operation in `add` is more frequent in the slow input.
     - **Line 26** (`add(arr[i], 1)`): Slow hit count matches Line 25, meaning both operations are paired, but occur more in the slow case.
     - **Line 27** (`ans = min(ans, uniq)`): Also only executed in slow case, signaling a calculation bottleneck.

2. **Interaction with Data Structures:**
   - The `add` function manipulates a histogram (`hist`) array, affecting unique count `uniq`. Frequent updates to this array imply more effort spent in managing the unique count for sliding windows of size `d`.
   - The line 24 loop controls a sliding window approach over `arr`, and its increase in iterations suggests more potential shifts are checked for minimum subscriptions.

3. **Input Constraints Interaction:**
   - Given `n <= 100`, the code likely slows when the configuration of `a_i` values in `arr` requires examining many contiguous subarrays for uniqueness, especially if `d` is large, increasing the number of days to check continuously.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**

   - **Invariant 1:** "If the value of `d` (the number of consecutive days to watch) is large compared to `n`, the sliding window over days becomes significant, leading to more frequent recalculations and potential slowdowns."
     - **Threshold Logic:** Given the constraints (`n <= 100`), this invariant triggers when `d` approaches `n`, maximizing the range for potential shifts.

   - **Invariant 2:** "If the sequence of TV shows (`a_i` values) has high variability, requiring many unique shows to cover every `d` days segment, the histogram updates in the loop become costly."
     - **Threshold Logic:** This would happen when `k` (number of shows) is large and each subset of `d` days tends to include mostly unique shows.

   - **Invariant 3:** "When the input configuration results in frequent updates and recalculations of the `uniq` variable, possibly due to many shifts and diverse show sequences, the code can incur performance penalties."
     - **Threshold Logic:** Frequent shifts happen when `d` is not too large to require full sequence coverage, but large enough to necessitate covering several unique combinations.

2. **Avoiding Specific Numbers:**
   - These invariants are framed without specific numeric values and instead use relationships between input parameters (e.g., `d` close to `n` or high variability of shows).

3. **Focus on Future Scenarios:**
   - These statements are designed to capture a broad range of future inputs that can lead to slowdowns, focusing on structural characteristics rather than exact values.
   
The above invariants provide guidelines to identify when the program might slow down, leveraging the constraints and observed differences in execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show, the episode of which will be shown in i-th day.

The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.

How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 ≤ d ≤ n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.

Input

The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.

The first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.

It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100.

Output

Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.

Example

Input


4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 2 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


Output


2
1
4
5

Note

In the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.

In the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.

In the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.

In the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Let's implement the natural language invariants derived in Phase 2 as runtime checks in C++.

```cpp
// Helper functions for invariant checks

void check_large_d_invariant(int n, int d) {
    if (d > n * 0.8) {  // Check if d is large compared to n
        cerr << "Warning: Performance bottleneck condition triggered - d is large relative to n!" << endl;
        abort();
    }
}

void check_high_variability_invariant(const unordered_set<int>& showSet, int d) {
    if (showSet.size() > d * 0.8) {  // Check if there are too many unique shows in the window
        cerr << "Warning: Performance bottleneck condition triggered - high variability of shows!" << endl;
        abort();
    }
}

void check_frequent_updates_invariant(int uniq) {
    if (uniq > 50) {  // Arbitrary threshold for frequent recalc of uniq
        cerr << "Warning: Performance bottleneck condition triggered - frequent updates to uniq!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into Original C++ Program

Now, we'll integrate the above checker functions into the provided C++ solution. These checks should be placed at strategic points to avoid unnecessary overhead, especially inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k, d;
const int MAXN = 2e5 + 7;
const int MAXK = 1e6 + 7;
int hist[MAXK], arr[MAXN];
int uniq = 0;

// Helper functions for invariant checks

void check_large_d_invariant(int n, int d) {
    if (d > n * 0.8) {  // Check if d is large compared to n
        cerr << "Warning: Performance bottleneck condition triggered - d is large relative to n!" << endl;
        abort();
    }
}

void check_high_variability_invariant(const unordered_set<int>& showSet, int d) {
    if (showSet.size() > d * 0.8) {  // Check if there are too many unique shows in the window
        cerr << "Warning: Performance bottleneck condition triggered - high variability of shows!" << endl;
        abort();
    }
}

void check_frequent_updates_invariant(int uniq) {
    if (uniq > 50) {  // Arbitrary threshold for frequent recalc of uniq
        cerr << "Warning: Performance bottleneck condition triggered - frequent updates to uniq!" << endl;
        abort();
    }
}

inline void add(int pos, int x) {
    if (x == 1 && hist[pos] == 0) uniq++;
    hist[pos] += x;
    if (x == -1 && hist[pos] == 0) uniq--;
}

inline void init() {
    fill(hist, hist + MAXK, 0);
    uniq = 0;
}

inline void solve() {
    init();
    for (int i = 0; i < n; i++) cin >> arr[i];

    unordered_set<int> showSet(arr, arr + d);  // Track unique shows in the initial window
    
    // Perform initial checks
    check_large_d_invariant(n, d);
    check_high_variability_invariant(showSet, d);

    for (int i = 0; i < d; i++) {
        add(arr[i], 1);
    }
    int ans = uniq;

    for (int i = d; i < n; i++) {
        add(arr[i - d], -1);
        add(arr[i], 1);
        ans = min(ans, uniq);
        
        // Perform runtime check for frequent updates
        check_frequent_updates_invariant(uniq);
    }
    cout << ans << '\n';
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    int t = 0;
    cin >> t;
    while (cin >> n >> k >> d) solve();
}
```

### Explanation of Integration

- **`check_large_d_invariant`:** Placed after reading `n` and `d` to check if `d` is large compared to `n`.
- **`check_high_variability_invariant`:** After reading the initial window of `d` days, checks if the set of unique shows is large compared to `d`.
- **`check_frequent_updates_invariant`:** Placed inside the sliding window loop to detect frequent updates to the `uniq` variable, indicating a performance concern.

These checks are placed to avoid being inside the tightest loops to ensure minimal performance impact while providing relevant warnings.

