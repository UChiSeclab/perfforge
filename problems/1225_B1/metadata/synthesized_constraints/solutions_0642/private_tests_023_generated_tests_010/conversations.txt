system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show, the episode of which will be shown in i-th day.

The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.

How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 ≤ d ≤ n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.

Input

The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.

The first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.

It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100.

Output

Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.

Example

Input


4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 2 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


Output


2
1
4
5

Note

In the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.

In the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.

In the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.

In the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int t;
  cin >> t;
  for (int l = 0; l < t; l++) {
    int n, k, d;
    cin >> n >> k >> d;
    int *a = new int[n];
    unordered_map<int, int> m;
    for (int i = 0; i < n; i++) {
      cin >> a[i];
      m[a[i]] = 0;
    }
    deque<int> q;
    int j = 0;
    for (int i = 0; i < d; i++) {
      if (m[a[i]] == 0) {
        q.push_back(a[i]);
        m[a[i]] = 1;
      } else {
        m[a[i]] = m[a[i]] + 1;
      }
      j = i;
    }
    int ans = q.size();
    int start = 0;
    int end1 = d;
    for (int i = end1; i < (n); i++) {
      m[a[start]] = m[a[start]] - 1;
      if (m[a[start]] == 0) {
        q.pop_front();
      }
      if (m[a[i]] == 0) {
        q.push_back(a[i]);
        m[a[i]] = 1;
      } else {
        m[a[i]] = m[a[i]] + 1;
      }
      int k = q.size();
      if (ans > k) {
        ans = k;
      }
      start = start + 1;
    }
    cout << ans << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

30
4 4 1
3 3 1 2
4 4 1
4 1 4 1
1 1 1
1
3 2 1
2 1 2
4 4 2
3 2 2 2
4 2 4
1 2 2 2
1 4 1
4
2 3 1
2 3
2 2 1
2 2
4 4 2
1 2 4 2
4 4 1
2 4 4 3
4 3 1
1 3 1 3
1 1 1
1
2 2 2
2 1
2 4 1
1 4
2 4 1
3 4
1 2 1
1
2 4 2
2 1
3 1 2
1 1 1
2 4 1
1 4
2 3 1
3 3
4 2 2
2 1 2 2
3 2 2
2 2 1
4 3 1
2 2 1 2
2 3 1
1 3
4 4 4
3 2 2 3
1 4 1
1
2 1 2
1 1
1 4 1
4
2 3 1
3 3


(G.2) Fast Input

4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 3 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int l = 0; l < t; l++) { /* line 6 slow_hit_count: 31, fast_hit_count: 5 */
    int n, k, d; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n >> k >> d; /* line 8 slow_hit_count: 30, fast_hit_count: 4 */
    int *a = new int[n]; /* line 9 slow_hit_count: 30, fast_hit_count: 4 */
    unordered_map<int, int> m; /* line 10 slow_hit_count: 60, fast_hit_count: 8 */
    for (int i = 0; i < n; i++) { /* line 11 slow_hit_count: 107, fast_hit_count: 38 */
      cin >> a[i]; /* line 12 slow_hit_count: 77, fast_hit_count: 34 */
      m[a[i]] = 0; /* line 13 slow_hit_count: 77, fast_hit_count: 34 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    deque<int> q; /* line 15 slow_hit_count: 60, fast_hit_count: 8 */
    int j = 0; /* line 16 slow_hit_count: 30, fast_hit_count: 4 */
    for (int i = 0; i < d; i++) { /* line 17 slow_hit_count: 74, fast_hit_count: 21 */
      if (m[a[i]] == 0) { /* line 18 slow_hit_count: 44, fast_hit_count: 17 */
        q.push_back(a[i]); /* line 19 slow_hit_count: 37, fast_hit_count: 14 */
        m[a[i]] = 1; /* line 20 slow_hit_count: 37, fast_hit_count: 14 */
      } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        m[a[i]] = m[a[i]] + 1; /* line 22 slow_hit_count: 7, fast_hit_count: 3 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      j = i; /* line 24 slow_hit_count: 44, fast_hit_count: 17 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    int ans = q.size(); /* line 26 slow_hit_count: 30, fast_hit_count: 4 */
    int start = 0; /* line 27 slow_hit_count: 30, fast_hit_count: 4 */
    int end1 = d; /* line 28 slow_hit_count: 30, fast_hit_count: 4 */
    for (int i = end1; i < (n); i++) { /* line 29 slow_hit_count: 63, fast_hit_count: 21 */
      m[a[start]] = m[a[start]] - 1; /* line 30 slow_hit_count: 33, fast_hit_count: 17 */
      if (m[a[start]] == 0) { /* line 31 slow_hit_count: 33, fast_hit_count: 17 */
        q.pop_front(); /* line 32 slow_hit_count: 30, fast_hit_count: 10 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      if (m[a[i]] == 0) { /* line 34 slow_hit_count: 33, fast_hit_count: 17 */
        q.push_back(a[i]); /* line 35 slow_hit_count: 29, fast_hit_count: 8 */
        m[a[i]] = 1; /* line 36 slow_hit_count: 29, fast_hit_count: 8 */
      } else { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
        m[a[i]] = m[a[i]] + 1; /* line 38 slow_hit_count: 4, fast_hit_count: 9 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      int k = q.size(); /* line 40 slow_hit_count: 33, fast_hit_count: 17 */
      if (ans > k) { /* line 41 slow_hit_count: 33, fast_hit_count: 17 */
        ans = k; /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      start = start + 1; /* line 44 slow_hit_count: 33, fast_hit_count: 17 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 46 slow_hit_count: 30, fast_hit_count: 4 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the C program and identify performance bottlenecks, we will follow the tasks outlined in Phase 1 and Phase 2.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The lines that have significantly higher hit counts for the slow input compared to the fast input are lines 11, 12, 13, 17, 29, 30, 31, 34, and 40.
   - These lines are mostly part of loops or conditional checks.

2. **Pinpointing Specific Lines:**
   - **Lines 11-13:** These lines are part of the loop that initializes the array and map for counting shows. It seems there's no major slowdown here, but it's crucial for setting up the data structure.
   - **Lines 17-24:** These lines populate the deque and map for the first `d` elements, which is a setup for the sliding window mechanism.
   - **Lines 29-44:** This loop is where the sliding window logic happens. It iterates over the array while maintaining the current window of `d` days, updating the map and deque accordingly.

3. **Inference on Interaction with Data Structures:**
   - The sliding window technique involves updating the deque and map continually, which can become computationally expensive with larger `n` and `d` values. This is especially true when `d` approaches `n`, leading to many updates in the data structures (lines 29-44).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language performance invariants characterize the conditions under which the code slows down:

1. **Large Sliding Window Overhead:**
   - **Invariant:** "If the number of days `d` is close to the total number of days `n`, the program may slow down significantly due to high overhead in maintaining the sliding window data structures."
   - **Explanation:** A larger window size relative to the total days increases the complexity of updates and checks in the sliding window, leading to increased processing time.

2. **High Diversity of TV Shows:**
   - **Invariant:** "If the diversity of TV shows `k` is high compared to `d`, particularly when `d` is large, the program may experience slowdowns because of frequent updates to the show counting mechanism."
   - **Explanation:** A high number of unique shows within the sliding window necessitates more frequent updates to the hash map and deque, increasing execution time.

3. **Frequent Episode Changes in the Window:**
   - **Invariant:** "When consecutive days within any window of size `d` have frequent show changes, the operations on the deque and map become more frequent, causing slowdowns."
   - **Explanation:** Rapid changes in episode types within the window require more frequent insertions and deletions in the deque and updates to the map, contributing to delays.

4. **Increased Test Case Count:**
   - **Invariant:** "With a larger number of test cases `t`, the cumulative overhead of processing each input dataset can lead to noticeable slowdowns, especially if each individual test case is near the constraint limits."
   - **Explanation:** As `t` increases, the overhead accumulates, leading to longer total execution times.

These invariants are crafted considering the constraints and typical patterns that could lead to slow performance, helping to ensure that they can detect potential slowdowns in various scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

The BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show, the episode of which will be shown in i-th day.

The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.

How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 ≤ d ≤ n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.

Input

The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test case descriptions follow.

The first line of each test case contains three integers n, k and d (1 ≤ n ≤ 100, 1 ≤ k ≤ 100, 1 ≤ d ≤ n). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ k), where a_i is the show that is broadcasted on the i-th day.

It is guaranteed that the sum of the values ​​of n for all test cases in the input does not exceed 100.

Output

Print t integers — the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.

Example

Input


4
5 2 2
1 2 1 2 1
9 3 3
3 3 3 2 2 2 1 1 1
4 10 4
10 8 6 4
16 9 8
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3


Output


2
1
4
5

Note

In the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.

In the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.

In the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.

In the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants as C++ Checkers

Based on the natural language invariants derived, here are the C++ code snippets implementing the performance checkers:

1. **Large Sliding Window Overhead:**
   ```cpp
   void check_large_window(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - large sliding window." << endl;
           abort();
       }
   }
   ```

2. **High Diversity of TV Shows:**
   ```cpp
   void check_high_diversity(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - high diversity of TV shows." << endl;
           abort();
       }
   }
   ```

3. **Frequent Episode Changes in the Window:**
   ```cpp
   void check_frequent_changes(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - frequent episode changes." << endl;
           abort();
       }
   }
   ```

4. **Increased Test Case Count:**
   ```cpp
   void check_test_case_limit(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - too many test cases." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Here we incorporate these checkers into the C++ solution, placing them effectively to monitor conditions without introducing overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Phase 3: Checker functions
void check_large_window(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large sliding window." << endl;
        abort();
    }
}

void check_high_diversity(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high diversity of TV shows." << endl;
        abort();
    }
}

void check_frequent_changes(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent episode changes." << endl;
        abort();
    }
}

void check_test_case_limit(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - too many test cases." << endl;
        abort();
    }
}

int main() {
    int t;
    cin >> t;
    
    // Check for too many test cases given the constraints
    check_test_case_limit(t > 100);

    for (int l = 0; l < t; l++) {
        int n, k, d;
        cin >> n >> k >> d;

        // Check for large sliding window compared to n
        check_large_window(d > n / 2);

        // Check for high diversity of TV shows
        check_high_diversity(k > d);

        int *a = new int[n];
        unordered_map<int, int> m;
        for (int i = 0; i < n; i++) {
            cin >> a[i];
            m[a[i]] = 0;
        }
        
        deque<int> q;
        int j = 0;
        for (int i = 0; i < d; i++) {
            if (m[a[i]] == 0) {
                q.push_back(a[i]);
                m[a[i]] = 1;
            } else {
                m[a[i]] = m[a[i]] + 1;
            }
            j = i;
        }
        int ans = q.size();
        int start = 0;
        int end1 = d;
        for (int i = end1; i < (n); i++) {
            m[a[start]] = m[a[start]] - 1;
            if (m[a[start]] == 0) {
                q.pop_front();
            }
            if (m[a[i]] == 0) {
                q.push_back(a[i]);
                m[a[i]] = 1;
            } else {
                m[a[i]] = m[a[i]] + 1;
            }

            // Check for frequent episode changes
            check_frequent_changes(q.size() > d / 2);

            int k = q.size();
            if (ans > k) {
                ans = k;
            }
            start = start + 1;
        }
        cout << ans << endl;
        delete[] a; // Clean up the dynamically allocated array
    }
}
```

### Explanation

- **Check for Large Sliding Window:** Added before processing each test case to ensure `d` isn't consuming a large portion of `n`.
- **Check for High Diversity of TV Shows:** Added before processing to observe if `k` is excessively large relative to `d`.
- **Check for Frequent Episode Changes:** Added within the loop to monitor if the deque size frequently exceeds half of `d`, suggesting frequent changes.
- **Check for Test Case Limit:** Ensures that the number of test cases stays within a reasonable limit, given the constraints.

