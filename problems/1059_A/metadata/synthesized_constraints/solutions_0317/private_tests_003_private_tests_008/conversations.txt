system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya has recently got a job as a cashier at a local store. His day at work is L minutes long. Vasya has already memorized n regular customers, the i-th of which comes after t_{i} minutes after the beginning of the day, and his service consumes l_{i} minutes. It is guaranteed that no customer will arrive while Vasya is servicing another customer. 

Vasya is a bit lazy, so he likes taking smoke breaks for a minutes each. Those breaks may go one after another, but Vasya must be present at work during all the time periods he must serve regular customers, otherwise one of them may alert his boss. What is the maximum number of breaks Vasya can take during the day?

Input

The first line contains three integers n, L and a (0 ≤ n ≤ 10^{5}, 1 ≤ L ≤ 10^{9}, 1 ≤ a ≤ L).

The i-th of the next n lines contains two integers t_{i} and l_{i} (0 ≤ t_{i} ≤ L - 1, 1 ≤ l_{i} ≤ L). It is guaranteed that t_{i} + l_{i} ≤ t_{i + 1} and t_{n} + l_{n} ≤ L.

Output

Output one integer — the maximum number of breaks.

Examples

Input

2 11 3
0 1
1 1


Output

3

Input

0 5 2


Output

2

Input

1 3 2
1 2


Output

0

Note

In the first sample Vasya can take 3 breaks starting after 2, 5 and 8 minutes after the beginning of the day.

In the second sample Vasya can take 2 breaks starting after 0 and 2 minutes after the beginning of the day.

In the third sample Vasya can't take any breaks.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, L, s;
  cin >> n >> L >> s;
  vector<pair<int, int> > a(n);
  for (int i = 0; i < n; i++) {
    int ini, d;
    cin >> ini >> d;
    a[i] = make_pair(ini, d);
  }
  int i = 0, k = 0, last = 0;
  for (int j = 0; j < L;) {
    if (i < a.size() && a[i].first == j) {
      j += a[i].second;
      i++;
      last = j;
    } else {
      j++;
      if (j - last == s) {
        last = j;
        k++;
      }
    }
  }
  cout << k;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

0 1000000000 1


(G.2) Fast Input

1 1000000000 1
0 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, L, s; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> L >> s; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, int> > a(n); /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 1, fast_hit_count: 2 */
    int ini, d; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> ini >> d; /* line 9 slow_hit_count: 0, fast_hit_count: 1 */
    a[i] = make_pair(ini, d); /* line 10 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  int i = 0, k = 0, last = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 0; j < L;) { /* line 13 slow_hit_count: 1000000001, fast_hit_count: 2 */
    if (i < a.size() && a[i].first == j) { /* line 14 slow_hit_count: 1000000000, fast_hit_count: 1 */
      j += a[i].second; /* line 15 slow_hit_count: 0, fast_hit_count: 1 */
      i++; /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
      last = j; /* line 17 slow_hit_count: 0, fast_hit_count: 1 */
    } else { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      j++; /* line 19 slow_hit_count: 1000000000, fast_hit_count: 0 */
      if (j - last == s) { /* line 20 slow_hit_count: 1000000000, fast_hit_count: 0 */
        last = j; /* line 21 slow_hit_count: 1000000000, fast_hit_count: 0 */
        k++; /* line 22 slow_hit_count: 1000000000, fast_hit_count: 0 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cout << k; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the slowdown in the provided C program, let's follow the outlined phases to analyze the source of inefficiency and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**
1. **Line 13 (`for (int j = 0; j < L;)`):** In the slow input, this line is executed `1,000,000,001` times, indicating that the loop iterates once for every possible minute up to `L = 1,000,000,000`. In contrast, the fast input shows only 2 iterations.
2. **Line 14 (`if (i < a.size() && a[i].first == j)`):** This line is executed `1,000,000,000` times for the slow input but only once for the fast input, suggesting that the condition is rarely true in the slow input.
3. **Lines 19-22 (Handling free time and breaks):** These lines are only relevant in the slow input, executed `1,000,000,000` times. The `j++` operation and checking `if (j - last == s)` are critical here.

**Inferred Behavior:**
- For the slow input, the loop iterates over every minute of the day, checking if it matches any customer arrival time.
- When there are no customers (`n = 0`), as in the slow input, the loop continuously increments `j`, computes potential breaks, and closes the loop when it hits the end of the day (`L`).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive natural language statements describing the conditions under which the program enters a slow path:

1. **Invariant #1: Absence of Customers**
   - **Description:** "If there are no regular customers throughout the day, the program will iterate through every minute of the day, leading to extensive execution time relative to the total duration L."
   - **Explanation:** When `n = 0`, the program must check every single minute up to `L`, causing a linear time complexity relative to `L`.

2. **Invariant #2: Extensive Free Time**
   - **Description:** "If the combined service time of all customers is significantly less than the total day duration L, resulting in large segments of free time, the program may iteratively process each minute of these segments, potentially slowing it down."
   - **Explanation:** This condition can lead to iterating through long stretches of free time, checking for possible breaks.

3. **Invariant #3: Minute-by-Minute Increment**
   - **Description:** "If the condition to increment time involves evaluating each minute one by one over a large range, the accumulation of these operations can lead to a significant slowdown, especially when the conditions do not frequently trigger skips or jumps in time."
   - **Explanation:** Incrementing `j` one minute at a time up to `L` results in a large number of operations, especially evident in scenarios with minimal customer interruptions.

These invariants are broad enough to capture potential slowdowns in similar future scenarios, aligning with the constraints where `n <= 100,000` and `L` can be very large. They focus on the structural patterns in the input rather than exact values, helping identify computationally expensive paths within the problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya has recently got a job as a cashier at a local store. His day at work is L minutes long. Vasya has already memorized n regular customers, the i-th of which comes after t_{i} minutes after the beginning of the day, and his service consumes l_{i} minutes. It is guaranteed that no customer will arrive while Vasya is servicing another customer. 

Vasya is a bit lazy, so he likes taking smoke breaks for a minutes each. Those breaks may go one after another, but Vasya must be present at work during all the time periods he must serve regular customers, otherwise one of them may alert his boss. What is the maximum number of breaks Vasya can take during the day?

Input

The first line contains three integers n, L and a (0 ≤ n ≤ 10^{5}, 1 ≤ L ≤ 10^{9}, 1 ≤ a ≤ L).

The i-th of the next n lines contains two integers t_{i} and l_{i} (0 ≤ t_{i} ≤ L - 1, 1 ≤ l_{i} ≤ L). It is guaranteed that t_{i} + l_{i} ≤ t_{i + 1} and t_{n} + l_{n} ≤ L.

Output

Output one integer — the maximum number of breaks.

Examples

Input

2 11 3
0 1
1 1


Output

3

Input

0 5 2


Output

2

Input

1 3 2
1 2


Output

0

Note

In the first sample Vasya can take 3 breaks starting after 2, 5 and 8 minutes after the beginning of the day.

In the second sample Vasya can take 2 breaks starting after 0 and 2 minutes after the beginning of the day.

In the third sample Vasya can't take any breaks.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Below are the C++ code snippets that implement the performance-characterizing invariants derived before:

1. **Invariant #1: Absence of Customers**

```cpp
void check_no_customers_invariant(int n) {
    if (n == 0) {
        cerr << "Warning: Performance bottleneck triggered - no regular customers, full day iteration." << endl;
        abort();
    }
}
```

2. **Invariant #2: Extensive Free Time**

```cpp
void check_extensive_free_time_invariant(int n, int L, const vector<pair<int, int>>& a) {
    if (n > 0) {
        int totalServiceTime = 0;
        for (const auto& customer : a) {
            totalServiceTime += customer.second;
        }
        if (totalServiceTime < L / 2) {
            cerr << "Warning: Performance bottleneck triggered - extensive free time relative to L." << endl;
            abort();
        }
    }
}
```

3. **Invariant #3: Minute-by-Minute Increment**

This is more about the structure of the problem when free time is high and minute-by-minute checking occurs. It's encapsulated in the previous checks, particularly in `check_no_customers_invariant`.

### Phase 4: Insert Conditional Checks into the Original Program

Below is the instrumented C++ code with the integrated checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_no_customers_invariant(int n) {
    if (n == 0) {
        cerr << "Warning: Performance bottleneck triggered - no regular customers, full day iteration." << endl;
        abort();
    }
}

void check_extensive_free_time_invariant(int n, int L, const vector<pair<int, int>>& a) {
    if (n > 0) {
        int totalServiceTime = 0;
        for (const auto& customer : a) {
            totalServiceTime += customer.second;
        }
        if (totalServiceTime < L / 2) {
            cerr << "Warning: Performance bottleneck triggered - extensive free time relative to L." << endl;
            abort();
        }
    }
}

int main() {
    int n, L, s;
    cin >> n >> L >> s;
    vector<pair<int, int>> a(n);
    for (int i = 0; i < n; i++) {
        int ini, d;
        cin >> ini >> d;
        a[i] = make_pair(ini, d);
    }

    // Apply invariant checks after reading input
    check_no_customers_invariant(n);
    check_extensive_free_time_invariant(n, L, a);

    int i = 0, k = 0, last = 0;
    for (int j = 0; j < L;) {
        if (i < a.size() && a[i].first == j) {
            j += a[i].second;
            i++;
            last = j;
        } else {
            j++;
            if (j - last == s) {
                last = j;
                k++;
            }
        }
    }
    cout << k;
}
```

### Explanation:

- **Invariant #1 Check (`check_no_customers_invariant`)**: This check is placed after input reading, ensuring that if `n` is zero, a warning is triggered, and execution is aborted.
  
- **Invariant #2 Check (`check_extensive_free_time_invariant`)**: This check is also placed right after input reading. It calculates the total service time and compares it to half of `L` to determine if extensive free time might occur, triggering a slowdown.

By placing these checks after input processing but before computational loops, we ensure minimal performance overhead while detecting potential bottlenecks early in the execution.

