system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5, mo = 1e9 + 7, mo2 = 998244353;
int n, k, a;
int c[N];
int p[N], ps;
vector<pair<int, int> > d[N];
long long ans, aa;
bool b[N];
void go(long long s, int x, int sz, vector<pair<int, int> >& d) {
  if (x == sz) {
    long long s2 = aa / s;
    if (s <= 1e5 && s2 <= 1e5) {
      if (s == s2)
        ans += (long long)c[s] * (c[s] - 1);
      else
        ans += (long long)c[s] * c[s2];
    }
    return;
  }
  for (int i = 0, _e = d[x].second; i <= _e; ++i) {
    go(s, x + 1, sz, d);
    s *= d[x].first;
  }
}
int main() {
  cin >> n >> k;
  for (int i = 1, _e = n; i <= _e; ++i) scanf("%d", &a), c[a]++;
  int a = pow(1e10, 1. / k);
  for (; (long double)pow(a + 1, k) <= 1e10;) ++a;
  for (int i = 2, _e = a; i <= _e; ++i) {
    if (!b[i]) p[++ps] = i, d[i].push_back(pair<int, int>(i, 1));
    for (int j = 1, u; (u = i * p[j]) <= a; ++j) {
      b[u] = 1;
      if (i % p[j] == 0) {
        d[u] = d[i];
        d[u][d[u].size() - 1].second++;
        break;
      }
      d[u] = d[i];
      d[u].push_back(pair<int, int>(p[j], 1));
    }
  }
  for (int i = 1, _e = a; i <= _e; ++i) {
    aa = 1;
    for (int j = 1, _e = k; j <= _e; ++j) aa *= i;
    for (int j = 0, _e = d[i].size() - 1; j <= _e; ++j) d[i][j].second *= k;
    go(1, 0, d[i].size(), d[i]);
  }
  cout << ans / 2;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 2
1 3 10 9 2 2 14 5 3 7


(G.2) Fast Input

6 3
1 3 9 8 24 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5, mo = 1e9 + 7, mo2 = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, a; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int c[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int p[N], ps; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > d[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long ans, aa; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
bool b[N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
void go(long long s, int x, int sz, vector<pair<int, int> >& d) { /* line 10 slow_hit_count: 7070446, fast_hit_count: 172643 */
  if (x == sz) { /* line 11 slow_hit_count: 7070446, fast_hit_count: 172643 */
    long long s2 = aa / s; /* line 12 slow_hit_count: 5351260, fast_hit_count: 141360 */
    if (s <= 1e5 && s2 <= 1e5) { /* line 13 slow_hit_count: 5351260, fast_hit_count: 141360 */
      if (s == s2) /* line 14 slow_hit_count: 714036, fast_hit_count: 24708 */
        ans += (long long)c[s] * (c[s] - 1); /* line 15 slow_hit_count: 100000, fast_hit_count: 46 */
      else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
        ans += (long long)c[s] * c[s2]; /* line 17 slow_hit_count: 614036, fast_hit_count: 24662 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 19 slow_hit_count: 5351260, fast_hit_count: 141360 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0, _e = d[x].second; i <= _e; ++i) { /* line 21 slow_hit_count: 8689632, fast_hit_count: 201772 */
    go(s, x + 1, sz, d); /* line 22 slow_hit_count: 6970446, fast_hit_count: 170489 */
    s *= d[x].first; /* line 23 slow_hit_count: 6970446, fast_hit_count: 170489 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1, _e = n; i <= _e; ++i) scanf("%d", &a), c[a]++; /* line 28 slow_hit_count: 11, fast_hit_count: 7 */
  int a = pow(1e10, 1. / k); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (; (long double)pow(a + 1, k) <= 1e10;) ++a; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2, _e = a; i <= _e; ++i) { /* line 31 slow_hit_count: 100000, fast_hit_count: 2154 */
    if (!b[i]) p[++ps] = i, d[i].push_back(pair<int, int>(i, 1)); /* line 32 slow_hit_count: 99999, fast_hit_count: 2153 */
    for (int j = 1, u; (u = i * p[j]) <= a; ++j) { /* line 33 slow_hit_count: 157397, fast_hit_count: 3269 */
      b[u] = 1; /* line 34 slow_hit_count: 90407, fast_hit_count: 1828 */
      if (i % p[j] == 0) { /* line 35 slow_hit_count: 90407, fast_hit_count: 1828 */
        d[u] = d[i]; /* line 36 slow_hit_count: 33009, fast_hit_count: 712 */
        d[u][d[u].size() - 1].second++; /* line 37 slow_hit_count: 33009, fast_hit_count: 712 */
        break; /* line 38 slow_hit_count: 33009, fast_hit_count: 712 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      d[u] = d[i]; /* line 40 slow_hit_count: 57398, fast_hit_count: 1116 */
      d[u].push_back(pair<int, int>(p[j], 1)); /* line 41 slow_hit_count: 57398, fast_hit_count: 1116 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1, _e = a; i <= _e; ++i) { /* line 44 slow_hit_count: 100001, fast_hit_count: 2155 */
    aa = 1; /* line 45 slow_hit_count: 100000, fast_hit_count: 2154 */
    for (int j = 1, _e = k; j <= _e; ++j) aa *= i; /* line 46 slow_hit_count: 300000, fast_hit_count: 8616 */
    for (int j = 0, _e = d[i].size() - 1; j <= _e; ++j) d[i][j].second *= k; /* line 47 slow_hit_count: 366400, fast_hit_count: 6974 */
    go(1, 0, d[i].size(), d[i]); /* line 48 slow_hit_count: 100000, fast_hit_count: 2154 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans / 2; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 51 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the given C code, hit count analysis, and problem constraints, let's analyze why the slow input takes longer to execute and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `go`:** 
   - The `go` function is heavily recursive, and its execution is triggered multiple times as evidenced by high hit counts on lines 10, 11, 21, and 22. The slow input has significantly more hits compared to the fast input.
   - The function's logic involves recursion over the possible divisors of a number and checking conditions within the recursion. If `x` reaches `sz`, it involves some multiplication checks and updates to `ans`.

2. **Nested Loops Generating Divisors and Recursion Calls:**
   - Lines 31-41 are responsible for generating prime factors and their powers, which are then used in the recursive calls to `go`. The slow input shows much higher hit counts here, suggesting that the number of iterations or the depth of recursion is higher for some numbers.
   - Lines 44-48 further perform operations for each integer up to some limit, invoking the `go` function. The increased hit counts here indicate more computation or deeper recursion for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Here are natural language performance invariants that describe conditions under which the program enters a slow path:

1. **High Depth of Recursion:**
   - **Invariant:** "If the number of recursive calls in the function `go` significantly increases, particularly due to large numbers with many divisors or high powers, the computation may slow down."
   - **Contextual Explanation:** This can occur when input numbers have many smaller prime factors or when `k` allows for more combinations of power products, leading to deeper recursive exploration.

2. **Inefficient Factorization and Combination:**
   - **Invariant:** "When input numbers have a large number of distinct prime factors, the program may experience performance degradation due to extensive factorization and combination operations within nested loops."
   - **Contextual Explanation:** The more factors involved, the larger the possible combinations for factorization, which results in a higher number of recursive calls and thus slower execution.

3. **High Multiplicative Pair Combinations:**
   - **Invariant:** "If the input consists of numbers that allow many pair combinations whose products can be expressed as a k-th power, the computation may become extensive as the program attempts to find all such pairs."
   - **Contextual Explanation:** As `n` grows closer to its upper bound, or if `k` permits complex combinations, the program must perform many checks, which can slow down execution.

4. **Complexity in Prime Factorization with Higher Powers:**
   - **Invariant:** "For larger values of `k`, where the prime factorization of numbers and their products become more complex, the recursive logic can cause a significant slow path."
   - **Contextual Explanation:** As `k` increases, the number of possible power combinations grows, leading to more intensive recursive checking.

These invariants encapsulate potential performance bottlenecks based on the data structure interaction and recursion depth, and suggest that certain input patterns—particularly those involving complex factorization and product evaluations—can result in slower execution.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Let's translate the identified invariants into runtime checks:

1. **High Depth of Recursion:**
   ```cpp
   void check_recursion_depth(int depth, int maxDepth) {
       if (depth > maxDepth) {
           cerr << "Warning: Performance bottleneck condition triggered due to high recursion depth!" << endl;
           abort();
       }
   }
   ```

2. **Inefficient Factorization and Combination:**
   ```cpp
   void check_factorization_complexity(int numFactors, int threshold) {
       if (numFactors > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered due to complex factorization!" << endl;
           abort();
       }
   }
   ```

3. **High Multiplicative Pair Combinations:**
   ```cpp
   void check_multiplicative_combinations(int combinations, int threshold) {
       if (combinations > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered due to excessive multiplicative pair combinations!" << endl;
           abort();
       }
   }
   ```

4. **Complexity in Prime Factorization with Higher Powers:**
   ```cpp
   void check_prime_factorization(int factors, int powerThreshold) {
       if (factors > powerThreshold) {
           cerr << "Warning: Performance bottleneck condition triggered due to complex prime factorization with high powers!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original C++ Program

We'll now integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5, mo = 1e9 + 7, mo2 = 998244353;
int n, k, a;
int c[N];
int p[N], ps;
vector<pair<int, int> > d[N];
long long ans, aa;
bool b[N];

void check_recursion_depth(int depth, int maxDepth) {
    if (depth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered due to high recursion depth!" << endl;
        abort();
    }
}

void check_factorization_complexity(int numFactors, int threshold) {
    if (numFactors > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to complex factorization!" << endl;
        abort();
    }
}

void check_multiplicative_combinations(int combinations, int threshold) {
    if (combinations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive multiplicative pair combinations!" << endl;
        abort();
    }
}

void check_prime_factorization(int factors, int powerThreshold) {
    if (factors > powerThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to complex prime factorization with high powers!" << endl;
        abort();
    }
}

void go(long long s, int x, int sz, vector<pair<int, int> >& d) {
  check_recursion_depth(x, 100); // Check for high recursion depth

  if (x == sz) {
    long long s2 = aa / s;
    if (s <= 1e5 && s2 <= 1e5) {
      if (s == s2)
        ans += (long long)c[s] * (c[s] - 1);
      else
        ans += (long long)c[s] * c[s2];
    }
    return;
  }
  check_factorization_complexity(d[x].second, 10); // Check factorization complexity
  for (int i = 0, _e = d[x].second; i <= _e; ++i) {
    go(s, x + 1, sz, d);
    s *= d[x].first;
  }
}

int main() {
  cin >> n >> k;
  for (int i = 1, _e = n; i <= _e; ++i) scanf("%d", &a), c[a]++;
  int a = pow(1e10, 1. / k);
  for (; (long double)pow(a + 1, k) <= 1e10;) ++a;
  for (int i = 2, _e = a; i <= _e; ++i) {
    if (!b[i]) p[++ps] = i, d[i].push_back(pair<int, int>(i, 1));
    for (int j = 1, u; (u = i * p[j]) <= a; ++j) {
      b[u] = 1;
      if (i % p[j] == 0) {
        d[u] = d[i];
        d[u][d[u].size() - 1].second++;
        break;
      }
      d[u] = d[i];
      d[u].push_back(pair<int, int>(p[j], 1));
    }
  }

  for (int i = 1, _e = a; i <= _e; ++i) {
    aa = 1;
    for (int j = 1, _e = k; j <= _e; ++j) aa *= i;
    check_prime_factorization(d[i].size(), 10); // Check prime factorization complexity
    for (int j = 0, _e = d[i].size() - 1; j <= _e; ++j) d[i][j].second *= k;
    go(1, 0, d[i].size(), d[i]);
  }

  cout << ans / 2;
}
```

### Explanation

- **Recursion Depth Check:** Placed inside the `go` function, checks if the recursion depth exceeds a threshold.
- **Factorization Complexity Check:** Also inside `go`, checks the complexity of factorization based on the number of factors.
- **Prime Factorization Complexity Check:** Placed before calling `go` on each iteration, ensures that prime factorization does not exceed complexity limits.
- **Placement:** Checks are strategically placed before or during the recursive exploration to prevent adding overhead in tight loops. 

These checks will help catch when the computation paths become too complex and allow for early termination with a warning message if the performance bottleneck conditions are met.

