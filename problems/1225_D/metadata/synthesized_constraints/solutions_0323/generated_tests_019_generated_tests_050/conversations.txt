system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int rt, bucket[100010], a[100010], d[100], N, D[100], k, n;
int div(int x) {
  int res = 0;
  for (int i = 2; i <= x; i++) {
    int cnt = 0;
    while (x % i == 0) {
      cnt++;
      x /= i;
    }
    if (cnt % k) D[++res] = i, d[res] = cnt % k;
  }
  return res;
}
int main() {
  cin >> n >> k;
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
  }
  long long ans = 0;
  for (int i = 1; i <= n; i++) {
    N = div(a[i]);
    int qwq = 1;
    int qaq = 1;
    int flag = 1;
    for (int j = 1; j <= N; j++) {
      for (int l = 1; l <= d[j]; l++) {
        qwq *= D[j];
      }
      for (int l = d[j]; l < k; l++) {
        qaq *= D[j];
        if (qaq < 0 || qaq > 100000) flag = 0;
      }
    }
    if (flag) ans += bucket[qaq];
    bucket[qwq]++;
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 12
49248 87211


(G.2) Fast Input

0 12
49248 87211


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int rt, bucket[100010], a[100010], d[100], N, D[100], k, n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int div(int x) { /* line 4 slow_hit_count: 2, fast_hit_count: 0 */
  int res = 0; /* line 5 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = 2; i <= x; i++) { /* line 6 slow_hit_count: 87230, fast_hit_count: 0 */
    int cnt = 0; /* line 7 slow_hit_count: 87228, fast_hit_count: 0 */
    while (x % i == 0) { /* line 8 slow_hit_count: 87239, fast_hit_count: 0 */
      cnt++; /* line 9 slow_hit_count: 11, fast_hit_count: 0 */
      x /= i; /* line 10 slow_hit_count: 11, fast_hit_count: 0 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt % k) D[++res] = i, d[res] = cnt % k; /* line 12 slow_hit_count: 87228, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 14 slow_hit_count: 2, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 18 slow_hit_count: 3, fast_hit_count: 1 */
    cin >> a[i]; /* line 19 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 22 slow_hit_count: 3, fast_hit_count: 1 */
    N = div(a[i]); /* line 23 slow_hit_count: 2, fast_hit_count: 0 */
    int qwq = 1; /* line 24 slow_hit_count: 2, fast_hit_count: 0 */
    int qaq = 1; /* line 25 slow_hit_count: 2, fast_hit_count: 0 */
    int flag = 1; /* line 26 slow_hit_count: 2, fast_hit_count: 0 */
    for (int j = 1; j <= N; j++) { /* line 27 slow_hit_count: 6, fast_hit_count: 0 */
      for (int l = 1; l <= d[j]; l++) { /* line 28 slow_hit_count: 15, fast_hit_count: 0 */
        qwq *= D[j]; /* line 29 slow_hit_count: 11, fast_hit_count: 0 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      for (int l = d[j]; l < k; l++) { /* line 31 slow_hit_count: 41, fast_hit_count: 0 */
        qaq *= D[j]; /* line 32 slow_hit_count: 37, fast_hit_count: 0 */
        if (qaq < 0 || qaq > 100000) flag = 0; /* line 33 slow_hit_count: 37, fast_hit_count: 0 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag) ans += bucket[qaq]; /* line 36 slow_hit_count: 2, fast_hit_count: 0 */
    bucket[qwq]++; /* line 37 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - The function `div()` gets significantly more hits with the slow input compared to the fast input.
   - Particularly, lines within `div()` related to factorization (`for (int i = 2; i <= x; i++)`) are heavily hit in the slow input.

2. **Pinpointing Problematic Lines**:
   - **Line 6-12** inside `div()`: The loop iterating from 2 to `x` is experiencing excessive iterations, indicating that the factorization process is expensive when `x` is large or has many factors.
   - **Line 23**: The call to `div(a[i])` suggests the slowness is related to the values of `a[i]` and their factorization.

3. **Interaction with Data Structures and Loops**:
   - The main loop over `n` calls `div(a[i])`, where each call can potentially take a long time if `a[i]` is large or has a high number of divisors.
   - Performing multiple multiplications in the nested loops (lines 28-33) can lead to additional computation overhead, especially when `d[j]` and the resulting products (`qwq` and `qaq`) are large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Related to Factorization Complexity**:
   - **Natural Language Description**: "The performance degrades significantly when numbers in the array have a high number of distinct prime factors, especially if the number itself is large. This results in the expensive computation of divisors and multiplications."
   - **Reason**: Larger numbers or numbers with several prime factors require more iterations in the `for (int i = 2; i <= x; i++)` loop in `div()`, which impacts performance.

2. **Invariant Related to Exponential Growth in Computation**:
   - **Natural Language Description**: "If the product of any two numbers in the list involves a high degree of multiplicative complexity due to larger exponents (related to `k`), this can cause exponential slowdowns in nested loops."
   - **Reason**: The nested loops that calculate `qwq` and `qaq` may grow large due to repeated multiplication when `k` is high, leading to additional computational overhead.

3. **Invariant Related to the Size of Resulting Products**:
   - **Natural Language Description**: "When resultant products in computations (like `qaq`) exceed practical thresholds, performance deteriorates due to excessive operations or unnecessary calculations."
   - **Reason**: Large values in `qaq` could lead to more frequent checks and modifications of `bucket`, causing memory or computational thrashing.

### Conclusion

These invariants capture the conditions under which the code path becomes slow, emphasizing the computational burden of factorization and multiplication for specific input patterns. They should help a fuzzer detect slow scenarios by identifying when the inputs might cause a large number of computational steps or excessive memory usage.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Given the invariants derived in Phase 2, we will now produce C++ code for runtime checks.

1. **Invariant Related to Factorization Complexity**:
   - Description: "The performance degrades significantly when numbers in the array have a high number of distinct prime factors, especially if the number itself is large."
   - C++ Code:
   ```cpp
   void check_factorization_complexity(int x, int factor_count) {
       if (x > 50000 && factor_count > 10) {  // Arbitrary thresholds for illustration
           cerr << "Warning: Performance bottleneck due to complex factorization!" << endl;
           abort();
       }
   }
   ```

2. **Invariant Related to Exponential Growth in Computation**:
   - Description: "If the product of any two numbers in the list involves a high degree of multiplicative complexity due to larger exponents (`k`), this can cause exponential slowdowns."
   - C++ Code:
   ```cpp
   void check_exponential_growth(int qaq) {
       if (qaq > 50000) {  // Example threshold
           cerr << "Warning: Performance bottleneck due to large exponential growth!" << endl;
           abort();
       }
   }
   ```

3. **Invariant Related to Size of Resulting Products**:
   - Description: "When resultant products in computations (like `qaq`) exceed practical thresholds, performance deteriorates due to excessive operations."
   - C++ Code:
   ```cpp
   void check_large_products(int qaq) {
       if (qaq > 100000) {  // Given constraint threshold
           cerr << "Warning: Performance bottleneck due to large resultant products!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Conditional Checks into the Original Program

We will now insert these checks into the original C++ solution. The checks will be placed at strategic points to minimize overhead while effectively capturing performance issues.

```cpp
#include <bits/stdc++.h>
using namespace std;

int rt, bucket[100010], a[100010], d[100], N, D[100], k, n;

int div(int x) {
    int res = 0;
    for (int i = 2; i <= x; i++) {
        int cnt = 0;
        while (x % i == 0) {
            cnt++;
            x /= i;
        }
        if (cnt % k) D[++res] = i, d[res] = cnt % k;
    }
    return res;
}

// Function to check factorization complexity
void check_factorization_complexity(int x, int factor_count) {
    if (x > 50000 && factor_count > 10) {
        cerr << "Warning: Performance bottleneck due to complex factorization!" << endl;
        abort();
    }
}

// Function to check exponential growth
void check_exponential_growth(int qaq) {
    if (qaq > 50000) {
        cerr << "Warning: Performance bottleneck due to large exponential growth!" << endl;
        abort();
    }
}

// Function to check large products
void check_large_products(int qaq) {
    if (qaq > 100000) {
        cerr << "Warning: Performance bottleneck due to large resultant products!" << endl;
        abort();
    }
}

int main() {
    cin >> n >> k;
    
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    
    long long ans = 0;
    
    for (int i = 1; i <= n; i++) {
        N = div(a[i]);
        
        // Check factorization complexity
        check_factorization_complexity(a[i], N);
        
        int qwq = 1;
        int qaq = 1;
        int flag = 1;
        
        for (int j = 1; j <= N; j++) {
            for (int l = 1; l <= d[j]; l++) {
                qwq *= D[j];
            }
            for (int l = d[j]; l < k; l++) {
                qaq *= D[j];
                if (qaq < 0 || qaq > 100000) flag = 0;
            }
        }
        
        // Check exponential growth
        check_exponential_growth(qaq);
        
        // Check large products
        check_large_products(qaq);
        
        if (flag) ans += bucket[qaq];
        bucket[qwq]++;
    }
    
    cout << ans << endl;
    return 0;
}
```

### Comments:

- **Factorization Complexity**: The check is placed after factorization in the `div()` function to ensure the number of factors and their complexity are reasonable.
- **Exponential Growth and Large Products**: These checks are placed after calculating `qaq` to catch any oversized resultant products.
- The thresholds used in the checks are illustrative and should be tuned based on empirical testing or specific problem constraints.

