system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[101010], f[101010], num[101010];
inline long long power(long long a, int k) {
  long long ans = 1;
  for (; k; k >>= 1, a *= a)
    if (k & 1) ans *= a;
  return ans;
}
int main() {
  for (int i = 2; i < 101010; i++)
    if (!f[i]) {
      f[i] = i;
      if ((long long)i * i >= 101010) continue;
      for (int j = i * i; j < 101010; j += i) f[j] = i;
    }
  int n, k;
  scanf("%d %d", &n, &k);
  for (int i = 1; i <= n; i++) scanf("%d", a + i);
  if (k == 2) {
    long long ans = 0;
    for (int i = 1; i <= n; i++) {
      int u = a[i], val = 1;
      while (u > 1) {
        int p = f[u], num = 0;
        while (u % p == 0) u /= p, num ^= 1;
        if (num) val *= p;
      }
      ans += num[val];
      num[val]++;
    }
    cout << ans << endl;
    return 0;
  }
  int mx = 0;
  for (int i = 1; i <= n; i++) {
    num[a[i]]++;
    mx = max(mx, a[i]);
  }
  int ed = 1;
  while (k * log(ed) < log((double)mx * mx + 1)) ed++;
  ed++;
  long long ans = 0;
  for (int i = 1; i <= ed; i++) {
    long long val = power((long long)i, k);
    for (int j = 1; j <= mx; j++)
      if (val % j == 0) {
        long long x = val / j;
        if (0 < x && x <= mx && x <= j) {
          if (x < j)
            ans += (long long)num[j] * num[x];
          else
            ans += (long long)num[j] * (num[j] - 1) >> 1;
        }
      }
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 12
49248 87211


(G.2) Fast Input

0 12
49248 87211


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[101010], f[101010], num[101010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline long long power(long long a, int k) { /* line 4 slow_hit_count: 8, fast_hit_count: 2 */
  long long ans = 1; /* line 5 slow_hit_count: 8, fast_hit_count: 2 */
  for (; k; k >>= 1, a *= a) /* line 6 slow_hit_count: 40, fast_hit_count: 10 */
    if (k & 1) ans *= a; /* line 7 slow_hit_count: 32, fast_hit_count: 8 */
  return ans; /* line 8 slow_hit_count: 8, fast_hit_count: 2 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i < 101010; i++) /* line 11 slow_hit_count: 101009, fast_hit_count: 101009 */
    if (!f[i]) { /* line 12 slow_hit_count: 101008, fast_hit_count: 101008 */
      f[i] = i; /* line 13 slow_hit_count: 9674, fast_hit_count: 9674 */
      if ((long long)i * i >= 101010) continue; /* line 14 slow_hit_count: 9674, fast_hit_count: 9674 */
      for (int j = i * i; j < 101010; j += i) f[j] = i; /* line 15 slow_hit_count: 195184, fast_hit_count: 195184 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  int n, k; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d", &n, &k); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) scanf("%d", a + i); /* line 19 slow_hit_count: 3, fast_hit_count: 1 */
  if (k == 2) { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    long long ans = 0; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= n; i++) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      int u = a[i], val = 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      while (u > 1) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        int p = f[u], num = 0; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        while (u % p == 0) u /= p, num ^= 1; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        if (num) val *= p; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      ans += num[val]; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      num[val]++; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  int mx = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 36 slow_hit_count: 3, fast_hit_count: 1 */
    num[a[i]]++; /* line 37 slow_hit_count: 2, fast_hit_count: 0 */
    mx = max(mx, a[i]); /* line 38 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  int ed = 1; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  while (k * log(ed) < log((double)mx * mx + 1)) ed++; /* line 41 slow_hit_count: 7, fast_hit_count: 1 */
  ed++; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= ed; i++) { /* line 44 slow_hit_count: 9, fast_hit_count: 3 */
    long long val = power((long long)i, k); /* line 45 slow_hit_count: 8, fast_hit_count: 2 */
    for (int j = 1; j <= mx; j++) /* line 46 slow_hit_count: 697696, fast_hit_count: 2 */
      if (val % j == 0) { /* line 47 slow_hit_count: 697688, fast_hit_count: 0 */
        long long x = val / j; /* line 48 slow_hit_count: 165, fast_hit_count: 0 */
        if (0 < x && x <= mx && x <= j) { /* line 49 slow_hit_count: 165, fast_hit_count: 0 */
          if (x < j) /* line 50 slow_hit_count: 28, fast_hit_count: 0 */
            ans += (long long)num[j] * num[x]; /* line 51 slow_hit_count: 22, fast_hit_count: 0 */
          else /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
            ans += (long long)num[j] * (num[j] - 1) >> 1; /* line 53 slow_hit_count: 6, fast_hit_count: 0 */
        } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 58 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given code and generate performance-characterizing invariants, let's go through the provided data step by step.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - The hit counts provided show several lines with significantly higher hit counts for the slow input compared to the fast input. Specifically, lines within the nested loop (lines 44-55) have extremely high hit counts for the slow input.

2. **Pinpoint Lines or Functions with More Hits:**
   - **Line 46** (`for (int j = 1; j <= mx; j++)`): This loop iterates `mx` times, where `mx` is the maximum value in the array `a`. The slow input has a larger `mx`, which causes this loop to execute many more times.
   - **Line 47** (`if (val % j == 0)`) and **Line 48** (`long long x = val / j;`): The condition and division inside the loop have many more hits in the slow input. This suggests that the condition is true more often, leading to more iterations and operations.

3. **Infer Interactions with Data Structures:**
   - The `power` function is called multiple times to compute powers, which contributes to the slowdown, especially when large values of `k` are involved.
   - The nested loop iterates over potential divisors of `val`, which is derived from powers of integers, leading to a combinatorial increase in operations when `mx` is large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Conditions for Entering Slow Paths:**
   - **High Exponentiation Cost**: The function `power` is used to calculate `x^k`, which can be expensive if `k` is large. This cost is compounded as it is called multiple times within a loop.
   - **Large Maximum Element**: When `mx` (maximum element in array `a`) is large, the nested loop on line 46 runs many times, especially for high values of `k`.

2. **Natural Language Invariants:**
   - **Invariant 1**: "If the maximum element of the input array is large, and the exponent `k` is also relatively high, the program may enter a slow path due to the increased number of iterations in the nested loop."
   - **Invariant 2**: "When `k` is close to its upper limit and the power function is invoked repeatedly within a loop, the computation of powers becomes a significant bottleneck, especially with large base values."

3. **Thresholds and Constraints:**
   - The constraints (e.g., `n <= 100,000` and `a_i <= 100,000`) suggest that the threshold for `mx` being 'large' might be close to its upper limit, combined with `k` being at least in the higher range, e.g., `k >= 50`.

4. **Checking Invariants Efficiently:**
   - Place checks before the nested loop and before power calculations to avoid performance degradation.

By identifying these patterns of slowdowns and suggesting thresholds, these invariants help to catch potential slow cases in future runs or similar scenarios without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the previously derived natural language performance-characterizing invariants, we will create runtime checks. These checks will be implemented as helper functions and conditions to detect potential performance bottlenecks.

#### Invariant 1: Large Maximum Element and High `k`
```cpp
void check_large_max_element(int maxElement, int k) {
    if (maxElement > 50000 && k > 50) { // Using threshold values based on constraints and analysis
        cerr << "Warning: Performance bottleneck condition triggered - large maximum element with high k!" << endl;
        abort();
    }
}
```

#### Invariant 2: High Exponentiation Cost
```cpp
void check_high_exponentiation_cost(int k, int n) {
    if (k > 50 && n > 10000) { // Thresholds chosen based on potential computational cost
        cerr << "Warning: Performance bottleneck condition triggered - high exponentiation cost!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

We will now integrate these checker functions into the original C++ program provided for the problem statement.

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[101010], f[101010], num[101010];

// Function to calculate power
inline long long power(long long a, int k) {
    long long ans = 1;
    for (; k; k >>= 1, a *= a)
        if (k & 1) ans *= a;
    return ans;
}

// Check for large maximum element with high k
void check_large_max_element(int maxElement, int k) {
    if (maxElement > 50000 && k > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - large maximum element with high k!" << endl;
        abort();
    }
}

// Check for high exponentiation cost
void check_high_exponentiation_cost(int k, int n) {
    if (k > 50 && n > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - high exponentiation cost!" << endl;
        abort();
    }
}

int main() {
    // Initialize sieve for prime factors
    for (int i = 2; i < 101010; i++) {
        if (!f[i]) {
            f[i] = i;
            if ((long long)i * i >= 101010) continue;
            for (int j = i * i; j < 101010; j += i) f[j] = i;
        }
    }

    int n, k;
    scanf("%d %d", &n, &k);
    for (int i = 1; i <= n; i++) scanf("%d", a + i);

    // Check performance conditions
    check_high_exponentiation_cost(k, n);

    if (k == 2) {
        long long ans = 0;
        for (int i = 1; i <= n; i++) {
            int u = a[i], val = 1;
            while (u > 1) {
                int p = f[u], num = 0;
                while (u % p == 0) u /= p, num ^= 1;
                if (num) val *= p;
            }
            ans += num[val];
            num[val]++;
        }
        cout << ans << endl;
        return 0;
    }

    int mx = 0;
    for (int i = 1; i <= n; i++) {
        num[a[i]]++;
        mx = max(mx, a[i]);
    }

    // Check performance condition for large maximum element
    check_large_max_element(mx, k);

    int ed = 1;
    while (k * log(ed) < log((double)mx * mx + 1)) ed++;
    ed++;
    long long ans = 0;
    for (int i = 1; i <= ed; i++) {
        long long val = power((long long)i, k);
        for (int j = 1; j <= mx; j++)
            if (val % j == 0) {
                long long x = val / j;
                if (0 < x && x <= mx && x <= j) {
                    if (x < j)
                        ans += (long long)num[j] * num[x];
                    else
                        ans += (long long)num[j] * (num[j] - 1) >> 1;
                }
            }
    }
    cout << ans << endl;
}
```

### Explanation of Instrumentation
- The `check_large_max_element` function is called after determining the maximum element `mx` in the input array to ensure the condition is adequately checked.
- The `check_high_exponentiation_cost` function is placed early in `main` after reading `n` and `k` to assess potential computational cost from exponentiation ahead of the main computation loop. 
- This setup ensures that we catch potential performance issues without introducing overhead within tight loops.

