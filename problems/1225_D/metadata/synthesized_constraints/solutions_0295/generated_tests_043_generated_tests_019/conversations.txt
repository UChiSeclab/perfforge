system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long cnt[200000];
long long sosuu[200000];
int main() {
  sosuu[1] = 1;
  for (long long i = 2; i <= 100000; ++i) {
    if (sosuu[i] == 1) continue;
    for (long long q = 2; i * q <= 100000; ++q) {
      sosuu[i * q] = 1;
    }
  }
  long long n, k;
  cin >> n >> k;
  long long ans = 0;
  for (long long i = 0; i < n; ++i) {
    long long a = 0;
    cin >> a;
    for (long long i = 2; i <= 100000; ++i) {
      if (sosuu[i] == 1) continue;
      long long hoge = 1;
      for (long long q = 0; q < k; ++q) {
        hoge *= i;
        if (hoge > a) break;
      }
      if (hoge > a) break;
      while (a % hoge == 0) {
        a /= hoge;
      }
    }
    cnt[a]++;
  }
  for (long long i = 1; i <= 100000; ++i) {
    long long target = 1;
    long long now = i;
    for (long long q = 2; q <= sqrt(now); ++q) {
      if (sosuu[q] == 1) continue;
      long long cnt = 0;
      while (now % q == 0) {
        now /= q;
        cnt++;
      }
      if (cnt != 0) {
        if (cnt >= k) {
          target = 200000;
          break;
        }
        cnt = k - cnt;
        for (long long t = 0; t < cnt; ++t) {
          if (target > 100000) break;
          target *= q;
        }
        if (target > 100000) break;
      }
    }
    if (now != 1) {
      for (long long t = 0; t < k - 1; ++t) {
        if (target > 100000) break;
        target *= now;
      }
    }
    if (target <= 100000) {
      if (target == i) {
        ans += cnt[i] * (cnt[i] - 1LL);
      } else {
        ans += cnt[i] * cnt[target];
      }
    }
  }
  cout << ans / 2LL << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 5
73507 87211


(G.2) Fast Input

2 12
49248 87211


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long cnt[200000]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long sosuu[200000]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  sosuu[1] = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 2; i <= 100000; ++i) { /* line 7 slow_hit_count: 100000, fast_hit_count: 100000 */
    if (sosuu[i] == 1) continue; /* line 8 slow_hit_count: 99999, fast_hit_count: 99999 */
    for (long long q = 2; i * q <= 100000; ++q) { /* line 9 slow_hit_count: 266400, fast_hit_count: 266400 */
      sosuu[i * q] = 1; /* line 10 slow_hit_count: 256808, fast_hit_count: 256808 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  long long n, k; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; ++i) { /* line 16 slow_hit_count: 3, fast_hit_count: 3 */
    long long a = 0; /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> a; /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
    for (long long i = 2; i <= 100000; ++i) { /* line 19 slow_hit_count: 20, fast_hit_count: 4 */
      if (sosuu[i] == 1) continue; /* line 20 slow_hit_count: 20, fast_hit_count: 4 */
      long long hoge = 1; /* line 21 slow_hit_count: 10, fast_hit_count: 4 */
      for (long long q = 0; q < k; ++q) { /* line 22 slow_hit_count: 58, fast_hit_count: 47 */
        hoge *= i; /* line 23 slow_hit_count: 50, fast_hit_count: 45 */
        if (hoge > a) break; /* line 24 slow_hit_count: 50, fast_hit_count: 45 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      if (hoge > a) break; /* line 26 slow_hit_count: 10, fast_hit_count: 4 */
      while (a % hoge == 0) { /* line 27 slow_hit_count: 8, fast_hit_count: 2 */
        a /= hoge; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    cnt[a]++; /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= 100000; ++i) { /* line 33 slow_hit_count: 100001, fast_hit_count: 100001 */
    long long target = 1; /* line 34 slow_hit_count: 100000, fast_hit_count: 100000 */
    long long now = i; /* line 35 slow_hit_count: 100000, fast_hit_count: 100000 */
    for (long long q = 2; q <= sqrt(now); ++q) { /* line 36 slow_hit_count: 6445575, fast_hit_count: 4545273 */
      if (sosuu[q] == 1) continue; /* line 37 slow_hit_count: 6395981, fast_hit_count: 4522274 */
      long long cnt = 0; /* line 38 slow_hit_count: 1725074, fast_hit_count: 1236161 */
      while (now % q == 0) { /* line 39 slow_hit_count: 1961268, fast_hit_count: 1441707 */
        now /= q; /* line 40 slow_hit_count: 236194, fast_hit_count: 205546 */
        cnt++; /* line 41 slow_hit_count: 236194, fast_hit_count: 205546 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      if (cnt != 0) { /* line 43 slow_hit_count: 1725074, fast_hit_count: 1236161 */
        if (cnt >= k) { /* line 44 slow_hit_count: 160428, fast_hit_count: 132558 */
          target = 200000; /* line 45 slow_hit_count: 3560, fast_hit_count: 24 */
          break; /* line 46 slow_hit_count: 3560, fast_hit_count: 24 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        cnt = k - cnt; /* line 48 slow_hit_count: 156868, fast_hit_count: 132534 */
        for (long long t = 0; t < cnt; ++t) { /* line 49 slow_hit_count: 669771, fast_hit_count: 1073980 */
          if (target > 100000) break; /* line 50 slow_hit_count: 547034, fast_hit_count: 1007241 */
          target *= q; /* line 51 slow_hit_count: 512903, fast_hit_count: 941446 */
        } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        if (target > 100000) break; /* line 53 slow_hit_count: 156868, fast_hit_count: 132534 */
      } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    if (now != 1) { /* line 56 slow_hit_count: 100000, fast_hit_count: 100000 */
      for (long long t = 0; t < k - 1; ++t) { /* line 57 slow_hit_count: 166971, fast_hit_count: 133340 */
        if (target > 100000) break; /* line 58 slow_hit_count: 166824, fast_hit_count: 133338 */
        target *= now; /* line 59 slow_hit_count: 68159, fast_hit_count: 33824 */
      } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    if (target <= 100000) { /* line 62 slow_hit_count: 100000, fast_hit_count: 100000 */
      if (target == i) { /* line 63 slow_hit_count: 341, fast_hit_count: 39 */
        ans += cnt[i] * (cnt[i] - 1LL); /* line 64 slow_hit_count: 1, fast_hit_count: 5 */
      } else { /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
        ans += cnt[i] * cnt[target]; /* line 66 slow_hit_count: 340, fast_hit_count: 34 */
      } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans / 2LL << endl; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 71 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C code and derive performance-characterizing invariants, let's go through the hit counts and the code structure.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - In the slow input, lines 19-31 (first for-loop) and lines 33-66 (second for-loop) get significantly more hits compared to the fast input.
   - The inner loop at line 36 has a much higher hit count for the slow input, indicating that this is likely a performance bottleneck.

2. **Specific Observations:**
   - The code checks for powers in the first loop at line 19, which involves checking if a number is divisible by increasing powers of primes up to 100,000. This can be costly if the number has many divisible factors.
   - In the second loop starting at line 33, the nested loop structure (lines 36-66) involves factorization and multiple multiplications, which become expensive depending on the properties of the numbers involved (e.g., high divisibility).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**

   **Invariant 1: High Factor Count Influences Slowdown**
   - "If the input numbers have a high number of small prime factors, this increases the iterations in loops that check for divisibility and power computations. This can significantly slow down the program."

   **Invariant 2: Nested Loop Depth**
   - "The program likely slows down when trying to factorize numbers with a deep nested loop, especially when the number is highly composite or close to perfect powers, increasing iteration depth."

   **Invariant 3: Non-trivial Factorization Path**
   - "When numbers require extensive factorization, particularly when they are just below thresholds that would break loops earlier, performance may degrade."

2. **Threshold Consideration:**
   - Since `n` is relatively small (less than 100,000) and the range of `a_i` is up to 100,000, the conditions are focused more on the properties of the numbers (e.g., factorization complexity) rather than size alone.
   - For loop structures, particularly around lines 36-66, the number of divisors and how often loops are entered is crucial.

3. **Future Detection:**
   - These invariants help identify slow scenarios without relying on specific input numbers. Instead, they rely on the computational path taken given certain number properties like factor richness or proximity to perfect powers.

In summary, the key performance triggers are related to the number of computations performed in loops due to the properties of the input numbers—specifically their factorization characteristics—leading to increased iteration counts and nested loop executions. This understanding allows for detection and optimization opportunities in potential future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

Solution (C++ code):
{solution}


assistant: Let's proceed by implementing the performance-characterizing invariants in C++ and then integrating these checks into the given C++ program.

### Phase 3: Implementing Checkers for Invariants in C++

Based on the invariants described earlier, we'll implement checker functions that capture the potential performance bottlenecks:

1. **High Factor Count Influences Slowdown**
   - The slowdown happens when numbers have a high number of small prime factors, leading to increased iterations in loops.

```cpp
void check_high_factor_count(int factorCount, int threshold) {
    if (factorCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high factor count!" << endl;
        abort();
    }
}
```

2. **Nested Loop Depth**
   - Significant slowdown when nested loops iterate deeply due to highly composite numbers.

```cpp
void check_nested_loop_depth(int depth, int threshold) {
    if (depth > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to deep nested loop!" << endl;
        abort();
    }
}
```

3. **Non-trivial Factorization Path**
   - This would involve detecting when factorization operations are non-trivial, such as when dealing with composite numbers with many factors close to their square roots.

```cpp
void check_non_trivial_factorization(int operations, int threshold) {
    if (operations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to non-trivial factorization!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, I will integrate these checkers into the original C++ program while ensuring the checks do not add unnecessary overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long cnt[200000];
long long sosuu[200000];

// Checker functions
void check_high_factor_count(int factorCount, int threshold) {
    if (factorCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high factor count!" << endl;
        abort();
    }
}

void check_nested_loop_depth(int depth, int threshold) {
    if (depth > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to deep nested loop!" << endl;
        abort();
    }
}

void check_non_trivial_factorization(int operations, int threshold) {
    if (operations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to non-trivial factorization!" << endl;
        abort();
    }
}

int main() {
    sosuu[1] = 1;
    for (long long i = 2; i <= 100000; ++i) {
        if (sosuu[i] == 1) continue;
        for (long long q = 2; i * q <= 100000; ++q) {
            sosuu[i * q] = 1;
        }
    }
    long long n, k;
    cin >> n >> k;
    long long ans = 0;
    for (long long i = 0; i < n; ++i) {
        long long a = 0;
        cin >> a;
        int factorCount = 0; // Track number of factors
        for (long long i = 2; i <= 100000; ++i) {
            if (sosuu[i] == 1) continue;
            long long hoge = 1;
            for (long long q = 0; q < k; ++q) {
                hoge *= i;
                if (hoge > a) break;
            }
            if (hoge > a) break;
            while (a % hoge == 0) {
                a /= hoge;
                factorCount++;
            }
        }
        // Check factor count threshold
        check_high_factor_count(factorCount, 10); // Assume 10 is a meaningful threshold
        cnt[a]++;
    }
    
    for (long long i = 1; i <= 100000; ++i) {
        long long target = 1;
        long long now = i;
        int nestedLoopDepth = 0; // Track depth of nested operations
        for (long long q = 2; q <= sqrt(now); ++q) {
            if (sosuu[q] == 1) continue;
            long long cnt = 0;
            while (now % q == 0) {
                now /= q;
                cnt++;
            }
            if (cnt != 0) {
                if (cnt >= k) {
                    target = 200000;
                    break;
                }
                cnt = k - cnt;
                for (long long t = 0; t < cnt; ++t) {
                    if (target > 100000) break;
                    target *= q;
                    nestedLoopDepth++;
                }
                if (target > 100000) break;
            }
        }
        
        // Check nested loop depth threshold
        check_nested_loop_depth(nestedLoopDepth, 10); // Assume 10 as a threshold
        if (now != 1) {
            int nonTrivialFactorizationOps = 0; // Track operations for non-trivial factorization
            for (long long t = 0; t < k - 1; ++t) {
                if (target > 100000) break;
                target *= now;
                nonTrivialFactorizationOps++;
            }
            // Check non-trivial factorization threshold
            check_non_trivial_factorization(nonTrivialFactorizationOps, 5); // Assume 5 as a threshold
        }
        
        if (target <= 100000) {
            if (target == i) {
                ans += cnt[i] * (cnt[i] - 1LL);
            } else {
                ans += cnt[i] * cnt[target];
            }
        }
    }
    cout << ans / 2LL << endl;
}
```

**Explanation of Integration:**
- **check_high_factor_count:** Used after factorization of each number to ensure it doesn't have too many factors contributing to loop iterations.
- **check_nested_loop_depth:** Applied within the loop handling prime factors to keep nested loop operations in check.
- **check_non_trivial_factorization:** Used to track operations in non-trivial factorizations that could slow the program. 

These checks are strategically placed to ensure they are outside of the tight loops but still effectively monitoring conditions that lead to performance degradation.

