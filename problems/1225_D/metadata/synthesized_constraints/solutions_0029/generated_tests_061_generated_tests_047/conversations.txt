system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int power(int a, int b, int c, int ans = 1) {
  for (; b; b >>= 1, a = (long long)a * a % c)
    if (b & 1) ans = (long long)ans * a % c;
  return ans;
}
const int NN = 100100;
int a[NN], flag[NN], prime[NN], np, qf, qb, deg[111], fac[111];
long long q[NN];
int main() {
  int n, k;
  cin >> n >> k;
  for (int i = 0; i < n; i++) scanf("%d", a + i);
  if (k > 32) {
    int cnt = 0;
    for (int i = 0; i < n; i++) cnt += a[i] == 1;
    printf("%I64d\n", (long long)cnt * (cnt - 1) / 2);
    return 0;
  }
  map<long long, int> mp;
  for (int i = 0; i < n; i++) mp[a[i]]++;
  sort(a, a + n);
  long long ans = 0;
  for (int i = 2; i < NN; i++) {
    if (!flag[i]) prime[np++] = i, flag[i] = i;
    for (int j = 0; j < np && prime[j] <= flag[i] && prime[j] * i < NN; j++)
      flag[i * prime[j]] = prime[j];
  }
  for (int first = 1;; first++) {
    if (log(first) * k > log(10) * 10 + 1e-5) break;
    int cnt = 0;
    for (int u = first; u > 1;) {
      int v = flag[u];
      deg[cnt] = 0;
      while (flag[u] == v) u /= v, deg[cnt]++;
      deg[cnt] *= k;
      fac[cnt++] = v;
    }
    qb = 0;
    q[qb++] = 1;
    for (int i = 0; i < cnt; i++) {
      for (int j = 0, z = qb; j < z; j++) {
        long long mid = 1;
        for (int k = 0; k < deg[i]; k++) {
          mid *= fac[i];
          q[qb++] = q[j] * mid;
        }
      }
    }
    long long N = q[qb - 1];
    for (int i = 0; i < qb; i++)
      if (q[i] * q[i] <= N) {
        if (mp.count(q[i]) && mp.count(N / q[i])) {
          long long t = mp[q[i]], t1 = mp[N / q[i]];
          if (q[i] * q[i] == N)
            ans += t * (t - 1) / 2;
          else
            ans += t * t1;
        }
      }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 2
1 3 10 9 2 2 14 5 3 7


(G.2) Fast Input

6 3
1 3 9 8 24 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int power(int a, int b, int c, int ans = 1) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  for (; b; b >>= 1, a = (long long)a * a % c) /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) ans = (long long)ans * a % c; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int NN = 100100; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int a[NN], flag[NN], prime[NN], np, qf, qb, deg[111], fac[111]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long q[NN]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf("%d", a + i); /* line 14 slow_hit_count: 11, fast_hit_count: 7 */
  if (k > 32) { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    int cnt = 0; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < n; i++) cnt += a[i] == 1; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%I64d\n", (long long)cnt * (cnt - 1) / 2); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  map<long long, int> mp; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) mp[a[i]]++; /* line 22 slow_hit_count: 11, fast_hit_count: 7 */
  sort(a, a + n); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i < NN; i++) { /* line 25 slow_hit_count: 100099, fast_hit_count: 100099 */
    if (!flag[i]) prime[np++] = i, flag[i] = i; /* line 26 slow_hit_count: 100098, fast_hit_count: 100098 */
    for (int j = 0; j < np && prime[j] <= flag[i] && prime[j] * i < NN; j++) /* line 27 slow_hit_count: 190598, fast_hit_count: 190598 */
      flag[i * prime[j]] = prime[j]; /* line 28 slow_hit_count: 90500, fast_hit_count: 90500 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (int first = 1;; first++) { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    if (log(first) * k > log(10) * 10 + 1e-5) break; /* line 31 slow_hit_count: 100001, fast_hit_count: 2155 */
    int cnt = 0; /* line 32 slow_hit_count: 100000, fast_hit_count: 2154 */
    for (int u = first; u > 1;) { /* line 33 slow_hit_count: 366400, fast_hit_count: 6974 */
      int v = flag[u]; /* line 34 slow_hit_count: 266400, fast_hit_count: 4820 */
      deg[cnt] = 0; /* line 35 slow_hit_count: 266400, fast_hit_count: 4820 */
      while (flag[u] == v) u /= v, deg[cnt]++; /* line 36 slow_hit_count: 610014, fast_hit_count: 11274 */
      deg[cnt] *= k; /* line 37 slow_hit_count: 266400, fast_hit_count: 4820 */
      fac[cnt++] = v; /* line 38 slow_hit_count: 266400, fast_hit_count: 4820 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    qb = 0; /* line 40 slow_hit_count: 100000, fast_hit_count: 2154 */
    q[qb++] = 1; /* line 41 slow_hit_count: 100000, fast_hit_count: 2154 */
    for (int i = 0; i < cnt; i++) { /* line 42 slow_hit_count: 366400, fast_hit_count: 6974 */
      for (int j = 0, z = qb; j < z; j++) { /* line 43 slow_hit_count: 2707670, fast_hit_count: 47059 */
        long long mid = 1; /* line 44 slow_hit_count: 2441270, fast_hit_count: 42239 */
        for (int k = 0; k < deg[i]; k++) { /* line 45 slow_hit_count: 7692530, fast_hit_count: 181445 */
          mid *= fac[i]; /* line 46 slow_hit_count: 5251260, fast_hit_count: 139206 */
          q[qb++] = q[j] * mid; /* line 47 slow_hit_count: 5251260, fast_hit_count: 139206 */
        } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    long long N = q[qb - 1]; /* line 51 slow_hit_count: 100000, fast_hit_count: 2154 */
    for (int i = 0; i < qb; i++) /* line 52 slow_hit_count: 5451260, fast_hit_count: 143514 */
      if (q[i] * q[i] <= N) { /* line 53 slow_hit_count: 5351260, fast_hit_count: 141360 */
        if (mp.count(q[i]) && mp.count(N / q[i])) { /* line 54 slow_hit_count: 2759789, fast_hit_count: 71241 */
          long long t = mp[q[i]], t1 = mp[N / q[i]]; /* line 55 slow_hit_count: 9, fast_hit_count: 5 */
          if (q[i] * q[i] == N) /* line 56 slow_hit_count: 9, fast_hit_count: 5 */
            ans += t * (t - 1) / 2; /* line 57 slow_hit_count: 8, fast_hit_count: 2 */
          else /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
            ans += t * t1; /* line 59 slow_hit_count: 1, fast_hit_count: 3 */
        } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 100000, fast_hit_count: 2154 */
  cout << ans << endl; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants for the given C program, we'll need to look at the lines of code with significantly higher hit counts in the slow input compared to the fast input.

### Phase 1: Identify expensive or inefficient code segments

1. **Line 31 (`if (log(first) * k > log(10) * 10 + 1e-5) break;`)**
   - **Hit Counts:** Slow: 100,001; Fast: 2,155
   - This line is part of the loop responsible for determining possible integer bases (`first`) for potential powers that could form products `a_i * a_j = x^k`. For the slow input, this loop executes many more iterations, suggesting that the range of potential base values (`first`) to consider is much larger.

2. **Lines 33-38 (prime factorization of `first`)**
   - **Hit Counts (Line 33):** Slow: 366,400; Fast: 6,974
   - These lines decompose the number `first` into prime factors and calculate their respective powers multiplied by k, which are used to find valid powers for `x^k`. The larger the number `first`, the more complex and time-consuming this factorization process becomes.

3. **Lines 42-50 (Generating combinations of factors)**
   - **Hit Counts (Line 42):** Slow: 366,400; Fast: 6,974
   - These lines generate combinations of the prime factors to form potential powers. The high hit count indicates that these combinations grow rapidly with the size and prime composition of `first`.

4. **Lines 52-61 (Checking if pairs exist for the power combinations)**
   - **Hit Counts (Line 52):** Slow: 5,451,260; Fast: 143,514
   - This loop iterates over all generated combinations to check if valid pairs exist in the map of input values. The expensive nature of this loop suggests that it repeatedly checks a potentially large number of combinations.

### Phase 2: Derive performance-characterizing invariants

Based on the high hit counts and the logic of the code, we can derive several performance invariants:

1. **Invariant 1: Prime Factorization Complexity**
   - **Natural Language Description:** "If the number `first`, which represents potential bases for powers, has many small prime factors or a high exponentiation factor `k`, the factorization and combination process may become costly."
   - **Rationale:** Larger numbers or those with many prime factors increase the iterations in the nested loops, causing many more combinations.

2. **Invariant 2: High Combination Count**
   - **Natural Language Description:** "If generating combinations of factors for potential powers (`x^k`) results in a vast number of possibilities, especially with large `k`, the execution may slow due to exhaustive checking."
   - **Rationale:** When many combinations are generated, the program will spend significant time iterating through them, especially if `k` leads to higher powers.

3. **Invariant 3: Repeated Map Check Overhead**
   - **Natural Language Description:** "When the potential number of power combinations `q[i]` × `q[i]` <= `N` is large, each necessitating a map lookup, performance can degrade due to the repeated map access."
   - **Rationale:** Multiple map accesses for combinations that are only incrementally different can become a bottleneck, especially if the `mp.count()` calls are frequent on large sets.

By addressing these conditions, one can help ensure that the program handles various input patterns more efficiently, especially those that lead to excessive computational overhead.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checks

Let's translate the performance-characterizing invariants derived earlier into C++ checker code.

#### Invariant 1: Prime Factorization Complexity

This checks if the number `first` has many prime factors or if the exponentiation factor `k` is large, potentially leading to performance degradation.

```cpp
void check_prime_factorization_invariant(int first, int k) {
    if (first > 1000 || k > 50) { // Example threshold values
        cerr << "Warning: Prime factorization invariant triggered - complex factorization" << endl;
        abort();
    }
}
```

#### Invariant 2: High Combination Count

This checks if generating combinations based on prime factorization becomes excessive.

```cpp
void check_combination_invariant(int cnt) {
    if (cnt > 10) { // Example threshold value for number of prime factors
        cerr << "Warning: Combination invariant triggered - excessive combinations" << endl;
        abort();
    }
}
```

#### Invariant 3: Repeated Map Check Overhead

This checks if the process of examining combinations leads to an excessive number of map lookups.

```cpp
void check_map_lookup_invariant(int qb) {
    if (qb > 1000) { // Example threshold value for number of combinations
        cerr << "Warning: Map lookup invariant triggered - repeated checks" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into Original Code

Now, we integrate these checks into the existing C++ code at effective points to detect performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int power(int a, int b, int c, int ans = 1) {
    for (; b; b >>= 1, a = (long long)a * a % c)
        if (b & 1) ans = (long long)ans * a % c;
    return ans;
}

const int NN = 100100;
int a[NN], flag[NN], prime[NN], np, qf, qb, deg[111], fac[111];
long long q[NN];

void check_prime_factorization_invariant(int first, int k) {
    if (first > 1000 || k > 50) { // Example threshold values
        cerr << "Warning: Prime factorization invariant triggered - complex factorization" << endl;
        abort();
    }
}

void check_combination_invariant(int cnt) {
    if (cnt > 10) { // Example threshold value for number of prime factors
        cerr << "Warning: Combination invariant triggered - excessive combinations" << endl;
        abort();
    }
}

void check_map_lookup_invariant(int qb) {
    if (qb > 1000) { // Example threshold value for number of combinations
        cerr << "Warning: Map lookup invariant triggered - repeated checks" << endl;
        abort();
    }
}

int main() {
    int n, k;
    cin >> n >> k;
    for (int i = 0; i < n; i++) scanf("%d", a + i);
    if (k > 32) {
        int cnt = 0;
        for (int i = 0; i < n; i++) cnt += a[i] == 1;
        printf("%I64d\n", (long long)cnt * (cnt - 1) / 2);
        return 0;
    }
    map<long long, int> mp;
    for (int i = 0; i < n; i++) mp[a[i]]++;
    sort(a, a + n);
    long long ans = 0;
    for (int i = 2; i < NN; i++) {
        if (!flag[i]) prime[np++] = i, flag[i] = i;
        for (int j = 0; j < np && prime[j] <= flag[i] && prime[j] * i < NN; j++)
            flag[i * prime[j]] = prime[j];
    }
    for (int first = 1;; first++) {
        check_prime_factorization_invariant(first, k); // Check for prime factorization complexity

        if (log(first) * k > log(10) * 10 + 1e-5) break;
        int cnt = 0;
        for (int u = first; u > 1;) {
            int v = flag[u];
            deg[cnt] = 0;
            while (flag[u] == v) u /= v, deg[cnt]++;
            deg[cnt] *= k;
            fac[cnt++] = v;
        }

        check_combination_invariant(cnt); // Check for excessive combinations

        qb = 0;
        q[qb++] = 1;
        for (int i = 0; i < cnt; i++) {
            for (int j = 0, z = qb; j < z; j++) {
                long long mid = 1;
                for (int k = 0; k < deg[i]; k++) {
                    mid *= fac[i];
                    q[qb++] = q[j] * mid;
                }
            }
        }

        check_map_lookup_invariant(qb); // Check for repeated map lookups

        long long N = q[qb - 1];
        for (int i = 0; i < qb; i++)
            if (q[i] * q[i] <= N) {
                if (mp.count(q[i]) && mp.count(N / q[i])) {
                    long long t = mp[q[i]], t1 = mp[N / q[i]];
                    if (q[i] * q[i] == N)
                        ans += t * (t - 1) / 2;
                    else
                        ans += t * t1;
                }
            }
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **Invariant 1** is checked at each iteration of the loop where `first` is evaluated, preventing excessive iterations due to complex factorization.
- **Invariant 2** is checked after determining prime factors, ensuring that a reasonable number of factor combinations are processed.
- **Invariant 3** is checked when generating combinations for map lookups, avoiding expensive repeated operations.

These checks provide warnings and terminate the program when potential performance bottlenecks are detected, allowing a fuzzer to identify problematic input scenarios efficiently.

