system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long LIM = 1e5, N = LIM + 10;
const long long INF = 1e10;
long long C, ans, a[N];
long long n, K;
std::vector<long long> fac;
inline long long read() {
  long long x = 0, f = 1;
  char ch = getchar();
  while (ch < '0' || ch > '9') {
    if (ch == '-') f = -1;
    ch = getchar();
  }
  while (ch >= '0' && ch <= '9') {
    x = (x << 1) + (x << 3) + (ch ^ 48);
    ch = getchar();
  }
  return x * f;
}
void dfs(long long x, long long dep) {
  if (x > LIM) return;
  if (x > C / x) return;
  if (x == C / x)
    ans += a[x] * (a[x] - 1) / 2;
  else if (C / x <= LIM)
    ans += a[x] * a[C / x];
  for (long long i = dep; i < (long long)fac.size(); i++) {
    long long t = fac[i], s = x * t;
    for (; C % s == 0; s = s * t) dfs(s, i + 1);
  }
}
signed main() {
  n = read(), K = read();
  for (long long i = 1; i <= n; i++) ++a[read()];
  for (long long i = 1; i <= LIM; i++) {
    long long f = 1;
    C = 1;
    for (long long j = 1; j <= K; j++) {
      if (C * i > INF) {
        f = 0;
        break;
      }
      C *= i;
    }
    if (f == 0) continue;
    fac.clear();
    long long t = i;
    for (long long j = 2; 1ll * j * j <= t; j++)
      if (!(t % j)) {
        fac.push_back(j);
        while (!(t % j)) t /= j;
      }
    if (t > 1) fac.push_back(t);
    sort(fac.begin(), fac.end());
    dfs(1, 0);
  }
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 2
1 3 10 9 2 2 14 5 3 7


(G.2) Fast Input

6 3
1 3 9 8 24 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long LIM = 1e5, N = LIM + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e10; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long C, ans, a[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long n, K; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
std::vector<long long> fac; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline long long read() { /* line 8 slow_hit_count: 12, fast_hit_count: 8 */
  long long x = 0, f = 1; /* line 9 slow_hit_count: 12, fast_hit_count: 8 */
  char ch = getchar(); /* line 10 slow_hit_count: 12, fast_hit_count: 8 */
  while (ch < '0' || ch > '9') { /* line 11 slow_hit_count: 12, fast_hit_count: 8 */
    if (ch == '-') f = -1; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  while (ch >= '0' && ch <= '9') { /* line 15 slow_hit_count: 27, fast_hit_count: 17 */
    x = (x << 1) + (x << 3) + (ch ^ 48); /* line 16 slow_hit_count: 15, fast_hit_count: 9 */
    ch = getchar(); /* line 17 slow_hit_count: 15, fast_hit_count: 9 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return x * f; /* line 19 slow_hit_count: 12, fast_hit_count: 8 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(long long x, long long dep) { /* line 21 slow_hit_count: 5069818, fast_hit_count: 133866 */
  if (x > LIM) return; /* line 22 slow_hit_count: 5069818, fast_hit_count: 133866 */
  if (x > C / x) return; /* line 23 slow_hit_count: 3029933, fast_hit_count: 82787 */
  if (x == C / x) /* line 24 slow_hit_count: 2725630, fast_hit_count: 70703 */
    ans += a[x] * (a[x] - 1) / 2; /* line 25 slow_hit_count: 100000, fast_hit_count: 46 */
  else if (C / x <= LIM) /* line 26 slow_hit_count: 2625630, fast_hit_count: 70657 */
    ans += a[x] * a[C / x]; /* line 27 slow_hit_count: 307018, fast_hit_count: 12331 */
  for (long long i = dep; i < (long long)fac.size(); i++) { /* line 28 slow_hit_count: 5027731, fast_hit_count: 110483 */
    long long t = fac[i], s = x * t; /* line 29 slow_hit_count: 2302101, fast_hit_count: 39780 */
    for (; C % s == 0; s = s * t) dfs(s, i + 1); /* line 30 slow_hit_count: 7271919, fast_hit_count: 171492 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  n = read(), K = read(); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) ++a[read()]; /* line 35 slow_hit_count: 11, fast_hit_count: 7 */
  for (long long i = 1; i <= LIM; i++) { /* line 36 slow_hit_count: 100001, fast_hit_count: 100001 */
    long long f = 1; /* line 37 slow_hit_count: 100000, fast_hit_count: 100000 */
    C = 1; /* line 38 slow_hit_count: 100000, fast_hit_count: 100000 */
    for (long long j = 1; j <= K; j++) { /* line 39 slow_hit_count: 300000, fast_hit_count: 302154 */
      if (C * i > INF) { /* line 40 slow_hit_count: 200000, fast_hit_count: 300000 */
        f = 0; /* line 41 slow_hit_count: 0, fast_hit_count: 97846 */
        break; /* line 42 slow_hit_count: 0, fast_hit_count: 97846 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      C *= i; /* line 44 slow_hit_count: 200000, fast_hit_count: 202154 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    if (f == 0) continue; /* line 46 slow_hit_count: 100000, fast_hit_count: 100000 */
    fac.clear(); /* line 47 slow_hit_count: 100000, fast_hit_count: 2154 */
    long long t = i; /* line 48 slow_hit_count: 100000, fast_hit_count: 2154 */
    for (long long j = 2; 1ll * j * j <= t; j++) /* line 49 slow_hit_count: 6847686, fast_hit_count: 30406 */
      if (!(t % j)) { /* line 50 slow_hit_count: 6747686, fast_hit_count: 28252 */
        fac.push_back(j); /* line 51 slow_hit_count: 168294, fast_hit_count: 2811 */
        while (!(t % j)) t /= j; /* line 52 slow_hit_count: 413802, fast_hit_count: 7256 */
      } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    if (t > 1) fac.push_back(t); /* line 54 slow_hit_count: 100000, fast_hit_count: 2154 */
    sort(fac.begin(), fac.end()); /* line 55 slow_hit_count: 100000, fast_hit_count: 2154 */
    dfs(1, 0); /* line 56 slow_hit_count: 100000, fast_hit_count: 2154 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - **`dfs` function** (line 21): The hit count for the `dfs` function is significantly higher for the slow input (5,069,818 hits) compared to the fast input (133,866 hits). This suggests that the depth-first search (DFS) approach is potentially causing the slowdown.
   - **`dfs` loop and recursion** (lines 28-30): The loop within the `dfs` function and the recursive call are executed very frequently for the slow input. The recursive nature, combined with multiple divisions (`C % s == 0`), contributes to the increased computational load.
   - **Lines related to factorization** (lines 49-54): The factorization process within the main loop is heavily hit in the slow case, with lines 49-52 being particularly active.

2. **Inference on Interactions**:
   - The `dfs` function's recursive nature and factorization before it suggest a connection between the input numbers' divisibility and the recursion depth. The performance issue likely arises from a high branching factor and deep recursion for certain numbers.
   - The calculation of powers (`C *= i` loop) and the check against `INF` (line 40) are also part of the performance path, with the slow input hitting these checks without triggering the break as frequently as the fast input does.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants**:

   - **Invariant 1: High Recursion Depth and Factorization Complexity**
     - "The program slows down significantly when recursion depth in the `dfs` function becomes large due to high branching factors. This typically occurs when input values have many factors, leading to more divisions and recursive calls."

   - **Invariant 2: Repeated Factorization Operations**
     - "If the input values contain numbers with many small divisors, the factorization process is repeated excessively, increasing the computational load. This is especially true when the input numbers are composite with many factors."

   - **Invariant 3: Ineffective Power Calculation**
     - "The calculation of powers and checks against overflow (`INF`) contribute to the slowdown when these calculations frequently reach the limit without early termination. This can occur when combinations of input numbers and powers `k` are not conducive to early breaks in loops."

2. **Thresholds and Conditions**:
   - The conditions are abstracted to factorization complexity and recursion depth without specifying exact numbers. They consider the structure and divisibility of input numbers as primary triggers for slow performance, especially when `n` approaches the higher end of its allowed range and `k` allows many combinations.

3. **Recommendations**:
   - Consider minimizing redundant factorization and optimizing the recursion strategy, perhaps by pruning unnecessary paths or improving early exit conditions in the DFS for numbers with simpler factor structures.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived earlier.

1. **High Recursion Depth and Factorization Complexity**:

```cpp
void check_dfs_invariant(int depth, int branches) {
    if (depth > 50 && branches > 10) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}
```

2. **Repeated Factorization Operations**:

```cpp
void check_factorization_invariant(int factorCount) {
    if (factorCount > 10) { // A threshold indicating many small divisors
        cerr << "Warning: factorization_invariant triggered - excessive factorization operations" << endl;
        abort();
    }
}
```

3. **Ineffective Power Calculation**:

```cpp
void check_power_calculation_invariant(long long C) {
    if (C > INF) { // Indicating overflow or near-overflow condition
        cerr << "Warning: power_calculation_invariant triggered - ineffective power calculation" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Below is the instrumented C++ code incorporating the above checks at appropriate places.

```cpp
#include <bits/stdc++.h>
using namespace std;

const long long LIM = 1e5, N = LIM + 10;
const long long INF = 1e10;
long long C, ans, a[N];
long long n, K;
std::vector<long long> fac;

// Checker functions
void check_dfs_invariant(int depth, int branches) {
    if (depth > 50 && branches > 10) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

void check_factorization_invariant(int factorCount) {
    if (factorCount > 10) { // A threshold indicating many small divisors
        cerr << "Warning: factorization_invariant triggered - excessive factorization operations" << endl;
        abort();
    }
}

void check_power_calculation_invariant(long long C) {
    if (C > INF) { // Indicating overflow or near-overflow condition
        cerr << "Warning: power_calculation_invariant triggered - ineffective power calculation" << endl;
        abort();
    }
}

inline long long read() {
    long long x = 0, f = 1;
    char ch = getchar();
    while (ch < '0' || ch > '9') {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (ch >= '0' && ch <= '9') {
        x = (x << 1) + (x << 3) + (ch ^ 48);
        ch = getchar();
    }
    return x * f;
}

void dfs(long long x, long long dep) {
    if (x > LIM) return;
    if (x > C / x) return;
    if (x == C / x)
        ans += a[x] * (a[x] - 1) / 2;
    else if (C / x <= LIM)
        ans += a[x] * a[C / x];
    check_dfs_invariant(dep, fac.size()); // Check for recursion condition
    for (long long i = dep; i < (long long)fac.size(); i++) {
        long long t = fac[i], s = x * t;
        for (; C % s == 0; s = s * t) dfs(s, i + 1);
    }
}

signed main() {
    n = read(), K = read();
    for (long long i = 1; i <= n; i++) ++a[read()];

    for (long long i = 1; i <= LIM; i++) {
        long long f = 1;
        C = 1;
        for (long long j = 1; j <= K; j++) {
            if (C * i > INF) {
                f = 0;
                break;
            }
            C *= i;
        }
        check_power_calculation_invariant(C); // Check for power calculation condition
        if (f == 0) continue;

        fac.clear();
        long long t = i;
        int factorCount = 0; // To keep track of number of factors
        for (long long j = 2; 1ll * j * j <= t; j++)
            if (!(t % j)) {
                fac.push_back(j);
                while (!(t % j)) t /= j;
                ++factorCount;
            }
        check_factorization_invariant(factorCount); // Check for factorization condition
        if (t > 1) fac.push_back(t);
        sort(fac.begin(), fac.end());
        dfs(1, 0);
    }
    printf("%lld\n", ans);
    return 0;
}
```

**Explanation**:
- Added three checker functions that correspond to the performance-characterizing invariants derived. These functions are called at strategic points in the program.
- `check_dfs_invariant` is called within the `dfs` function to monitor recursion depth and branching.
- `check_factorization_invariant` is called after factorization to ensure we aren't over-processing numbers with many divisors.
- `check_power_calculation_invariant` is used during power calculation to ensure calculations do not exceed `INF`, indicating an issue with ineffective power calculation.

