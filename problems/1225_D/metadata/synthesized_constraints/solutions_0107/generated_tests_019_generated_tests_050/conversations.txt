system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 110000, base = 19260817, mod = 1e9 + 7;
unsigned long long ans, hsa[N], hsb[N];
int n, k, a[N], prime[N], nopr;
map<int, int> fac[N];
map<unsigned long long, long long> buc;
template <class T>
inline void read(T &x) {
  x = 0;
  char ch = getchar(), w = 0;
  while (!isdigit(ch)) w = ch == '-', ch = getchar();
  while (isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();
  x = w ? -x : x;
  return;
}
inline long long quickpow(long long base, long long pw) {
  long long ret = 1;
  while (pw) {
    if (pw & 1) ret = ret * base;
    base = base * base, pw >>= 1;
  }
  return ret;
}
int main() {
  int maxA = 0;
  read(n), read(k);
  for (register int i = 1; i <= n; ++i) read(a[i]), maxA = max(maxA, a[i]);
  for (register int i = 2; i <= maxA; ++i) {
    if (fac[i].empty()) fac[i][i] = 1, prime[++nopr] = i;
    for (register int j = 1, k; j <= nopr && (k = i * prime[j]) <= maxA; ++j) {
      fac[k] = fac[i], ++fac[k][prime[j]];
      if (i % prime[j] == 0) break;
    }
    for (register auto j = fac[i].begin(); j != fac[i].end(); ++j) {
      if (j->second % k == 0) continue;
      hsa[i] = hsa[i] * base ^ quickpow(j->first, j->second % k) % base;
      hsb[i] =
          hsb[i] * base ^ quickpow(j->first, (k - j->second % k) % k) % base;
    }
  }
  for (register int i = 1; i <= n; ++i) ans += buc[hsb[a[i]]], ++buc[hsa[a[i]]];
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 12
49248 87211


(G.2) Fast Input

0 12
49248 87211


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 110000, base = 19260817, mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long ans, hsa[N], hsb[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, a[N], prime[N], nopr; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> fac[N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
map<unsigned long long, long long> buc; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline void read(T &x) { /* line 9 slow_hit_count: 4, fast_hit_count: 2 */
  x = 0; /* line 10 slow_hit_count: 4, fast_hit_count: 2 */
  char ch = getchar(), w = 0; /* line 11 slow_hit_count: 4, fast_hit_count: 2 */
  while (!isdigit(ch)) w = ch == '-', ch = getchar(); /* line 12 slow_hit_count: 4, fast_hit_count: 2 */
  while (isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar(); /* line 13 slow_hit_count: 17, fast_hit_count: 5 */
  x = w ? -x : x; /* line 14 slow_hit_count: 4, fast_hit_count: 2 */
  return; /* line 15 slow_hit_count: 4, fast_hit_count: 2 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
inline long long quickpow(long long base, long long pw) { /* line 17 slow_hit_count: 462470, fast_hit_count: 0 */
  long long ret = 1; /* line 18 slow_hit_count: 462470, fast_hit_count: 0 */
  while (pw) { /* line 19 slow_hit_count: 1661752, fast_hit_count: 0 */
    if (pw & 1) ret = ret * base; /* line 20 slow_hit_count: 1199282, fast_hit_count: 0 */
    base = base * base, pw >>= 1; /* line 21 slow_hit_count: 1199282, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 23 slow_hit_count: 462470, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  int maxA = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  read(n), read(k); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (register int i = 1; i <= n; ++i) read(a[i]), maxA = max(maxA, a[i]); /* line 28 slow_hit_count: 3, fast_hit_count: 1 */
  for (register int i = 2; i <= maxA; ++i) { /* line 29 slow_hit_count: 87211, fast_hit_count: 1 */
    if (fac[i].empty()) fac[i][i] = 1, prime[++nopr] = i; /* line 30 slow_hit_count: 87210, fast_hit_count: 0 */
    for (register int j = 1, k; j <= nopr && (k = i * prime[j]) <= maxA; ++j) { /* line 31 slow_hit_count: 137164, fast_hit_count: 0 */
      fac[k] = fac[i], ++fac[k][prime[j]]; /* line 32 slow_hit_count: 78742, fast_hit_count: 0 */
      if (i % prime[j] == 0) break; /* line 33 slow_hit_count: 78742, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    for (register auto j = fac[i].begin(); j != fac[i].end(); ++j) { /* line 35 slow_hit_count: 318456, fast_hit_count: 0 */
      if (j->second % k == 0) continue; /* line 36 slow_hit_count: 231246, fast_hit_count: 0 */
      hsa[i] = hsa[i] * base ^ quickpow(j->first, j->second % k) % base; /* line 37 slow_hit_count: 231235, fast_hit_count: 0 */
      hsb[i] = /* line 38 slow_hit_count: 231235, fast_hit_count: 0 */
          hsb[i] * base ^ quickpow(j->first, (k - j->second % k) % k) % base; /* line 39 slow_hit_count: 231235, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (register int i = 1; i <= n; ++i) ans += buc[hsb[a[i]]], ++buc[hsa[a[i]]]; /* line 42 slow_hit_count: 3, fast_hit_count: 1 */
  cout << ans << endl; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the given line-level hit counts, the following observations are made:

1. **Line 17-23 (`quickpow` function)**: This function is called a very high number of times (462,470 times) in the slow input compared to zero times for the fast input. This suggests that the `quickpow` operation is a significant factor in the performance difference.

2. **Line 29-39 (Factorization and Hash Calculations)**: These lines are responsible for factorizing numbers, populating prime factors, and calculating hash values. The hit counts here are notably high in the slow input, especially:
   - Line 29: Looping over `maxA`, which is the maximum value in the array `a`.
   - Line 35-39: These lines involve iterating over factor maps and using the `quickpow` function.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified expensive segments and understanding of the code, the following performance-characterizing invariants can be derived:

1. **High Maximum Element Invariant**:
   - **Natural Language Description**: "When the maximum element in the input array `a` is large, the program might become slow due to extensive computations of factorization and hash generation for each number up to that maximum element."
   - **Explanation**: The program's inner workings involve iterating and computing factors up to `maxA`, which is the largest number in the input array. If `maxA` is large, this could lead to significant overhead due to increased factorization and hashing operations.

2. **Repeated Exponentiation Invariant**:
   - **Natural Language Description**: "If the calculation involves many calls to the exponentiation function `quickpow`, particularly for large bases and powers, the computation time may degrade significantly."
   - **Explanation**: The `quickpow` function is used multiple times when computing hash values for large numbers. Such repeated calculations add a considerable amount of runtime, especially if both base and exponent are large.

3. **Factorization and Prime Handling Invariant**:
   - **Natural Language Description**: "If a large number of prime factors need to be handled for numbers in array `a`, particularly when `n`, the number of integers, is large, the performance could be negatively impacted."
   - **Explanation**: The nested loops that populate the `fac` map and the subsequent hash operations are expensive when many numbers up to `maxA` need to be processed.

4. **Small `n` Handling Invariant**:
   - **Natural Language Description**: "When the number of elements `n` is small, but the individual values are close to the upper constraint (e.g., near 100,000), performance issues may arise due to the complexity of factorization and hashing."
   - **Explanation**: Even a small `n` can lead to slow performance if the values themselves are large, as this increases the number of operations required to determine pair validity.

These invariants collectively help explain why the given program might run slower under certain input scenarios, particularly those involving large numbers and extensive computational requirements related to factorization and exponentiation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers for Performance Invariants in C++

Here, we convert each of the previously identified natural language invariants into runtime checks in C++. 

1. **High Maximum Element Invariant**:
   ```cpp
   void check_max_element_invariant(int maxA) {
       if (maxA > 50000) {  // Threshold based on likely performance impact
           cerr << "Warning: Performance bottleneck condition triggered due to high maximum element!" << endl;
           abort();
       }
   }
   ```

2. **Repeated Exponentiation Invariant**:
   ```cpp
   void check_exponentiation_invariant(int base, int power) {
       if (base > 10000 && power > 50) {  // Arbitrary threshold, considering high base and power
           cerr << "Warning: Performance bottleneck due to repeated high exponentiation!" << endl;
           abort();
       }
   }
   ```

3. **Factorization and Prime Handling Invariant**:
   ```cpp
   void check_prime_factorization_invariant(int nopr) {
       if (nopr > 5000) {  // Threshold for number of primes handled
           cerr << "Warning: Performance bottleneck due to handling many prime factors!" << endl;
           abort();
       }
   }
   ```

4. **Small `n` Handling Invariant with Large Values**:
   ```cpp
   void check_small_n_large_values_invariant(int n, int maxA) {
       if (n < 10 && maxA > 90000) {  // Small n and high maxA threshold
           cerr << "Warning: Performance bottleneck due to small n with large values!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the C++ Solution Code

Now, let's integrate these checkers into the original C++ program, positioning them at appropriate places to detect performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 110000, base = 19260817, mod = 1e9 + 7;
unsigned long long ans, hsa[N], hsb[N];
int n, k, a[N], prime[N], nopr;
map<int, int> fac[N];
map<unsigned long long, long long> buc;

// Function to read input
template <class T>
inline void read(T &x) {
  x = 0;
  char ch = getchar(), w = 0;
  while (!isdigit(ch)) w = ch == '-', ch = getchar();
  while (isdigit(ch)) x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();
  x = w ? -x : x;
  return;
}

// Quick power calculation
inline long long quickpow(long long base, long long pw) {
  long long ret = 1;
  while (pw) {
    if (pw & 1) ret = ret * base;
    base = base * base, pw >>= 1;
  }
  return ret;
}

// Performance check functions
void check_max_element_invariant(int maxA) {
  if (maxA > 50000) {
    cerr << "Warning: Performance bottleneck condition triggered due to high maximum element!" << endl;
    abort();
  }
}

void check_exponentiation_invariant(int base, int power) {
  if (base > 10000 && power > 50) {
    cerr << "Warning: Performance bottleneck due to repeated high exponentiation!" << endl;
    abort();
  }
}

void check_prime_factorization_invariant(int nopr) {
  if (nopr > 5000) {
    cerr << "Warning: Performance bottleneck due to handling many prime factors!" << endl;
    abort();
  }
}

void check_small_n_large_values_invariant(int n, int maxA) {
  if (n < 10 && maxA > 90000) {
    cerr << "Warning: Performance bottleneck due to small n with large values!" << endl;
    abort();
  }
}

int main() {
  int maxA = 0;
  read(n), read(k);
  for (register int i = 1; i <= n; ++i) read(a[i]), maxA = max(maxA, a[i]);
  
  // Insert performance check for maximum element
  check_max_element_invariant(maxA);
  check_small_n_large_values_invariant(n, maxA);
  
  for (register int i = 2; i <= maxA; ++i) {
    if (fac[i].empty()) fac[i][i] = 1, prime[++nopr] = i;
    for (register int j = 1, k; j <= nopr && (k = i * prime[j]) <= maxA; ++j) {
      fac[k] = fac[i], ++fac[k][prime[j]];
      if (i % prime[j] == 0) break;
    }
    for (register auto j = fac[i].begin(); j != fac[i].end(); ++j) {
      if (j->second % k == 0) continue;
      int base = j->first;
      int power = j->second % k;
      hsa[i] = hsa[i] * base ^ quickpow(base, power) % base;
      hsb[i] = hsb[i] * base ^ quickpow(base, (k - power) % k) % base;
      
      // Insert performance check for exponentiation
      check_exponentiation_invariant(base, power);
    }
  }
  
  // Insert performance check for number of primes handled
  check_prime_factorization_invariant(nopr);
  
  for (register int i = 1; i <= n; ++i) ans += buc[hsb[a[i]]], ++buc[hsa[a[i]]];
  cout << ans << endl;
  return 0;
}
```

### Explanation

- **Placement of Checks**: The checks are placed at strategic points in the program: 
  - After reading inputs and determining `maxA` to check for the `max_element` invariant.
  - During the factorization calculations and hash creation to check for repeated exponentiation and prime handling.
  - After all operations are complete, to ensure bottlenecks are caught before results are output.

- **Thresholds**: The thresholds used in the checks are tailored to reasonably capture potential bottleneck conditions without being too restrictive. These should be adjusted based on empirical performance data if necessary.

