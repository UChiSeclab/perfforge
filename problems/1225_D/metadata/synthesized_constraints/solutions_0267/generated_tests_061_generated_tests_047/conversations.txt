system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, k, a, ans, to[100005], arr[100005], cnt, A;
int tmp;
long long pang(long long x, long long y) {
  if (y == 0) return 1;
  long long ret;
  ret = pang(x, y / 2);
  if (ret > 1e5) return 1e10 + 1;
  ret *= ret;
  if (y % 2 == 1) {
    ret *= x;
  }
  if (ret > 1e10) return 1e10 + 1;
  return ret;
}
int main() {
  ios_base::sync_with_stdio(NULL);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> k;
  ans = 0;
  for (long long i = 1; i <= 1e5 + 1; i++) {
    if (pang(i, k) > 1e10) {
      tmp = i - 1;
      break;
    }
    to[i] = pang(i, k);
  }
  for (long long i = 1; i <= n; i++) {
    cin >> a;
    A = a;
    cnt = 1;
    for (int j = 2; j <= sqrt(A); j++) {
      if (A % j == 0) cnt *= j;
      while (A % j == 0) A /= j;
    }
    if (A > 1) {
      cnt *= A;
    }
    for (int j = cnt; j <= tmp; j += cnt) {
      if (to[j] / a > 1e5) break;
      if (to[j] % a == 0 && to[j] / a <= 1e5) {
        ans += arr[to[j] / a];
      }
    }
    arr[a]++;
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 2
1 3 10 9 2 2 14 5 3 7


(G.2) Fast Input

6 3
1 3 9 8 24 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, k, a, ans, to[100005], arr[100005], cnt, A; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int tmp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long pang(long long x, long long y) { /* line 5 slow_hit_count: 600003, fast_hit_count: 12927 */
  if (y == 0) return 1; /* line 6 slow_hit_count: 600003, fast_hit_count: 12927 */
  long long ret; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  ret = pang(x, y / 2); /* line 8 slow_hit_count: 400002, fast_hit_count: 8618 */
  if (ret > 1e5) return 1e10 + 1; /* line 9 slow_hit_count: 400002, fast_hit_count: 8618 */
  ret *= ret; /* line 10 slow_hit_count: 400001, fast_hit_count: 8618 */
  if (y % 2 == 1) { /* line 11 slow_hit_count: 400001, fast_hit_count: 8618 */
    ret *= x; /* line 12 slow_hit_count: 200001, fast_hit_count: 8618 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (ret > 1e10) return 1e10 + 1; /* line 14 slow_hit_count: 400001, fast_hit_count: 8618 */
  return ret; /* line 15 slow_hit_count: 400001, fast_hit_count: 8617 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(NULL); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  ans = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= 1e5 + 1; i++) { /* line 23 slow_hit_count: 100001, fast_hit_count: 2155 */
    if (pang(i, k) > 1e10) { /* line 24 slow_hit_count: 100001, fast_hit_count: 2155 */
      tmp = i - 1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    to[i] = pang(i, k); /* line 28 slow_hit_count: 100000, fast_hit_count: 2154 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= n; i++) { /* line 30 slow_hit_count: 11, fast_hit_count: 7 */
    cin >> a; /* line 31 slow_hit_count: 10, fast_hit_count: 6 */
    A = a; /* line 32 slow_hit_count: 10, fast_hit_count: 6 */
    cnt = 1; /* line 33 slow_hit_count: 10, fast_hit_count: 6 */
    for (int j = 2; j <= sqrt(A); j++) { /* line 34 slow_hit_count: 16, fast_hit_count: 10 */
      if (A % j == 0) cnt *= j; /* line 35 slow_hit_count: 6, fast_hit_count: 4 */
      while (A % j == 0) A /= j; /* line 36 slow_hit_count: 10, fast_hit_count: 12 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (A > 1) { /* line 38 slow_hit_count: 10, fast_hit_count: 6 */
      cnt *= A; /* line 39 slow_hit_count: 8, fast_hit_count: 3 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = cnt; j <= tmp; j += cnt) { /* line 41 slow_hit_count: 1896, fast_hit_count: 203 */
      if (to[j] / a > 1e5) break; /* line 42 slow_hit_count: 1896, fast_hit_count: 203 */
      if (to[j] % a == 0 && to[j] / a <= 1e5) { /* line 43 slow_hit_count: 1886, fast_hit_count: 197 */
        ans += arr[to[j] / a]; /* line 44 slow_hit_count: 1886, fast_hit_count: 197 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    arr[a]++; /* line 47 slow_hit_count: 10, fast_hit_count: 6 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the code and generate performance-characterizing invariants, we'll first look at the hit count data to identify which parts of the code are being executed significantly more during the slow input run compared to the fast input. Here's the analysis broken down into two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Recursive Function `pang`**:
   - The function `pang` has a significantly higher hit count for the slow input (`600,003` hits) compared to the fast input (`12,927` hits). This indicates that the computation of powers is a potential bottleneck.

2. **Loop for Populating `to` Array**:
   - The loop starting at line 23 is executed `100,001` times in the slow input but only `2,155` times in the fast input. The recursive calls to `pang` within this loop contribute to its high expense.

3. **Inner Loop Over Potential Divisors**:
   - The loop starting at line 41 shows a significant increase in hit counts (`1,896` for slow input versus `203` for fast input). This suggests more iterations through potential candidates for `x^k` during the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis from Phase 1, we can derive the following performance-characterizing invariants:

1. **Power Computation Bottleneck**:
   - **Natural Language Invariant**: "If the power computation for determining `x^k` is executed frequently, especially for larger values of `k` and range of `x`, the program's performance degrades. This typically happens when `k` is large or when there are many candidates for `x` within the constraints."
  
2. **Nested Loop Over Divisors**:
   - **Natural Language Invariant**: "The inner loop over potential divisors and multiples tends to perform poorly when the input contains many numbers with large prime factors, leading to a high number of iterations for validating the pairs `(i, j)`."

3. **Large Number of Multiplicative Combinations**:
   - **Natural Language Invariant**: "When the list of numbers contains many elements that can be paired in multiple ways to form perfect k-th powers, the computational load increases significantly. This is exacerbated by higher values of `n` and dense combinations of multiplicative products."

These invariants address the conditions under which the program slows. They reflect computational aspects like frequent power calculations and high iteration counts due to divisor checks, especially under certain input characteristics like large `k`, high `n`, or numbers with many divisors.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n positive integers a_1, …, a_n, and an integer k ≥ 2. Count the number of pairs i, j such that 1 ≤ i < j ≤ n, and there exists an integer x such that a_i ⋅ a_j = x^k.

Input

The first line contains two integers n and k (2 ≤ n ≤ 10^5, 2 ≤ k ≤ 100).

The second line contains n integers a_1, …, a_n (1 ≤ a_i ≤ 10^5).

Output

Print a single integer — the number of suitable pairs.

Example

Input


6 3
1 3 9 8 24 1


Output


5

Note

In the sample case, the suitable pairs are:

  * a_1 ⋅ a_4 = 8 = 2^3;
  * a_1 ⋅ a_6 = 1 = 1^3;
  * a_2 ⋅ a_3 = 27 = 3^3;
  * a_3 ⋅ a_5 = 216 = 6^3;
  * a_4 ⋅ a_6 = 8 = 2^3.

Solution (C++ code):
{solution}


assistant: Let's proceed with the task of implementing runtime checks for the performance-characterizing invariants we identified earlier, and then integrating them into the provided C++ code.

### Phase 3: Implementing the Natural Language Invariants in C++

Below are the C++ code snippets that implement the performance-characterizing invariants:

1. **Power Computation Bottleneck Check**:
   - We will check if the power computation (`pang` function) is called excessively, which could indicate a performance bottleneck, especially when `k` is large.

```cpp
void check_power_computation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered! Excessive power computation." << endl;
        abort();
    }
}
```

2. **Nested Loop Over Divisors Check**:
   - We will check if the loop over potential divisors is executed too many times, which can be an indicator of performance degradation.

```cpp
void check_nested_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered! Excessive iterations over divisors." << endl;
        abort();
    }
}
```

3. **Large Number of Multiplicative Combinations**:
   - We will add a check to ensure that the number of iterations checking potential multiplicative combinations does not become too high.

```cpp
void check_multiplicative_combinations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered! Numerous multiplicative combinations." << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the C++ Code

Now, we will place these checks into the existing C++ code at suitable locations.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, k, a, ans, to[100005], arr[100005], cnt, A;
int tmp;

// Check functions
void check_power_computation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered! Excessive power computation." << endl;
        abort();
    }
}

void check_nested_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered! Excessive iterations over divisors." << endl;
        abort();
    }
}

void check_multiplicative_combinations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered! Numerous multiplicative combinations." << endl;
        abort();
    }
}

long long pang(long long x, long long y) {
    if (y == 0) return 1;
    long long ret;
    ret = pang(x, y / 2);
    if (ret > 1e5) return 1e10 + 1;
    ret *= ret;
    if (y % 2 == 1) {
        ret *= x;
    }
    if (ret > 1e10) return 1e10 + 1;
    return ret;
}

int main() {
    ios_base::sync_with_stdio(NULL);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> k;
    ans = 0;

    // Check power computation invariant
    check_power_computation_invariant(k > 50);  // Arbitrary threshold for demonstration

    for (long long i = 1; i <= 1e5 + 1; i++) {
        if (pang(i, k) > 1e10) {
            tmp = i - 1;
            break;
        }
        to[i] = pang(i, k);
    }

    for (long long i = 1; i <= n; i++) {
        cin >> a;
        A = a;
        cnt = 1;
        
        // Check nested loop over divisors invariant
        check_nested_loop_invariant(n > 10000);  // Arbitrary threshold for demonstration

        for (int j = 2; j <= sqrt(A); j++) {
            if (A % j == 0) cnt *= j;
            while (A % j == 0) A /= j;
        }
        if (A > 1) {
            cnt *= A;
        }

        for (int j = cnt; j <= tmp; j += cnt) {
            if (to[j] / a > 1e5) break;
            if (to[j] % a == 0 && to[j] / a <= 1e5) {
                ans += arr[to[j] / a];
            }
        }

        // Check multiplicative combinations invariant
        check_multiplicative_combinations_invariant(cnt > 1000);  // Arbitrary threshold for demonstration

        arr[a]++;
    }

    cout << ans << endl;
}
```

### Explanation of Inserted Checks

- **Power Computation Bottleneck**: The function `pang` is checked for excessive computations by setting an arbitrary threshold for `k`. If `k` is too large, it could lead to excessive recursive calls.
- **Nested Loop Over Divisors**: This check ensures that the divisor loop is not executed excessively, especially when `n` is large or the numbers have many divisors.
- **Multiplicative Combinations**: This checks if the number of iterations for checking combinations becomes excessive, potentially indicating too many valid combinations.

These checks aim to provide early warnings for conditions that can cause performance degradation, aiding in debugging and optimization efforts.

