system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class t>
inline t read(t &x) {
  char c = getchar();
  bool f = 0;
  x = 0;
  while (!isdigit(c)) f |= c == '-', c = getchar();
  while (isdigit(c)) x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();
  if (f) x = -x;
  return x;
}
template <class t>
inline void write(t x) {
  if (x < 0)
    putchar('-'), write(-x);
  else {
    if (x > 9) write(x / 10);
    putchar('0' + x % 10);
  }
}
const int N = 505;
int n, m, ans, f[N][N];
signed main() {
  read(n);
  read(m);
  f[0][0] = 1;
  for (int i = 1, x; i <= n; i++) {
    read(x);
    for (int j = m; j >= x; j--)
      for (int k = 500; k >= 0; k--) {
        if (k >= x) f[j][k] |= f[j - x][k - x];
        f[j][k] |= f[j - x][k];
      }
  }
  for (int i = 0; i <= m; i++)
    if (f[m][i]) ans++;
  write(ans);
  puts("");
  for (int i = 0; i <= m; i++)
    if (f[m][i]) write(i), putchar(' ');
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 88
30 51 7 29 25 2 44 28 49 45


(G.2) Fast Input

10 58
30 51 7 29 25 2 44 28 49 45


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class t> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline t read(t &x) { /* line 4 slow_hit_count: 12, fast_hit_count: 12 */
  char c = getchar(); /* line 5 slow_hit_count: 12, fast_hit_count: 12 */
  bool f = 0; /* line 6 slow_hit_count: 12, fast_hit_count: 12 */
  x = 0; /* line 7 slow_hit_count: 12, fast_hit_count: 12 */
  while (!isdigit(c)) f |= c == '-', c = getchar(); /* line 8 slow_hit_count: 12, fast_hit_count: 12 */
  while (isdigit(c)) x = (x << 1) + (x << 3) + (c ^ 48), c = getchar(); /* line 9 slow_hit_count: 34, fast_hit_count: 34 */
  if (f) x = -x; /* line 10 slow_hit_count: 12, fast_hit_count: 12 */
  return x; /* line 11 slow_hit_count: 12, fast_hit_count: 12 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
template <class t> /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
inline void write(t x) { /* line 14 slow_hit_count: 38, fast_hit_count: 18 */
  if (x < 0) /* line 15 slow_hit_count: 38, fast_hit_count: 18 */
    putchar('-'), write(-x); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (x > 9) write(x / 10); /* line 18 slow_hit_count: 38, fast_hit_count: 18 */
    putchar('0' + x % 10); /* line 19 slow_hit_count: 38, fast_hit_count: 18 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 38, fast_hit_count: 18 */
const int N = 505; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, ans, f[N][N]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  read(n); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  read(m); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  f[0][0] = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1, x; i <= n; i++) { /* line 28 slow_hit_count: 11, fast_hit_count: 11 */
    read(x); /* line 29 slow_hit_count: 10, fast_hit_count: 10 */
    for (int j = m; j >= x; j--) /* line 30 slow_hit_count: 590, fast_hit_count: 290 */
      for (int k = 500; k >= 0; k--) { /* line 31 slow_hit_count: 291160, fast_hit_count: 140560 */
        if (k >= x) f[j][k] |= f[j - x][k - x]; /* line 32 slow_hit_count: 290580, fast_hit_count: 140280 */
        f[j][k] |= f[j - x][k]; /* line 33 slow_hit_count: 290580, fast_hit_count: 140280 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= m; i++) /* line 36 slow_hit_count: 90, fast_hit_count: 60 */
    if (f[m][i]) ans++; /* line 37 slow_hit_count: 89, fast_hit_count: 59 */
  write(ans); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  puts(""); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= m; i++) /* line 40 slow_hit_count: 90, fast_hit_count: 60 */
    if (f[m][i]) write(i), putchar(' '); /* line 41 slow_hit_count: 89, fast_hit_count: 59 */
} /* line 42 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the C program provided and derive performance-characterizing invariants, we'll follow the tasks described in the context.

### Phase 1: Identify Expensive or Inefficient Code Segments
1. **Comparing Line-Level Hit Counts:**
   - The lines with the most significant difference in hit counts between the slow and fast runs are lines 30, 31, 32, and 33. 
   - Specifically, line 31 (`for (int k = 500; k >= 0; k--)`) and lines 32-33, which contain logic to update the `f` array, have much higher hit counts in the slow run compared to the fast run.

2. **Pinpointing Lines/Functions with More Hits:**
   - The nested loops at lines 30-33 are critical. The inner loop that iterates from `k = 500` downwards is especially costly in terms of iterations due to the higher hit counts.

3. **Inference on Interaction with Data Structures:**
   - The program is using dynamic programming with a 2D array `f`, where the size of each dimension is up to 500.
   - The inefficiency arises from iterating over this large array size for every coin combination, particularly when `m` and the coin values are large.

### Phase 2: Derive Performance-Characterizing Invariants
Based on the analysis, here are the natural language statements that describe conditions likely to trigger slow performance:

1. **Invariant on Large Coin Values and High Target Sum (`m`):**
   - *Natural Language Description:* "When the maximum coin value approaches the total number of coins `n`, and the target sum `m` is large, the nested loop iterates excessively, leading to performance degradation."
   - *Explanation:* If the coin values are large, the possible ways to reach `m` become more complex due to fewer combinations, leading to more frequent updates to the dynamic programming table.

2. **Invariant on High Iteration Counts in Nested Loops:**
   - *Natural Language Description:* "If the dynamic programming table's dimensions are maximized (i.e., both `n` and the largest coin value are near 500), the program may slow as the inner loop iterates over the entire 2D table for each coin."
   - *Explanation:* The slow input triggers maximal iteration counts due to the large range of possible sums and possible subset sums. This leads to a high computation burden on the `f` table.

3. **Invariant on Coin Set Compositions:**
   - *Natural Language Description:* "When the coin values are diverse and cover a wide range, leading to numerous ways to decompose the target sum `m`, the computation cost increases significantly, slowing the program."
   - *Explanation:* As coin values become more varied, there are more potential subset combinations to achieve sums, increasing the complexity and number of operations required.

These conditions characterize the scenarios in which the program is likely to experience a slowdown, based on the differences between the slow and fast input cases and the program's logic. Adjusting the implementation to reduce the loop iteration count or optimize the dynamic programming approach can help mitigate these performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each invariant derived earlier, I'll create a C++ code snippet that checks the condition at runtime.

#### Invariant 1: Large Coin Values and High Target Sum
```cpp
void check_large_coin_invariant(int max_coin_value, int m) {
    if (max_coin_value >= 450 && m >= 450) {  // Threshold values chosen based on closeness to limits
        cerr << "Warning: Performance bottleneck condition triggered due to large coin values combined with high target sum!" << endl;
        abort();
    }
}
```

#### Invariant 2: High Iteration Counts in Nested Loops
```cpp
void check_iteration_invariant(int n, int max_coin_value) {
    if (n > 450 && max_coin_value > 450) {  // Thresholds imply potential for heavy iteration
        cerr << "Warning: Performance bottleneck condition triggered due to high iteration counts in nested loops!" << endl;
        abort();
    }
}
```

#### Invariant 3: Diverse Coin Set Compositions
```cpp
void check_diverse_coin_invariant(const vector<int>& coins) {
    set<int> unique_coins(coins.begin(), coins.end());
    if (unique_coins.size() == coins.size() && coins.size() > 10) {  // Diverse coins with significant number
        cerr << "Warning: Performance bottleneck condition triggered due to diverse coin set compositions!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Here's how the instrumented C++ program looks with the performance checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

template <class t>
inline t read(t &x) {
    char c = getchar();
    bool f = 0;
    x = 0;
    while (!isdigit(c)) f |= c == '-', c = getchar();
    while (isdigit(c)) x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();
    if (f) x = -x;
    return x;
}

template <class t>
inline void write(t x) {
    if (x < 0)
        putchar('-'), write(-x);
    else {
        if (x > 9) write(x / 10);
        putchar('0' + x % 10);
    }
}

// Performance-checker functions
void check_large_coin_invariant(int max_coin_value, int m) {
    if (max_coin_value >= 450 && m >= 450) {
        cerr << "Warning: Performance bottleneck condition triggered due to large coin values combined with high target sum!" << endl;
        abort();
    }
}

void check_iteration_invariant(int n, int max_coin_value) {
    if (n > 450 && max_coin_value > 450) {
        cerr << "Warning: Performance bottleneck condition triggered due to high iteration counts in nested loops!" << endl;
        abort();
    }
}

void check_diverse_coin_invariant(const vector<int>& coins) {
    set<int> unique_coins(coins.begin(), coins.end());
    if (unique_coins.size() == coins.size() && coins.size() > 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to diverse coin set compositions!" << endl;
        abort();
    }
}

const int N = 505;
int n, m, ans, f[N][N];

signed main() {
    read(n);
    read(m);

    vector<int> coins(n);
    int max_coin_value = 0;

    for (int i = 0; i < n; ++i) {
        read(coins[i]);
        max_coin_value = max(max_coin_value, coins[i]);
    }

    // Insert checks after reading inputs
    check_large_coin_invariant(max_coin_value, m);
    check_iteration_invariant(n, max_coin_value);
    check_diverse_coin_invariant(coins);

    f[0][0] = 1;
    for (int i = 1, x; i <= n; i++) {
        x = coins[i-1];
        for (int j = m; j >= x; j--)
            for (int k = 500; k >= 0; k--) {
                if (k >= x) f[j][k] |= f[j - x][k - x];
                f[j][k] |= f[j - x][k];
            }
    }
    
    for (int i = 0; i <= m; i++)
        if (f[m][i]) ans++;
    write(ans);
    puts("");
    for (int i = 0; i <= m; i++)
        if (f[m][i]) write(i), putchar(' ');
}
```

**Explanation:**
- **Invariant 1 and 2 checks** are placed after reading the inputs to quickly determine if the input conditions are likely to cause performance issues.
- **Invariant 3 check** is similarly placed after reading inputs to capture the diversity of coin values.
- These checks should help in identifying inputs that could lead to performance bottlenecks without adding overhead to the main computation loops.

