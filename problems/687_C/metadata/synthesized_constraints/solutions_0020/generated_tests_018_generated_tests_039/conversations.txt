system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bitset<502> b[502];
bool ok[502];
int n, k, c;
int main() {
  b[0][0] = ok[0] = 1;
  scanf("%d%d", &n, &k);
  while (n--) {
    scanf("%d", &c);
    for (int j = k; j >= c; j--)
      for (int i = 0; i <= k; i++)
        b[j][i] = (b[j][i] || b[j - c][i] || ((i >= c) ? b[j - c][i - c] : 0));
  }
  printf("%d\n", b[k].count());
  for (int i = 0; i <= k; i++)
    if (b[k][i]) printf("%d ", i);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 91
74 25 66 50 62 30 50 45


(G.2) Fast Input

8 74
74 25 66 50 62 30 50 45


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bitset<502> b[502]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool ok[502]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, c; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  b[0][0] = ok[0] = 1; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &k); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 9 slow_hit_count: 9, fast_hit_count: 9 */
    scanf("%d", &c); /* line 10 slow_hit_count: 8, fast_hit_count: 8 */
    for (int j = k; j >= c; j--) /* line 11 slow_hit_count: 342, fast_hit_count: 206 */
      for (int i = 0; i <= k; i++) /* line 12 slow_hit_count: 31062, fast_hit_count: 15048 */
        b[j][i] = (b[j][i] || b[j - c][i] || ((i >= c) ? b[j - c][i - c] : 0)); /* line 13 slow_hit_count: 30728, fast_hit_count: 14850 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", b[k].count()); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= k; i++) /* line 16 slow_hit_count: 93, fast_hit_count: 76 */
    if (b[k][i]) printf("%d ", i); /* line 17 slow_hit_count: 92, fast_hit_count: 75 */
  return 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program for performance bottlenecks, we need to follow the outlined phases and tasks. Here's how we can proceed:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The lines with significantly higher hit counts in the slow input compared to the fast input are:
     - **Line 11 (Outer Loop):** `for (int j = k; j >= c; j--)` with 342 hits in slow input vs. 206 hits in fast input.
     - **Line 12 (Inner Loop):** `for (int i = 0; i <= k; i++)` with 31,062 hits in slow input vs. 15,048 hits in fast input.
     - **Line 13 (Computation):** `b[j][i] = ...` with 30,728 hits in slow input vs. 14,850 hits in fast input.

2. **Pinpoint Lines or Functions:**
   - The loops on lines 11 and 12, and the computation on line 13 are significantly more active in the slow input. These loops iterate over a range dependent on `k` and `c`, affecting the complexity.

3. **Infer Interaction with Data Structures:**
   - The outer loop decreases from `k` to `c`. The larger `k` is compared to `c`, the more iterations are needed. The inner loop runs up to `k` for each iteration of the outer loop.
   - Given `n` (number of coins) affects the outer loop, the combination of `n` and how close `n` is to `k` influences the performance due to repeated calculations over a bitset.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, here are the performance-characterizing invariants in natural language:

1. **Large Value of `k` Relative to Coin Values:**
   - "If the price `k` is significantly larger than typical coin values, the nested loops run excessively, leading to slow execution. This is especially true when coin values are diverse and do not add up to `k` with fewer iterations."

2. **High Iteration Count in Nested Loops:**
   - "When `k` is close to the maximum possible sum of selected coins and `n` is large, the inner loop's range becomes substantial, causing the program to execute many redundant checks and updates on the `bitset`."

3. **Frequent Re-evaluation of Bitset Entries:**
   - "If the number of different combinations of coins that can sum up to varying values is high, the repeated evaluations and updates on the `bitset` structure contribute to delays. This is common when `k` is large and the available coins create many possible subset sums."

4. **Coin Value Distribution:**
   - "If the coin values are not evenly distributed or are particularly unbalanced, more iterations are needed to explore viable subsets, which can degrade performance with high `k` values."

These invariants focus on conditions that make the problem computationally intensive, correlating strongly with the input patterns and constraints provided in the problem statement.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Checker Code in C++

Let's translate the inferred performance-characterizing invariants into C++ checker code:

### Invariant 1: Large Value of `k` Relative to Coin Values
```cpp
void check_large_k_relative_to_coins(int k, const vector<int>& coins) {
    int max_coin_value = *max_element(coins.begin(), coins.end());
    if (k > 3 * max_coin_value) { // Assumed threshold based on problem constraints.
        cerr << "Warning: Performance bottleneck condition triggered - k much larger than typical coin values!" << endl;
        abort();
    }
}
```

### Invariant 2: High Iteration Count in Nested Loops
```cpp
void check_high_iteration_count(int n, int k) {
    if (n * k > 150000) { // Threshold derived from the problem constraints.
        cerr << "Warning: Performance bottleneck condition triggered - high nested loop iteration count!" << endl;
        abort();
    }
}
```

### Invariant 3: Frequent Re-evaluation of Bitset Entries
```cpp
void check_frequent_bitset_updates(int n, int k) {
    if (n > 100 && k > 400) { // Arbitrary thresholds based on observed slow inputs.
        cerr << "Warning: Performance bottleneck condition triggered - frequent bitset evaluations!" << endl;
        abort();
    }
}
```

### Invariant 4: Coin Value Distribution
```cpp
void check_coin_value_distribution(const vector<int>& coins) {
    int min_coin = *min_element(coins.begin(), coins.end());
    int max_coin = *max_element(coins.begin(), coins.end());
    if (max_coin - min_coin > 400) { // Assumed threshold to check imbalance.
        cerr << "Warning: Performance bottleneck condition triggered - uneven coin value distribution!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checker Code with the Program

Now, let's integrate these checkers into the original C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_k_relative_to_coins(int k, const vector<int>& coins) {
    int max_coin_value = *max_element(coins.begin(), coins.end());
    if (k > 3 * max_coin_value) {
        cerr << "Warning: Performance bottleneck condition triggered - k much larger than typical coin values!" << endl;
        abort();
    }
}

void check_high_iteration_count(int n, int k) {
    if (n * k > 150000) {
        cerr << "Warning: Performance bottleneck condition triggered - high nested loop iteration count!" << endl;
        abort();
    }
}

void check_frequent_bitset_updates(int n, int k) {
    if (n > 100 && k > 400) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent bitset evaluations!" << endl;
        abort();
    }
}

void check_coin_value_distribution(const vector<int>& coins) {
    int min_coin = *min_element(coins.begin(), coins.end());
    int max_coin = *max_element(coins.begin(), coins.end());
    if (max_coin - min_coin > 400) {
        cerr << "Warning: Performance bottleneck condition triggered - uneven coin value distribution!" << endl;
        abort();
    }
}

int main() {
    bitset<502> b[502];
    bool ok[502];
    int n, k, c;

    b[0][0] = ok[0] = 1;
    scanf("%d%d", &n, &k);

    vector<int> coins(n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &coins[i]);
    }

    // Place checks after reading inputs
    check_large_k_relative_to_coins(k, coins);
    check_high_iteration_count(n, k);
    check_frequent_bitset_updates(n, k);
    check_coin_value_distribution(coins);

    while (n--) {
        c = coins[coins.size() - 1 - n];
        for (int j = k; j >= c; j--) {
            for (int i = 0; i <= k; i++) {
                b[j][i] = (b[j][i] || b[j - c][i] || ((i >= c) ? b[j - c][i - c] : 0));
            }
        }
    }

    printf("%d\n", b[k].count());
    for (int i = 0; i <= k; i++) {
        if (b[k][i]) printf("%d ", i);
    }

    return 0;
}
```

### Explanation:
- **Check Placement**: The checks are placed after reading input values and before the main computation loops to avoid adding overhead within loops.
- **Condition Checks**: Each check has a specific role in identifying potential performance bottlenecks based on the characteristics derived earlier.
- **Abort on Trigger**: `abort()` is called when a condition is met, making these checks useful for detecting slow scenarios during fuzzing or testing. 

This integration ensures that the code has a mechanism to warn and stop execution when encountering potential slow input scenarios, aiding in debugging and performance testing.

