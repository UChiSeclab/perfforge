system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<vector<vector<bool> > > dpArr;
int main(int argc, char const *argv[]) {
  int N, K;
  cin >> N >> K;
  std::vector<int> coin(N + 1);
  dpArr = vector<vector<vector<bool> > >(N + 1);
  for (int i = 1; i <= N; ++i) {
    cin >> coin[i];
  }
  for (int i = 0; i < N + 1; ++i) {
    dpArr[i] = vector<vector<bool> >(K + 1, vector<bool>(K + 1, false));
    dpArr[i][0][0] = true;
  }
  for (int i = 1; i < N + 1; ++i) {
    for (int k = 0; k < K + 1; ++k) {
      for (int x = 0; x <= k; ++x) {
        dpArr[i][k][x] = dpArr[i - 1][k][x];
        if (k >= coin[i]) {
          dpArr[i][k][x] = dpArr[i][k][x] || dpArr[i - 1][k - coin[i]][x];
          if (x >= coin[i]) {
            dpArr[i][k][x] =
                dpArr[i][k][x] || dpArr[i - 1][k - coin[i]][x - coin[i]];
          }
        }
      }
    }
  }
  set<int> A;
  for (int x = 0; x < K + 1; ++x) {
    if (dpArr[N][K][x]) A.insert(x);
  }
  cout << A.size() << endl;
  for (std::set<int>::iterator i = A.begin(); i != A.end(); ++i) {
    cout << *i << ' ';
  }
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 91
74 25 66 50 62 30 50 45


(G.2) Fast Input

8 74
74 25 66 50 62 30 50 45


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<vector<bool> > > dpArr; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char const *argv[]) { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int N, K; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N >> K; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  std::vector<int> coin(N + 1); /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  dpArr = vector<vector<vector<bool> > >(N + 1); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; ++i) { /* line 9 slow_hit_count: 9, fast_hit_count: 9 */
    cin >> coin[i]; /* line 10 slow_hit_count: 8, fast_hit_count: 8 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < N + 1; ++i) { /* line 12 slow_hit_count: 10, fast_hit_count: 10 */
    dpArr[i] = vector<vector<bool> >(K + 1, vector<bool>(K + 1, false)); /* line 13 slow_hit_count: 9, fast_hit_count: 9 */
    dpArr[i][0][0] = true; /* line 14 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i < N + 1; ++i) { /* line 16 slow_hit_count: 9, fast_hit_count: 9 */
    for (int k = 0; k < K + 1; ++k) { /* line 17 slow_hit_count: 744, fast_hit_count: 608 */
      for (int x = 0; x <= k; ++x) { /* line 18 slow_hit_count: 34960, fast_hit_count: 23400 */
        dpArr[i][k][x] = dpArr[i - 1][k][x]; /* line 19 slow_hit_count: 34224, fast_hit_count: 22800 */
        if (k >= coin[i]) { /* line 20 slow_hit_count: 34224, fast_hit_count: 22800 */
          dpArr[i][k][x] = dpArr[i][k][x] || dpArr[i - 1][k - coin[i]][x]; /* line 21 slow_hit_count: 22910, fast_hit_count: 11486 */
          if (x >= coin[i]) { /* line 22 slow_hit_count: 22910, fast_hit_count: 11486 */
            dpArr[i][k][x] = /* line 23 slow_hit_count: 8152, fast_hit_count: 3562 */
                dpArr[i][k][x] || dpArr[i - 1][k - coin[i]][x - coin[i]]; /* line 24 slow_hit_count: 16304, fast_hit_count: 7124 */
          } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  set<int> A; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int x = 0; x < K + 1; ++x) { /* line 31 slow_hit_count: 93, fast_hit_count: 76 */
    if (dpArr[N][K][x]) A.insert(x); /* line 32 slow_hit_count: 92, fast_hit_count: 75 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << A.size() << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (std::set<int>::iterator i = A.begin(); i != A.end(); ++i) { /* line 35 slow_hit_count: 5, fast_hit_count: 3 */
    cout << *i << ' '; /* line 36 slow_hit_count: 4, fast_hit_count: 2 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input and derive performance-characterizing invariants, we will follow a structured analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - The nested loops on lines 17 and 18 have significantly higher hit counts for the slow input compared to the fast input.
   - Specifically, line 18, which iterates over possible subset sums, has the largest discrepancy: 34,960 hits for slow vs. 23,400 for fast.
   - The inner logic on lines 21 and 24, which updates the dynamic programming array, also shows a significant increase in hits for the slow input.

2. **Pinpoint Inefficiencies:**
   - The nested loop structure iterates over all values of `k` (up to the price of the chocolate) and for each value of `k`, over all possible subset sums `x`. The performance bottleneck is primarily in this logic where each combination of `k` and `x` is being checked.
   - The difference between the fast and slow inputs lies in the value of `K`. For the slow input, `K` is 91, while for the fast input, `K` is 74. This larger `K` results in more iterations in the loop, impacting performance.

3. **Analyze Data Structure Interactions:**
   - The `dpArr` data structure's dimensions depend on `N` and `K`, leading to a 3D array with size `(N+1) * (K+1) * (K+1)`. The larger `K` value increases the dimensions and consequently the number of updates required in the innermost loop.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive natural language performance invariants:

1. **Invariant 1: High Price of Chocolate Increases Loop Iterations**
   - Natural language description: "When the price of the chocolate, `K`, approaches its upper constraint (e.g., close to 500), the program may experience slowdowns due to increased iterations over potential subset sums `x`."
   - Explanation: As `K` increases, the number of potential subset sums (`x` values) that need to be evaluated increases significantly, leading to a higher number of iterations in nested loops and more operations on the `dpArr`.

2. **Invariant 2: Large Dynamic Programming State Space**
   - Natural language description: "If both the number of coins `N` and the price `K` are large, the dynamic programming array grows significantly, leading to higher computational and memory overhead."
   - Explanation: The combined effect of large `N` and `K` results in a large 3D `dpArr`, which requires substantial space and time to update, especially as every potential subset (for each coin and each possible price) is considered.

3. **Invariant 3: Frequent Updates to 3D Array**
   - Natural language description: "Frequent updates to a large 3D array (`dpArr`) in a nested loop can cause performance degradation, especially when the loop bounds are large due to high `K` values."
   - Explanation: The 3D array is updated multiple times per loop iteration, leading to computationally expensive operations when `K` is large, contributing to significant slowdowns.

These invariants collectively describe how high values of `K` and `N` can push the program into slower performance paths due to the increased size of the state space and the computational workload required to evaluate all possible combinations of coin subsets.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

Solution (C++ code):
{solution}


assistant: Let's proceed with the task by implementing the checker code for the identified performance-characterizing invariants and integrating them into the original C++ program.

### Phase 3: Implement the Natural Language Invariants in C++

We'll create checker functions based on the natural language invariants derived earlier.

1. **Invariant 1: High Price of Chocolate Increases Loop Iterations**

```cpp
void check_high_price_invariant(int K) {
    if (K > 450) { // Arbitrarily chosen threshold close to the maximum constraint
        cerr << "Warning: high_price_invariant triggered - K is large, increasing loop iterations!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Large Dynamic Programming State Space**

```cpp
void check_large_dp_space_invariant(int N, int K) {
    if (N * K > 200000) { // Threshold for combined input size leading to large DP space
        cerr << "Warning: large_dp_space_invariant triggered - Large DP state space due to high N and K!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Frequent Updates to 3D Array**

```cpp
void check_frequent_updates_invariant(int K) {
    if (K > 450) { // Check before entering the heavy loop structure
        cerr << "Warning: frequent_updates_invariant triggered - High K causing frequent DP updates!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

We'll integrate these checker functions at appropriate points in the code.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_high_price_invariant(int K) {
    if (K > 450) { // Arbitrarily chosen threshold close to the maximum constraint
        cerr << "Warning: high_price_invariant triggered - K is large, increasing loop iterations!" << endl;
        abort();
    }
}

void check_large_dp_space_invariant(int N, int K) {
    if (N * K > 200000) { // Threshold for combined input size leading to large DP space
        cerr << "Warning: large_dp_space_invariant triggered - Large DP state space due to high N and K!" << endl;
        abort();
    }
}

void check_frequent_updates_invariant(int K) {
    if (K > 450) { // Check before entering the heavy loop structure
        cerr << "Warning: frequent_updates_invariant triggered - High K causing frequent DP updates!" << endl;
        abort();
    }
}

vector<vector<vector<bool>>> dpArr;

int main(int argc, char const *argv[]) {
    int N, K;
    cin >> N >> K;

    // Insert checks after reading inputs
    check_high_price_invariant(K);
    check_large_dp_space_invariant(N, K);

    vector<int> coin(N + 1);
    dpArr = vector<vector<vector<bool>>>(N + 1);

    for (int i = 1; i <= N; ++i) {
        cin >> coin[i];
    }

    for (int i = 0; i < N + 1; ++i) {
        dpArr[i] = vector<vector<bool>>(K + 1, vector<bool>(K + 1, false));
        dpArr[i][0][0] = true;
    }

    // Insert check before entering the heavy loop structure
    check_frequent_updates_invariant(K);

    for (int i = 1; i < N + 1; ++i) {
        for (int k = 0; k < K + 1; ++k) {
            for (int x = 0; x <= k; ++x) {
                dpArr[i][k][x] = dpArr[i - 1][k][x];
                if (k >= coin[i]) {
                    dpArr[i][k][x] = dpArr[i][k][x] || dpArr[i - 1][k - coin[i]][x];
                    if (x >= coin[i]) {
                        dpArr[i][k][x] = dpArr[i][k][x] || dpArr[i - 1][k - coin[i]][x - coin[i]];
                    }
                }
            }
        }
    }

    set<int> A;
    for (int x = 0; x < K + 1; ++x) {
        if (dpArr[N][K][x]) A.insert(x);
    }

    cout << A.size() << endl;
    for (set<int>::iterator i = A.begin(); i != A.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are placed immediately after reading the input values for `N` and `K`, before the nested loop structure, to prevent unnecessary computation if a bottleneck condition is met.
- **Thresholds**: The chosen thresholds are arbitrary but aligned with the constraints, ensuring they capture potential future slow scenarios without being too restrictive.

