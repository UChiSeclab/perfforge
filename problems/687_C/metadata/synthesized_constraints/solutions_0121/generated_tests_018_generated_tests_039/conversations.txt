system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 500 + 10;
int n, k, v[maxn];
int dp[maxn][maxn];
int main() {
  cin >> n >> k;
  for (int i = 1; i <= n; i++) cin >> v[i];
  dp[0][0] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = k; j >= v[i]; j--) {
      for (int c = k; c >= 0; c--) {
        if (c < v[i])
          dp[j][c] = max(dp[j][c], dp[j - v[i]][c]);
        else
          dp[j][c] =
              max(dp[j][c], max(dp[j - v[i]][c], dp[j - v[i]][c - v[i]]));
      }
    }
  }
  int ans = 0;
  for (int i = 0; i <= 500; i++) {
    if (dp[k][i]) ans++;
  }
  cout << ans << endl;
  for (int i = 0; i <= 500; i++) {
    if (dp[k][i]) cout << i << " ";
  }
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 91
74 25 66 50 62 30 50 45


(G.2) Fast Input

8 74
74 25 66 50 62 30 50 45


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 500 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, v[maxn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int dp[maxn][maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> v[i]; /* line 8 slow_hit_count: 9, fast_hit_count: 9 */
  dp[0][0] = 1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 10 slow_hit_count: 9, fast_hit_count: 9 */
    for (int j = k; j >= v[i]; j--) { /* line 11 slow_hit_count: 342, fast_hit_count: 206 */
      for (int c = k; c >= 0; c--) { /* line 12 slow_hit_count: 31062, fast_hit_count: 15048 */
        if (c < v[i]) /* line 13 slow_hit_count: 30728, fast_hit_count: 14850 */
          dp[j][c] = max(dp[j][c], dp[j - v[i]][c]); /* line 14 slow_hit_count: 14758, fast_hit_count: 7924 */
        else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
          dp[j][c] = /* line 16 slow_hit_count: 15970, fast_hit_count: 6926 */
              max(dp[j][c], max(dp[j - v[i]][c], dp[j - v[i]][c - v[i]])); /* line 17 slow_hit_count: 15970, fast_hit_count: 6926 */
      } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 500; i++) { /* line 22 slow_hit_count: 502, fast_hit_count: 502 */
    if (dp[k][i]) ans++; /* line 23 slow_hit_count: 501, fast_hit_count: 501 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 500; i++) { /* line 26 slow_hit_count: 502, fast_hit_count: 502 */
    if (dp[k][i]) cout << i << " "; /* line 27 slow_hit_count: 501, fast_hit_count: 501 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance of the given C program, we need to identify why the program takes significantly longer with the slow input compared to the fast input, even though both inputs have similar structures and sizes.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
    - Line 12 (`for (int c = k; c >= 0; c--)`): This line has a significantly higher hit count for the slow input (31,062) compared to the fast input (15,048). This indicates that the nested loops are being executed more frequently with the slow input.
    - Lines 13-17: The conditions and updates within these loops also show higher hit counts in the slow input, specifically lines 14 and 16-17.

2. **Inference**:
    - The nested loop structure, particularly the inner loop controlled by `c`, is dependent on the values of `k` and `v[i]`. The higher hit count suggests that the inner loop runs more iterations when `k` is large relative to `v[i]`.
    - The program's dynamic programming table `dp[j][c]` is being updated extensively. This suggests that for `k` equal to 91, the problem complexity grows due to the interactions between coin values and the target sum.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, we can derive the following performance-characterizing invariants:

1. **Invariant 1**: "When the target sum `k` is large compared to the average value of coins, the dynamic programming table is updated more frequently, leading to a slowdown."
   - This is because the inner loops iterate over ranges up to `k`, and larger values of `k` relative to the values in `v` increase the number of iterations.

2. **Invariant 2**: "If there are multiple coins with values that are not small relative to `k`, and `n` is close to its upper limit, the double iteration over `j` and `c` becomes computationally expensive."
   - The nested loops' complexity is influenced by the number of possible ways to sum subsets of coins to reach the target sum `k`.

3. **Invariant 3**: "A slowdown may occur when the number of possible subsets calculated by the dynamic programming algorithm is large, particularly when `n` is high, and the values of coins are diverse."
   - This is due to the increased number of potential combinations that must be evaluated in the nested loops.

### Summary

These invariants suggest that the program's performance is sensitive to both the size of `k` and the relative values of the coins. Larger `k` values and high diversity in coin values can increase the number of operations required in the dynamic programming solution, leading to slower performance. To improve performance, optimizations or different algorithmic strategies could be considered, especially when these conditions are met.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's translate the natural language performance-characterizing invariants we previously identified into C++ checker code.

#### Invariant 1:
"When the target sum `k` is large compared to the average value of coins, the dynamic programming table is updated more frequently, leading to a slowdown."

```cpp
void check_large_k_invariant(int k, double average_coin_value) {
    if (k > 5 * average_coin_value) { // Arbitrary threshold; can be adjusted
        cerr << "Warning: Performance bottleneck triggered - k is large compared to average coin value!" << endl;
        abort();
    }
}
```

#### Invariant 2:
"If there are multiple coins with values that are not small relative to `k`, and `n` is close to its upper limit, the double iteration over `j` and `c` becomes computationally expensive."

```cpp
void check_large_n_invariant(int n, int k, const vector<int>& v) {
    int count_large_coins = 0;
    for (int coin : v) {
        if (coin > k / 2) count_large_coins++; // Consider coins larger than half of k as significant
    }
    if (n > 400 && count_large_coins > n / 4) { // Arbitrary thresholds; can be adjusted
        cerr << "Warning: Performance bottleneck triggered - high number of large coins with large n!" << endl;
        abort();
    }
}
```

#### Invariant 3:
"A slowdown may occur when the number of possible subsets calculated by the dynamic programming algorithm is large, particularly when `n` is high, and the values of coins are diverse."

```cpp
void check_diverse_coins_invariant(int n, int distinct_values_count) {
    if (n > 400 && distinct_values_count > n / 2) { // Arbitrary threshold; can be adjusted
        cerr << "Warning: Performance bottleneck triggered - high diversity in coin values!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers with the Original Program

Now, let's integrate these runtime checks into the original C++ program. We will add these checks at effective points in the program flow, such as after input processing and before the heavy computation begins.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 500 + 10;
int n, k, v[maxn];
int dp[maxn][maxn];

// Checker functions
void check_large_k_invariant(int k, double average_coin_value) {
    if (k > 5 * average_coin_value) {
        cerr << "Warning: Performance bottleneck triggered - k is large compared to average coin value!" << endl;
        abort();
    }
}

void check_large_n_invariant(int n, int k, const vector<int>& v) {
    int count_large_coins = 0;
    for (int coin : v) {
        if (coin > k / 2) count_large_coins++;
    }
    if (n > 400 && count_large_coins > n / 4) {
        cerr << "Warning: Performance bottleneck triggered - high number of large coins with large n!" << endl;
        abort();
    }
}

void check_diverse_coins_invariant(int n, int distinct_values_count) {
    if (n > 400 && distinct_values_count > n / 2) {
        cerr << "Warning: Performance bottleneck triggered - high diversity in coin values!" << endl;
        abort();
    }
}

int main() {
    cin >> n >> k;
    vector<int> coin_values(n);
    set<int> distinct_values;
    int sum_values = 0;

    for (int i = 1; i <= n; i++) {
        cin >> v[i];
        coin_values[i - 1] = v[i];
        distinct_values.insert(v[i]);
        sum_values += v[i];
    }
    
    double average_coin_value = sum_values / static_cast<double>(n);

    // Insert checks for performance-characterizing invariants
    check_large_k_invariant(k, average_coin_value);
    check_large_n_invariant(n, k, coin_values);
    check_diverse_coins_invariant(n, distinct_values.size());

    dp[0][0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = k; j >= v[i]; j--) {
            for (int c = k; c >= 0; c--) {
                if (c < v[i])
                    dp[j][c] = max(dp[j][c], dp[j - v[i]][c]);
                else
                    dp[j][c] =
                        max(dp[j][c], max(dp[j - v[i]][c], dp[j - v[i]][c - v[i]]));
            }
        }
    }
    
    int ans = 0;
    for (int i = 0; i <= 500; i++) {
        if (dp[k][i]) ans++;
    }
    cout << ans << endl;
    for (int i = 0; i <= 500; i++) {
        if (dp[k][i]) cout << i << " ";
    }
    cout << endl;
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are strategically placed after processing the input and calculating preliminary statistics like the average coin value. This avoids introducing performance overhead in the critical dynamic programming loops.
- **Helper Functions**: Each invariant is encapsulated in a function to keep the code modular and maintainable.
- **Abort on Trigger**: Each check includes an `abort()` call to immediately halt execution if a bottleneck condition is detected, which would be useful for testing and debugging purposes.

