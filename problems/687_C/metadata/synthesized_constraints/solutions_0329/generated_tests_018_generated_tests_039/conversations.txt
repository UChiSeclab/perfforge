system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  vector<vector<vector<bool> > > dp(
      n + 1, vector<vector<bool> >(k + 1, vector<bool>(k + 1, 0)));
  vector<int> inp;
  int temp;
  for (int i = 0; i < n; i++) {
    scanf("%d", &temp);
    inp.push_back(temp);
  }
  dp[0][0][0] = 1;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j <= k; j++) {
      for (int l = 0; l <= k; l++) {
        dp[i][j][l] =
            dp[i - 1][j][l] ||
            (j >= inp[i - 1]
                 ? dp[i - 1][j - inp[i - 1]][l] ||
                       (l >= inp[i - 1]
                            ? dp[i - 1][j - inp[i - 1]][l - inp[i - 1]]
                            : 0)
                 : 0);
      }
    }
  }
  map<int, int> a;
  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= k; j++) {
      if (dp[i][k][j] == 1) {
        a[j] = 1;
      }
    }
  }
  cout << a.size() << endl;
  for (map<int, int>::iterator it = a.begin(); it != a.end(); it++)
    cout << it->first << "	";
  cout << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 91
74 25 66 50 62 30 50 45


(G.2) Fast Input

8 74
74 25 66 50 62 30 50 45


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &k); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<vector<bool> > > dp( /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
      n + 1, vector<vector<bool> >(k + 1, vector<bool>(k + 1, 0))); /* line 7 slow_hit_count: 3, fast_hit_count: 3 */
  vector<int> inp; /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  int temp; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 10 slow_hit_count: 9, fast_hit_count: 9 */
    scanf("%d", &temp); /* line 11 slow_hit_count: 8, fast_hit_count: 8 */
    inp.push_back(temp); /* line 12 slow_hit_count: 8, fast_hit_count: 8 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0][0][0] = 1; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 15 slow_hit_count: 9, fast_hit_count: 9 */
    for (int j = 0; j <= k; j++) { /* line 16 slow_hit_count: 744, fast_hit_count: 608 */
      for (int l = 0; l <= k; l++) { /* line 17 slow_hit_count: 68448, fast_hit_count: 45600 */
        dp[i][j][l] = /* line 18 slow_hit_count: 67712, fast_hit_count: 45000 */
            dp[i - 1][j][l] || /* line 19 slow_hit_count: 203010, fast_hit_count: 134930 */
            (j >= inp[i - 1] /* line 20 slow_hit_count: 67586, fast_hit_count: 44930 */
                 ? dp[i - 1][j - inp[i - 1]][l] || /* line 21 slow_hit_count: 128822, fast_hit_count: 74531 */
                       (l >= inp[i - 1] /* line 22 slow_hit_count: 30608, fast_hit_count: 14795 */
                            ? dp[i - 1][j - inp[i - 1]][l - inp[i - 1]] /* line 23 slow_hit_count: 114242, fast_hit_count: 66701 */
                            : 0) /* line 24 slow_hit_count: 46550, fast_hit_count: 21712 */
                 : 0); /* line 25 slow_hit_count: 203136, fast_hit_count: 135000 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  map<int, int> a; /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i <= n; i++) { /* line 30 slow_hit_count: 10, fast_hit_count: 10 */
    for (int j = 0; j <= k; j++) { /* line 31 slow_hit_count: 837, fast_hit_count: 684 */
      if (dp[i][k][j] == 1) { /* line 32 slow_hit_count: 828, fast_hit_count: 675 */
        a[j] = 1; /* line 33 slow_hit_count: 24, fast_hit_count: 16 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cout << a.size() << endl; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (map<int, int>::iterator it = a.begin(); it != a.end(); it++) /* line 38 slow_hit_count: 5, fast_hit_count: 3 */
    cout << it->first << "	"; /* line 39 slow_hit_count: 4, fast_hit_count: 2 */
  cout << endl; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 1, fast_hit_count: 1 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

Based on the line-level hit counts of both the "slow" and "fast" inputs, we can observe the following:

1. **Nested Loops Over `j` and `l`:**  
   - **Line 16:** The loop over `j` is hit 744 times for the slow input and 608 times for the fast input.
   - **Line 17:** The nested loop over `l` is hit significantly more times (68,448 for the slow input and 45,600 for the fast input).
   - **Line 19:** The line calculating `dp[i][j][l]` has a similar discrepancy (203,010 hits for slow input vs. 134,930 for fast input).

2. **Conditions Inside Loops:**  
   - **Lines 20 to 25:** These lines contain conditions and computations that contribute to the nested loop's complexity. The line 21 alone (when `j` condition is met) is executed 128,822 times for the slow input as compared to 74,531 times for the fast input.

The main bottleneck seems to be the nested loops on `j` and `l`, combined with the conditions inside them. The higher number of hits for the slow input indicates that these loops are iterating an excessive number of times, which is likely the cause of the slowdown.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariant on Coin Values and `k`:**  
   - "When the values of the coins are such that the sum approaches `k` in many possible combinations, the program explores a large number of subsets, leading to increased execution time."

2. **Invariant on Nested Loops and Conditions:**  
   - "If the nested conditions within the double loop (over `j` and `l`) become true frequently due to specific distribution of coin values, the time complexity may increase significantly."

3. **Invariant on Dynamic Programming Array Size:**  
   - "As the maximum value of coins (`ci`) and `k` increase, the dimensions of the dynamic programming array grow, resulting in increased iterations and slower execution."

4. **Invariant on Input Size and Sum `k`:**  
   - "For inputs where `n` is large and `k` is close to the sum of all coins, the algorithm may slow down due to the need to compute possible subset sums for each coin."

These invariants highlight conditions where the algorithm's complexity may lead to performance issues, specifically when the combinations and subsets become numerous and the dynamic programming matrix becomes large, leading to higher computational overhead.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Based on the natural language invariants derived in Phase 2, we will implement the corresponding C++ checker code.

1. **Invariant on Coin Values and `k`**:
   - If the sum of the coins can approach `k` in many possible combinations, this will be checked after reading the input.

2. **Invariant on Nested Loops and Conditions**:
   - If the nested conditions inside the loops are frequently met, this will be checked before the dynamic programming loops.

3. **Invariant on Dynamic Programming Array Size**:
   - If the size of the dynamic programming table becomes too large, this will be checked after initializing the DP array.

4. **Invariant on Input Size and Sum `k`**:
   - If `n` is large and `k` is close to the sum of all coins, this will be checked after reading the input.

Here are the checker implementations:

```cpp
void check_combinations_invariant(int n, int k, const vector<int>& coins) {
    int sumCoins = accumulate(coins.begin(), coins.end(), 0);
    if (n > 400 && sumCoins > 2 * k) {
        cerr << "Warning: combinations_invariant triggered - too many combinations possible!" << endl;
        abort();
    }
}

void check_nested_loops_invariant(int n, int k, const vector<int>& coins) {
    int max_coin = *max_element(coins.begin(), coins.end());
    if (max_coin < k / 2) { 
        cerr << "Warning: nested_loops_invariant triggered - frequent conditions met!" << endl;
        abort();
    }
}

void check_dp_array_size_invariant(int n, int k) {
    if ((n * (k + 1) * (k + 1)) > 1250000) { 
        cerr << "Warning: dp_array_size_invariant triggered - large DP array size!" << endl;
        abort();
    }
}

void check_input_size_invariant(int n, int sumCoins, int k) {
    if (n > 450 && sumCoins > 2 * k) {
        cerr << "Warning: input_size_invariant triggered - large n and sum of coins!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Integrate the above checkers into the provided C++ program. Insert the checks at strategic points without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_combinations_invariant(int n, int k, const vector<int>& coins) {
    int sumCoins = accumulate(coins.begin(), coins.end(), 0);
    if (n > 400 && sumCoins > 2 * k) {
        cerr << "Warning: combinations_invariant triggered - too many combinations possible!" << endl;
        abort();
    }
}

void check_nested_loops_invariant(int n, int k, const vector<int>& coins) {
    int max_coin = *max_element(coins.begin(), coins.end());
    if (max_coin < k / 2) { 
        cerr << "Warning: nested_loops_invariant triggered - frequent conditions met!" << endl;
        abort();
    }
}

void check_dp_array_size_invariant(int n, int k) {
    if ((n * (k + 1) * (k + 1)) > 1250000) { 
        cerr << "Warning: dp_array_size_invariant triggered - large DP array size!" << endl;
        abort();
    }
}

void check_input_size_invariant(int n, int sumCoins, int k) {
    if (n > 450 && sumCoins > 2 * k) {
        cerr << "Warning: input_size_invariant triggered - large n and sum of coins!" << endl;
        abort();
    }
}

int main() {
    int n, k;
    scanf("%d%d", &n, &k);
    
    vector<int> inp(n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &inp[i]);
    }
    
    // Calculate the sum of all coins
    int sumCoins = accumulate(inp.begin(), inp.end(), 0);

    // Check conditions after reading input
    check_combinations_invariant(n, k, inp);
    check_input_size_invariant(n, sumCoins, k);

    vector<vector<vector<bool>>> dp(n + 1, vector<vector<bool>>(k + 1, vector<bool>(k + 1, 0)));
    
    // Check DP array size invariant
    check_dp_array_size_invariant(n, k);
    
    dp[0][0][0] = 1;
    
    // Check nested loops invariant
    check_nested_loops_invariant(n, k, inp);
    
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j <= k; j++) {
            for (int l = 0; l <= k; l++) {
                dp[i][j][l] =
                    dp[i - 1][j][l] ||
                    (j >= inp[i - 1]
                         ? dp[i - 1][j - inp[i - 1]][l] ||
                               (l >= inp[i - 1]
                                    ? dp[i - 1][j - inp[i - 1]][l - inp[i - 1]]
                                    : 0)
                         : 0);
            }
        }
    }
    
    map<int, int> a;
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= k; j++) {
            if (dp[i][k][j] == 1) {
                a[j] = 1;
            }
        }
    }
    
    cout << a.size() << endl;
    for (map<int, int>::iterator it = a.begin(); it != a.end(); it++)
        cout << it->first << " ";
    cout << endl;
}
```

**Explanation of Integrations:**
- The `check_combinations_invariant` and `check_input_size_invariant` are called after reading inputs to ensure any potential slow path due to input size or combinations is caught early.
- The `check_dp_array_size_invariant` is called after initializing the DP array to ensure it does not grow too large.
- The `check_nested_loops_invariant` is called before the nested loops to ensure conditions do not cause excessive iterations.

