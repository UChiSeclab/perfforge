system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void initCanMake(vector<vector<bool> > &can_make, vector<int> &coins);
int main() {
  int num_coins, price;
  cin >> num_coins >> price;
  vector<int> coins(num_coins);
  for (int i = 0; i < coins.size(); i++) cin >> coins[i];
  coins.push_back(0);
  sort(coins.begin(), coins.end());
  vector<vector<bool> > can_make(price + 1, vector<bool>(price + 1, false));
  can_make[0][0] = true;
  initCanMake(can_make, coins);
  vector<int> answers;
  for (int i = 0; i < can_make.back().size(); i++)
    if (can_make.back()[i]) answers.push_back(i);
  cout << answers.size() << endl;
  for (int i = 0; i < answers.size(); i++)
    cout << answers[i] << ((i < answers.size() - 1) ? ' ' : '\n');
  return 0;
}
void initCanMake(vector<vector<bool> > &can_make, vector<int> &coins) {
  for (int ci = 0; ci < coins.size(); ci++)
    for (int pi = can_make.size() - 1; pi >= coins[ci]; pi--)
      for (int si = 0; si < can_make[pi].size(); si++) {
        can_make[pi][si] = can_make[pi][si] || can_make[pi - coins[ci]][si];
        if (si >= coins[ci])
          can_make[pi][si] =
              can_make[pi][si] || can_make[pi - coins[ci]][si - coins[ci]];
      }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 91
74 25 66 50 62 30 50 45


(G.2) Fast Input

8 74
74 25 66 50 62 30 50 45


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void initCanMake(vector<vector<bool> > &can_make, vector<int> &coins); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int num_coins, price; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> num_coins >> price; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> coins(num_coins); /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < coins.size(); i++) cin >> coins[i]; /* line 8 slow_hit_count: 9, fast_hit_count: 9 */
  coins.push_back(0); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  sort(coins.begin(), coins.end()); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<bool> > can_make(price + 1, vector<bool>(price + 1, false)); /* line 11 slow_hit_count: 3, fast_hit_count: 3 */
  can_make[0][0] = true; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  initCanMake(can_make, coins); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> answers; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < can_make.back().size(); i++) /* line 15 slow_hit_count: 93, fast_hit_count: 76 */
    if (can_make.back()[i]) answers.push_back(i); /* line 16 slow_hit_count: 92, fast_hit_count: 75 */
  cout << answers.size() << endl; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < answers.size(); i++) /* line 18 slow_hit_count: 5, fast_hit_count: 3 */
    cout << answers[i] << ((i < answers.size() - 1) ? ' ' : '\n'); /* line 19 slow_hit_count: 4, fast_hit_count: 2 */
  return 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
void initCanMake(vector<vector<bool> > &can_make, vector<int> &coins) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int ci = 0; ci < coins.size(); ci++) /* line 23 slow_hit_count: 10, fast_hit_count: 10 */
    for (int pi = can_make.size() - 1; pi >= coins[ci]; pi--) /* line 24 slow_hit_count: 435, fast_hit_count: 282 */
      for (int si = 0; si < can_make[pi].size(); si++) { /* line 25 slow_hit_count: 39618, fast_hit_count: 20748 */
        can_make[pi][si] = can_make[pi][si] || can_make[pi - coins[ci]][si]; /* line 26 slow_hit_count: 39192, fast_hit_count: 20475 */
        if (si >= coins[ci]) /* line 27 slow_hit_count: 39192, fast_hit_count: 20475 */
          can_make[pi][si] = /* line 28 slow_hit_count: 24434, fast_hit_count: 12551 */
              can_make[pi][si] || can_make[pi - coins[ci]][si - coins[ci]]; /* line 29 slow_hit_count: 48868, fast_hit_count: 25102 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance issue and derive performance-characterizing invariants, let's go through the tasks asked in the problem statement:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The slow input causes significantly more hits on the lines within the `initCanMake` function's nested loops, particularly lines 25 to 29, compared to the fast input.

2. **Pinpoint Lines/Functions with More Hits:**
   - The `initCanMake` function has loops that work over the size of the `can_make` matrix. The lines inside the innermost loop (lines 25-29) have the most significant increase in hit counts for the slow input, with line 29 showing almost double the number of hits compared to the fast input.

3. **Infer Interaction with Data Structures and Loops:**
   - The nested loops in `initCanMake` iterate over the dimensions of a 2D array `can_make`. The hit count suggests that the problem size (`price` or `n`) might cause increased iterations and consequently slow execution, especially when the price `k` is close to its upper limit.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements:**

   - **Invariant 1: High Coin Value Combinations**
     - "If the total price `k` approaches its maximum possible value and many coins have high values, the number of operations increases significantly due to the number of ways subsets can sum to `k`."
   
   - **Invariant 2: Large Search Space Due to Coin Combinations**
     - "When the price is high relative to the number of coins, the potential combinations of coins to reach the exact sum `k` create a large search space, increasing computation time."

   - **Invariant 3: Complexity from High Coin Values**
     - "If many coins have values close to the price `k`, there are more possible combinations to check, leading to more iterations over possible subsets."
   
2. **Avoid Exact Values from Slow Input & Suggest Thresholds:**
   - Given the constraints (e.g., n, k ≤ 500), the thresholds can be thought of as situations where `k` is close to 500 and coin combinations are dense or diverse enough to create a computationally expensive subset sum problem.

3. **Correlate Conditions Strongly to Input Patterns:**
   - The conditions are notably affected when `k` is large, and the coins' values create many valid combinations. This occurs when `k` is high, and the coins' values are such that they allow multiple subsets to sum to `k` and sub-sums of `k`.

4. **Ensure Statements Capture Future Scenarios but Reflect Real Triggers:**
   - The derived invariants aim to describe patterns that would likely trigger slow performance across varying inputs within the given problem constraints (e.g., `k` approaching 500 with high coin values).

In summary, the slow performance is triggered by a high number of possible combinations of coin subsets that can sum to a price `k` close to its maximum allowed value, resulting in computationally expensive iterations over the `can_make` matrix.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Pari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is ci. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.

Looking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.

Formally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.

Input

The first line contains two integers n and k (1 ≤ n, k ≤ 500) — the number of coins and the price of the chocolate, respectively.

Next line will contain n integers c1, c2, ..., cn (1 ≤ ci ≤ 500) — the values of Pari's coins.

It's guaranteed that one can make value k using these coins.

Output

First line of the output must contain a single integer q— the number of suitable values x. Then print q integers in ascending order — the values that Arya can make for some subset of coins of Pari that pays for the chocolate.

Examples

Input

6 18
5 6 1 10 12 2


Output

16
0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 


Input

3 50
25 25 50


Output

3
0 25 50 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

In this phase, we'll implement the natural language invariants as checker functions in C++.

1. **Invariant 1: High Coin Value Combinations**
   - Condition: If the total price `k` is near the upper bound and many coins have high values.
   
   ```cpp
   void check_high_price_invariant(int price, const std::vector<int>& coins) {
       int highValueCount = 0;
       for (const auto& coin : coins) {
           if (coin > price * 0.8) {  // Assuming coins above 80% of price are high value
               highValueCount++;
           }
       }
       if (price > 400 && highValueCount > 2) {  // Thresholds based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered due to high value coins!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Large Search Space Due to Coin Combinations**
   - Condition: When `k` is high relative to the number of coins.
   
   ```cpp
   void check_large_search_space_invariant(int price, int num_coins) {
       if (price > 400 && num_coins < 10) {  // Arbitrary threshold for problematic search space
           cerr << "Warning: Performance bottleneck condition triggered due to large search space!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Complexity from High Coin Values**
   - Condition: If many coins have values close to the price `k`.
   
   ```cpp
   void check_complex_combinations_invariant(int price, const std::vector<int>& coins) {
       int closeCount = 0;
       for (const auto& coin : coins) {
           if (coin >= price * 0.9) {  // Coins close to the price, e.g., 90%
               closeCount++;
           }
       }
       if (closeCount > 3) {  // Arbitrary threshold
           cerr << "Warning: Performance bottleneck condition triggered due to complex combinations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original Program

Now, we'll integrate these checkers into the original program. We'll place these checks after reading the input and before executing the main logic to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

void initCanMake(vector<vector<bool> > &can_make, vector<int> &coins);

// Checker function for high coin value combinations
void check_high_price_invariant(int price, const vector<int>& coins) {
    int highValueCount = 0;
    for (const auto& coin : coins) {
        if (coin > price * 0.8) {
            highValueCount++;
        }
    }
    if (price > 400 && highValueCount > 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to high value coins!" << endl;
        abort();
    }
}

// Checker function for large search space
void check_large_search_space_invariant(int price, int num_coins) {
    if (price > 400 && num_coins < 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to large search space!" << endl;
        abort();
    }
}

// Checker function for complex combinations due to high coin values
void check_complex_combinations_invariant(int price, const vector<int>& coins) {
    int closeCount = 0;
    for (const auto& coin : coins) {
        if (coin >= price * 0.9) {
            closeCount++;
        }
    }
    if (closeCount > 3) {
        cerr << "Warning: Performance bottleneck condition triggered due to complex combinations!" << endl;
        abort();
    }
}

int main() {
    int num_coins, price;
    cin >> num_coins >> price;
    vector<int> coins(num_coins);
    for (int i = 0; i < coins.size(); i++) cin >> coins[i];
    coins.push_back(0);
    sort(coins.begin(), coins.end());
    
    // Inserted performance checkers
    check_high_price_invariant(price, coins);
    check_large_search_space_invariant(price, num_coins);
    check_complex_combinations_invariant(price, coins);
    
    vector<vector<bool> > can_make(price + 1, vector<bool>(price + 1, false));
    can_make[0][0] = true;
    initCanMake(can_make, coins);
    vector<int> answers;
    for (int i = 0; i < can_make.back().size(); i++)
        if (can_make.back()[i]) answers.push_back(i);
    cout << answers.size() << endl;
    for (int i = 0; i < answers.size(); i++)
        cout << answers[i] << ((i < answers.size() - 1) ? ' ' : '\n');
    return 0;
}

void initCanMake(vector<vector<bool> > &can_make, vector<int> &coins) {
    for (int ci = 0; ci < coins.size(); ci++)
        for (int pi = can_make.size() - 1; pi >= coins[ci]; pi--)
            for (int si = 0; si < can_make[pi].size(); si++) {
                can_make[pi][si] = can_make[pi][si] || can_make[pi - coins[ci]][si];
                if (si >= coins[ci])
                    can_make[pi][si] =
                        can_make[pi][si] || can_make[pi - coins[ci]][si - coins[ci]];
            }
}
```

### Explanation

- **High Coin Value Combinations Check:** This check detects scenarios where there are several coins with high values relative to `k`, which can lead to more operations.
- **Large Search Space Check:** This check identifies when the search space is large due to a high price `k` with fewer coins.
- **Complex Combinations Check:** This check triggers when there are many coins with values close to `k`, increasing complexity.

By integrating these checks, the program can now warn and abort execution when potential performance bottlenecks are detected.

