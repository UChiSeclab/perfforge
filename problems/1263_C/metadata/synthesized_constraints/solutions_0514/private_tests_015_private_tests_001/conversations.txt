system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int t;
  cin >> t;
  long long n;
  while (t--) {
    int a;
    map<int, int> mp;
    mp[0] = 1;
    map<int, int>::iterator it;
    cin >> n;
    int x = sqrt(n) + 1;
    for (int i = 1; i <= x; i++) {
      a = n / i;
      if (mp[a] == 0 && mp[i] == 0) {
        mp[a] = 1;
        mp[i] = 1;
      }
    }
    cout << mp.size() << endl;
    for (it = mp.begin(); it != mp.end(); it++) {
      cout << it->first << " ";
    }
    cout << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
2903473
836634
5821231


(G.2) Fast Input

3
990
94
848


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  while (t--) { /* line 7 slow_hit_count: 4, fast_hit_count: 4 */
    int a; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    map<int, int> mp; /* line 9 slow_hit_count: 6, fast_hit_count: 6 */
    mp[0] = 1; /* line 10 slow_hit_count: 3, fast_hit_count: 3 */
    map<int, int>::iterator it; /* line 11 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> n; /* line 12 slow_hit_count: 3, fast_hit_count: 3 */
    int x = sqrt(n) + 1; /* line 13 slow_hit_count: 3, fast_hit_count: 3 */
    for (int i = 1; i <= x; i++) { /* line 14 slow_hit_count: 5035, fast_hit_count: 75 */
      a = n / i; /* line 15 slow_hit_count: 5032, fast_hit_count: 72 */
      if (mp[a] == 0 && mp[i] == 0) { /* line 16 slow_hit_count: 5032, fast_hit_count: 72 */
        mp[a] = 1; /* line 17 slow_hit_count: 5029, fast_hit_count: 69 */
        mp[i] = 1; /* line 18 slow_hit_count: 5029, fast_hit_count: 69 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    cout << mp.size() << endl; /* line 21 slow_hit_count: 3, fast_hit_count: 3 */
    for (it = mp.begin(); it != mp.end(); it++) { /* line 22 slow_hit_count: 10064, fast_hit_count: 142 */
      cout << it->first << " "; /* line 23 slow_hit_count: 10061, fast_hit_count: 139 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 25 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis:**
   - The line `for (int i = 1; i <= x; i++)` (Line 14) has significantly more hits in the slow input (5035) compared to the fast input (75). This suggests that the loop is being iterated over a large number of times in the slow case.
   - Lines 15 and 16, which perform the division `a = n / i` and check the condition `if (mp[a] == 0 && mp[i] == 0)`, also have high hit counts corresponding to the loop in Line 14.
   - The range-based for loop `for (it = mp.begin(); it != mp.end(); it++)` (Line 22) also shows a high hit count in the slow input (10064) compared to the fast input (142), indicating it processes a large number of elements in the map.

2. **Inferred Interaction with Data Structures:**
   - The loop on Line 14 runs from 1 to `sqrt(n) + 1`, which means as `n` increases, `x` becomes significantly larger, leading to more iterations.
   - The map `mp` is used to store and check unique values of `n / i` and `i`. The condition `mp[a] == 0 && mp[i] == 0` adds elements to the map only if neither `a` nor `i` are already keys in the map.

3. **Potential Inefficiencies:**
   - The main inefficiency arises from the number of iterations in the loop for large values of `n` since `x` (i.e., `sqrt(n) + 1`) becomes large. The map operations themselves (`mp[a] == 0 && mp[i] == 0` and inserting into the map) are relatively efficient but are performed many times.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Iteration Count in Loop**
   - **Natural Language Description:** "If the number of iterations in the loop is high, particularly when `n` is large leading to a loop bound of `sqrt(n)`, the performance might degrade due to the high number of map operations."
   - **Threshold Consideration:** As `n` is at its maximum constraint (close to \(10^9\)), `sqrt(n)` approaches 31622, leading to a substantial number of iterations.

2. **Invariant 2: Large Number of Unique Divisions**
   - **Natural Language Description:** "If `n` results in a large number of unique division results when divided by integers from 1 to `sqrt(n)`, the program may slow down significantly due to the number of map insertions and checks."
   - **Threshold Consideration:** The more unique results `n/i` that are produced, the larger the map becomes, impacting performance.

3. **Invariant 3: Large Map Operations**
   - **Natural Language Description:** "When the map grows large due to many unique keys being inserted, the iterations over the map to output results can become a performance bottleneck."
   - **Threshold Consideration:** If the number of unique keys in the map becomes large (potentially thousands), especially when `n` is large, the time taken to insert and iterate over the map increases.

### Summary

The main performance issue arises due to the high number of iterations and map operations as `n` becomes large. The derived invariants focus on capturing the conditions when `n` leads to an excessive number of loop iterations and map operations, particularly when `n` nears its upper constraint. By monitoring these conditions, one can identify when the program is likely to slow down.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as Checker Code in C++

Let's implement the performance-characterizing invariants derived previously as runtime checks in C++.

#### Invariant 1: High Iteration Count in Loop
**Natural Language Description:** "If the number of iterations in the loop is high, particularly when `n` is large leading to a loop bound of `sqrt(n)`, the performance might degrade due to the high number of map operations."

```cpp
void check_iteration_invariant(long long n) {
    int threshold = 50000; // Set an arbitrary threshold for when the loop becomes too large
    int x = sqrt(n) + 1;
    if (x > threshold) {
        cerr << "Warning: High iteration count potential bottleneck triggered!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Number of Unique Divisions
**Natural Language Description:** "If `n` results in a large number of unique division results when divided by integers from 1 to `sqrt(n)`, the program may slow down significantly due to the number of map insertions and checks."

```cpp
void check_unique_divisions_invariant(map<int, int>& mp) {
    int threshold = 10000; // Set an arbitrary threshold for the number of unique elements in the map
    if (mp.size() > threshold) {
        cerr << "Warning: Large number of unique divisions potential bottleneck triggered!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into Original C++ Code

We will now integrate the checker functions into the given C++ program. These checks will be placed strategically to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for high iteration count
void check_iteration_invariant(long long n) {
    int threshold = 50000; // Set an arbitrary threshold for when the loop becomes too large
    int x = sqrt(n) + 1;
    if (x > threshold) {
        cerr << "Warning: High iteration count potential bottleneck triggered!" << endl;
        abort();
    }
}

// Checker function for large number of unique divisions
void check_unique_divisions_invariant(map<int, int>& mp) {
    int threshold = 10000; // Set an arbitrary threshold for the number of unique elements in the map
    if (mp.size() > threshold) {
        cerr << "Warning: Large number of unique divisions potential bottleneck triggered!" << endl;
        abort();
    }
}

int main() {
    int t;
    cin >> t;
    long long n;
    while (t--) {
        int a;
        map<int, int> mp;
        mp[0] = 1;
        map<int, int>::iterator it;
        cin >> n;
        
        // Check for high iteration count before the loop begins
        check_iteration_invariant(n);
        
        int x = sqrt(n) + 1;
        for (int i = 1; i <= x; i++) {
            a = n / i;
            if (mp[a] == 0 && mp[i] == 0) {
                mp[a] = 1;
                mp[i] = 1;
            }
        }
        
        // Check the map size after the loop to ensure it hasn't grown too large
        check_unique_divisions_invariant(mp);
        
        cout << mp.size() << endl;
        for (it = mp.begin(); it != mp.end(); it++) {
            cout << it->first << " ";
        }
        cout << endl;
    }
    return 0;
}
```

### Explanation
- **`check_iteration_invariant(long long n)`**: This function checks if the number of iterations in the loop exceeds a threshold by estimating `sqrt(n)`. It is called before the loop begins.
- **`check_unique_divisions_invariant(map<int, int>& mp)`**: This function checks if the number of unique entries in the map goes beyond a certain threshold. It is invoked after the loop completes.

By integrating these checks, the program can catch potential performance bottlenecks when encountering large values of `n` or when the number of unique divisions becomes excessive. This approach adds minimal overhead while providing useful diagnostics for performance issues.

