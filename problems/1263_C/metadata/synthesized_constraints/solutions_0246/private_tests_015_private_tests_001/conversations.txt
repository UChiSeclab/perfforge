system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;
long long ans[100010];
long long t, n, tot;
map<long long, bool> ma;
int main() {
  ios_base::sync_with_stdio(false);
  cin >> t;
  while (t--) {
    ma.clear();
    tot = 0;
    cin >> n;
    ans[++tot] = 0;
    for (int i = 1; i * i <= n; ++i) {
      long long a = n / i;
      long long b = n / a;
      if (!ma[a]) {
        ma[a] = 1;
        ans[++tot] = a;
      }
      if (!ma[b]) {
        ma[b] = 1;
        ans[++tot] = b;
      }
    }
    sort(ans + 1, ans + 1 + tot);
    cout << tot << "\n";
    for (int i = 1; i <= tot; ++i) cout << ans[i] << " ";
    cout << "\n";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
2903473
836634
5821231


(G.2) Fast Input

3
990
94
848


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long ans[100010]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long t, n, tot; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, bool> ma; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> t; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 10 slow_hit_count: 4, fast_hit_count: 4 */
    ma.clear(); /* line 11 slow_hit_count: 3, fast_hit_count: 3 */
    tot = 0; /* line 12 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> n; /* line 13 slow_hit_count: 3, fast_hit_count: 3 */
    ans[++tot] = 0; /* line 14 slow_hit_count: 3, fast_hit_count: 3 */
    for (int i = 1; i * i <= n; ++i) { /* line 15 slow_hit_count: 5032, fast_hit_count: 72 */
      long long a = n / i; /* line 16 slow_hit_count: 5029, fast_hit_count: 69 */
      long long b = n / a; /* line 17 slow_hit_count: 5029, fast_hit_count: 69 */
      if (!ma[a]) { /* line 18 slow_hit_count: 5029, fast_hit_count: 69 */
        ma[a] = 1; /* line 19 slow_hit_count: 5029, fast_hit_count: 69 */
        ans[++tot] = a; /* line 20 slow_hit_count: 5029, fast_hit_count: 69 */
      } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      if (!ma[b]) { /* line 22 slow_hit_count: 5029, fast_hit_count: 69 */
        ma[b] = 1; /* line 23 slow_hit_count: 5029, fast_hit_count: 67 */
        ans[++tot] = b; /* line 24 slow_hit_count: 5029, fast_hit_count: 67 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    sort(ans + 1, ans + 1 + tot); /* line 27 slow_hit_count: 3, fast_hit_count: 3 */
    cout << tot << "\n"; /* line 28 slow_hit_count: 3, fast_hit_count: 3 */
    for (int i = 1; i <= tot; ++i) cout << ans[i] << " "; /* line 29 slow_hit_count: 10064, fast_hit_count: 142 */
    cout << "\n"; /* line 30 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Performance Analysis

#### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis**:
   - Line 15: `for (int i = 1; i * i <= n; ++i)` has significantly more hits for the slow input (5032 vs. 72). This loop iterates through all possible divisors up to the square root of `n`.
   - Lines 16-17: Calculations for `a = n / i` and `b = n / a` are also hit frequently, suggesting these operations are performed for every iteration of the loop.
   - Lines 18-24: The use of a map `ma` to check and store unique values indicates that the condition checks (`if (!ma[a])`, `if (!ma[b])`) and subsequent assignments are being executed many times, matching the loop's iterations.

2. **Data Structure Interaction**:
   - The map `ma` is used to store unique values of divisors, which is crucial for ensuring each potential rating increment is only counted once.
   - The array `ans` stores the results of unique rating increments, which are later sorted.

3. **Loop and Input Constraints**:
   - The loop iterates up to √n times. Given that n can be as large as 1 billion, the maximum loop count can be around 31,622, which is substantial and can lead to performance issues if n is large.

#### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis and constraints, the following natural language invariants capture conditions leading to slow execution:

1. **Invariant: Large n Values**
   - **Natural Language Description**: "When `n` is large, the loop iterating through up to the square root of `n` results in a high hit count, leading to performance degradation."
   - **Explanation**: As `n` increases, the loop's maximum iteration count (up to √n) grows substantially, leading to increased computation time, especially for values close to the constraint (n <= 10^9).

2. **Invariant: Dense Divisor Distribution**
   - **Natural Language Description**: "If `n` has a dense distribution of divisors, the map used to track unique increments can become a performance bottleneck due to frequent insertions and lookups."
   - **Explanation**: A large number of divisors results in more unique entries being checked and stored, causing increased computational overhead.

3. **Invariant: Loop and Map Interaction**
   - **Natural Language Description**: "When the loop iterates a large number of times due to a high value of `n` and the map frequently processes new entries, the combined effect slows down execution significantly."
   - **Explanation**: The interaction between the loop's high iteration count and the map's capacity to store unique increments can lead to slower execution, particularly for large `n`.

### Conclusion

The primary performance bottleneck arises from the loop iterating over a large number of potential divisors and the frequent use of a map to ensure unique values. These operations cause the program to slow down significantly as `n` approaches its upper constraint, particularly when `n` has many divisors. The invariants provide a framework for understanding and diagnosing potential slow paths in similar contexts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code for Invariants

Based on the performance-characterizing invariants derived earlier, here is how you can write C++ code to implement these checks:

1. **Invariant Check for Large `n` Values**:
   - **Description**: Check if the input `n` is significantly large, which may lead to a high number of iterations in the loop.
   
   ```cpp
   void check_large_n_invariant(long long n) {
       if (n >= 1e9) { // Threshold chosen based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered - large n value!" << endl;
           abort();
       }
   }
   ```

2. **Invariant Check for Dense Divisor Distribution**:
   - **Description**: Check if the number of unique divisors approaches the upper limit of anticipated unique entries in the map, which may lead to performance issues.
   
   ```cpp
   void check_dense_divisor_invariant(long long tot) {
       if (tot > 1000) { // Arbitrary threshold for too many unique divisors
           cerr << "Warning: Performance bottleneck condition triggered - too many unique divisors!" << endl;
           abort();
       }
   }
   ```

3. **Invariant Check for Loop and Map Interaction**:
   - **Description**: Check if the loop runs a large number of iterations which could imply the map is being stressed with frequent checks.
   
   ```cpp
   void check_loop_map_interaction(int loopIterations, long long max_map_size) {
       if (loopIterations > 30000 || max_map_size > 1000) { // Threshold for iterations and map size
           cerr << "Warning: Performance bottleneck condition triggered - excessive loop or map usage!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original C++ Code

Now we integrate the above checks into the original program. Place checks at effective points to detect potential slow paths.

```cpp
#include <bits/stdc++.h>
using namespace std;

const long long mod = 1e9 + 7;
long long ans[100010];
long long t, n, tot;
map<long long, bool> ma;

// Invariant check functions
void check_large_n_invariant(long long n) {
    if (n >= 1e9) { // Threshold chosen based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - large n value!" << endl;
        abort();
    }
}

void check_dense_divisor_invariant(long long tot) {
    if (tot > 1000) { // Arbitrary threshold for too many unique divisors
        cerr << "Warning: Performance bottleneck condition triggered - too many unique divisors!" << endl;
        abort();
    }
}

void check_loop_map_interaction(int loopIterations, long long max_map_size) {
    if (loopIterations > 30000 || max_map_size > 1000) { // Threshold for iterations and map size
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop or map usage!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin >> t;
    while (t--) {
        ma.clear();
        tot = 0;
        cin >> n;

        // Check for large n
        check_large_n_invariant(n);

        ans[++tot] = 0;
        int loopIterations = 0;
        long long max_map_size = 0;
        
        for (int i = 1; i * i <= n; ++i) {
            long long a = n / i;
            long long b = n / a;
            loopIterations++;
            if (!ma[a]) {
                ma[a] = 1;
                ans[++tot] = a;
            }
            if (!ma[b]) {
                ma[b] = 1;
                ans[++tot] = b;
            }
            max_map_size = ma.size();
        }
        
        // Check for loop and map interaction
        check_loop_map_interaction(loopIterations, max_map_size);

        sort(ans + 1, ans + 1 + tot);

        // Check for too many unique divisors
        check_dense_divisor_invariant(tot);

        cout << tot << "\n";
        for (int i = 1; i <= tot; ++i) cout << ans[i] << " ";
        cout << "\n";
    }
    return 0;
}
```

### Explanation

- **Check Placement**: Each checker is strategically placed to evaluate the critical conditions:
  - The large `n` invariant is checked immediately after reading `n`.
  - The loop-map interaction check is placed after the loop to count iterations and map size.
  - The dense divisor check is placed after collecting all unique divisors.

This code should help identify slow paths by triggering warnings under conditions that could lead to performance bottlenecks.

