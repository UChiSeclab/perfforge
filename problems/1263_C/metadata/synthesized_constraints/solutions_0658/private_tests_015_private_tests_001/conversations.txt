system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<int> vt;
map<int, int> mp;
int main() {
  int test, tc = 0;
  long long m, n, ans, i, j, r, b, k, g;
  cin >> test;
  while (test--) {
    mp.clear();
    vt.clear();
    vt.push_back(0);
    ans = 0;
    cin >> n;
    for (i = sqrt(n + 1); i >= 1; i--) {
      j = n / i;
      if (mp[j] == 0) vt.push_back(j);
      mp[j] = 1;
      j = n / j;
      if (mp[j] == 0) vt.push_back(j);
      mp[j] = 1;
    }
    sort(vt.begin(), vt.end());
    n = vt.size();
    cout << n << endl << vt[0];
    for (i = 1; i < n; i++) {
      cout << " " << vt[i];
    }
    cout << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
2903473
836634
5821231


(G.2) Fast Input

3
990
94
848


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> vt; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> mp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int test, tc = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long m, n, ans, i, j, r, b, k, g; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> test; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  while (test--) { /* line 9 slow_hit_count: 4, fast_hit_count: 4 */
    mp.clear(); /* line 10 slow_hit_count: 3, fast_hit_count: 3 */
    vt.clear(); /* line 11 slow_hit_count: 3, fast_hit_count: 3 */
    vt.push_back(0); /* line 12 slow_hit_count: 3, fast_hit_count: 3 */
    ans = 0; /* line 13 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> n; /* line 14 slow_hit_count: 3, fast_hit_count: 3 */
    for (i = sqrt(n + 1); i >= 1; i--) { /* line 15 slow_hit_count: 5032, fast_hit_count: 72 */
      j = n / i; /* line 16 slow_hit_count: 5029, fast_hit_count: 69 */
      if (mp[j] == 0) vt.push_back(j); /* line 17 slow_hit_count: 5029, fast_hit_count: 69 */
      mp[j] = 1; /* line 18 slow_hit_count: 5029, fast_hit_count: 69 */
      j = n / j; /* line 19 slow_hit_count: 5029, fast_hit_count: 69 */
      if (mp[j] == 0) vt.push_back(j); /* line 20 slow_hit_count: 5029, fast_hit_count: 69 */
      mp[j] = 1; /* line 21 slow_hit_count: 5029, fast_hit_count: 69 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    sort(vt.begin(), vt.end()); /* line 23 slow_hit_count: 3, fast_hit_count: 3 */
    n = vt.size(); /* line 24 slow_hit_count: 3, fast_hit_count: 3 */
    cout << n << endl << vt[0]; /* line 25 slow_hit_count: 3, fast_hit_count: 3 */
    for (i = 1; i < n; i++) { /* line 26 slow_hit_count: 10061, fast_hit_count: 139 */
      cout << " " << vt[i]; /* line 27 slow_hit_count: 10058, fast_hit_count: 136 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 29 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Let's go through the provided information to analyze the performance issue and derive relevant performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Comparison:**
   - The loop on line 15 (`for (i = sqrt(n + 1); i >= 1; i--)`) is hit dramatically more often during the slow input run (5032 times) compared to the fast input run (72 times).
   - Similarly, the loop on line 26 (`for (i = 1; i < n; i++)`) is another hotspot with 10061 hits for the slow input versus 139 hits for the fast input.

2. **Code Behavior Analysis:**
   - The loop on line 15 calculates possible values of `k` by iterating over potential divisors from `sqrt(n+1)` down to `1`. The use of a map (`mp`) to track visited divisors ensures that each unique `n/k` is only counted once.
   - The loop on line 26 iterates over the sorted vector `vt` containing unique values of `n/k`.

3. **Data Structure Interaction:**
   - The vector `vt` is populated with unique values of `n/k`. The larger `n` is, the more potential divisions need to be considered, increasing the number of operations.
   - Sorting of `vt` also contributes to time complexity but occurs less frequently than the divisor computation.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Nested Loop for Divisions:**
   - The loop from `sqrt(n+1)` to `1` is a potential performance bottleneck when `n` is large, as it results in a high iteration count.
   - **Natural Language Description:** "If `n` is large, the loop iterating from `sqrt(n+1)` down to 1 may perform a large number of operations, significantly impacting performance due to the computation of all divisors."

2. **Invariant on Vector Size:**
   - The size of the vector `vt` grows with the number of unique divisors of `n`, leading to increased sorting and iteration time.
   - **Natural Language Description:** "If the vector of unique divisors `vt` becomes large due to a large `n`, the subsequent sorting and iteration over this vector may slow down the execution."

3. **Sort Operation on Large Data:**
   - The `sort` operation on line 23 becomes expensive when the number of unique divisors is high (i.e., `vt.size()` is large).
   - **Natural Language Description:** "When the number of unique divisor values of `n` is high, sorting this list can degrade performance."

### Summary of Performance Invariants

1. **Large Number of Divisors:**
   - "If `n` is large, the loop iterating from `sqrt(n+1)` down to 1 may perform a large number of operations, significantly impacting performance due to the computation of all divisors."

2. **Increased Vector Size:**
   - "If the vector of unique divisors `vt` becomes large due to a large `n`, the subsequent sorting and iteration over this vector may slow down the execution."

3. **Expensive Sorting:**
   - "When the number of unique divisor values of `n` is high, sorting this list can degrade performance."

These invariants help identify when the program is likely to enter a slow path based on the size and nature of the input, specifically for cases where `n` is large and consequently has many divisors. This knowledge can guide optimizations or be used to set conditions for early detection of potential slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's transform the performance-characterizing invariants identified into C++ checker functions:

1. **Checker for Large Number of Divisors:**

   ```cpp
   void check_large_divisor_count(long long n) {
       if (n > 1000000) { // Threshold chosen to prevent excessive operations in large n cases
           cerr << "Warning: Performance bottleneck condition triggered - large divisor count due to high n!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Increased Vector Size:**

   ```cpp
   void check_large_vector_size(size_t vectorSize) {
       if (vectorSize > 10000) { // Threshold chosen based on potential vector size impact
           cerr << "Warning: Performance bottleneck condition triggered - large vector size!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Expensive Sorting:**

   - We will combine the check for sorting since it ties closely with the vector size. This way, we don't duplicate checks unnecessarily.

### Phase 4: Insert Checkers into the Program

Now, integrate these checks into the given C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Performance checkers
void check_large_divisor_count(long long n) {
    if (n > 1000000) { // Threshold chosen to prevent excessive operations in large n cases
        cerr << "Warning: Performance bottleneck condition triggered - large divisor count due to high n!" << endl;
        abort();
    }
}

void check_large_vector_size(size_t vectorSize) {
    if (vectorSize > 10000) { // Threshold chosen based on potential vector size impact
        cerr << "Warning: Performance bottleneck condition triggered - large vector size!" << endl;
        abort();
    }
}

int main() {
    int test, tc = 0;
    long long m, n, ans, i, j, r, b, k, g;
    cin >> test;
    while (test--) {
        map<int, int> mp;
        vector<int> vt;
        vt.push_back(0);
        ans = 0;
        cin >> n;

        // Check for potential large divisor count
        check_large_divisor_count(n);

        for (i = sqrt(n + 1); i >= 1; i--) {
            j = n / i;
            if (mp[j] == 0) vt.push_back(j);
            mp[j] = 1;
            j = n / j;
            if (mp[j] == 0) vt.push_back(j);
            mp[j] = 1;
        }
        
        // Check for large vector size before sorting
        check_large_vector_size(vt.size());

        sort(vt.begin(), vt.end());
        n = vt.size();
        cout << n << endl << vt[0];
        for (i = 1; i < n; i++) {
            cout << " " << vt[i];
        }
        cout << endl;
    }
    return 0;
}
```

### Explanation

- **`check_large_divisor_count`:** This checks if `n` is excessively large, potentially causing performance degradation due to the loop iterating over many divisors.
- **`check_large_vector_size`:** This ensures the vector does not become too large, impacting performance during sorting and iteration.

These checkers are designed to provide an early warning if the input or data structures approach thresholds that could lead to significant slowdowns. They are placed strategically to avoid impacting performance by only executing once per test case, outside of tight loops.

