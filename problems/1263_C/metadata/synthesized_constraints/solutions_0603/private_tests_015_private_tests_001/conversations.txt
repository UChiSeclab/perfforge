system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  long long t;
  cin >> t;
  while (t--) {
    long long n, i;
    cin >> n;
    vector<long long> ans;
    ans.push_back(0);
    map<long long, long long> m;
    for (i = 1; i * i <= n; i++) {
      long long j = n / i;
      if (m[j] == 0) {
        m[j]++;
        ans.push_back(j);
      }
      j = n / j;
      if (m[j] == 0) {
        m[j]++;
        ans.push_back(j);
      }
    }
    cout << ans.size() << '\n';
    sort(ans.begin(), ans.end());
    for (i = 0; i < ans.size(); i++) cout << ans[i] << " ";
    cout << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
2903473
836634
5821231


(G.2) Fast Input

3
990
94
848


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long t; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 9 slow_hit_count: 4, fast_hit_count: 4 */
    long long n, i; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n; /* line 11 slow_hit_count: 3, fast_hit_count: 3 */
    vector<long long> ans; /* line 12 slow_hit_count: 6, fast_hit_count: 6 */
    ans.push_back(0); /* line 13 slow_hit_count: 3, fast_hit_count: 3 */
    map<long long, long long> m; /* line 14 slow_hit_count: 6, fast_hit_count: 6 */
    for (i = 1; i * i <= n; i++) { /* line 15 slow_hit_count: 5032, fast_hit_count: 72 */
      long long j = n / i; /* line 16 slow_hit_count: 5029, fast_hit_count: 69 */
      if (m[j] == 0) { /* line 17 slow_hit_count: 5029, fast_hit_count: 69 */
        m[j]++; /* line 18 slow_hit_count: 5029, fast_hit_count: 69 */
        ans.push_back(j); /* line 19 slow_hit_count: 5029, fast_hit_count: 69 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      j = n / j; /* line 21 slow_hit_count: 5029, fast_hit_count: 69 */
      if (m[j] == 0) { /* line 22 slow_hit_count: 5029, fast_hit_count: 69 */
        m[j]++; /* line 23 slow_hit_count: 5029, fast_hit_count: 67 */
        ans.push_back(j); /* line 24 slow_hit_count: 5029, fast_hit_count: 67 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans.size() << '\n'; /* line 27 slow_hit_count: 3, fast_hit_count: 3 */
    sort(ans.begin(), ans.end()); /* line 28 slow_hit_count: 3, fast_hit_count: 3 */
    for (i = 0; i < ans.size(); i++) cout << ans[i] << " "; /* line 29 slow_hit_count: 10064, fast_hit_count: 142 */
    cout << '\n'; /* line 30 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the given input, we need to analyze the hit counts for each line and identify the sections of code that are executed significantly more often during the slow input run.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 15 (for loop):** This loop is hit 5032 times for the slow input and only 72 times for the fast input. The loop iterates over `i` such that `i * i <= n`. This implies that for large `n`, the number of iterations increases significantly. The complexity of this loop is approximately `O(sqrt(n))`.

2. **Lines 16, 17, 18, 19 and Lines 21, 22, 23, 24 (map checks and updates):** These lines are involved in checking and updating a map `m` to ensure unique values are added to `ans`. They are all hit 5029 times for the slow input versus 69 times for the fast input.

3. **Line 29 (output loop):** This line is executed 10064 times for the slow input compared to 142 times for the fast input. This suggests that `ans` contains many more elements for large `n`, and iterating over and printing these elements contributes to the slow down.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the line-level analysis, we can generate the following performance-characterizing invariants:

1. **Invariant 1: Loop Iteration Growth**
   - **Natural language description:** "If `n` is large, the loop running with the condition `i * i <= n` iterates many times, significantly increasing execution time. This is because the loop runs in approximately `O(sqrt(n))` time complexity, which can become a bottleneck for large values of `n`."
   - **Threshold:** While `n` can be as large as `10^9`, the loop iterates `sqrt(n)` times; hence, a noticeable slowdown occurs when `sqrt(n)` is large relative to the number of test cases or operations.

2. **Invariant 2: Map and Vector Operations**
   - **Natural language description:** "When `n` is large, the map checks and updates to ensure unique entries in the vector `ans` can become costly, as they are performed frequently and involve multiple operations per loop iteration."
   - **Threshold:** The complexity of inserting into a map is approximately `O(log(size))`, so many such operations can slow down the process as `n` grows.

3. **Invariant 3: Large Output Processing**
   - **Natural language description:** "If the vector `ans` becomes large due to large values of `n`, the subsequent sorting and printing operations can contribute to significant slowdowns."
   - **Threshold:** When the length of `ans` is large (which grows with `n`), the time to process and print the output increases, thereby affecting performance.

By capturing these invariants, we highlight the scenarios under which the code is likely to enter slow execution paths due to the interaction between large input values (`n`) and the operations performed in loops, maps, and vectors. This understanding can guide optimizations or further analysis to mitigate slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as Runtime Checks in C++

Let's implement the performance-characterizing invariants derived earlier as runtime checks in C++. These checks will help detect situations where the program may enter into a slow execution path.

#### Invariant 1: Loop Iteration Growth

The slow loop iterations are due to the condition `i * i <= n`. For large `n`, this can result in many iterations. We can flag when `n` is large enough to indicate potential performance issues.

```cpp
void check_loop_iteration_growth(long long n) {
    if (n >= 1000000) {  // Example threshold for large n
        cerr << "Warning: Performance bottleneck condition triggered due to high loop iterations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Map and Vector Operations

If the number of operations on maps and vectors becomes too large due to large `n`, it can impact performance. We need a check for this situation.

```cpp
void check_map_vector_operations(long long n) {
    if (n >= 1000000) {  // Example threshold for large n
        cerr << "Warning: Performance bottleneck condition triggered due to extensive map/vector operations!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Output Processing

When `ans` becomes large due to large values of `n`, sorting and printing it can be slow.

```cpp
void check_large_output_processing(size_t ansSize) {
    if (ansSize > 10000) {  // Example threshold for large output size
        cerr << "Warning: Performance bottleneck condition triggered due to large output size!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the given C++ code. We'll place these checks strategically to ensure they don't add significant overhead in critical parts of the program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Invariant checker functions
void check_loop_iteration_growth(long long n) {
    if (n >= 1000000) {  // Example threshold for large n
        cerr << "Warning: Performance bottleneck condition triggered due to high loop iterations!" << endl;
        abort();
    }
}

void check_map_vector_operations(long long n) {
    if (n >= 1000000) {  // Example threshold for large n
        cerr << "Warning: Performance bottleneck condition triggered due to extensive map/vector operations!" << endl;
        abort();
    }
}

void check_large_output_processing(size_t ansSize) {
    if (ansSize > 10000) {  // Example threshold for large output size
        cerr << "Warning: Performance bottleneck condition triggered due to large output size!" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    long long t;
    cin >> t;
    while (t--) {
        long long n, i;
        cin >> n;

        // Check for loop iteration and map/vector operations
        check_loop_iteration_growth(n);
        check_map_vector_operations(n);

        vector<long long> ans;
        ans.push_back(0);
        map<long long, long long> m;
        for (i = 1; i * i <= n; i++) {
            long long j = n / i;
            if (m[j] == 0) {
                m[j]++;
                ans.push_back(j);
            }
            j = n / j;
            if (m[j] == 0) {
                m[j]++;
                ans.push_back(j);
            }
        }

        // Check large output size before sorting or printing
        check_large_output_processing(ans.size());

        cout << ans.size() << '\n';
        sort(ans.begin(), ans.end());
        for (i = 0; i < ans.size(); i++) cout << ans[i] << " ";
        cout << '\n';
    }
    return 0;
}
```

### Explanation

- **`check_loop_iteration_growth`** and **`check_map_vector_operations`** are placed after reading input `n` to catch large input cases early.
- **`check_large_output_processing`** is placed right before sorting and printing to check if `ans` becomes too large, which could slow down the program.
- These checks are designed to trigger before any potential performance bottlenecks, allowing a fuzzer or tester to identify slow scenarios proactively.

