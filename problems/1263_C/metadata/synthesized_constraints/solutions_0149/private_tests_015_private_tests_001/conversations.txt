system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
int t;
int r, g, b;
int main() {
  cin >> t;
  for (int i = 1; i <= t; ++i) {
    cin >> n;
    set<int> ans;
    ans.insert(0);
    for (long long j = 1; j * j <= n; ++j) {
      int k = n / j;
      if (n - k * j < j) {
        ans.insert(k);
      }
      k = n / (n / j);
      if (n - k * (n / j) < n / j) {
        ans.insert(k);
      }
    }
    cout << ans.size() << endl;
    vector<int> res(ans.begin(), ans.end());
    for (int j = 0; j < res.size(); ++j) {
      if (j == 0)
        cout << res[j];
      else
        cout << " " << res[j];
    }
    cout << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
2903473
836634
5821231


(G.2) Fast Input

3
990
94
848


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int r, g, b; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> t; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= t; ++i) { /* line 8 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> n; /* line 9 slow_hit_count: 3, fast_hit_count: 3 */
    set<int> ans; /* line 10 slow_hit_count: 6, fast_hit_count: 6 */
    ans.insert(0); /* line 11 slow_hit_count: 3, fast_hit_count: 3 */
    for (long long j = 1; j * j <= n; ++j) { /* line 12 slow_hit_count: 5032, fast_hit_count: 72 */
      int k = n / j; /* line 13 slow_hit_count: 5029, fast_hit_count: 69 */
      if (n - k * j < j) { /* line 14 slow_hit_count: 5029, fast_hit_count: 69 */
        ans.insert(k); /* line 15 slow_hit_count: 5029, fast_hit_count: 69 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      k = n / (n / j); /* line 17 slow_hit_count: 5029, fast_hit_count: 69 */
      if (n - k * (n / j) < n / j) { /* line 18 slow_hit_count: 5029, fast_hit_count: 69 */
        ans.insert(k); /* line 19 slow_hit_count: 5029, fast_hit_count: 69 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans.size() << endl; /* line 22 slow_hit_count: 3, fast_hit_count: 3 */
    vector<int> res(ans.begin(), ans.end()); /* line 23 slow_hit_count: 6, fast_hit_count: 6 */
    for (int j = 0; j < res.size(); ++j) { /* line 24 slow_hit_count: 10064, fast_hit_count: 142 */
      if (j == 0) /* line 25 slow_hit_count: 10061, fast_hit_count: 139 */
        cout << res[j]; /* line 26 slow_hit_count: 3, fast_hit_count: 3 */
      else /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        cout << " " << res[j]; /* line 28 slow_hit_count: 10058, fast_hit_count: 136 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 30 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem of slow performance in the given C program, let's perform a detailed analysis of the code to derive performance-characterizing invariants based on the hit count data and the problem statement.

### Phase 1: Identify Expensive or Inefficient Code Segments
1. **Analysis of Hit Counts**: 
   - The line `for (long long j = 1; j * j <= n; ++j)` in line 12 is significantly more hit in the slow input (5032 times) compared to the fast input (72 times). This loop is a critical point of performance bottleneck.
   - The operations inside this loop (lines 13-19), including division and insertion into a set, are also hit significantly more often in the slow input. This suggests that the computational complexity of these operations is directly tied to the loop's iterations.

2. **Interaction with Data Structures and Constraints**:
   - The loop condition `j * j <= n` implies that the loop iterates up to the square root of `n`. Thus, the loop's performance is heavily influenced by the magnitude of `n`.
   - The use of a set to collect unique results indicates that insertions are likely frequent, causing additional overhead due to the logarithmic complexity of set insertions.

### Phase 2: Derive Performance-Characterizing Invariants
1. **Invariant for Large `n` Values**:
   - **Natural Language Description**: When `n` is large, especially approaching the upper constraint (e.g., `n` close to `10^9`), the loop iterating up to the square root of `n` can result in significant computational overhead. This is because the number of iterations directly correlates with the square root of `n`.

2. **Invariant for Redundant Calculations**:
   - **Natural Language Description**: If the loop performs redundant calculations for values of `k` derived from both `n / j` and `n / (n / j)`, performance might degrade as these calculations involve divisions that scale with `n`.

3. **Invariant for High Set Manipulation Overhead**:
   - **Natural Language Description**: When the set of unique results becomes large due to the high number of loop iterations, the time taken to insert elements into the set can cause a slowdown. The performance impact is more pronounced when `n` is a very large number, resulting in frequent set operations.

### Suggested Performance Checks
To assist in detecting these slow paths, we can introduce checks that help identify when these conditions might trigger a slowdown:

```cpp
void check_large_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: large_n_invariant triggered - n is very large" << endl;
        abort();
    }
}

void check_redundant_calculation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: redundant_calculation_invariant triggered - redundant divisions" << endl;
        abort();
    }
}

void check_high_set_overhead_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: high_set_overhead_invariant triggered - excessive set operations" << endl;
        abort();
    }
}

// Usage of these checks
int main() {
    // ... other code ...
    check_large_n_invariant(n > 1e8); // Triggered when n is close to its upper constraint
    check_redundant_calculation_invariant( /* condition based on redundant operations */ );
    check_high_set_overhead_invariant( /* condition when set size or operations become too large */ );
}
```

### Conclusion
- These invariants focus on input patterns (`n` being large) and operations (e.g., divisions and set manipulations) that drive the slowdown.
- They abstract the problem into categories rather than specific numeric values, making them broadly applicable and useful for detecting similar slow scenarios in future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On the well-known testing system MathForces, a draw of n rating units is arranged. The rating will be distributed according to the following algorithm: if k participants take part in this event, then the n rating is evenly distributed between them and rounded to the nearest lower integer, At the end of the drawing, an unused rating may remain — it is not given to any of the participants.

For example, if n = 5 and k = 3, then each participant will recieve an 1 rating unit, and also 2 rating units will remain unused. If n = 5, and k = 6, then none of the participants will increase their rating.

Vasya participates in this rating draw but does not have information on the total number of participants in this event. Therefore, he wants to know what different values of the rating increment are possible to get as a result of this draw and asks you for help.

For example, if n=5, then the answer is equal to the sequence 0, 1, 2, 5. Each of the sequence values (and only them) can be obtained as ⌊ n/k ⌋ for some positive integer k (where ⌊ x ⌋ is the value of x rounded down): 0 = ⌊ 5/7 ⌋, 1 = ⌊ 5/5 ⌋, 2 = ⌊ 5/2 ⌋, 5 = ⌊ 5/1 ⌋.

Write a program that, for a given n, finds a sequence of all possible rating increments.

Input

The first line contains integer number t (1 ≤ t ≤ 10) — the number of test cases in the input. Then t test cases follow.

Each line contains an integer n (1 ≤ n ≤ 10^9) — the total number of the rating units being drawn.

Output

Output the answers for each of t test cases. Each answer should be contained in two lines.

In the first line print a single integer m — the number of different rating increment values that Vasya can get.

In the following line print m integers in ascending order — the values of possible rating increments.

Example

Input


4
5
11
1
3


Output


4
0 1 2 5 
6
0 1 2 3 5 11 
2
0 1 
3
0 1 3 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the previously derived performance-characterizing invariants into C++ code. These checks will help identify when the program might encounter performance bottlenecks:

1. **Invariant for Large `n` Values**: When `n` is large, the loop that iterates up to the square root of `n` can result in significant overhead.

```cpp
void check_large_n_invariant(long long n) {
    if (n > 1e8) { // Arbitrary threshold for large n
        cerr << "Warning: large_n_invariant triggered - n is very large" << endl;
        abort();
    }
}
```

2. **Invariant for Redundant Calculations**: Although this was mentioned, the original code does not have an explicit redundant operation check, so no additional code is needed here unless further analysis suggests a specific condition.

3. **Invariant for High Set Manipulation Overhead**: When the set of unique results becomes large due to the high number of loop iterations.

```cpp
void check_high_set_overhead_invariant(const set<int>& ans) {
    if (ans.size() > 1e5) { // Arbitrary threshold for large set size
        cerr << "Warning: high_set_overhead_invariant triggered - excessive set operations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, we will embed these invariant checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Invariant Checker for large n
void check_large_n_invariant(long long n) {
    if (n > 1e8) { // Arbitrary threshold for large n
        cerr << "Warning: large_n_invariant triggered - n is very large" << endl;
        abort();
    }
}

// Invariant Checker for high set operation overhead
void check_high_set_overhead_invariant(const set<int>& ans) {
    if (ans.size() > 1e5) { // Arbitrary threshold for large set size
        cerr << "Warning: high_set_overhead_invariant triggered - excessive set operations" << endl;
        abort();
    }
}

int main() {
    int t;
    cin >> t;
    for (int i = 1; i <= t; ++i) {
        cin >> n;
        
        // Check for large n
        check_large_n_invariant(n); // Check if n is too large

        set<int> ans;
        ans.insert(0);
        for (long long j = 1; j * j <= n; ++j) {
            int k = n / j;
            if (n - k * j < j) {
                ans.insert(k);
            }
            k = n / (n / j);
            if (n - k * (n / j) < n / j) {
                ans.insert(k);
            }
        }
        
        // Check for high set operation overhead
        check_high_set_overhead_invariant(ans); // Check if set size is too large

        cout << ans.size() << endl;
        vector<int> res(ans.begin(), ans.end());
        for (int j = 0; j < res.size(); ++j) {
            if (j == 0)
                cout << res[j];
            else
                cout << " " << res[j];
        }
        cout << endl;
    }
    return 0;
}
```

### Explanation:

- **Check Placement**:
  - The `check_large_n_invariant` is placed immediately after reading `n` for each test case to ensure that the loop's iteration count won't become excessive.
  - The `check_high_set_overhead_invariant` is placed after populating the set to detect if the operations on the set are becoming a bottleneck due to the large number of different rating increments.
  
- **Thresholds**:
  - Chosen thresholds are arbitrary and should be adjusted based on empirical performance tests or domain knowledge of what constitutes "large" in the problem context.

- **Effect on Performance**:
  - These checks should not add significant overhead to the program as they are placed outside of the tight loops. They are meant to be indicative of potential inefficiencies during testing or debugging.

