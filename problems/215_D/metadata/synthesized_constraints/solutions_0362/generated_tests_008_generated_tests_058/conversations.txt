system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The official capital and the cultural capital of Berland are connected by a single road running through n regions. Each region has a unique climate, so the i-th (1 ≤ i ≤ n) region has a stable temperature of ti degrees in summer.

This summer a group of m schoolchildren wants to get from the official capital to the cultural capital to visit museums and sights. The trip organizers transport the children between the cities in buses, but sometimes it is very hot. Specifically, if the bus is driving through the i-th region and has k schoolchildren, then the temperature inside the bus is ti + k degrees.

Of course, nobody likes it when the bus is hot. So, when the bus drives through the i-th region, if it has more than Ti degrees inside, each of the schoolchild in the bus demands compensation for the uncomfortable conditions. The compensation is as large as xi rubles and it is charged in each region where the temperature in the bus exceeds the limit.

To save money, the organizers of the trip may arbitrarily add or remove extra buses in the beginning of the trip, and between regions (of course, they need at least one bus to pass any region). The organizers can also arbitrarily sort the children into buses, however, each of buses in the i-th region will cost the organizers costi rubles. Please note that sorting children into buses takes no money.

Your task is to find the minimum number of rubles, which the organizers will have to spend to transport all schoolchildren.

Input

The first input line contains two integers n and m (1 ≤ n ≤ 105; 1 ≤ m ≤ 106) — the number of regions on the way and the number of schoolchildren in the group, correspondingly. Next n lines contain four integers each: the i-th line contains ti, Ti, xi and costi (1 ≤ ti, Ti, xi, costi ≤ 106). The numbers in the lines are separated by single spaces.

Output

Print the only integer — the minimum number of roubles the organizers will have to spend to transport all schoolchildren.

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.

Examples

Input

2 10
30 35 1 100
20 35 10 10


Output

120


Input

3 100
10 30 1000 1
5 10 1000 3
10 40 1000 100000


Output

200065

Note

In the first sample the organizers will use only one bus to travel through the first region. However, the temperature in the bus will equal 30 + 10 = 40 degrees and each of 10 schoolchildren will ask for compensation. Only one bus will transport the group through the second region too, but the temperature inside won't exceed the limit. Overall, the organizers will spend 100 + 10 + 10 = 120 rubles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100001;
const long long INFINITE = 0x7FFFFFFFFFFFFFFFll;
int n;
long long m, res;
long long tem[MAXN], bnd[MAXN], mon[MAXN], car[MAXN];
inline long long min(long long x, long long y) { return (x < y) ? x : y; }
int main() {
  scanf("%d %I64d\n", &n, &m);
  for (int i = 1; i <= n; ++i)
    scanf("%I64d %I64d %I64d %I64d\n", &tem[i], &bnd[i], &mon[i], &car[i]);
  long long tmp;
  for (int i = 1; i <= n; ++i) {
    if (bnd[i] <= tem[i])
      res += car[i] + m * mon[i];
    else {
      long long num = m / (bnd[i] - tem[i]) + (m % (bnd[i] - tem[i]) > 0);
      if (tem[i] + m > bnd[i])
        res += tmp = min(car[i] + m * mon[i], num * car[i]);
      else
        res += tmp = min(car[i], num * car[i]);
    }
  }
  printf("%I64d\n", res);
  fclose(stdin);
  fclose(stdout);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 102
73 79 75 27
13 15 62 47
74 75 85 86
49 81 23 69
43 17 45 27
35 14 90 35
51 74 35 33
54 66 46 24
33 76 49 3
34 53 25 76
69 72 76 31
41 31 8 48
27 48 85 24
19 2 59 83
19 31 51 86
31 10 45 76
56 47 79 86
49 33 15 1
77 89 26 64
0 52 76 77


(G.2) Fast Input

1 13
80 3 0 100
13 43 10 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 100001; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFINITE = 0x7FFFFFFFFFFFFFFFll; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long m, res; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long tem[MAXN], bnd[MAXN], mon[MAXN], car[MAXN]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline long long min(long long x, long long y) { return (x < y) ? x : y; } /* line 8 slow_hit_count: 13, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %I64d\n", &n, &m); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) /* line 11 slow_hit_count: 21, fast_hit_count: 2 */
    scanf("%I64d %I64d %I64d %I64d\n", &tem[i], &bnd[i], &mon[i], &car[i]); /* line 12 slow_hit_count: 20, fast_hit_count: 1 */
  long long tmp; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) { /* line 14 slow_hit_count: 21, fast_hit_count: 2 */
    if (bnd[i] <= tem[i]) /* line 15 slow_hit_count: 20, fast_hit_count: 1 */
      res += car[i] + m * mon[i]; /* line 16 slow_hit_count: 7, fast_hit_count: 1 */
    else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      long long num = m / (bnd[i] - tem[i]) + (m % (bnd[i] - tem[i]) > 0); /* line 18 slow_hit_count: 13, fast_hit_count: 0 */
      if (tem[i] + m > bnd[i]) /* line 19 slow_hit_count: 13, fast_hit_count: 0 */
        res += tmp = min(car[i] + m * mon[i], num * car[i]); /* line 20 slow_hit_count: 13, fast_hit_count: 0 */
      else /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        res += tmp = min(car[i], num * car[i]); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%I64d\n", res); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  fclose(stdin); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  fclose(stdout); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Performance-Characterizing Invariants for the Given C Program

**Phase 1: Identifying Expensive or Inefficient Code Segments**

1. **Line-Level Hit Count Analysis:**
   - The lines of code within the main processing loop (lines 14-24) show significant variance in hit counts between the fast and slow inputs.
   - Line 15 (checking `bnd[i] <= tem[i]`) has a high hit count in the slow input, indicating that this condition frequently evaluates to true, requiring the direct computation of `res += car[i] + m * mon[i]`.
   - Lines 18-20, which involve calculating the number of buses needed if `bnd[i] > tem[i]`, are only executed in the slow input, suggesting this path is costly.

2. **Potential Bottleneck:**
   - The expensive calculation involving division and modulus in line 18 (`long long num = m / (bnd[i] - tem[i]) + (m % (bnd[i] - tem[i]) > 0);`) indicates the program is spending considerable time calculating the number of buses needed when the boundary condition isn't met, particularly for the slow input.

**Phase 2: Deriving Performance-Characterizing Invariants**

1. **Invariant 1: High Compensation Costs**
   - **Description:** "When the compensation per child (`xi`) is high relative to the cost of an additional bus (`costi`), and the internal temperature exceeds the threshold (`Ti`) by only a small margin, the program spends significant time calculating costs, which may lead to a slowdown."

2. **Invariant 2: Large Number of Children and Tight Temperature Margins**
   - **Description:** "If the number of schoolchildren (`m`) is large and the difference between the region's temperature (`ti`) and the maximum allowed temperature (`Ti`) is small, the program may slow down due to intensive calculations required to balance bus costs and compensation."

3. **Invariant 3: Frequent Boundary Conditions**
   - **Description:** "The program is likely to slow down when many regions have boundary conditions (`bnd[i] <= tem[i]`), causing the program to frequently calculate `m * mon[i]`, which is computationally expensive."

4. **Invariant 4: High Variability in Region Conditions**
   - **Description:** "The presence of highly varying temperature limits (`Ti`) across regions, where some regions impose strict limits that are only slightly above the ambient temperature (`ti`), can lead to frequent adjustments in bus and compensation strategies, thereby degrading performance."

**Conclusion:** The identified invariants highlight that performance issues arise primarily due to the complex decision-making process around bus allocation and compensation in response to the temperature requirements. These conditions suggest that optimizing the handling of computations related to bus and compensation costs, especially under tight constraints, could improve performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The official capital and the cultural capital of Berland are connected by a single road running through n regions. Each region has a unique climate, so the i-th (1 ≤ i ≤ n) region has a stable temperature of ti degrees in summer.

This summer a group of m schoolchildren wants to get from the official capital to the cultural capital to visit museums and sights. The trip organizers transport the children between the cities in buses, but sometimes it is very hot. Specifically, if the bus is driving through the i-th region and has k schoolchildren, then the temperature inside the bus is ti + k degrees.

Of course, nobody likes it when the bus is hot. So, when the bus drives through the i-th region, if it has more than Ti degrees inside, each of the schoolchild in the bus demands compensation for the uncomfortable conditions. The compensation is as large as xi rubles and it is charged in each region where the temperature in the bus exceeds the limit.

To save money, the organizers of the trip may arbitrarily add or remove extra buses in the beginning of the trip, and between regions (of course, they need at least one bus to pass any region). The organizers can also arbitrarily sort the children into buses, however, each of buses in the i-th region will cost the organizers costi rubles. Please note that sorting children into buses takes no money.

Your task is to find the minimum number of rubles, which the organizers will have to spend to transport all schoolchildren.

Input

The first input line contains two integers n and m (1 ≤ n ≤ 105; 1 ≤ m ≤ 106) — the number of regions on the way and the number of schoolchildren in the group, correspondingly. Next n lines contain four integers each: the i-th line contains ti, Ti, xi and costi (1 ≤ ti, Ti, xi, costi ≤ 106). The numbers in the lines are separated by single spaces.

Output

Print the only integer — the minimum number of roubles the organizers will have to spend to transport all schoolchildren.

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.

Examples

Input

2 10
30 35 1 100
20 35 10 10


Output

120


Input

3 100
10 30 1000 1
5 10 1000 3
10 40 1000 100000


Output

200065

Note

In the first sample the organizers will use only one bus to travel through the first region. However, the temperature in the bus will equal 30 + 10 = 40 degrees and each of 10 schoolchildren will ask for compensation. Only one bus will transport the group through the second region too, but the temperature inside won't exceed the limit. Overall, the organizers will spend 100 + 10 + 10 = 120 rubles.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

Below are the C++ runtime checks corresponding to the performance-characterizing invariants identified earlier:

1. **High Compensation Costs Check:**
   - When compensation per child is high relative to the additional bus cost, and temperature exceeds the threshold by a small margin.

```cpp
void check_high_compensation_invariant(long long xi, long long costi, long long tem_i, long long Ti, long long m) {
    if (xi > costi && (tem_i + m) > Ti && (Ti - tem_i) <= 5) { // Arbitrary small margin
        cerr << "Warning: High compensation costs triggered!" << endl;
        abort();
    }
}
```

2. **Large Number of Children and Tight Temperature Margins Check:**
   - If the number of schoolchildren is large and the difference between current and allowed temperature is small.

```cpp
void check_large_children_tight_margin_invariant(long long m, long long tem_i, long long Ti) {
    if (m > 1000 && (Ti - tem_i) <= 5) { // Arbitrary thresholds
        cerr << "Warning: Large number of children with tight temperature margin triggered!" << endl;
        abort();
    }
}
```

3. **Frequent Boundary Conditions Check:**
   - When many regions meet the boundary condition of temperature, leading to expensive compensation calculations.

```cpp
void check_boundary_conditions_invariant(long long tem_i, long long Ti) {
    if (tem_i >= Ti) {
        cerr << "Warning: Frequent boundary conditions triggered!" << endl;
        abort();
    }
}
```

4. **High Variability in Region Conditions Check:**
   - Large variability in the allowed temperature limits across regions.

```cpp
void check_high_variability_invariant(long long min_Ti, long long max_Ti) {
    if ((max_Ti - min_Ti) > 50) { // Arbitrary threshold for variability
        cerr << "Warning: High variability in region conditions triggered!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Here is the instrumented C++ program with the inserted runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100001;
const long long INFINITE = 0x7FFFFFFFFFFFFFFFll;
int n;
long long m, res;
long long tem[MAXN], bnd[MAXN], mon[MAXN], car[MAXN];
inline long long min(long long x, long long y) { return (x < y) ? x : y; }

void check_high_compensation_invariant(long long xi, long long costi, long long tem_i, long long Ti, long long m) {
    if (xi > costi && (tem_i + m) > Ti && (Ti - tem_i) <= 5) {
        cerr << "Warning: High compensation costs triggered!" << endl;
        abort();
    }
}

void check_large_children_tight_margin_invariant(long long m, long long tem_i, long long Ti) {
    if (m > 1000 && (Ti - tem_i) <= 5) {
        cerr << "Warning: Large number of children with tight temperature margin triggered!" << endl;
        abort();
    }
}

void check_boundary_conditions_invariant(long long tem_i, long long Ti) {
    if (tem_i >= Ti) {
        cerr << "Warning: Frequent boundary conditions triggered!" << endl;
        abort();
    }
}

void check_high_variability_invariant(long long min_Ti, long long max_Ti) {
    if ((max_Ti - min_Ti) > 50) {
        cerr << "Warning: High variability in region conditions triggered!" << endl;
        abort();
    }
}

int main() {
    scanf("%d %I64d\n", &n, &m);
    long long min_Ti = INFINITE, max_Ti = -INFINITE;
    for (int i = 1; i <= n; ++i) {
        scanf("%I64d %I64d %I64d %I64d\n", &tem[i], &bnd[i], &mon[i], &car[i]);
        min_Ti = min(min_Ti, bnd[i]);
        max_Ti = max(max_Ti, bnd[i]);
    }
    
    check_high_variability_invariant(min_Ti, max_Ti);

    long long tmp;
    for (int i = 1; i <= n; ++i) {
        check_high_compensation_invariant(mon[i], car[i], tem[i], bnd[i], m);
        check_large_children_tight_margin_invariant(m, tem[i], bnd[i]);
        check_boundary_conditions_invariant(tem[i], bnd[i]);

        if (bnd[i] <= tem[i]) {
            res += car[i] + m * mon[i];
        } else {
            long long num = m / (bnd[i] - tem[i]) + (m % (bnd[i] - tem[i]) > 0);
            if (tem[i] + m > bnd[i])
                res += tmp = min(car[i] + m * mon[i], num * car[i]);
            else
                res += tmp = min(car[i], num * car[i]);
        }
    }
    printf("%I64d\n", res);
    fclose(stdin);
    fclose(stdout);
    return 0;
}
```

**Explanation of Inserted Checks:**

- **High Compensation Costs Check:** Placed inside the loop for each region to ensure the high cost condition is evaluated per region.
- **Large Number of Children and Tight Temperature Margins Check:** Also inside the loop to address the conditions for each region.
- **Frequent Boundary Conditions Check:** Inside the loop before the primary calculation to prevent inefficient processing when the boundary condition is met.
- **High Variability in Region Conditions Check:** After reading all the input, to warn if the input set is likely to cause performance issues due to high variability in temperature limits.

