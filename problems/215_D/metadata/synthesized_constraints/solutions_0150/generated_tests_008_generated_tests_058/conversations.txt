system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The official capital and the cultural capital of Berland are connected by a single road running through n regions. Each region has a unique climate, so the i-th (1 ≤ i ≤ n) region has a stable temperature of ti degrees in summer.

This summer a group of m schoolchildren wants to get from the official capital to the cultural capital to visit museums and sights. The trip organizers transport the children between the cities in buses, but sometimes it is very hot. Specifically, if the bus is driving through the i-th region and has k schoolchildren, then the temperature inside the bus is ti + k degrees.

Of course, nobody likes it when the bus is hot. So, when the bus drives through the i-th region, if it has more than Ti degrees inside, each of the schoolchild in the bus demands compensation for the uncomfortable conditions. The compensation is as large as xi rubles and it is charged in each region where the temperature in the bus exceeds the limit.

To save money, the organizers of the trip may arbitrarily add or remove extra buses in the beginning of the trip, and between regions (of course, they need at least one bus to pass any region). The organizers can also arbitrarily sort the children into buses, however, each of buses in the i-th region will cost the organizers costi rubles. Please note that sorting children into buses takes no money.

Your task is to find the minimum number of rubles, which the organizers will have to spend to transport all schoolchildren.

Input

The first input line contains two integers n and m (1 ≤ n ≤ 105; 1 ≤ m ≤ 106) — the number of regions on the way and the number of schoolchildren in the group, correspondingly. Next n lines contain four integers each: the i-th line contains ti, Ti, xi and costi (1 ≤ ti, Ti, xi, costi ≤ 106). The numbers in the lines are separated by single spaces.

Output

Print the only integer — the minimum number of roubles the organizers will have to spend to transport all schoolchildren.

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.

Examples

Input

2 10
30 35 1 100
20 35 10 10


Output

120


Input

3 100
10 30 1000 1
5 10 1000 3
10 40 1000 100000


Output

200065

Note

In the first sample the organizers will use only one bus to travel through the first region. However, the temperature in the bus will equal 30 + 10 = 40 degrees and each of 10 schoolchildren will ask for compensation. Only one bus will transport the group through the second region too, but the temperature inside won't exceed the limit. Overall, the organizers will spend 100 + 10 + 10 = 120 rubles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m;
long long min_fee(long long t, long long T, long long x, long long cost) {
  if (t >= T) return cost + m * x;
  long long case_1, case_2, case_3;
  if (m + t > T)
    case_1 = cost + m * x;
  else {
    case_1 = cost;
    return case_1;
  }
  long long bus = (long long)ceil((double)m / (T - t));
  case_2 = cost * bus;
  if (bus > 1) {
    bus -= 1;
    case_3 = cost * bus;
    long long p = m - (T - t) * (bus - 1);
    if (p + t > T)
      case_3 += cost + p * x;
    else
      case_3 += cost;
    return min(case_3, min(case_1, case_2));
  } else
    return min(case_1, case_2);
}
int main() {
  long long ans = 0;
  long long t, T, x, cost;
  scanf("%I64d%I64d", &n, &m);
  for (int i = 0; i < n; i++) {
    scanf("%I64d%I64d%I64d%I64d", &t, &T, &x, &cost);
    ans += min_fee(t, T, x, cost);
  }
  printf("%I64d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 102
73 79 75 27
13 15 62 47
74 75 85 86
49 81 23 69
43 17 45 27
35 14 90 35
51 74 35 33
54 66 46 24
33 76 49 3
34 53 25 76
69 72 76 31
41 31 8 48
27 48 85 24
19 2 59 83
19 31 51 86
31 10 45 76
56 47 79 86
49 33 15 1
77 89 26 64
0 52 76 77


(G.2) Fast Input

1 13
80 3 0 100
13 43 10 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long min_fee(long long t, long long T, long long x, long long cost) { /* line 4 slow_hit_count: 20, fast_hit_count: 1 */
  if (t >= T) return cost + m * x; /* line 5 slow_hit_count: 20, fast_hit_count: 1 */
  long long case_1, case_2, case_3; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  if (m + t > T) /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    case_1 = cost + m * x; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    case_1 = cost; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    return case_1; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  long long bus = (long long)ceil((double)m / (T - t)); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  case_2 = cost * bus; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (bus > 1) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    bus -= 1; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    case_3 = cost * bus; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    long long p = m - (T - t) * (bus - 1); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    if (p + t > T) /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      case_3 += cost + p * x; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      case_3 += cost; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    return min(case_3, min(case_1, case_2)); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } else /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    return min(case_1, case_2); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long long t, T, x, cost; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%I64d%I64d", &n, &m); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 31 slow_hit_count: 21, fast_hit_count: 2 */
    scanf("%I64d%I64d%I64d%I64d", &t, &T, &x, &cost); /* line 32 slow_hit_count: 20, fast_hit_count: 1 */
    ans += min_fee(t, T, x, cost); /* line 33 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%I64d\n", ans); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck and generate performance-characterizing invariants, we will go through the given code and examine the hit count data from both fast and slow inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Step-by-Step Analysis:

1. **Function `min_fee`:** The function `min_fee` is called once for each region (`n=20` times in the slow input and `n=1` time in the fast input). Thus, the hit count for line 4 matches the number of regions.

2. **Conditional Checks in `min_fee`:**
   - **Line 5:** `if (t >= T)` is executed for each call. For both inputs, line 5 is hit every time the function `min_fee` is called. If this condition is true, the function returns immediately, indicating that `(t >= T)` results in an early exit strategy.
   - **Line 7:** The check `if (m + t > T)` and subsequent lines (8–12) are not hit. This suggests that the line 5 condition `(t >= T)` is consistently true for the given inputs, resulting in an early return before reaching line 7.

3. **Hit Count Insights:**
   - The slow input does not reach line 13 and beyond in `min_fee`, indicating a significant portion of decision-making happens at line 5.
   - The loop in `main` (line 31) iterates over each region and calls `min_fee`, which is consistent with both fast and slow inputs.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can infer conditions under which the code may enter a slow path:

1. **Temperature Condition:**
   - **Invariant:** "The slow execution path occurs when the stable temperature `t` of a region is greater than or equal to the threshold `T`. This condition forces compensation costs to be incurred for all schoolchildren in that region."
   - **Explanation:** The hit count suggests that this condition is true across all regions in the slow input, triggering compensation costs instead of exploring other options (like using more buses).

2. **Compensation Dominance:**
   - **Invariant:** "The performance slows down when all regions force compensation calculations due to high stable temperatures relative to their thresholds, rather than bus reallocation or splitting strategies."
   - **Explanation:** This results in a linear accumulation of costs with no optimization through bus reallocation, which might be faster.

### Summary

The key performance trigger identified is the condition when `t >= T` for each region, leading to straightforward compensation payments being calculated without exploring alternative transport strategies. This behavior results in a potentially slower execution as this condition is consistently true in the slow input, maximizing the cost calculations and bypassing possible early exits or optimizations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The official capital and the cultural capital of Berland are connected by a single road running through n regions. Each region has a unique climate, so the i-th (1 ≤ i ≤ n) region has a stable temperature of ti degrees in summer.

This summer a group of m schoolchildren wants to get from the official capital to the cultural capital to visit museums and sights. The trip organizers transport the children between the cities in buses, but sometimes it is very hot. Specifically, if the bus is driving through the i-th region and has k schoolchildren, then the temperature inside the bus is ti + k degrees.

Of course, nobody likes it when the bus is hot. So, when the bus drives through the i-th region, if it has more than Ti degrees inside, each of the schoolchild in the bus demands compensation for the uncomfortable conditions. The compensation is as large as xi rubles and it is charged in each region where the temperature in the bus exceeds the limit.

To save money, the organizers of the trip may arbitrarily add or remove extra buses in the beginning of the trip, and between regions (of course, they need at least one bus to pass any region). The organizers can also arbitrarily sort the children into buses, however, each of buses in the i-th region will cost the organizers costi rubles. Please note that sorting children into buses takes no money.

Your task is to find the minimum number of rubles, which the organizers will have to spend to transport all schoolchildren.

Input

The first input line contains two integers n and m (1 ≤ n ≤ 105; 1 ≤ m ≤ 106) — the number of regions on the way and the number of schoolchildren in the group, correspondingly. Next n lines contain four integers each: the i-th line contains ti, Ti, xi and costi (1 ≤ ti, Ti, xi, costi ≤ 106). The numbers in the lines are separated by single spaces.

Output

Print the only integer — the minimum number of roubles the organizers will have to spend to transport all schoolchildren.

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.

Examples

Input

2 10
30 35 1 100
20 35 10 10


Output

120


Input

3 100
10 30 1000 1
5 10 1000 3
10 40 1000 100000


Output

200065

Note

In the first sample the organizers will use only one bus to travel through the first region. However, the temperature in the bus will equal 30 + 10 = 40 degrees and each of 10 schoolchildren will ask for compensation. Only one bus will transport the group through the second region too, but the temperature inside won't exceed the limit. Overall, the organizers will spend 100 + 10 + 10 = 120 rubles.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's convert the previously described performance-characterizing invariants into C++ checker code snippets.

#### Invariant 1: Temperature Condition
The invariant describes a situation where the stable temperature `t` of a region is greater than or equal to the threshold `T`, leading to mandatory compensation costs. We will implement this as a runtime check.

```cpp
void check_temperature_invariant(long long t, long long T) {
    if (t >= T) {
        cerr << "Warning: Temperature invariant triggered - stable temperature exceeds threshold!" << endl;
        abort();
    }
}
```

#### Invariant 2: Compensation Dominance
This invariant is captured when all regions result in compensation payments due to `t >= T`. We will ensure this is checked for each region.

```cpp
void check_compensation_invariant(long long t, long long T) {
    if (t >= T) {
        cerr << "Warning: Compensation invariant triggered - compensation required for all schoolchildren!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now we will integrate these checkers into the original C++ code at appropriate points to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, m;

void check_temperature_invariant(long long t, long long T) {
    if (t >= T) {
        cerr << "Warning: Temperature invariant triggered - stable temperature exceeds threshold!" << endl;
        abort();
    }
}

void check_compensation_invariant(long long t, long long T) {
    if (t >= T) {
        cerr << "Warning: Compensation invariant triggered - compensation required for all schoolchildren!" << endl;
        abort();
    }
}

long long min_fee(long long t, long long T, long long x, long long cost) {
    // Check for temperature invariant
    check_temperature_invariant(t, T);

    if (t >= T) return cost + m * x;
    
    long long case_1, case_2, case_3;
    
    // Check for compensation invariant
    if (m + t > T) {
        check_compensation_invariant(t, T);
        case_1 = cost + m * x;
    } else {
        case_1 = cost;
        return case_1;
    }
    
    long long bus = (long long)ceil((double)m / (T - t));
    case_2 = cost * bus;
    
    if (bus > 1) {
        bus -= 1;
        case_3 = cost * bus;
        long long p = m - (T - t) * (bus - 1);
        if (p + t > T)
            case_3 += cost + p * x;
        else
            case_3 += cost;
        return min(case_3, min(case_1, case_2));
    } else
        return min(case_1, case_2);
}

int main() {
    long long ans = 0;
    long long t, T, x, cost;
    scanf("%I64d%I64d", &n, &m);
    for (int i = 0; i < n; i++) {
        scanf("%I64d%I64d%I64d%I64d", &t, &T, &x, &cost);
        ans += min_fee(t, T, x, cost);
    }
    printf("%I64d\n", ans);
    return 0;
}
```

#### Explanation

- **Invariant Check Integration:** The check functions `check_temperature_invariant` and `check_compensation_invariant` are called at the start of `min_fee` to ensure conditions are evaluated without entering heavy computation loops, preventing unnecessary overhead.
  
- **Minimal Overhead Placement:** These checks are placed strategically after reading input values, before entering any costly computations, making the identification of slow paths efficient.

This completes the process of integrating runtime checks for the specified performance invariants, aimed at capturing potential slow execution scenarios during program runs.

