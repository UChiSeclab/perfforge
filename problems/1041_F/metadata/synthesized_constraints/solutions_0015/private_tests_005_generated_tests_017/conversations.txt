system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a tube which is reflective inside represented as two non-coinciding, but parallel to Ox lines. Each line has some special integer points — positions of sensors on sides of the tube.

You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively (coordinates can be negative): the point A is responsible for the position of the laser, and the point B — for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.

<image> Examples of laser rays. Note that image contains two examples. The 3 sensors (denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red.

Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.

Input

The first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.

The third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. 

The fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.

Output

Print the only integer — the maximum number of sensors which can register the ray.

Example

Input

3 1
1 5 6
1 3
3


Output

3

Note

One of the solutions illustrated on the image by pair A_2 and B_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int A[100005], B[100005];
map<int, int> ma, maa;
int main(void) {
  int i, j, k, n, m, nn, mm, ans, res, pos, L, LL, beg, mod;
  scanf("%d %d", &n, &m);
  for (i = 0; i < n; i++) {
    scanf("%d", A + i);
  }
  scanf("%d %d", &nn, &mm);
  for (i = 0; i < nn; i++) {
    scanf("%d", B + i);
  }
  ans = 2;
  for (pos = 1; pos < 1e9; pos <<= 1) {
    ma.clear();
    maa.clear();
    mod = pos * 2;
    for (i = 0; i < n; i++) {
      ma[A[i] % mod]++;
    }
    for (i = 0; i < nn; i++) {
      maa[B[i] % mod]++;
    }
    for (auto x : ma) {
      ans = max(ans, x.second + maa[x.first + pos]);
    }
    for (auto x : maa) {
      ans = max(ans, x.second + ma[x.first + pos]);
    }
  }
  printf("%d\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

22 369666
1 9 17 25 33 41 49 57 65 73 81 89 97 105 113 121 129 137 145 153 161 169
16 492689
5 9 13 17 21 25 29 33 37 41 45 49 53 57 61 65


(G.2) Fast Input

1 1
1
1 5
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int A[100005], B[100005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> ma, maa; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main(void) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, k, n, m, nn, mm, ans, res, pos, L, LL, beg, mod; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d", &n, &m); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 8 slow_hit_count: 23, fast_hit_count: 2 */
    scanf("%d", A + i); /* line 9 slow_hit_count: 22, fast_hit_count: 1 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d", &nn, &mm); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < nn; i++) { /* line 12 slow_hit_count: 17, fast_hit_count: 2 */
    scanf("%d", B + i); /* line 13 slow_hit_count: 16, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  ans = 2; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (pos = 1; pos < 1e9; pos <<= 1) { /* line 16 slow_hit_count: 31, fast_hit_count: 31 */
    ma.clear(); /* line 17 slow_hit_count: 30, fast_hit_count: 30 */
    maa.clear(); /* line 18 slow_hit_count: 30, fast_hit_count: 30 */
    mod = pos * 2; /* line 19 slow_hit_count: 30, fast_hit_count: 30 */
    for (i = 0; i < n; i++) { /* line 20 slow_hit_count: 690, fast_hit_count: 60 */
      ma[A[i] % mod]++; /* line 21 slow_hit_count: 660, fast_hit_count: 30 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 0; i < nn; i++) { /* line 23 slow_hit_count: 510, fast_hit_count: 60 */
      maa[B[i] % mod]++; /* line 24 slow_hit_count: 480, fast_hit_count: 30 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto x : ma) { /* line 26 slow_hit_count: 569, fast_hit_count: 60 */
      ans = max(ans, x.second + maa[x.first + pos]); /* line 27 slow_hit_count: 539, fast_hit_count: 30 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto x : maa) { /* line 29 slow_hit_count: 976, fast_hit_count: 90 */
      ans = max(ans, x.second + ma[x.first + pos]); /* line 30 slow_hit_count: 946, fast_hit_count: 60 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

From the hit count information, we observe:

1. **Loop Iterations (Lines 20-30):** The loops at lines 20, 23, 26, and 29 have significantly higher hit counts in the slow run compared to the fast run. This indicates that these parts of the code are being executed many more times for the slow input.

2. **Map Operations (Lines 21, 24, 27, 30):** The operations involving maps `ma` and `maa` are executed frequently. The hash map operations (insertion and lookup) are potentially costly, especially when these operations are performed repeatedly in a loop.

3. **Outer Loop (Line 16):** The outer loop runs a fixed number of times (31 iterations), but the work done inside (especially map operations) scales with input size and the characteristics of the inputs.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and constraints, we deduce the following performance-characterizing invariants:

1. **Large Number of Sensors with Small Modulo Values:**
   - If the number of sensors on the lines is large and the modulo value results in many sensors falling into the same remainder category, the map operations can become costly.
   - **Natural Language Invariant:** "When the number of sensors is high and they align into the same modulo classes, the map operations can repeatedly process large numbers of elements, causing slowdowns."

2. **High Frequency of Map Lookups and Updates:**
   - Frequent map updates and lookups in nested loops can significantly degrade performance if the map size is large.
   - **Natural Language Invariant:** "If there is frequent updating and querying of large maps within the nested loops, especially when input sizes are close to maximum, performance may degrade."

3. **High Density of Matching Sensor Positions:**
   - When many sensors from both lines are aligned such that they map to similar positions under modulo operations, the nested loops and map operations are executed more times.
   - **Natural Language Invariant:** "If the sensor positions result in dense mappings under modulo operations, leading to repeated comparisons, the execution time can increase."

4. **Combination of Maximum Input Size and Repeated Patterns:**
   - The combination of maximum input sizes and repeated patterns (many positions mapping to similar classes) can cause a heavy computational load due to the repeated iteration over large datasets.
   - **Natural Language Invariant:** "For maximum input sizes combined with repetitive patterns in sensor positions, the computational effort increases drastically due to intensified loop iterations and map interactions."

These invariants describe scenarios that can trigger slowdowns by emphasizing the impact of input characteristics and map operations under specific conditions. They should help in understanding potential future slow scenarios without relying on specific numeric values from the slow inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a tube which is reflective inside represented as two non-coinciding, but parallel to Ox lines. Each line has some special integer points — positions of sensors on sides of the tube.

You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively (coordinates can be negative): the point A is responsible for the position of the laser, and the point B — for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.

<image> Examples of laser rays. Note that image contains two examples. The 3 sensors (denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red.

Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.

Input

The first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.

The third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. 

The fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.

Output

Print the only integer — the maximum number of sensors which can register the ray.

Example

Input

3 1
1 5 6
1 3
3


Output

3

Note

One of the solutions illustrated on the image by pair A_2 and B_2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Let's translate the natural language performance-characterizing invariants we've derived into C++ code checks.

#### Invariant Implementations

1. **Large Number of Sensors with Small Modulo Values:**

   ```cpp
   void check_modulo_density(int n, int m, int mod_value, const map<int, int>& map1, const map<int, int>& map2) {
       for (const auto& x : map1) {
           if (x.second > n / mod_value) {
               cerr << "Warning: Performance bottleneck condition triggered - high density of sensors in a modulo class!" << endl;
               abort();
           }
       }
       for (const auto& x : map2) {
           if (x.second > m / mod_value) {
               cerr << "Warning: Performance bottleneck condition triggered - high density of sensors in a modulo class!" << endl;
               abort();
           }
       }
   }
   ```

2. **High Frequency of Map Lookups and Updates:**

   ```cpp
   void check_map_operations(int op_count, int threshold) {
       if (op_count > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive map operations!" << endl;
           abort();
       }
   }
   ```

3. **High Density of Matching Sensor Positions:**

   ```cpp
   void check_matching_density(int match_count, int threshold) {
       if (match_count > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive matching sensor positions!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks with the Original Program

Now we will integrate these checks into the given C++ program. We'll place these checks in appropriate locations to ensure they do not add significant overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

int A[100005], B[100005];
map<int, int> ma, maa;

void check_modulo_density(int n, int m, int mod_value, const map<int, int>& map1, const map<int, int>& map2) {
    for (const auto& x : map1) {
        if (x.second > n / 10) { // Assume a threshold of 10 for demonstration
            cerr << "Warning: Performance bottleneck condition triggered - high density of sensors in a modulo class!" << endl;
            abort();
        }
    }
    for (const auto& x : map2) {
        if (x.second > m / 10) { // Assume a threshold of 10 for demonstration
            cerr << "Warning: Performance bottleneck condition triggered - high density of sensors in a modulo class!" << endl;
            abort();
        }
    }
}

void check_map_operations(int op_count, int threshold) {
    if (op_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive map operations!" << endl;
        abort();
    }
}

void check_matching_density(int match_count, int threshold) {
    if (match_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive matching sensor positions!" << endl;
        abort();
    }
}

int main(void) {
    int i, j, k, n, m, nn, mm, ans, res, pos, L, LL, beg, mod;
    scanf("%d %d", &n, &m);
    for (i = 0; i < n; i++) {
        scanf("%d", A + i);
    }
    scanf("%d %d", &nn, &mm);
    for (i = 0; i < nn; i++) {
        scanf("%d", B + i);
    }
    ans = 2;
    int operation_threshold = 1000; // Example threshold for map operations
    for (pos = 1; pos < 1e9; pos <<= 1) {
        ma.clear();
        maa.clear();
        mod = pos * 2;
        for (i = 0; i < n; i++) {
            ma[A[i] % mod]++;
        }
        for (i = 0; i < nn; i++) {
            maa[B[i] % mod]++;
        }
        
        // Check for high density of sensors in modulo classes
        check_modulo_density(n, nn, mod, ma, maa);
        
        int map_operations = 0;
        int matches = 0;
        
        for (auto x : ma) {
            map_operations++;
            matches += x.second + maa[x.first + pos];
            ans = max(ans, x.second + maa[x.first + pos]);
        }
        
        for (auto x : maa) {
            map_operations++;
            matches += x.second + ma[x.first + pos];
            ans = max(ans, x.second + ma[x.first + pos]);
        }
        
        // Check for excessive map operations
        check_map_operations(map_operations, operation_threshold);
        
        // Check for excessive matching sensor positions
        check_matching_density(matches, operation_threshold);
    }
    printf("%d\n", ans);
}
```

### Explanation

- **Density Check (`check_modulo_density`)**: This function checks if there's a high density of sensors in any modulo class, which could indicate a performance issue.
- **Map Operation Count (`check_map_operations`)**: Counts the number of operations (lookups and insertions) on the maps and checks if the count exceeds a threshold.
- **Matching Density (`check_matching_density`)**: Counts the total number of matches computed and verifies it doesn't exceed a predefined threshold.

These checks are strategically placed outside the tight inner loops to minimize performance impact, only triggering in specific conditions that could indicate potential slowdowns.

