system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a tube which is reflective inside represented as two non-coinciding, but parallel to Ox lines. Each line has some special integer points — positions of sensors on sides of the tube.

You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively (coordinates can be negative): the point A is responsible for the position of the laser, and the point B — for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.

<image> Examples of laser rays. Note that image contains two examples. The 3 sensors (denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red.

Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.

Input

The first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.

The third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. 

The fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.

Output

Print the only integer — the maximum number of sensors which can register the ray.

Example

Input

3 1
1 5 6
1 3
3


Output

3

Note

One of the solutions illustrated on the image by pair A_2 and B_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int SZ = 200010;
const int INF = 1e9 + 10;
const int mod = 1e9 + 7;
const long double eps = 1e-8;
long long read() {
  long long n = 0;
  char a = getchar();
  bool flag = 0;
  while (a > '9' || a < '0') {
    if (a == '-') flag = 1;
    a = getchar();
  }
  while (a <= '9' && a >= '0') {
    n = n * 10 + a - '0', a = getchar();
  }
  if (flag) n = -n;
  return n;
}
long long n, m, a[SZ], b[SZ];
unordered_map<long long, long long> A[33], B[33];
int main() {
  int n = read(), y1 = read();
  for (int i = 1; i <= n; i++) a[i] = read();
  int m = read(), y2 = read();
  for (int i = 1; i <= m; i++) b[i] = read();
  long long d = 1;
  for (int i = 1; i <= n; i++) {
    for (long long j = 1; (1 << j) <= 1e9; j++) A[j][a[i] % ((1 << j) * d)]++;
  }
  for (int i = 1; i <= m; i++) {
    for (long long j = 1; (1 << j) <= 1e9; j++) B[j][b[i] % ((1 << j) * d)]++;
  }
  long long ans = 2;
  for (int i = 1; i <= n; i++) {
    for (long long j = 1; (1 << j) <= 1e9; j++) {
      long long p = (1 << j) * d;
      ans = max(ans, A[j][a[i] % p] + B[j][(a[i] + p / 2) % p]);
    }
  }
  for (int i = 1; i <= m; i++) {
    for (long long j = 1; (1 << j) <= 1e9; j++) {
      long long p = (1 << j) * d;
      ans = max(ans, B[j][b[i] % p] + A[j][(b[i] + p / 2) % p]);
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

22 369666
1 9 17 25 33 41 49 57 65 73 81 89 97 105 113 121 129 137 145 153 161 169
16 492689
5 9 13 17 21 25 29 33 37 41 45 49 53 57 61 65


(G.2) Fast Input

1 1
1
1 5
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int SZ = 200010; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1e9 + 10; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = 1e-8; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long read() { /* line 7 slow_hit_count: 42, fast_hit_count: 6 */
  long long n = 0; /* line 8 slow_hit_count: 42, fast_hit_count: 6 */
  char a = getchar(); /* line 9 slow_hit_count: 42, fast_hit_count: 6 */
  bool flag = 0; /* line 10 slow_hit_count: 42, fast_hit_count: 6 */
  while (a > '9' || a < '0') { /* line 11 slow_hit_count: 42, fast_hit_count: 6 */
    if (a == '-') flag = 1; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    a = getchar(); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  while (a <= '9' && a >= '0') { /* line 15 slow_hit_count: 139, fast_hit_count: 12 */
    n = n * 10 + a - '0', a = getchar(); /* line 16 slow_hit_count: 97, fast_hit_count: 6 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag) n = -n; /* line 18 slow_hit_count: 42, fast_hit_count: 6 */
  return n; /* line 19 slow_hit_count: 42, fast_hit_count: 6 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, a[SZ], b[SZ]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<long long, long long> A[33], B[33]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int n = read(), y1 = read(); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) a[i] = read(); /* line 25 slow_hit_count: 23, fast_hit_count: 2 */
  int m = read(), y2 = read(); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) b[i] = read(); /* line 27 slow_hit_count: 17, fast_hit_count: 2 */
  long long d = 1; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 29 slow_hit_count: 23, fast_hit_count: 2 */
    for (long long j = 1; (1 << j) <= 1e9; j++) A[j][a[i] % ((1 << j) * d)]++; /* line 30 slow_hit_count: 660, fast_hit_count: 30 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= m; i++) { /* line 32 slow_hit_count: 17, fast_hit_count: 2 */
    for (long long j = 1; (1 << j) <= 1e9; j++) B[j][b[i] % ((1 << j) * d)]++; /* line 33 slow_hit_count: 480, fast_hit_count: 30 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 2; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 36 slow_hit_count: 23, fast_hit_count: 2 */
    for (long long j = 1; (1 << j) <= 1e9; j++) { /* line 37 slow_hit_count: 660, fast_hit_count: 30 */
      long long p = (1 << j) * d; /* line 38 slow_hit_count: 638, fast_hit_count: 29 */
      ans = max(ans, A[j][a[i] % p] + B[j][(a[i] + p / 2) % p]); /* line 39 slow_hit_count: 638, fast_hit_count: 29 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= m; i++) { /* line 42 slow_hit_count: 17, fast_hit_count: 2 */
    for (long long j = 1; (1 << j) <= 1e9; j++) { /* line 43 slow_hit_count: 480, fast_hit_count: 30 */
      long long p = (1 << j) * d; /* line 44 slow_hit_count: 464, fast_hit_count: 29 */
      ans = max(ans, B[j][b[i] % p] + A[j][(b[i] + p / 2) % p]); /* line 45 slow_hit_count: 464, fast_hit_count: 29 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program and derive performance-characterizing invariants, let's break down the tasks as follows:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The slow input has significantly higher hit counts on specific lines compared to the fast input. Notably, lines 30, 33, 37, 39, 43, and 45 have drastically more hits during the slow run.

2. **Pinpointing Inefficient Code:**
   - **Line 30 and Line 33:** These lines involve nested loops where `j` iterates over powers of 2, leading to operations with unordered maps `A[j]` and `B[j]`. The modulo operation and increment are performed for each sensor point, which scales with the size of the input arrays `a` and `b`.
   - **Line 37 and Line 43:** These lines execute nested loops similar to lines 30 and 33, but they're within another loop iterating over all sensors, thus compounding the number of operations.
   - **Line 39 and Line 45:** These lines involve calculating the maximum of the sum of certain mapped values. This operation is repeated many times due to the nested loops.

3. **Inference on Interaction with Data Structures:**
   - The critical observation is that nested loops with power-of-2 iterations lead to excessive operations on the arrays `A` and `B`. Due to the constraints and structure, the problem lies in the high number of modulo operations and hash map accesses, which scale poorly as `n` and `m` increase.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, let's derive the performance-characterizing invariants:

1. **Invariant Related to Array Sizes and Nested Loops:**
   - **Natural Language Description:** "When the number of sensors on each line (`n` and `m`) is large, and the program repeatedly calculates modulo operations within nested loops, performance degrades significantly. This is exacerbated by high iteration counts over powers of 2."
   
2. **Invariant Related to Hash Map Operations:**
   - **Natural Language Description:** "If the size of the sensor arrays is large, leading to a high number of accesses and modifications to hash maps `A` and `B` within nested loops, this can slow down the execution considerably, especially when the modulo operations create many hash map entries."

3. **Invariant Related to Iterative Maximum Calculation:**
   - **Natural Language Description:** "When there are many sensors, the computation of the maximum number of registered sensors through nested loops and hash map lookups becomes computationally expensive, particularly if each sensor configuration involves multiple hash map accesses for maximum calculation."

These invariants focus on structural aspects of the problem, such as nested loop complexities and frequent hash map operations, which are the primary drivers of slow performance. They help identify scenarios where the algorithm's complexity can lead to significant slowdowns given the constraints and input patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a tube which is reflective inside represented as two non-coinciding, but parallel to Ox lines. Each line has some special integer points — positions of sensors on sides of the tube.

You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively (coordinates can be negative): the point A is responsible for the position of the laser, and the point B — for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.

<image> Examples of laser rays. Note that image contains two examples. The 3 sensors (denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red.

Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.

Input

The first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.

The third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. 

The fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.

Output

Print the only integer — the maximum number of sensors which can register the ray.

Example

Input

3 1
1 5 6
1 3
3


Output

3

Note

One of the solutions illustrated on the image by pair A_2 and B_2.

Solution (C++ code):
{solution}


assistant: Let's start with Phase 3, where we'll translate the natural language invariants into C++ runtime checker code.

### Phase 3: Implementing Invariants as C++ Code

**Invariant 1:** "When the number of sensors on each line (`n` and `m`) is large, and the program repeatedly calculates modulo operations within nested loops, performance degrades significantly."

```cpp
void check_nested_loops_invariant(int n, int m) {
    if (n > 10000 && m > 10000) { // Arbitrary threshold chosen within the constraints
        cerr << "Warning: Performance bottleneck due to large sensor arrays n and m in nested loops!" << endl;
        abort();
    }
}
```

**Invariant 2:** "If the size of the sensor arrays is large, leading to a high number of accesses and modifications to hash maps `A` and `B` within nested loops, this can slow down the execution considerably."

```cpp
void check_hash_map_access_invariant(int n, int m) {
    if ((n * m) > 100000000) { // Choose a threshold representative of excessive hash map operations
        cerr << "Warning: Performance bottleneck due to excessive hash map operations for large n and m!" << endl;
        abort();
    }
}
```

**Invariant 3:** "When there are many sensors, the computation of the maximum number of registered sensors through nested loops and hash map lookups becomes computationally expensive."

```cpp
void check_max_calculation_invariant(int n, int m) {
    if ((n + m) > 150000) { // Threshold based on potential computational cost
        cerr << "Warning: Performance bottleneck due to expensive max calculation with large n and m!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, we will integrate these checker functions into the original C++ code. We need to carefully place the checks after reading the input data to avoid adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int SZ = 200010;
const int INF = 1e9 + 10;
const int mod = 1e9 + 7;
const long double eps = 1e-8;

long long read() {
    long long n = 0;
    char a = getchar();
    bool flag = 0;
    while (a > '9' || a < '0') {
        if (a == '-') flag = 1;
        a = getchar();
    }
    while (a <= '9' && a >= '0') {
        n = n * 10 + a - '0', a = getchar();
    }
    if (flag) n = -n;
    return n;
}

void check_nested_loops_invariant(int n, int m) {
    if (n > 10000 && m > 10000) { // Arbitrary threshold chosen within the constraints
        cerr << "Warning: Performance bottleneck due to large sensor arrays n and m in nested loops!" << endl;
        abort();
    }
}

void check_hash_map_access_invariant(int n, int m) {
    if ((n * m) > 100000000) { // Choose a threshold representative of excessive hash map operations
        cerr << "Warning: Performance bottleneck due to excessive hash map operations for large n and m!" << endl;
        abort();
    }
}

void check_max_calculation_invariant(int n, int m) {
    if ((n + m) > 150000) { // Threshold based on potential computational cost
        cerr << "Warning: Performance bottleneck due to expensive max calculation with large n and m!" << endl;
        abort();
    }
}

int main() {
    int n = read(), y1 = read();
    for (int i = 1; i <= n; i++) a[i] = read();
    int m = read(), y2 = read();
    for (int i = 1; i <= m; i++) b[i] = read();
    
    // Insert invariant checks after reading inputs
    check_nested_loops_invariant(n, m);
    check_hash_map_access_invariant(n, m);
    check_max_calculation_invariant(n, m);

    long long d = 1;
    for (int i = 1; i <= n; i++) {
        for (long long j = 1; (1 << j) <= 1e9; j++) A[j][a[i] % ((1 << j) * d)]++;
    }
    for (int i = 1; i <= m; i++) {
        for (long long j = 1; (1 << j) <= 1e9; j++) B[j][b[i] % ((1 << j) * d)]++;
    }
    long long ans = 2;
    for (int i = 1; i <= n; i++) {
        for (long long j = 1; (1 << j) <= 1e9; j++) {
            long long p = (1 << j) * d;
            ans = max(ans, A[j][a[i] % p] + B[j][(a[i] + p / 2) % p]);
        }
    }
    for (int i = 1; i <= m; i++) {
        for (long long j = 1; (1 << j) <= 1e9; j++) {
            long long p = (1 << j) * d;
            ans = max(ans, B[j][b[i] % p] + A[j][(b[i] + p / 2) % p]);
        }
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **Position of Checks:** The checker functions are placed immediately after reading the input values to ensure they execute only once and not within performance-critical loops.
- **Thresholds:** Arbitrary thresholds are chosen based on the problem constraints and inferred performance impacts to best capture potential bottlenecks in various scenarios without relying on specific input values.

