system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a tube which is reflective inside represented as two non-coinciding, but parallel to Ox lines. Each line has some special integer points — positions of sensors on sides of the tube.

You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively (coordinates can be negative): the point A is responsible for the position of the laser, and the point B — for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.

<image> Examples of laser rays. Note that image contains two examples. The 3 sensors (denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red.

Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.

Input

The first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.

The third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. 

The fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.

Output

Print the only integer — the maximum number of sensors which can register the ray.

Example

Input

3 1
1 5 6
1 3
3


Output

3

Note

One of the solutions illustrated on the image by pair A_2 and B_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
inline int read() {
  int Res = 0, f = 1;
  char ch = getchar();
  while (ch > '9' || ch < '0') f = (ch == '-' ? -f : f), ch = getchar();
  while (ch >= '0' && ch <= '9') Res = Res * 10 + ch - '0', ch = getchar();
  return Res * f;
}
int Ans = -2e9, N, M, H;
int Na[20][524290], Nb[20][524290];
long long L, A[150005], B[150005];
map<long long, bool> visA, visB;
int main() {
  N = read();
  H = read();
  for (int i = 1; i <= N; i++) A[i] = read(), visA[A[i]] = 1;
  M = read();
  H = read();
  for (int i = 1; i <= M; i++) {
    B[i] = read(), visB[B[i]] = 1;
    if (visA[B[i]]) Ans = 2;
  }
  sort(A + 1, A + 1 + N);
  sort(B + 1, B + 1 + M);
  L = max(B[M] - A[1], max(A[N] - B[1], max(A[N] - A[1], B[M] - B[1])));
  for (int i = 1; i <= N; i++) {
    for (long long j = 2, p = 1; j <= 2 * L && p <= 18; j <<= 1, p++)
      Na[p][A[i] % j]++;
  }
  for (int i = 1; i <= M; i++) {
    for (long long j = 2, p = 1; j <= 2 * L && p <= 18; j <<= 1, p++)
      Nb[p][B[i] % j]++;
  }
  for (int i = 1; i <= N; i++) {
    for (long long j = 2, p = 1; j <= 2 * L; j <<= 1, p++) {
      if (p <= 18)
        Ans = max(Ans, Na[p][A[i] % j] + Nb[p][(A[i] + (j >> 1)) % j]);
      else {
        int Res = 1;
        if (L / (j >> 1) < Ans) break;
        for (long long k = A[i] + (j >> 1), s = 1; k <= max(B[M], A[N]);
             k += (j >> 1), s ^= 1)
          if (s)
            Res += visB[k];
          else
            Res += visA[k];
        Ans = max(Ans, Res);
      }
    }
  }
  for (int i = 1; i <= M; i++) {
    for (long long j = 2, p = 1; j <= 2 * L; j <<= 1, p++) {
      if (p <= 18)
        Ans = max(Ans, Nb[p][B[i] % j] + Na[p][(B[i] + (j >> 1)) % j]);
      else {
        int Res = 1;
        if (L / (j >> 1) < Ans) break;
        for (long long k = B[i] + (j >> 1), s = 0; k <= max(B[M], A[N]);
             k += (j >> 1), s ^= 1)
          if (s)
            Res += visB[k];
          else
            Res += visA[k];
        Ans = max(Ans, Res);
      }
    }
  }
  printf("%d\n", Ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 999999999
999999996 999999997 999999998 1797296095 1000000000
5 1000000000
999999996 999999997 999999998 999999999 1000000000


(G.2) Fast Input

5 999999999
999999996 999999997 999999998 999999999 1000000000
5 1000000000
999999996 999999997 999999998 999999999 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
inline int read() { /* line 3 slow_hit_count: 14, fast_hit_count: 14 */
  int Res = 0, f = 1; /* line 4 slow_hit_count: 14, fast_hit_count: 14 */
  char ch = getchar(); /* line 5 slow_hit_count: 14, fast_hit_count: 14 */
  while (ch > '9' || ch < '0') f = (ch == '-' ? -f : f), ch = getchar(); /* line 6 slow_hit_count: 14, fast_hit_count: 14 */
  while (ch >= '0' && ch <= '9') Res = Res * 10 + ch - '0', ch = getchar(); /* line 7 slow_hit_count: 128, fast_hit_count: 127 */
  return Res * f; /* line 8 slow_hit_count: 14, fast_hit_count: 14 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int Ans = -2e9, N, M, H; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int Na[20][524290], Nb[20][524290]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long L, A[150005], B[150005]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, bool> visA, visB; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  N = read(); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  H = read(); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; i++) A[i] = read(), visA[A[i]] = 1; /* line 17 slow_hit_count: 6, fast_hit_count: 6 */
  M = read(); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  H = read(); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= M; i++) { /* line 20 slow_hit_count: 6, fast_hit_count: 6 */
    B[i] = read(), visB[B[i]] = 1; /* line 21 slow_hit_count: 5, fast_hit_count: 5 */
    if (visA[B[i]]) Ans = 2; /* line 22 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  sort(A + 1, A + 1 + N); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  sort(B + 1, B + 1 + M); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  L = max(B[M] - A[1], max(A[N] - B[1], max(A[N] - A[1], B[M] - B[1]))); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; i++) { /* line 27 slow_hit_count: 6, fast_hit_count: 6 */
    for (long long j = 2, p = 1; j <= 2 * L && p <= 18; j <<= 1, p++) /* line 28 slow_hit_count: 95, fast_hit_count: 20 */
      Na[p][A[i] % j]++; /* line 29 slow_hit_count: 90, fast_hit_count: 15 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= M; i++) { /* line 31 slow_hit_count: 6, fast_hit_count: 6 */
    for (long long j = 2, p = 1; j <= 2 * L && p <= 18; j <<= 1, p++) /* line 32 slow_hit_count: 95, fast_hit_count: 20 */
      Nb[p][B[i] % j]++; /* line 33 slow_hit_count: 90, fast_hit_count: 15 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= N; i++) { /* line 35 slow_hit_count: 6, fast_hit_count: 6 */
    for (long long j = 2, p = 1; j <= 2 * L; j <<= 1, p++) { /* line 36 slow_hit_count: 145, fast_hit_count: 20 */
      if (p <= 18) /* line 37 slow_hit_count: 145, fast_hit_count: 15 */
        Ans = max(Ans, Na[p][A[i] % j] + Nb[p][(A[i] + (j >> 1)) % j]); /* line 38 slow_hit_count: 90, fast_hit_count: 15 */
      else { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
        int Res = 1; /* line 40 slow_hit_count: 55, fast_hit_count: 0 */
        if (L / (j >> 1) < Ans) break; /* line 41 slow_hit_count: 55, fast_hit_count: 0 */
        for (long long k = A[i] + (j >> 1), s = 1; k <= max(B[M], A[N]); /* line 42 slow_hit_count: 24338, fast_hit_count: 0 */
             k += (j >> 1), s ^= 1) /* line 43 slow_hit_count: 24288, fast_hit_count: 0 */
          if (s) /* line 44 slow_hit_count: 24288, fast_hit_count: 0 */
            Res += visB[k]; /* line 45 slow_hit_count: 12156, fast_hit_count: 0 */
          else /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
            Res += visA[k]; /* line 47 slow_hit_count: 12132, fast_hit_count: 0 */
        Ans = max(Ans, Res); /* line 48 slow_hit_count: 50, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= M; i++) { /* line 52 slow_hit_count: 6, fast_hit_count: 6 */
    for (long long j = 2, p = 1; j <= 2 * L; j <<= 1, p++) { /* line 53 slow_hit_count: 145, fast_hit_count: 20 */
      if (p <= 18) /* line 54 slow_hit_count: 145, fast_hit_count: 15 */
        Ans = max(Ans, Nb[p][B[i] % j] + Na[p][(B[i] + (j >> 1)) % j]); /* line 55 slow_hit_count: 90, fast_hit_count: 15 */
      else { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        int Res = 1; /* line 57 slow_hit_count: 55, fast_hit_count: 0 */
        if (L / (j >> 1) < Ans) break; /* line 58 slow_hit_count: 55, fast_hit_count: 0 */
        for (long long k = B[i] + (j >> 1), s = 0; k <= max(B[M], A[N]); /* line 59 slow_hit_count: 30410, fast_hit_count: 0 */
             k += (j >> 1), s ^= 1) /* line 60 slow_hit_count: 30360, fast_hit_count: 0 */
          if (s) /* line 61 slow_hit_count: 30360, fast_hit_count: 0 */
            Res += visB[k]; /* line 62 slow_hit_count: 15165, fast_hit_count: 0 */
          else /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
            Res += visA[k]; /* line 64 slow_hit_count: 15195, fast_hit_count: 0 */
        Ans = max(Ans, Res); /* line 65 slow_hit_count: 50, fast_hit_count: 0 */
      } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", Ans); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit counts for both the fast and slow inputs, the following observations can be made:

1. **Lines with High Discrepancy in Hit Counts:**
   - Lines 42 to 48 and lines 59 to 65 have a significantly higher hit count for the slow input compared to the fast input.
   - These lines are part of the loops that handle potential ray paths and check each possible sensor hit.

2. **Nature of the Inefficient Segments:**
   - The loops in these lines iterate over potential sensor hits using a step size `(j >> 1)`, which increases exponentially with each outer loop iteration.
   - The number of operations within these loops is substantial due to the repeated checks against the existence of sensors in `visA` and `visB`.

3. **Interaction with Data Structures:**
   - The use of `map<long long, bool>` for `visA` and `visB` suggests a costly lookup operation for each potential sensor position.
   - The loops appear to evaluate each sensor along a projected path, causing a high number of checks when the path length (or the value of `L`) is large.

4. **Constraints Impact:**
   - Given `n` and `m` can be as large as 100,000, and sensor positions can be up to 1 billion, the difference between sensors (`L`) can be quite large, impacting the iteration count of nested loops.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: Large `L` with High Hit Count Loops**
   - Natural language description: "If the maximum distance `L` between any sensors on opposite lines is large, the nested looping over potential paths can cause excessive operations, leading to slow execution."
   - Explanation: Higher distance `L` results in more iterations in the nested loops (lines 42-48 and 59-65), especially when combined with the potential paths' exponential growth, causing performance degradation.

2. **Invariant: High Sensor Density Leading to Repeated Checks**
   - Natural language description: "When sensors on both lines are dense or close together, the probability of hitting multiple sensors increases, causing the nested loops to execute more frequently than necessary, slowing down the program."
   - Explanation: When sensor positions `A[i]` and `B[i]` are close, the ray might hit many sensors in quick succession, causing excessive checking in the loops.

3. **Invariant: Repeated Sensor Checks in Large Path Range**
   - Natural language description: "If the range of potential sensor positions that the ray can hit (defined by `L` and the number of sensors) is broad, the program may slow as it repeatedly checks for sensor presence along each potential path."
   - Explanation: A large range of potential positions increases the path length, leading to repeated sensor presence checks and thus slowing the execution substantially.

### Summary of Performance Triggers

- The program slows down significantly when the geometric configuration of sensors results in large values for `L`, causing extensive nested loop iterations.
- High sensor densities or close proximity of sensors on each line can exacerbate the issue by increasing the number of potential hits that need to be verified.
- The use of maps for sensor presence checking, although providing constant time complexity on average, leads to high overhead when combined with extensive iterations in the loops.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a tube which is reflective inside represented as two non-coinciding, but parallel to Ox lines. Each line has some special integer points — positions of sensors on sides of the tube.

You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively (coordinates can be negative): the point A is responsible for the position of the laser, and the point B — for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.

<image> Examples of laser rays. Note that image contains two examples. The 3 sensors (denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red.

Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.

Input

The first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.

The third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. 

The fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.

Output

Print the only integer — the maximum number of sensors which can register the ray.

Example

Input

3 1
1 5 6
1 3
3


Output

3

Note

One of the solutions illustrated on the image by pair A_2 and B_2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

To implement the performance-characterizing invariants in C++, we need to create checker functions that will detect when the program might enter a slow path based on the previously identified conditions.

Here are the checker functions for each invariant:

1. **Invariant: Large `L` with High Hit Count Loops**
   ```cpp
   void check_large_L_invariant(long long L, int threshold) {
       if (L > threshold) {
           cerr << "Warning: Large L detected, potentially causing excessive loop iterations!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: High Sensor Density Leading to Repeated Checks**
   ```cpp
   void check_sensor_density_invariant(int n, int m, int threshold) {
       if ((n > threshold) && (m > threshold)) {
           cerr << "Warning: High sensor density detected, potentially causing repeated checks!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Repeated Sensor Checks in Large Path Range**
   ```cpp
   void check_sensor_checks_invariant(long long L, int n, int m, long long sensorRangeThreshold) {
       if (L * n * m > sensorRangeThreshold) {
           cerr << "Warning: Large range of potential sensor checks detected!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Functions into the C++ Program

Now, we'll integrate these checker functions into the existing program, placing the checks in appropriate locations without adding overhead in tight loops.

Here is the instrumented C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for large L causing excessive loop iterations
void check_large_L_invariant(long long L, int threshold) {
    if (L > threshold) {
        cerr << "Warning: Large L detected, potentially causing excessive loop iterations!" << endl;
        abort();
    }
}

// Checker function for high sensor density
void check_sensor_density_invariant(int n, int m, int threshold) {
    if ((n > threshold) && (m > threshold)) {
        cerr << "Warning: High sensor density detected, potentially causing repeated checks!" << endl;
        abort();
    }
}

// Checker function for large range of potential sensor checks
void check_sensor_checks_invariant(long long L, int n, int m, long long sensorRangeThreshold) {
    if (L * n * m > sensorRangeThreshold) {
        cerr << "Warning: Large range of potential sensor checks detected!" << endl;
        abort();
    }
}

inline int read() {
    int Res = 0, f = 1;
    char ch = getchar();
    while (ch > '9' || ch < '0') f = (ch == '-' ? -f : f), ch = getchar();
    while (ch >= '0' && ch <= '9') Res = Res * 10 + ch - '0', ch = getchar();
    return Res * f;
}

int Ans = -2e9, N, M, H;
int Na[20][524290], Nb[20][524290];
long long L, A[150005], B[150005];
map<long long, bool> visA, visB;

int main() {
    N = read();
    H = read();
    for (int i = 1; i <= N; i++) A[i] = read(), visA[A[i]] = 1;
    M = read();
    H = read();
    for (int i = 1; i <= M; i++) {
        B[i] = read(), visB[B[i]] = 1;
        if (visA[B[i]]) Ans = 2;
    }
    sort(A + 1, A + 1 + N);
    sort(B + 1, B + 1 + M);
    L = max(B[M] - A[1], max(A[N] - B[1], max(A[N] - A[1], B[M] - B[1])));

    // Insert checkers after computing L, before entering nested loops
    check_large_L_invariant(L, 1000000); // Example threshold
    check_sensor_density_invariant(N, M, 10000); // Example threshold
    check_sensor_checks_invariant(L, N, M, 1000000000); // Example threshold

    for (int i = 1; i <= N; i++) {
        for (long long j = 2, p = 1; j <= 2 * L && p <= 18; j <<= 1, p++)
            Na[p][A[i] % j]++;
    }
    for (int i = 1; i <= M; i++) {
        for (long long j = 2, p = 1; j <= 2 * L && p <= 18; j <<= 1, p++)
            Nb[p][B[i] % j]++;
    }
    for (int i = 1; i <= N; i++) {
        for (long long j = 2, p = 1; j <= 2 * L; j <<= 1, p++) {
            if (p <= 18)
                Ans = max(Ans, Na[p][A[i] % j] + Nb[p][(A[i] + (j >> 1)) % j]);
            else {
                int Res = 1;
                if (L / (j >> 1) < Ans) break;
                for (long long k = A[i] + (j >> 1), s = 1; k <= max(B[M], A[N]);
                     k += (j >> 1), s ^= 1)
                    if (s)
                        Res += visB[k];
                    else
                        Res += visA[k];
                Ans = max(Ans, Res);
            }
        }
    }
    for (int i = 1; i <= M; i++) {
        for (long long j = 2, p = 1; j <= 2 * L; j <<= 1, p++) {
            if (p <= 18)
                Ans = max(Ans, Nb[p][B[i] % j] + Na[p][(B[i] + (j >> 1)) % j]);
            else {
                int Res = 1;
                if (L / (j >> 1) < Ans) break;
                for (long long k = B[i] + (j >> 1), s = 0; k <= max(B[M], A[N]);
                     k += (j >> 1), s ^= 1)
                    if (s)
                        Res += visB[k];
                    else
                        Res += visA[k];
                Ans = max(Ans, Res);
            }
        }
    }
    printf("%d\n", Ans);
    return 0;
}
```

### Explanation of Integration

- **Check for Large L**: This check is placed after computing `L` to ensure it doesn't lead to excessive iterations in the nested loops.
  
- **Check for High Sensor Density**: This check ensures both sensors on parallel lines do not have a high density, which can cause repeated operations.
  
- **Check for Large Range of Sensor Checks**: This check ensures that the computation of potential sensor hits does not exceed a feasible range, which can lead to performance issues.

These checks are not in the tight loops to prevent additional performance overhead. They are strategically placed right after the computation of critical parameters.

