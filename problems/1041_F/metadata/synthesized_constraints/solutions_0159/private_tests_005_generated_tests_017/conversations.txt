system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a tube which is reflective inside represented as two non-coinciding, but parallel to Ox lines. Each line has some special integer points — positions of sensors on sides of the tube.

You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively (coordinates can be negative): the point A is responsible for the position of the laser, and the point B — for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.

<image> Examples of laser rays. Note that image contains two examples. The 3 sensors (denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red.

Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.

Input

The first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.

The third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. 

The fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.

Output

Print the only integer — the maximum number of sensors which can register the ray.

Example

Input

3 1
1 5 6
1 3
3


Output

3

Note

One of the solutions illustrated on the image by pair A_2 and B_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
template <class T, class U>
ostream& operator<<(ostream& o, const pair<T, U>& p) {
  o << "(" << p.first << "," << p.second << ")";
  return o;
}
template <class T>
ostream& operator<<(ostream& o, const vector<T>& v) {
  o << "[";
  for (T t : v) {
    o << t << ",";
  }
  o << "]";
  return o;
}
using pi = pair<int, int>;
int main() {
  int yyyy;
  int n;
  scanf(" %d %d", &n, &yyyy);
  vector<int> a(n);
  for (int(i) = 0; (i) < (int)(n); ++(i)) scanf(" %d", &a[i]);
  int m;
  scanf(" %d %d", &m, &yyyy);
  vector<int> b(m);
  for (int(i) = 0; (i) < (int)(m); ++(i)) scanf(" %d", &b[i]);
  vector<pi> v;
  for (int(i) = 0; (i) < (int)(n); ++(i)) v.push_back({a[i], i});
  for (int(i) = 0; (i) < (int)(m); ++(i)) v.push_back({b[i], n + i});
  sort((v).begin(), (v).end());
  int V = v.size();
  unordered_map<int, int> IDA, IDB;
  for (int(i) = 0; (i) < (int)(n); ++(i)) IDA[a[i]] = i;
  for (int(i) = 0; (i) < (int)(m); ++(i)) IDB[b[i]] = n + i;
  int ans = 2;
  for (int d = 1; d < (1 << 30); d *= 2) {
    int mod = 2 * d;
    unordered_map<int, int> mod2id;
    int ct = 0;
    for (int(i) = 0; (i) < (int)(n); ++(i))
      if (!mod2id.count(a[i] % mod)) {
        mod2id[a[i] % mod] = ct;
        ++ct;
      }
    for (int(i) = 0; (i) < (int)(m); ++(i))
      if (!mod2id.count(b[i] % mod)) {
        mod2id[b[i] % mod] = ct;
        ++ct;
      }
    vector<vector<int>> aa(ct), bb(ct);
    for (int(i) = 0; (i) < (int)(n); ++(i))
      aa[mod2id[a[i] % mod]].push_back(a[i]);
    for (int(i) = 0; (i) < (int)(m); ++(i))
      bb[mod2id[b[i] % mod]].push_back(b[i]);
    vector<int> dp(V, 1);
    for (int(i) = 0; (i) < (int)(V); ++(i)) {
      int idx = v[i].second;
      if (idx < n) {
        int key = a[idx] % mod;
        key = mod2id[key];
        auto itr = upper_bound((aa[key]).begin(), (aa[key]).end(), a[idx]);
        if (itr != aa[key].end()) {
          assert(IDA.count(*itr));
          int nidx = IDA[*itr];
          dp[nidx] = max(dp[nidx], dp[idx] + 1);
        }
        key = (a[idx] + d) % mod;
        if (!mod2id.count(key)) continue;
        key = mod2id[key];
        itr = lower_bound((bb[key]).begin(), (bb[key]).end(), a[idx] + d);
        if (itr != bb[key].end()) {
          assert(IDB.count(*itr));
          int nidx = IDB[*itr];
          dp[nidx] = max(dp[nidx], dp[idx] + 1);
        }
      } else {
        int key = b[idx - n] % mod;
        key = mod2id[key];
        auto itr = upper_bound((bb[key]).begin(), (bb[key]).end(), b[idx - n]);
        if (itr != bb[key].end()) {
          assert(IDB.count(*itr));
          int nidx = IDB[*itr];
          dp[nidx] = max(dp[nidx], dp[idx] + 1);
        }
        key = (b[idx - n] + d) % mod;
        if (!mod2id.count(key)) continue;
        key = mod2id[key];
        itr = lower_bound((aa[key]).begin(), (aa[key]).end(), b[idx - n] + d);
        if (itr != aa[key].end()) {
          assert(IDA.count(*itr));
          int nidx = IDA[*itr];
          dp[nidx] = max(dp[nidx], dp[idx] + 1);
        }
      }
    }
    for (int(i) = 0; (i) < (int)(V); ++(i)) ans = max(ans, dp[i]);
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

22 369666
1 9 17 25 33 41 49 57 65 73 81 89 97 105 113 121 129 137 145 153 161 169
16 492689
5 9 13 17 21 25 29 33 37 41 45 49 53 57 61 65


(G.2) Fast Input

1 1
1
1 5
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <class T, class U> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& o, const pair<T, U>& p) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  o << "(" << p.first << "," << p.second << ")"; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  return o; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& o, const vector<T>& v) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  o << "["; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (T t : v) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    o << t << ","; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  o << "]"; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return o; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
using pi = pair<int, int>; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int yyyy; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  scanf(" %d %d", &n, &yyyy); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n); /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
  for (int(i) = 0; (i) < (int)(n); ++(i)) scanf(" %d", &a[i]); /* line 24 slow_hit_count: 23, fast_hit_count: 2 */
  int m; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  scanf(" %d %d", &m, &yyyy); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> b(m); /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  for (int(i) = 0; (i) < (int)(m); ++(i)) scanf(" %d", &b[i]); /* line 28 slow_hit_count: 17, fast_hit_count: 2 */
  vector<pi> v; /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
  for (int(i) = 0; (i) < (int)(n); ++(i)) v.push_back({a[i], i}); /* line 30 slow_hit_count: 23, fast_hit_count: 2 */
  for (int(i) = 0; (i) < (int)(m); ++(i)) v.push_back({b[i], n + i}); /* line 31 slow_hit_count: 17, fast_hit_count: 2 */
  sort((v).begin(), (v).end()); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  int V = v.size(); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  unordered_map<int, int> IDA, IDB; /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
  for (int(i) = 0; (i) < (int)(n); ++(i)) IDA[a[i]] = i; /* line 35 slow_hit_count: 23, fast_hit_count: 2 */
  for (int(i) = 0; (i) < (int)(m); ++(i)) IDB[b[i]] = n + i; /* line 36 slow_hit_count: 17, fast_hit_count: 2 */
  int ans = 2; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int d = 1; d < (1 << 30); d *= 2) { /* line 38 slow_hit_count: 31, fast_hit_count: 31 */
    int mod = 2 * d; /* line 39 slow_hit_count: 30, fast_hit_count: 30 */
    unordered_map<int, int> mod2id; /* line 40 slow_hit_count: 60, fast_hit_count: 60 */
    int ct = 0; /* line 41 slow_hit_count: 30, fast_hit_count: 30 */
    for (int(i) = 0; (i) < (int)(n); ++(i)) /* line 42 slow_hit_count: 690, fast_hit_count: 60 */
      if (!mod2id.count(a[i] % mod)) { /* line 43 slow_hit_count: 660, fast_hit_count: 30 */
        mod2id[a[i] % mod] = ct; /* line 44 slow_hit_count: 539, fast_hit_count: 30 */
        ++ct; /* line 45 slow_hit_count: 539, fast_hit_count: 30 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    for (int(i) = 0; (i) < (int)(m); ++(i)) /* line 47 slow_hit_count: 510, fast_hit_count: 60 */
      if (!mod2id.count(b[i] % mod)) { /* line 48 slow_hit_count: 480, fast_hit_count: 30 */
        mod2id[b[i] % mod] = ct; /* line 49 slow_hit_count: 207, fast_hit_count: 0 */
        ++ct; /* line 50 slow_hit_count: 207, fast_hit_count: 0 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    vector<vector<int>> aa(ct), bb(ct); /* line 52 slow_hit_count: 90, fast_hit_count: 90 */
    for (int(i) = 0; (i) < (int)(n); ++(i)) /* line 53 slow_hit_count: 690, fast_hit_count: 60 */
      aa[mod2id[a[i] % mod]].push_back(a[i]); /* line 54 slow_hit_count: 660, fast_hit_count: 30 */
    for (int(i) = 0; (i) < (int)(m); ++(i)) /* line 55 slow_hit_count: 510, fast_hit_count: 60 */
      bb[mod2id[b[i] % mod]].push_back(b[i]); /* line 56 slow_hit_count: 480, fast_hit_count: 30 */
    vector<int> dp(V, 1); /* line 57 slow_hit_count: 60, fast_hit_count: 60 */
    for (int(i) = 0; (i) < (int)(V); ++(i)) { /* line 58 slow_hit_count: 1170, fast_hit_count: 90 */
      int idx = v[i].second; /* line 59 slow_hit_count: 1140, fast_hit_count: 60 */
      if (idx < n) { /* line 60 slow_hit_count: 1140, fast_hit_count: 60 */
        int key = a[idx] % mod; /* line 61 slow_hit_count: 660, fast_hit_count: 30 */
        key = mod2id[key]; /* line 62 slow_hit_count: 660, fast_hit_count: 30 */
        auto itr = upper_bound((aa[key]).begin(), (aa[key]).end(), a[idx]); /* line 63 slow_hit_count: 660, fast_hit_count: 30 */
        if (itr != aa[key].end()) { /* line 64 slow_hit_count: 660, fast_hit_count: 30 */
          assert(IDA.count(*itr)); /* line 65 slow_hit_count: 121, fast_hit_count: 0 */
          int nidx = IDA[*itr]; /* line 66 slow_hit_count: 121, fast_hit_count: 0 */
          dp[nidx] = max(dp[nidx], dp[idx] + 1); /* line 67 slow_hit_count: 121, fast_hit_count: 0 */
        } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
        key = (a[idx] + d) % mod; /* line 69 slow_hit_count: 660, fast_hit_count: 30 */
        if (!mod2id.count(key)) continue; /* line 70 slow_hit_count: 660, fast_hit_count: 30 */
        key = mod2id[key]; /* line 71 slow_hit_count: 122, fast_hit_count: 0 */
        itr = lower_bound((bb[key]).begin(), (bb[key]).end(), a[idx] + d); /* line 72 slow_hit_count: 122, fast_hit_count: 0 */
        if (itr != bb[key].end()) { /* line 73 slow_hit_count: 122, fast_hit_count: 0 */
          assert(IDB.count(*itr)); /* line 74 slow_hit_count: 29, fast_hit_count: 0 */
          int nidx = IDB[*itr]; /* line 75 slow_hit_count: 29, fast_hit_count: 0 */
          dp[nidx] = max(dp[nidx], dp[idx] + 1); /* line 76 slow_hit_count: 29, fast_hit_count: 0 */
        } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
        int key = b[idx - n] % mod; /* line 79 slow_hit_count: 480, fast_hit_count: 30 */
        key = mod2id[key]; /* line 80 slow_hit_count: 480, fast_hit_count: 30 */
        auto itr = upper_bound((bb[key]).begin(), (bb[key]).end(), b[idx - n]); /* line 81 slow_hit_count: 480, fast_hit_count: 30 */
        if (itr != bb[key].end()) { /* line 82 slow_hit_count: 480, fast_hit_count: 30 */
          assert(IDB.count(*itr)); /* line 83 slow_hit_count: 64, fast_hit_count: 0 */
          int nidx = IDB[*itr]; /* line 84 slow_hit_count: 64, fast_hit_count: 0 */
          dp[nidx] = max(dp[nidx], dp[idx] + 1); /* line 85 slow_hit_count: 64, fast_hit_count: 0 */
        } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
        key = (b[idx - n] + d) % mod; /* line 87 slow_hit_count: 480, fast_hit_count: 30 */
        if (!mod2id.count(key)) continue; /* line 88 slow_hit_count: 480, fast_hit_count: 30 */
        key = mod2id[key]; /* line 89 slow_hit_count: 77, fast_hit_count: 0 */
        itr = lower_bound((aa[key]).begin(), (aa[key]).end(), b[idx - n] + d); /* line 90 slow_hit_count: 77, fast_hit_count: 0 */
        if (itr != aa[key].end()) { /* line 91 slow_hit_count: 77, fast_hit_count: 0 */
          assert(IDA.count(*itr)); /* line 92 slow_hit_count: 45, fast_hit_count: 0 */
          int nidx = IDA[*itr]; /* line 93 slow_hit_count: 45, fast_hit_count: 0 */
          dp[nidx] = max(dp[nidx], dp[idx] + 1); /* line 94 slow_hit_count: 45, fast_hit_count: 0 */
        } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
    for (int(i) = 0; (i) < (int)(V); ++(i)) ans = max(ans, dp[i]); /* line 98 slow_hit_count: 1170, fast_hit_count: 90 */
  } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 102 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C code, we will follow the specified tasks, identify inefficient code segments, and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level hit count comparison:** 
   - The key sections of code with a significant difference in hit counts between the fast and slow runs are loops and data structure operations.
   - The most notable differences are observed in lines associated with the nested loop and data structure operations around modular arithmetic and dynamic programming (`dp` array updates).

2. **Pinpoint significant lines:**
   - Lines 42-45 and 47-50: These loops fill the `mod2id` map with modulo checks. The number of hits is significantly higher during the slow run, indicating that these operations are critical in managing indices for sensors.
   - Lines 58-98: The nested loop with dynamic programming updates (`dp` array) and conditional checks. This segment shows high hit counts, suggesting heavy computation related to checking and updating the sensor combinations.

3. **Inference on data structure interactions:**
   - The `mod2id` map and `dp` vector are heavily used, indicating that modulo-based indexing and dynamic programming for sensor hit maximization are central to the algorithm's performance.
   - The nested loops and conditional checks on arrays `aa` and `bb` are crucial as they determine possible sensor hit paths.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks, here are natural language invariants:

1. **Invariant on Modulo Operations and Mapping:**
   - Natural language description: "If the number of unique modulo classes (based on sensor positions) is large, the program spends significant time creating and accessing mappings for these classes, leading to slower execution."
   - This happens when there are many unique sensor positions that create distinct modulo outcomes, increasing the `mod2id` map size.

2. **Invariant on Dynamic Programming Array Updates:**
   - Natural language description: "When iterating through sensor positions, if the potential paths for maximizing registered sensors require frequent updates and checks in the dynamic programming array, performance may degrade."
   - This is exacerbated by complexity in the sensor coordinates or when the solution space for the max-sensor path is large.

3. **Invariant on Nested Loop Complexity:**
   - Natural language description: "If nested loops involve complex conditions or significant operations like `upper_bound` and `lower_bound`, performance can be impacted, especially when applied repeatedly across large datasets."
   - Such performance hits are more likely when the data structure operations increase due to larger sensor sets and complex path calculations.

### Conclusion

These invariants provide a high-level understanding of the slow paths in the code. The slow input triggers extensive modulo operations, dynamic programming updates, and complex loop processing due to diverse sensor positions and the need for detailed path evaluations. These insights can guide optimizations by minimizing the complexity or frequency of these operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a tube which is reflective inside represented as two non-coinciding, but parallel to Ox lines. Each line has some special integer points — positions of sensors on sides of the tube.

You are going to emit a laser ray in the tube. To do so, you have to choose two integer points A and B on the first and the second line respectively (coordinates can be negative): the point A is responsible for the position of the laser, and the point B — for the direction of the laser ray. The laser ray is a ray starting at A and directed at B which will reflect from the sides of the tube (it doesn't matter if there are any sensors at a reflection point or not). A sensor will only register the ray if the ray hits exactly at the position of the sensor.

<image> Examples of laser rays. Note that image contains two examples. The 3 sensors (denoted by black bold points on the tube sides) will register the blue ray but only 2 will register the red.

Calculate the maximum number of sensors which can register your ray if you choose points A and B on the first and the second lines respectively.

Input

The first line contains two integers n and y_1 (1 ≤ n ≤ 10^5, 0 ≤ y_1 ≤ 10^9) — number of sensors on the first line and its y coordinate.

The second line contains n integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — x coordinates of the sensors on the first line in the ascending order.

The third line contains two integers m and y_2 (1 ≤ m ≤ 10^5, y_1 < y_2 ≤ 10^9) — number of sensors on the second line and its y coordinate. 

The fourth line contains m integers b_1, b_2, …, b_m (0 ≤ b_i ≤ 10^9) — x coordinates of the sensors on the second line in the ascending order.

Output

Print the only integer — the maximum number of sensors which can register the ray.

Example

Input

3 1
1 5 6
1 3
3


Output

3

Note

One of the solutions illustrated on the image by pair A_2 and B_2.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we'll translate the natural language invariants derived earlier into C++ checker code snippets.

### Phase 3: Implementing Checker Code in C++

**Invariant 1: Modulo Mapping Complexity**

This invariant warns when the number of unique modulo classes becomes excessively high, which can slow down the program's performance.

```cpp
void check_modulo_classes_invariant(int uniqueModuloClasses, int threshold) {
    if (uniqueModuloClasses > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many unique modulo classes!" << endl;
        abort();
    }
}
```

**Invariant 2: Dynamic Programming Array Update Complexity**

This invariant triggers when the number of updates to the dynamic programming array is large, indicating potential performance issues.

```cpp
void check_dp_updates_invariant(int dpUpdates, int maxUpdates) {
    if (dpUpdates > maxUpdates) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive dynamic programming updates!" << endl;
        abort();
    }
}
```

**Invariant 3: Nested Loop Complexity**

This invariant checks for excessive operations in nested loops, which could lead to degraded performance.

```cpp
void check_nested_loop_invariant(int operationsCount, int maxOperations) {
    if (operationsCount > maxOperations) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive operations in nested loops!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Code

Now, let's integrate the above checkers into the provided C++ program at appropriate points to effectively monitor potential bottlenecks without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using pi = pair<int, int>;

void check_modulo_classes_invariant(int uniqueModuloClasses, int threshold) {
    if (uniqueModuloClasses > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many unique modulo classes!" << endl;
        abort();
    }
}

void check_dp_updates_invariant(int dpUpdates, int maxUpdates) {
    if (dpUpdates > maxUpdates) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive dynamic programming updates!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int operationsCount, int maxOperations) {
    if (operationsCount > maxOperations) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive operations in nested loops!" << endl;
        abort();
    }
}

int main() {
    int yyyy;
    int n;
    scanf(" %d %d", &n, &yyyy);
    vector<int> a(n);
    for (int(i) = 0; (i) < (int)(n); ++(i)) scanf(" %d", &a[i]);
    int m;
    scanf(" %d %d", &m, &yyyy);
    vector<int> b(m);
    for (int(i) = 0; (i) < (int)(m); ++(i)) scanf(" %d", &b[i]);

    vector<pi> v;
    for (int(i) = 0; (i) < (int)(n); ++(i)) v.push_back({a[i], i});
    for (int(i) = 0; (i) < (int)(m); ++(i)) v.push_back({b[i], n + i});
    sort((v).begin(), (v).end());
    int V = v.size();
    unordered_map<int, int> IDA, IDB;
    for (int(i) = 0; (i) < (int)(n); ++(i)) IDA[a[i]] = i;
    for (int(i) = 0; (i) < (int)(m); ++(i)) IDB[b[i]] = n + i;
    int ans = 2;

    int maxModuloClasses = 1000; // Example threshold for modulo classes
    int maxDpUpdates = 50000; // Example threshold for DP updates
    int maxOperations = 100000; // Example threshold for nested loop operations

    for (int d = 1; d < (1 << 30); d *= 2) {
        int mod = 2 * d;
        unordered_map<int, int> mod2id;
        int ct = 0;

        for (int(i) = 0; (i) < (int)(n); ++(i))
            if (!mod2id.count(a[i] % mod)) {
                mod2id[a[i] % mod] = ct;
                ++ct;
            }
        for (int(i) = 0; (i) < (int)(m); ++(i))
            if (!mod2id.count(b[i] % mod)) {
                mod2id[b[i] % mod] = ct;
                ++ct;
            }

        // Check for excessive unique modulo classes
        check_modulo_classes_invariant(ct, maxModuloClasses);

        vector<vector<int>> aa(ct), bb(ct);
        for (int(i) = 0; (i) < (int)(n); ++(i))
            aa[mod2id[a[i] % mod]].push_back(a[i]);
        for (int(i) = 0; (i) < (int)(m); ++(i))
            bb[mod2id[b[i] % mod]].push_back(b[i]);

        vector<int> dp(V, 1);
        int dpUpdates = 0;
        int operationsCount = 0;
        for (int(i) = 0; (i) < (int)(V); ++(i)) {
            operationsCount++;
            int idx = v[i].second;
            if (idx < n) {
                int key = a[idx] % mod;
                key = mod2id[key];
                auto itr = upper_bound((aa[key]).begin(), (aa[key]).end(), a[idx]);
                if (itr != aa[key].end()) {
                    assert(IDA.count(*itr));
                    int nidx = IDA[*itr];
                    dp[nidx] = max(dp[nidx], dp[idx] + 1);
                    dpUpdates++;
                }
                key = (a[idx] + d) % mod;
                if (!mod2id.count(key)) continue;
                key = mod2id[key];
                itr = lower_bound((bb[key]).begin(), (bb[key]).end(), a[idx] + d);
                if (itr != bb[key].end()) {
                    assert(IDB.count(*itr));
                    int nidx = IDB[*itr];
                    dp[nidx] = max(dp[nidx], dp[idx] + 1);
                    dpUpdates++;
                }
            } else {
                int key = b[idx - n] % mod;
                key = mod2id[key];
                auto itr = upper_bound((bb[key]).begin(), (bb[key]).end(), b[idx - n]);
                if (itr != bb[key].end()) {
                    assert(IDB.count(*itr));
                    int nidx = IDB[*itr];
                    dp[nidx] = max(dp[nidx], dp[idx] + 1);
                    dpUpdates++;
                }
                key = (b[idx - n] + d) % mod;
                if (!mod2id.count(key)) continue;
                key = mod2id[key];
                itr = lower_bound((aa[key]).begin(), (aa[key]).end(), b[idx - n] + d);
                if (itr != aa[key].end()) {
                    assert(IDA.count(*itr));
                    int nidx = IDA[*itr];
                    dp[nidx] = max(dp[nidx], dp[idx] + 1);
                    dpUpdates++;
                }
            }
        }

        // Check for excessive DP updates
        check_dp_updates_invariant(dpUpdates, maxDpUpdates);
        // Check for excessive operations in nested loops
        check_nested_loop_invariant(operationsCount, maxOperations);

        for (int(i) = 0; (i) < (int)(V); ++(i)) ans = max(ans, dp[i]);
    }
    printf("%d\n", ans);
    return 0;
}
```

### Explanation

- **Modulo Classes Check:** Placed after the modulo class mapping loops to monitor the number of unique classes.
- **Dynamic Programming Updates Check:** After the main loop where `dp` updates happen, we count and check if they exceed a threshold.
- **Nested Loop Operations Check:** Monitors the total operations in the main nested loop to ensure it doesn't get out of hand. This is tracked using an `operationsCount`.

These checks help in identifying scenarios where the program's complexity may lead to performance degradation, assisting in pinpointing slow execution paths during testing or fuzzing.

