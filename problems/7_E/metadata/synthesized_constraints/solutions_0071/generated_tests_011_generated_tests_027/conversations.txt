system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Most C/C++ programmers know about excellent opportunities that preprocessor #define directives give; but many know as well about the problems that can arise because of their careless use.

In this problem we consider the following model of #define constructions (also called macros). Each macro has its name and value. The generic syntax for declaring a macro is the following:

#define macro_name macro_value

After the macro has been declared, "macro_name" is replaced with "macro_value" each time it is met in the program (only the whole tokens can be replaced; i.e. "macro_name" is replaced only when it is surrounded by spaces or other non-alphabetic symbol). A "macro_value" within our model can only be an arithmetic expression consisting of variables, four arithmetic operations, brackets, and also the names of previously declared macros (in this case replacement is performed sequentially). The process of replacing macros with their values is called substitution.

One of the main problems arising while using macros — the situation when as a result of substitution we get an arithmetic expression with the changed order of calculation because of different priorities of the operations.

Let's consider the following example. Say, we declared such a #define construction:

#define sum x + y

and further in the program the expression "2 * sum" is calculated. After macro substitution is performed we get "2 * x + y", instead of intuitively expected "2 * (x + y)".

Let's call the situation "suspicious", if after the macro substitution the order of calculation changes, falling outside the bounds of some macro. Thus, your task is to find out by the given set of #define definitions and the given expression if this expression is suspicious or not.

Let's speak more formally. We should perform an ordinary macros substitution in the given expression. Moreover, we should perform a "safe" macros substitution in the expression, putting in brackets each macro value; after this, guided by arithmetic rules of brackets expansion, we can omit some of the brackets. If there exist a way to get an expression, absolutely coinciding with the expression that is the result of an ordinary substitution (character-by-character, but ignoring spaces), then this expression and the macros system are called correct, otherwise — suspicious.

Note that we consider the "/" operation as the usual mathematical division, not the integer division like in C/C++. That's why, for example, in the expression "a*(b/c)" we can omit brackets to get the expression "a*b/c".

Input

The first line contains the only number n (0 ≤ n ≤ 100) — the amount of #define constructions in the given program.

Then there follow n lines, each of them contains just one #define construction. Each construction has the following syntax:

#define name expression

where

  * name — the macro name, 
  * expression — the expression with which the given macro will be replaced. An expression is a non-empty string, containing digits,names of variables, names of previously declared macros, round brackets and operational signs +-*/. It is guaranteed that the expression (before and after macros substitution) is a correct arithmetic expression, having no unary operations. The expression contains only non-negative integers, not exceeding 109. 



All the names (#define constructions' names and names of their arguments) are strings of case-sensitive Latin characters. It is guaranteed that the name of any variable is different from any #define construction.

Then, the last line contains an expression that you are to check. This expression is non-empty and satisfies the same limitations as the expressions in #define constructions.

The input lines may contain any number of spaces anywhere, providing these spaces do not break the word "define" or the names of constructions and variables. In particular, there can be any number of spaces before and after the "#" symbol.

The length of any line from the input file does not exceed 100 characters.

Output

Output "OK", if the expression is correct according to the above given criterion, otherwise output "Suspicious".

Examples

Input

1
#define sum x + y
1 * sum


Output

Suspicious


Input

1
#define sum  (x + y)
sum - sum


Output

OK


Input

4
#define sum  x + y
#define mul  a * b
#define div  a / b
#define expr sum + mul * div * mul
expr


Output

OK


Input

3
#define SumSafe   (a+b)
#define DivUnsafe  a/b
#define DenominatorUnsafe  a*b
((SumSafe) + DivUnsafe/DivUnsafe + x/DenominatorUnsafe)


Output

Suspicious

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:64000000")
using namespace std;
int n;
vector<string> tok[105];
string name[105];
bool term2[105], sum2[105], safe[105];
bool used[105];
map<string, int> id;
bool operation(string s) {
  return s == "+" || s == "-" || s == "*" || s == "/" || s == "(" || s == ")";
}
string expr;
int p;
string add();
string un() {
  if (expr[p] == '?') {
    p++;
    return "?";
  }
  p++;
  add();
  p++;
  return "?";
}
string mult() {
  string c = un();
  while (p < (int)expr.size() && (expr[p] == '*' || expr[p] == '/')) {
    p++;
    un();
    c = "?*?";
  }
  return c;
}
string add() {
  string c = mult();
  while (p < (int)expr.size() && (expr[p] == '+' || expr[p] == '-')) {
    p++;
    mult();
    c = "?+?";
  }
  return c;
}
void simplify(string& tmp) {
  expr = tmp;
  p = 0;
  tmp = add();
}
void calc(int i) {
  if (used[i]) return;
  used[i] = true;
  string expr;
  vector<string> sign;
  for (int j = 0; j < int(tok[i].size()); j++) {
    if (operation(tok[i][j])) {
      sign.push_back(tok[i][j]);
    }
  }
  int cur = 0;
  safe[i] = true;
  for (int j = 0; j < int(tok[i].size()); j++) {
    if (operation(tok[i][j])) {
      expr += tok[i][j];
      cur++;
      continue;
    }
    if (id.count(tok[i][j])) {
      int k = id[tok[i][j]];
      calc(k);
      if (!safe[k]) {
        safe[i] = false;
        return;
      }
      if (sum2[k]) {
        if (cur > 0 && (sign[cur - 1] == "*" || sign[cur - 1] == "/" ||
                        sign[cur - 1] == "-")) {
          safe[i] = false;
          return;
        }
        if (cur < (int)sign.size() && (sign[cur] == "*" || sign[cur] == "/")) {
          safe[i] = false;
          return;
        }
        expr += "?+?";
      } else if (term2[k]) {
        if (cur > 0 && sign[cur - 1] == "/") {
          safe[i] = false;
          return;
        }
        expr += "?*?";
      } else {
        expr += "?";
      }
    } else {
      expr += "?";
    }
  }
  simplify(expr);
  if (expr == "?+?") {
    sum2[i] = true;
  }
  if (expr == "?*?") {
    term2[i] = true;
  }
}
int main() {
  scanf("%d\n", &n);
  for (int i = 0; i < int(n + 1); i++) {
    string s;
    getline(cin, s);
    string t = "";
    for (int j = 0; j < int(s.size()); j++) {
      if (operation(s.substr(j, 1))) {
        t += ' ';
        t += s[j];
        t += ' ';
      } else {
        t += s[j];
      }
    }
    istringstream sin(t);
    if (i < n) {
      string def;
      sin >> def;
      if (def == "#") sin >> def;
      sin >> name[i];
      id[name[i]] = i;
    }
    string tmp;
    while (sin >> tmp) {
      tok[i].push_back(tmp);
    }
  }
  calc(n);
  if (safe[n]) {
    printf("OK\n");
  } else {
    printf("Suspicious\n");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4
#define sum   xx+yy
#define difference  aaab-bbaBBBB
#define mult   a*b
#define division  aaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
sum+difference+(sum)*(difference)-mult+mult*division+division*mult+division/(mult+sum-(difference))


(G.2) Fast Input

1
#define sum x*y
r-rum


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:64000000") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> tok[105]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string name[105]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool term2[105], sum2[105], safe[105]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool used[105]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
map<string, int> id; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
bool operation(string s) { /* line 10 slow_hit_count: 329, fast_hit_count: 26 */
  return s == "+" || s == "-" || s == "*" || s == "/" || s == "(" || s == ")"; /* line 11 slow_hit_count: 329, fast_hit_count: 26 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
string expr; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int p; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
string add(); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
string un() { /* line 16 slow_hit_count: 38, fast_hit_count: 2 */
  if (expr[p] == '?') { /* line 17 slow_hit_count: 38, fast_hit_count: 2 */
    p++; /* line 18 slow_hit_count: 34, fast_hit_count: 2 */
    return "?"; /* line 19 slow_hit_count: 34, fast_hit_count: 2 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  p++; /* line 21 slow_hit_count: 4, fast_hit_count: 0 */
  add(); /* line 22 slow_hit_count: 4, fast_hit_count: 0 */
  p++; /* line 23 slow_hit_count: 4, fast_hit_count: 0 */
  return "?"; /* line 24 slow_hit_count: 4, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
string mult() { /* line 26 slow_hit_count: 25, fast_hit_count: 2 */
  string c = un(); /* line 27 slow_hit_count: 25, fast_hit_count: 2 */
  while (p < (int)expr.size() && (expr[p] == '*' || expr[p] == '/')) { /* line 28 slow_hit_count: 38, fast_hit_count: 2 */
    p++; /* line 29 slow_hit_count: 13, fast_hit_count: 0 */
    un(); /* line 30 slow_hit_count: 13, fast_hit_count: 0 */
    c = "?*?"; /* line 31 slow_hit_count: 13, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  return c; /* line 33 slow_hit_count: 25, fast_hit_count: 2 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
string add() { /* line 35 slow_hit_count: 9, fast_hit_count: 1 */
  string c = mult(); /* line 36 slow_hit_count: 9, fast_hit_count: 1 */
  while (p < (int)expr.size() && (expr[p] == '+' || expr[p] == '-')) { /* line 37 slow_hit_count: 25, fast_hit_count: 2 */
    p++; /* line 38 slow_hit_count: 16, fast_hit_count: 1 */
    mult(); /* line 39 slow_hit_count: 16, fast_hit_count: 1 */
    c = "?+?"; /* line 40 slow_hit_count: 16, fast_hit_count: 1 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  return c; /* line 42 slow_hit_count: 9, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
void simplify(string& tmp) { /* line 44 slow_hit_count: 5, fast_hit_count: 1 */
  expr = tmp; /* line 45 slow_hit_count: 5, fast_hit_count: 1 */
  p = 0; /* line 46 slow_hit_count: 5, fast_hit_count: 1 */
  tmp = add(); /* line 47 slow_hit_count: 5, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 5, fast_hit_count: 1 */
void calc(int i) { /* line 49 slow_hit_count: 14, fast_hit_count: 1 */
  if (used[i]) return; /* line 50 slow_hit_count: 14, fast_hit_count: 1 */
  used[i] = true; /* line 51 slow_hit_count: 5, fast_hit_count: 1 */
  string expr; /* line 52 slow_hit_count: 5, fast_hit_count: 1 */
  vector<string> sign; /* line 53 slow_hit_count: 5, fast_hit_count: 1 */
  for (int j = 0; j < int(tok[i].size()); j++) { /* line 54 slow_hit_count: 50, fast_hit_count: 4 */
    if (operation(tok[i][j])) { /* line 55 slow_hit_count: 45, fast_hit_count: 3 */
      sign.push_back(tok[i][j]); /* line 56 slow_hit_count: 24, fast_hit_count: 1 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  int cur = 0; /* line 59 slow_hit_count: 5, fast_hit_count: 1 */
  safe[i] = true; /* line 60 slow_hit_count: 5, fast_hit_count: 1 */
  for (int j = 0; j < int(tok[i].size()); j++) { /* line 61 slow_hit_count: 50, fast_hit_count: 4 */
    if (operation(tok[i][j])) { /* line 62 slow_hit_count: 45, fast_hit_count: 3 */
      expr += tok[i][j]; /* line 63 slow_hit_count: 24, fast_hit_count: 1 */
      cur++; /* line 64 slow_hit_count: 24, fast_hit_count: 1 */
      continue; /* line 65 slow_hit_count: 24, fast_hit_count: 1 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    if (id.count(tok[i][j])) { /* line 67 slow_hit_count: 21, fast_hit_count: 2 */
      int k = id[tok[i][j]]; /* line 68 slow_hit_count: 13, fast_hit_count: 0 */
      calc(k); /* line 69 slow_hit_count: 13, fast_hit_count: 0 */
      if (!safe[k]) { /* line 70 slow_hit_count: 13, fast_hit_count: 0 */
        safe[i] = false; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
        return; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      if (sum2[k]) { /* line 74 slow_hit_count: 13, fast_hit_count: 0 */
        if (cur > 0 && (sign[cur - 1] == "*" || sign[cur - 1] == "/" || /* line 75 slow_hit_count: 11, fast_hit_count: 0 */
                        sign[cur - 1] == "-")) { /* line 76 slow_hit_count: 5, fast_hit_count: 0 */
          safe[i] = false; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
          return; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
        if (cur < (int)sign.size() && (sign[cur] == "*" || sign[cur] == "/")) { /* line 80 slow_hit_count: 6, fast_hit_count: 0 */
          safe[i] = false; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
          return; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
        expr += "?+?"; /* line 84 slow_hit_count: 6, fast_hit_count: 0 */
      } else if (term2[k]) { /* line 85 slow_hit_count: 7, fast_hit_count: 0 */
        if (cur > 0 && sign[cur - 1] == "/") { /* line 86 slow_hit_count: 7, fast_hit_count: 0 */
          safe[i] = false; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
          return; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
        expr += "?*?"; /* line 90 slow_hit_count: 7, fast_hit_count: 0 */
      } else { /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
        expr += "?"; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
      expr += "?"; /* line 95 slow_hit_count: 8, fast_hit_count: 2 */
    } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  simplify(expr); /* line 98 slow_hit_count: 5, fast_hit_count: 1 */
  if (expr == "?+?") { /* line 99 slow_hit_count: 5, fast_hit_count: 1 */
    sum2[i] = true; /* line 100 slow_hit_count: 3, fast_hit_count: 1 */
  } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  if (expr == "?*?") { /* line 102 slow_hit_count: 5, fast_hit_count: 1 */
    term2[i] = true; /* line 103 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d\n", &n); /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < int(n + 1); i++) { /* line 108 slow_hit_count: 6, fast_hit_count: 3 */
    string s; /* line 109 slow_hit_count: 10, fast_hit_count: 4 */
    getline(cin, s); /* line 110 slow_hit_count: 5, fast_hit_count: 2 */
    string t = ""; /* line 111 slow_hit_count: 10, fast_hit_count: 4 */
    for (int j = 0; j < int(s.size()); j++) { /* line 112 slow_hit_count: 244, fast_hit_count: 22 */
      if (operation(s.substr(j, 1))) { /* line 113 slow_hit_count: 239, fast_hit_count: 20 */
        t += ' '; /* line 114 slow_hit_count: 24, fast_hit_count: 2 */
        t += s[j]; /* line 115 slow_hit_count: 24, fast_hit_count: 2 */
        t += ' '; /* line 116 slow_hit_count: 24, fast_hit_count: 2 */
      } else { /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
        t += s[j]; /* line 118 slow_hit_count: 215, fast_hit_count: 18 */
      } /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
    istringstream sin(t); /* line 121 slow_hit_count: 10, fast_hit_count: 4 */
    if (i < n) { /* line 122 slow_hit_count: 5, fast_hit_count: 2 */
      string def; /* line 123 slow_hit_count: 4, fast_hit_count: 1 */
      sin >> def; /* line 124 slow_hit_count: 4, fast_hit_count: 1 */
      if (def == "#") sin >> def; /* line 125 slow_hit_count: 4, fast_hit_count: 1 */
      sin >> name[i]; /* line 126 slow_hit_count: 4, fast_hit_count: 1 */
      id[name[i]] = i; /* line 127 slow_hit_count: 4, fast_hit_count: 1 */
    } /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
    string tmp; /* line 129 slow_hit_count: 10, fast_hit_count: 4 */
    while (sin >> tmp) { /* line 130 slow_hit_count: 50, fast_hit_count: 8 */
      tok[i].push_back(tmp); /* line 131 slow_hit_count: 45, fast_hit_count: 6 */
    } /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
  calc(n); /* line 134 slow_hit_count: 1, fast_hit_count: 1 */
  if (safe[n]) { /* line 135 slow_hit_count: 1, fast_hit_count: 1 */
    printf("OK\n"); /* line 136 slow_hit_count: 1, fast_hit_count: 1 */
  } else { /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
    printf("Suspicious\n"); /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 140 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 141 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program, let's break down the problem using the information given:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - Lines within the `operation` function (lines 10-11) are called much more frequently during the slow input run (329 times) compared to the fast input (26 times). This function checks if a string is an arithmetic operation, indicating that handling operators is a significant part of the computation.
   - The `un`, `mult`, and `add` functions (lines 16-43) show a stark difference in calls: 38 vs 2, 25 vs 2, and 9 vs 1, respectively. These functions are part of parsing and simplifying expressions, indicating that expression parsing complexity increases for the slow input.
   - The `calc` function (lines 49-105) and its associated logic (including loops and conditions) are more heavily utilized for the slow input, pointing to increased recursive or iterative processing of macros and expressions.

2. **Data Structures and Patterns**:
   - The parsing and simplification operations likely deal with macro expansions that lead to more complex expressions. The slow input has longer and more nested macro expansions compared to the fast input.
   - The use of data structures like `vector<string>` for storing tokens and maps for macro ID associations suggests that handling and processing these collections might be contributing to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on hit count differences and understanding of the code, here are some conditions that likely trigger slow paths:

1. **Complex Macro Expressions**:
   - **Invariant**: "When macro definitions are complex, involving many operators or nested expressions, the code may slow down due to increased parsing and evaluation time."
   - **Rationale**: The increased processing in `operation`, `add`, and `mult` functions indicates that handling more complex expressions or longer chains of operations can lead to inefficiencies.

2. **Frequent Nested Macro Evaluations**:
   - **Invariant**: "If multiple macros are defined in terms of other macros, causing repeated and nested evaluations, performance may degrade significantly."
   - **Rationale**: The frequent calls to `calc` and recursive parsing show that nested macro dependencies can drastically increase computation time.

3. **High Operator Density**:
   - **Invariant**: "Expressions with a high density of operators, especially mixed ones like addition, multiplication, and division, can lead to performance bottlenecks."
   - **Rationale**: The `operation` function is called extensively. Handling numerous or complex operator sequences may increase computational overhead.

4. **Lack of Bracketing in Macros**:
   - **Invariant**: "Macros that are defined without appropriate bracketing and are used in complex expressions can lead to inefficient substitutions and increased computational effort."
   - **Rationale**: The need for parsing and simplifying diverse expressions, as seen in the hit counts and function call patterns, can result from substituting macros that change the intended precedence or require additional checks.

These invariants abstract the conditions under which the program's performance is likely to degrade, without relying on specific input values. They focus on patterns in the macro definitions and how they interact with the parsing logic, offering guidance for potential future inputs that might also trigger slow execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Most C/C++ programmers know about excellent opportunities that preprocessor #define directives give; but many know as well about the problems that can arise because of their careless use.

In this problem we consider the following model of #define constructions (also called macros). Each macro has its name and value. The generic syntax for declaring a macro is the following:

#define macro_name macro_value

After the macro has been declared, "macro_name" is replaced with "macro_value" each time it is met in the program (only the whole tokens can be replaced; i.e. "macro_name" is replaced only when it is surrounded by spaces or other non-alphabetic symbol). A "macro_value" within our model can only be an arithmetic expression consisting of variables, four arithmetic operations, brackets, and also the names of previously declared macros (in this case replacement is performed sequentially). The process of replacing macros with their values is called substitution.

One of the main problems arising while using macros — the situation when as a result of substitution we get an arithmetic expression with the changed order of calculation because of different priorities of the operations.

Let's consider the following example. Say, we declared such a #define construction:

#define sum x + y

and further in the program the expression "2 * sum" is calculated. After macro substitution is performed we get "2 * x + y", instead of intuitively expected "2 * (x + y)".

Let's call the situation "suspicious", if after the macro substitution the order of calculation changes, falling outside the bounds of some macro. Thus, your task is to find out by the given set of #define definitions and the given expression if this expression is suspicious or not.

Let's speak more formally. We should perform an ordinary macros substitution in the given expression. Moreover, we should perform a "safe" macros substitution in the expression, putting in brackets each macro value; after this, guided by arithmetic rules of brackets expansion, we can omit some of the brackets. If there exist a way to get an expression, absolutely coinciding with the expression that is the result of an ordinary substitution (character-by-character, but ignoring spaces), then this expression and the macros system are called correct, otherwise — suspicious.

Note that we consider the "/" operation as the usual mathematical division, not the integer division like in C/C++. That's why, for example, in the expression "a*(b/c)" we can omit brackets to get the expression "a*b/c".

Input

The first line contains the only number n (0 ≤ n ≤ 100) — the amount of #define constructions in the given program.

Then there follow n lines, each of them contains just one #define construction. Each construction has the following syntax:

#define name expression

where

  * name — the macro name, 
  * expression — the expression with which the given macro will be replaced. An expression is a non-empty string, containing digits,names of variables, names of previously declared macros, round brackets and operational signs +-*/. It is guaranteed that the expression (before and after macros substitution) is a correct arithmetic expression, having no unary operations. The expression contains only non-negative integers, not exceeding 109. 



All the names (#define constructions' names and names of their arguments) are strings of case-sensitive Latin characters. It is guaranteed that the name of any variable is different from any #define construction.

Then, the last line contains an expression that you are to check. This expression is non-empty and satisfies the same limitations as the expressions in #define constructions.

The input lines may contain any number of spaces anywhere, providing these spaces do not break the word "define" or the names of constructions and variables. In particular, there can be any number of spaces before and after the "#" symbol.

The length of any line from the input file does not exceed 100 characters.

Output

Output "OK", if the expression is correct according to the above given criterion, otherwise output "Suspicious".

Examples

Input

1
#define sum x + y
1 * sum


Output

Suspicious


Input

1
#define sum  (x + y)
sum - sum


Output

OK


Input

4
#define sum  x + y
#define mul  a * b
#define div  a / b
#define expr sum + mul * div * mul
expr


Output

OK


Input

3
#define SumSafe   (a+b)
#define DivUnsafe  a/b
#define DenominatorUnsafe  a*b
((SumSafe) + DivUnsafe/DivUnsafe + x/DenominatorUnsafe)


Output

Suspicious

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here, we translate each of the natural language invariants derived earlier into C++ checker code:

1. **Complex Macro Expressions**:

   ```cpp
   void check_complex_expression_invariant(int expressionLength) {
       if (expressionLength > 50) { // Assuming 50 as a threshold for complexity
           cerr << "Warning: Performance bottleneck condition triggered - complex expression!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Nested Macro Evaluations**:

   ```cpp
   void check_nested_macro_invariant(int macroDepth) {
       if (macroDepth > 10) { // Assuming 10 as a threshold for nested depth
           cerr << "Warning: Performance bottleneck condition triggered - nested macro evaluations!" << endl;
           abort();
       }
   }
   ```

3. **High Operator Density**:

   ```cpp
   void check_operator_density_invariant(int operatorCount, int expressionLength) {
       if (operatorCount > expressionLength / 2) { // More than 50% of the expression is operators
           cerr << "Warning: Performance bottleneck condition triggered - high operator density!" << endl;
           abort();
       }
   }
   ```

4. **Lack of Bracketing in Macros**:

   ```cpp
   void check_bracketing_invariant(bool hasBrackets) {
       if (!hasBrackets) {
           cerr << "Warning: Performance bottleneck condition triggered - missing brackets in macro!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Now, we integrate the checker functions into the original C++ program. We place these checks at strategic points to avoid adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:64000000")

using namespace std;

int n;
vector<string> tok[105];
string name[105];
bool term2[105], sum2[105], safe[105];
bool used[105];
map<string, int> id;
string expr;
int p;

// Checker functions
void check_complex_expression_invariant(int expressionLength) {
    if (expressionLength > 50) { // Threshold for complexity
        cerr << "Warning: Performance bottleneck condition triggered - complex expression!" << endl;
        abort();
    }
}

void check_nested_macro_invariant(int macroDepth) {
    if (macroDepth > 10) { // Threshold for nested depth
        cerr << "Warning: Performance bottleneck condition triggered - nested macro evaluations!" << endl;
        abort();
    }
}

void check_operator_density_invariant(int operatorCount, int expressionLength) {
    if (operatorCount > expressionLength / 2) { // More than 50% of the expression is operators
        cerr << "Warning: Performance bottleneck condition triggered - high operator density!" << endl;
        abort();
    }
}

void check_bracketing_invariant(bool hasBrackets) {
    if (!hasBrackets) {
        cerr << "Warning: Performance bottleneck condition triggered - missing brackets in macro!" << endl;
        abort();
    }
}

bool operation(string s) {
    return s == "+" || s == "-" || s == "*" || s == "/" || s == "(" || s == ")";
}

string add();
string un() {
    // Check expression complexity and operator density
    int expressionLength = expr.size();
    int operatorCount = count_if(expr.begin(), expr.end(), [](char c) { return c == '+' || c == '-' || c == '*' || c == '/'; });
    check_complex_expression_invariant(expressionLength);
    check_operator_density_invariant(operatorCount, expressionLength);

    if (expr[p] == '?') {
        p++;
        return "?";
    }
    p++;
    add();
    p++;
    return "?";
}

string mult() {
    string c = un();
    while (p < (int)expr.size() && (expr[p] == '*' || expr[p] == '/')) {
        p++;
        un();
        c = "?*?";
    }
    return c;
}

string add() {
    string c = mult();
    while (p < (int)expr.size() && (expr[p] == '+' || expr[p] == '-')) {
        p++;
        mult();
        c = "?+?";
    }
    return c;
}

void simplify(string& tmp) {
    expr = tmp;
    p = 0;
    tmp = add();
}

void calc(int i) {
    if (used[i]) return;
    used[i] = true;
    string expr;
    vector<string> sign;
    for (int j = 0; j < int(tok[i].size()); j++) {
        if (operation(tok[i][j])) {
            sign.push_back(tok[i][j]);
        }
    }
    int cur = 0;
    safe[i] = true;
    bool hasBrackets = false;
    for (int j = 0; j < int(tok[i].size()); j++) {
        if (operation(tok[i][j])) {
            expr += tok[i][j];
            cur++;
            if (tok[i][j] == "(") hasBrackets = true; // Check for brackets
            continue;
        }
        if (id.count(tok[i][j])) {
            int k = id[tok[i][j]];
            calc(k);
            if (!safe[k]) {
                safe[i] = false;
                return;
            }
            if (sum2[k]) {
                if (cur > 0 && (sign[cur - 1] == "*" || sign[cur - 1] == "/" || sign[cur - 1] == "-")) {
                    safe[i] = false;
                    return;
                }
                if (cur < (int)sign.size() && (sign[cur] == "*" || sign[cur] == "/")) {
                    safe[i] = false;
                    return;
                }
                expr += "?+?";
            } else if (term2[k]) {
                if (cur > 0 && sign[cur - 1] == "/") {
                    safe[i] = false;
                    return;
                }
                expr += "?*?";
            } else {
                expr += "?";
            }
        } else {
            expr += "?";
        }
    }
    simplify(expr);
    if (expr == "?+?") {
        sum2[i] = true;
    }
    if (expr == "?*?") {
        term2[i] = true;
    }
    // Check bracketing
    check_bracketing_invariant(hasBrackets);
}

int main() {
    scanf("%d\n", &n);

    // Check for nested macro evaluations
    check_nested_macro_invariant(n);

    for (int i = 0; i < int(n + 1); i++) {
        string s;
        getline(cin, s);
        string t = "";
        for (int j = 0; j < int(s.size()); j++) {
            if (operation(s.substr(j, 1))) {
                t += ' ';
                t += s[j];
                t += ' ';
            } else {
                t += s[j];
            }
        }
        istringstream sin(t);
        if (i < n) {
            string def;
            sin >> def;
            if (def == "#") sin >> def;
            sin >> name[i];
            id[name[i]] = i;
        }
        string tmp;
        while (sin >> tmp) {
            tok[i].push_back(tmp);
        }
    }
    calc(n);
    if (safe[n]) {
        printf("OK\n");
    } else {
        printf("Suspicious\n");
    }
    return 0;
}
```

### Explanation of Integration

- **Complex Expression Check**: Placed in the `un` function, which is part of the parsing logic.
- **Nested Macro Evaluations Check**: Placed in `main` before parsing begins, as it relates to input size.
- **Operator Density Check**: Also in the `un` function, which deals with expression parsing.
- **Bracketing Check**: Integrated into `calc` to ensure macros are properly bracketed during processing.

These checks are placed strategically to catch potential performance issues without adding significant runtime overhead.

