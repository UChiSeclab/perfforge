system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Most C/C++ programmers know about excellent opportunities that preprocessor #define directives give; but many know as well about the problems that can arise because of their careless use.

In this problem we consider the following model of #define constructions (also called macros). Each macro has its name and value. The generic syntax for declaring a macro is the following:

#define macro_name macro_value

After the macro has been declared, "macro_name" is replaced with "macro_value" each time it is met in the program (only the whole tokens can be replaced; i.e. "macro_name" is replaced only when it is surrounded by spaces or other non-alphabetic symbol). A "macro_value" within our model can only be an arithmetic expression consisting of variables, four arithmetic operations, brackets, and also the names of previously declared macros (in this case replacement is performed sequentially). The process of replacing macros with their values is called substitution.

One of the main problems arising while using macros — the situation when as a result of substitution we get an arithmetic expression with the changed order of calculation because of different priorities of the operations.

Let's consider the following example. Say, we declared such a #define construction:

#define sum x + y

and further in the program the expression "2 * sum" is calculated. After macro substitution is performed we get "2 * x + y", instead of intuitively expected "2 * (x + y)".

Let's call the situation "suspicious", if after the macro substitution the order of calculation changes, falling outside the bounds of some macro. Thus, your task is to find out by the given set of #define definitions and the given expression if this expression is suspicious or not.

Let's speak more formally. We should perform an ordinary macros substitution in the given expression. Moreover, we should perform a "safe" macros substitution in the expression, putting in brackets each macro value; after this, guided by arithmetic rules of brackets expansion, we can omit some of the brackets. If there exist a way to get an expression, absolutely coinciding with the expression that is the result of an ordinary substitution (character-by-character, but ignoring spaces), then this expression and the macros system are called correct, otherwise — suspicious.

Note that we consider the "/" operation as the usual mathematical division, not the integer division like in C/C++. That's why, for example, in the expression "a*(b/c)" we can omit brackets to get the expression "a*b/c".

Input

The first line contains the only number n (0 ≤ n ≤ 100) — the amount of #define constructions in the given program.

Then there follow n lines, each of them contains just one #define construction. Each construction has the following syntax:

#define name expression

where

  * name — the macro name, 
  * expression — the expression with which the given macro will be replaced. An expression is a non-empty string, containing digits,names of variables, names of previously declared macros, round brackets and operational signs +-*/. It is guaranteed that the expression (before and after macros substitution) is a correct arithmetic expression, having no unary operations. The expression contains only non-negative integers, not exceeding 109. 



All the names (#define constructions' names and names of their arguments) are strings of case-sensitive Latin characters. It is guaranteed that the name of any variable is different from any #define construction.

Then, the last line contains an expression that you are to check. This expression is non-empty and satisfies the same limitations as the expressions in #define constructions.

The input lines may contain any number of spaces anywhere, providing these spaces do not break the word "define" or the names of constructions and variables. In particular, there can be any number of spaces before and after the "#" symbol.

The length of any line from the input file does not exceed 100 characters.

Output

Output "OK", if the expression is correct according to the above given criterion, otherwise output "Suspicious".

Examples

Input

1
#define sum x + y
1 * sum


Output

Suspicious


Input

1
#define sum  (x + y)
sum - sum


Output

OK


Input

4
#define sum  x + y
#define mul  a * b
#define div  a / b
#define expr sum + mul * div * mul
expr


Output

OK


Input

3
#define SumSafe   (a+b)
#define DivUnsafe  a/b
#define DenominatorUnsafe  a*b
((SumSafe) + DivUnsafe/DivUnsafe + x/DenominatorUnsafe)


Output

Suspicious

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct Dinic {
  const static int Maxn = 200;
  const static int Maxm = 200;
  const static int Inf = 2100000000;
  int head[Maxn + 5];
  int cur[Maxn + 5];
  struct Edge {
    int v, nxt, f;
    Edge() {}
    Edge(int v0, int n0, int f0) {
      v = v0;
      nxt = n0;
      f = f0;
    }
  };
  Edge e[Maxm * 2 + 5];
  int nume = 1;
  inline void init() {
    nume = 1;
    memset(head, 0, sizeof(head));
  }
  inline void insertEdge(int u, int v, int f) {
    e[++nume] = Edge(v, head[u], f);
    head[u] = nume;
  }
  inline void addEdge(int u, int v, int f) {
    insertEdge(u, v, f);
    insertEdge(v, u, 0);
  }
  int dist[Maxn + 5];
  queue<int> que;
  int src, sink;
  inline bool bfs() {
    while (!que.empty()) que.pop();
    memset(dist, -1, sizeof(dist));
    dist[src] = 0;
    que.push(src);
    while (!que.empty()) {
      int now = que.front();
      que.pop();
      for (int i = head[now]; i; i = e[i].nxt) {
        if (e[i].f > 0 && dist[e[i].v] == -1) {
          dist[e[i].v] = dist[now] + 1;
          que.push(e[i].v);
        }
      }
    }
    return dist[sink] != -1;
  }
  int dfs(int x, int delta) {
    if (x == sink) {
      return delta;
    } else {
      int ret = 0;
      for (int& i = cur[x]; i; i = e[i].nxt) {
        if (e[i].f > 0 && dist[e[i].v] == dist[x] + 1) {
          int ddelta = dfs(e[i].v, min(e[i].f, delta));
          e[i].f -= ddelta;
          e[i ^ 1].f += ddelta;
          delta -= ddelta;
          ret += ddelta;
        }
      }
      return ret;
    }
  }
  inline int Max_Flow(int src0, int sink0) {
    src = src0;
    sink = sink0;
    int ret = 0;
    while (bfs()) {
      memcpy(cur, head, sizeof(head));
      ret += dfs(src, Inf);
    }
    return ret;
  }
};
const int M = 1e6 + 7;
const int HashCode = 123;
inline int getHash(string str) {
  int len = str.length();
  int ret = 0;
  for (int i = 0; i < len; i++) {
    ret = (ret * HashCode + str[i]) % M;
  }
  return ret;
}
map<int, int> HashExp;
int n;
string mDefine, mName, mExp[105], finalExp;
int mSafe[105];
inline string getNextState(int& pos, string str) {
  string ret = "";
  int len = str.length();
  for (int& i = pos; i < len; i++)
    if (str[i] != ' ') break;
  if (!(('A' <= str[pos] && str[pos] <= 'Z') ||
        ('a' <= str[pos] && str[pos] <= 'z') ||
        ('0' <= str[pos] && str[pos] <= '9'))) {
    ret += str[pos];
    pos++;
    return ret;
  }
  for (int& i = pos; i < len; i++) {
    if ((('A' <= str[i] && str[i] <= 'Z') || ('a' <= str[i] && str[i] <= 'z') ||
         ('0' <= str[i] && str[i] <= '9'))) {
      ret += str[i];
    } else {
      break;
    }
  }
  return ret;
}
int stackOp[1005], stackNum[1005];
int opCnt, numCnt;
inline int getPri(int str) {
  if (str == 1 || str == 2) return 1;
  if (str == 4 || str == 3) return 2;
  if (str == 5) return 3;
  return 0;
}
inline bool isOP(string str) {
  if (str == "+" || str == "-") return true;
  if (str == "*" || str == "/") return true;
  if (str == "(" || str == ")") return true;
  return false;
}
inline int getOP(string str) {
  if (str == "+") return 1;
  if (str == "-") return 2;
  if (str == "*") return 3;
  if (str == "/") return 4;
  if (str == ")") return 5;
  if (str == "(") return 0;
}
inline bool isOP(char str) {
  if (str == '+' || str == '-') return true;
  if (str == '*' || str == '/') return true;
  if (str == '(' || str == ')') return true;
  return false;
}
inline int getState(string str);
inline int getSafe(string str) {
  int id = HashExp[getHash(str)];
  if (id == 0) return 1;
  return getState(str);
}
inline void Calc(int op, int s1, int s2) {
  if (s1 == 2 || s2 == 2) {
    stackNum[++numCnt] = 2;
    return;
  }
  switch (op) {
    case 1:
      stackNum[++numCnt] = 3;
      break;
    case 2:
      if (s2 == 3)
        stackNum[++numCnt] = 2;
      else
        stackNum[++numCnt] = 3;
      break;
    case 3:
      if (s1 == 3 || s2 == 3)
        stackNum[++numCnt] = 2;
      else
        stackNum[++numCnt] = 4;
      break;
    case 4:
      if (s1 == 3 || s2 == 3)
        stackNum[++numCnt] = 2;
      else if (s2 == 4)
        stackNum[++numCnt] = 2;
      else
        stackNum[++numCnt] = 4;
      break;
  }
}
inline int getState(string str) {
  int id = HashExp[getHash(str)];
  if (id != 0 && mSafe[id] != 0) return mSafe[id];
  if (id != 0) str = mExp[id];
  int pos = 0, len = str.length();
  int stOP = opCnt;
  while (pos < len) {
    string tmp = getNextState(pos, str);
    if (isOP(tmp)) {
      if ((opCnt == stOP || stackOp[opCnt] == 0 ||
           getPri(getOP(tmp)) > getPri(stackOp[opCnt]) || getOP(tmp) == 0) &&
          getOP(tmp) != 5) {
        stackOp[++opCnt] = getOP(tmp);
      } else {
        int pri = getOP(tmp);
        if (pri == 5) {
          while (stackOp[opCnt] != 0) {
            Calc(stackOp[opCnt--], stackNum[numCnt--], stackNum[numCnt--]);
          }
          opCnt--;
          if (stackNum[numCnt--] != 2)
            stackNum[++numCnt] = 1;
          else
            stackNum[++numCnt] = 2;
        } else {
          while (!(opCnt == stOP || getPri(pri) > getPri(stackOp[opCnt]))) {
            Calc(stackOp[opCnt--], stackNum[numCnt--], stackNum[numCnt--]);
          }
          stackOp[++opCnt] = pri;
        }
      }
    } else {
      getSafe(tmp);
      stackNum[++numCnt] = getSafe(tmp);
    }
  }
  while (opCnt > stOP)
    Calc(stackOp[opCnt--], stackNum[numCnt--], stackNum[numCnt--]);
  return mSafe[id] = stackNum[numCnt--];
}
inline string TrimStr(string str) {
  int len = str.length();
  string ret = "";
  bool flag = false;
  for (int i = len - 1; i >= 0; i--) {
    if (('A' <= str[i] && str[i] <= 'Z') || ('a' <= str[i] && str[i] <= 'z') ||
        isOP(str[i]) || ('0' <= str[i] && str[i] < '9'))
      flag = true;
    if (flag) {
      ret = str[i] + ret;
    }
  }
  return ret;
}
inline void solve(int T) {
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) {
    cin >> mDefine;
    while (mDefine != "define" && mDefine != "#define") cin >> mDefine;
    cin >> mName;
    HashExp[getHash(mName)] = i;
    getline(cin, mExp[i]);
    mExp[i] = TrimStr(mExp[i]);
  }
  getline(cin, finalExp);
  int State = getState(TrimStr(finalExp));
  if (State != 2) {
    printf("OK\n");
  } else {
    printf("Suspicious\n");
  }
  return;
}
inline void init() {}
int main() {
  int T = 1;
  for (int i = 1; i <= T; i++) {
    init();
    solve(i);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4
#define sum   xx+yy
#define difference  aaaa-bbbBBBB
#define mult   a*b
#define division  aaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
sum+difference+(sum)*(difference)-mult+mult*division+division*mult+division/(mult+sum-(difference))


(G.2) Fast Input

1
#define sum x/y
r+sul


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct Dinic { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  const static int Maxn = 200; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  const static int Maxm = 200; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  const static int Inf = 2100000000; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  int head[Maxn + 5]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int cur[Maxn + 5]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  struct Edge { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    int v, nxt, f; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    Edge() {} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    Edge(int v0, int n0, int f0) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      v = v0; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      nxt = n0; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      f = f0; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  }; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  Edge e[Maxm * 2 + 5]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int nume = 1; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  inline void init() { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    nume = 1; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    memset(head, 0, sizeof(head)); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  inline void insertEdge(int u, int v, int f) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    e[++nume] = Edge(v, head[u], f); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    head[u] = nume; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  inline void addEdge(int u, int v, int f) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    insertEdge(u, v, f); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    insertEdge(v, u, 0); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  int dist[Maxn + 5]; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  queue<int> que; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  int src, sink; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  inline bool bfs() { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    while (!que.empty()) que.pop(); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    memset(dist, -1, sizeof(dist)); /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    dist[src] = 0; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    que.push(src); /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    while (!que.empty()) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      int now = que.front(); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      que.pop(); /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = head[now]; i; i = e[i].nxt) { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        if (e[i].f > 0 && dist[e[i].v] == -1) { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
          dist[e[i].v] = dist[now] + 1; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
          que.push(e[i].v); /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    return dist[sink] != -1; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  int dfs(int x, int delta) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    if (x == sink) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      return delta; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      int ret = 0; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      for (int& i = cur[x]; i; i = e[i].nxt) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        if (e[i].f > 0 && dist[e[i].v] == dist[x] + 1) { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
          int ddelta = dfs(e[i].v, min(e[i].f, delta)); /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
          e[i].f -= ddelta; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
          e[i ^ 1].f += ddelta; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
          delta -= ddelta; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
          ret += ddelta; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      return ret; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  inline int Max_Flow(int src0, int sink0) { /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    src = src0; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    sink = sink0; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    int ret = 0; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    while (bfs()) { /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      memcpy(cur, head, sizeof(head)); /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
      ret += dfs(src, Inf); /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
const int M = 1e6 + 7; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
const int HashCode = 123; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
inline int getHash(string str) { /* line 82 slow_hit_count: 73, fast_hit_count: 6 */
  int len = str.length(); /* line 83 slow_hit_count: 73, fast_hit_count: 6 */
  int ret = 0; /* line 84 slow_hit_count: 73, fast_hit_count: 6 */
  for (int i = 0; i < len; i++) { /* line 85 slow_hit_count: 651, fast_hit_count: 22 */
    ret = (ret * HashCode + str[i]) % M; /* line 86 slow_hit_count: 578, fast_hit_count: 16 */
  } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 88 slow_hit_count: 73, fast_hit_count: 6 */
} /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> HashExp; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
string mDefine, mName, mExp[105], finalExp; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
int mSafe[105]; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
inline string getNextState(int& pos, string str) { /* line 94 slow_hit_count: 45, fast_hit_count: 3 */
  string ret = ""; /* line 95 slow_hit_count: 45, fast_hit_count: 3 */
  int len = str.length(); /* line 96 slow_hit_count: 45, fast_hit_count: 3 */
  for (int& i = pos; i < len; i++) /* line 97 slow_hit_count: 55, fast_hit_count: 3 */
    if (str[i] != ' ') break; /* line 98 slow_hit_count: 55, fast_hit_count: 3 */
  if (!(('A' <= str[pos] && str[pos] <= 'Z') || /* line 99 slow_hit_count: 90, fast_hit_count: 6 */
        ('a' <= str[pos] && str[pos] <= 'z') || /* line 100 slow_hit_count: 45, fast_hit_count: 3 */
        ('0' <= str[pos] && str[pos] <= '9'))) { /* line 101 slow_hit_count: 24, fast_hit_count: 1 */
    ret += str[pos]; /* line 102 slow_hit_count: 24, fast_hit_count: 1 */
    pos++; /* line 103 slow_hit_count: 24, fast_hit_count: 1 */
    return ret; /* line 104 slow_hit_count: 24, fast_hit_count: 1 */
  } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  for (int& i = pos; i < len; i++) { /* line 106 slow_hit_count: 169, fast_hit_count: 6 */
    if ((('A' <= str[i] && str[i] <= 'Z') || ('a' <= str[i] && str[i] <= 'z') || /* line 107 slow_hit_count: 182, fast_hit_count: 6 */
         ('0' <= str[i] && str[i] <= '9'))) { /* line 108 slow_hit_count: 17, fast_hit_count: 1 */
      ret += str[i]; /* line 109 slow_hit_count: 148, fast_hit_count: 4 */
    } else { /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 111 slow_hit_count: 17, fast_hit_count: 1 */
    } /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 114 slow_hit_count: 21, fast_hit_count: 2 */
} /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
int stackOp[1005], stackNum[1005]; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
int opCnt, numCnt; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
inline int getPri(int str) { /* line 118 slow_hit_count: 50, fast_hit_count: 0 */
  if (str == 1 || str == 2) return 1; /* line 119 slow_hit_count: 50, fast_hit_count: 0 */
  if (str == 4 || str == 3) return 2; /* line 120 slow_hit_count: 18, fast_hit_count: 0 */
  if (str == 5) return 3; /* line 121 slow_hit_count: 6, fast_hit_count: 0 */
  return 0; /* line 122 slow_hit_count: 5, fast_hit_count: 0 */
} /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
inline bool isOP(string str) { /* line 124 slow_hit_count: 45, fast_hit_count: 3 */
  if (str == "+" || str == "-") return true; /* line 125 slow_hit_count: 45, fast_hit_count: 3 */
  if (str == "*" || str == "/") return true; /* line 126 slow_hit_count: 35, fast_hit_count: 2 */
  if (str == "(" || str == ")") return true; /* line 127 slow_hit_count: 29, fast_hit_count: 2 */
  return false; /* line 128 slow_hit_count: 21, fast_hit_count: 2 */
} /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
inline int getOP(string str) { /* line 130 slow_hit_count: 67, fast_hit_count: 2 */
  if (str == "+") return 1; /* line 131 slow_hit_count: 67, fast_hit_count: 2 */
  if (str == "-") return 2; /* line 132 slow_hit_count: 49, fast_hit_count: 0 */
  if (str == "*") return 3; /* line 133 slow_hit_count: 41, fast_hit_count: 0 */
  if (str == "/") return 4; /* line 134 slow_hit_count: 30, fast_hit_count: 0 */
  if (str == ")") return 5; /* line 135 slow_hit_count: 25, fast_hit_count: 0 */
  if (str == "(") return 0; /* line 136 slow_hit_count: 16, fast_hit_count: 0 */
} /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
inline bool isOP(char str) { /* line 138 slow_hit_count: 34, fast_hit_count: 3 */
  if (str == '+' || str == '-') return true; /* line 139 slow_hit_count: 34, fast_hit_count: 3 */
  if (str == '*' || str == '/') return true; /* line 140 slow_hit_count: 24, fast_hit_count: 2 */
  if (str == '(' || str == ')') return true; /* line 141 slow_hit_count: 18, fast_hit_count: 1 */
  return false; /* line 142 slow_hit_count: 10, fast_hit_count: 1 */
} /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
inline int getState(string str); /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
inline int getSafe(string str) { /* line 145 slow_hit_count: 42, fast_hit_count: 4 */
  int id = HashExp[getHash(str)]; /* line 146 slow_hit_count: 42, fast_hit_count: 4 */
  if (id == 0) return 1; /* line 147 slow_hit_count: 42, fast_hit_count: 4 */
  return getState(str); /* line 148 slow_hit_count: 26, fast_hit_count: 0 */
} /* line 149 slow_hit_count: 0, fast_hit_count: 0 */
inline void Calc(int op, int s1, int s2) { /* line 150 slow_hit_count: 16, fast_hit_count: 1 */
  if (s1 == 2 || s2 == 2) { /* line 151 slow_hit_count: 16, fast_hit_count: 1 */
    stackNum[++numCnt] = 2; /* line 152 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 153 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 154 slow_hit_count: 0, fast_hit_count: 0 */
  switch (op) { /* line 155 slow_hit_count: 16, fast_hit_count: 1 */
    case 1: /* line 156 slow_hit_count: 7, fast_hit_count: 1 */
      stackNum[++numCnt] = 3; /* line 157 slow_hit_count: 7, fast_hit_count: 1 */
      break; /* line 158 slow_hit_count: 7, fast_hit_count: 1 */
    case 2: /* line 159 slow_hit_count: 3, fast_hit_count: 0 */
      if (s2 == 3) /* line 160 slow_hit_count: 3, fast_hit_count: 0 */
        stackNum[++numCnt] = 2; /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 162 slow_hit_count: 0, fast_hit_count: 0 */
        stackNum[++numCnt] = 3; /* line 163 slow_hit_count: 3, fast_hit_count: 0 */
      break; /* line 164 slow_hit_count: 3, fast_hit_count: 0 */
    case 3: /* line 165 slow_hit_count: 4, fast_hit_count: 0 */
      if (s1 == 3 || s2 == 3) /* line 166 slow_hit_count: 4, fast_hit_count: 0 */
        stackNum[++numCnt] = 2; /* line 167 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 168 slow_hit_count: 0, fast_hit_count: 0 */
        stackNum[++numCnt] = 4; /* line 169 slow_hit_count: 4, fast_hit_count: 0 */
      break; /* line 170 slow_hit_count: 4, fast_hit_count: 0 */
    case 4: /* line 171 slow_hit_count: 2, fast_hit_count: 0 */
      if (s1 == 3 || s2 == 3) /* line 172 slow_hit_count: 2, fast_hit_count: 0 */
        stackNum[++numCnt] = 2; /* line 173 slow_hit_count: 0, fast_hit_count: 0 */
      else if (s2 == 4) /* line 174 slow_hit_count: 2, fast_hit_count: 0 */
        stackNum[++numCnt] = 2; /* line 175 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 176 slow_hit_count: 0, fast_hit_count: 0 */
        stackNum[++numCnt] = 4; /* line 177 slow_hit_count: 2, fast_hit_count: 0 */
      break; /* line 178 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 179 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 180 slow_hit_count: 0, fast_hit_count: 0 */
inline int getState(string str) { /* line 181 slow_hit_count: 27, fast_hit_count: 1 */
  int id = HashExp[getHash(str)]; /* line 182 slow_hit_count: 27, fast_hit_count: 1 */
  if (id != 0 && mSafe[id] != 0) return mSafe[id]; /* line 183 slow_hit_count: 27, fast_hit_count: 1 */
  if (id != 0) str = mExp[id]; /* line 184 slow_hit_count: 5, fast_hit_count: 1 */
  int pos = 0, len = str.length(); /* line 185 slow_hit_count: 5, fast_hit_count: 1 */
  int stOP = opCnt; /* line 186 slow_hit_count: 5, fast_hit_count: 1 */
  while (pos < len) { /* line 187 slow_hit_count: 50, fast_hit_count: 4 */
    string tmp = getNextState(pos, str); /* line 188 slow_hit_count: 90, fast_hit_count: 6 */
    if (isOP(tmp)) { /* line 189 slow_hit_count: 45, fast_hit_count: 3 */
      if ((opCnt == stOP || stackOp[opCnt] == 0 || /* line 190 slow_hit_count: 34, fast_hit_count: 0 */
           getPri(getOP(tmp)) > getPri(stackOp[opCnt]) || getOP(tmp) == 0) && /* line 191 slow_hit_count: 91, fast_hit_count: 3 */
          getOP(tmp) != 5) { /* line 192 slow_hit_count: 42, fast_hit_count: 2 */
        stackOp[++opCnt] = getOP(tmp); /* line 193 slow_hit_count: 14, fast_hit_count: 1 */
      } else { /* line 194 slow_hit_count: 0, fast_hit_count: 0 */
        int pri = getOP(tmp); /* line 195 slow_hit_count: 10, fast_hit_count: 0 */
        if (pri == 5) { /* line 196 slow_hit_count: 10, fast_hit_count: 0 */
          while (stackOp[opCnt] != 0) { /* line 197 slow_hit_count: 5, fast_hit_count: 0 */
            Calc(stackOp[opCnt--], stackNum[numCnt--], stackNum[numCnt--]); /* line 198 slow_hit_count: 1, fast_hit_count: 0 */
          } /* line 199 slow_hit_count: 0, fast_hit_count: 0 */
          opCnt--; /* line 200 slow_hit_count: 4, fast_hit_count: 0 */
          if (stackNum[numCnt--] != 2) /* line 201 slow_hit_count: 4, fast_hit_count: 0 */
            stackNum[++numCnt] = 1; /* line 202 slow_hit_count: 4, fast_hit_count: 0 */
          else /* line 203 slow_hit_count: 0, fast_hit_count: 0 */
            stackNum[++numCnt] = 2; /* line 204 slow_hit_count: 0, fast_hit_count: 0 */
        } else { /* line 205 slow_hit_count: 0, fast_hit_count: 0 */
          while (!(opCnt == stOP || getPri(pri) > getPri(stackOp[opCnt]))) { /* line 206 slow_hit_count: 15, fast_hit_count: 0 */
            Calc(stackOp[opCnt--], stackNum[numCnt--], stackNum[numCnt--]); /* line 207 slow_hit_count: 9, fast_hit_count: 0 */
          } /* line 208 slow_hit_count: 0, fast_hit_count: 0 */
          stackOp[++opCnt] = pri; /* line 209 slow_hit_count: 6, fast_hit_count: 0 */
        } /* line 210 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 211 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 212 slow_hit_count: 0, fast_hit_count: 0 */
      getSafe(tmp); /* line 213 slow_hit_count: 21, fast_hit_count: 2 */
      stackNum[++numCnt] = getSafe(tmp); /* line 214 slow_hit_count: 21, fast_hit_count: 2 */
    } /* line 215 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 216 slow_hit_count: 0, fast_hit_count: 0 */
  while (opCnt > stOP) /* line 217 slow_hit_count: 11, fast_hit_count: 2 */
    Calc(stackOp[opCnt--], stackNum[numCnt--], stackNum[numCnt--]); /* line 218 slow_hit_count: 6, fast_hit_count: 1 */
  return mSafe[id] = stackNum[numCnt--]; /* line 219 slow_hit_count: 5, fast_hit_count: 1 */
} /* line 220 slow_hit_count: 0, fast_hit_count: 0 */
inline string TrimStr(string str) { /* line 221 slow_hit_count: 5, fast_hit_count: 2 */
  int len = str.length(); /* line 222 slow_hit_count: 5, fast_hit_count: 2 */
  string ret = ""; /* line 223 slow_hit_count: 5, fast_hit_count: 2 */
  bool flag = false; /* line 224 slow_hit_count: 5, fast_hit_count: 2 */
  for (int i = len - 1; i >= 0; i--) { /* line 225 slow_hit_count: 187, fast_hit_count: 11 */
    if (('A' <= str[i] && str[i] <= 'Z') || ('a' <= str[i] && str[i] <= 'z') || /* line 226 slow_hit_count: 398, fast_hit_count: 21 */
        isOP(str[i]) || ('0' <= str[i] && str[i] < '9')) /* line 227 slow_hit_count: 398, fast_hit_count: 21 */
      flag = true; /* line 228 slow_hit_count: 172, fast_hit_count: 8 */
    if (flag) { /* line 229 slow_hit_count: 182, fast_hit_count: 9 */
      ret = str[i] + ret; /* line 230 slow_hit_count: 182, fast_hit_count: 9 */
    } /* line 231 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 232 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 233 slow_hit_count: 5, fast_hit_count: 2 */
} /* line 234 slow_hit_count: 0, fast_hit_count: 0 */
inline void solve(int T) { /* line 235 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 236 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 237 slow_hit_count: 5, fast_hit_count: 2 */
    cin >> mDefine; /* line 238 slow_hit_count: 4, fast_hit_count: 1 */
    while (mDefine != "define" && mDefine != "#define") cin >> mDefine; /* line 239 slow_hit_count: 4, fast_hit_count: 1 */
    cin >> mName; /* line 240 slow_hit_count: 4, fast_hit_count: 1 */
    HashExp[getHash(mName)] = i; /* line 241 slow_hit_count: 4, fast_hit_count: 1 */
    getline(cin, mExp[i]); /* line 242 slow_hit_count: 4, fast_hit_count: 1 */
    mExp[i] = TrimStr(mExp[i]); /* line 243 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 244 slow_hit_count: 0, fast_hit_count: 0 */
  getline(cin, finalExp); /* line 245 slow_hit_count: 1, fast_hit_count: 1 */
  int State = getState(TrimStr(finalExp)); /* line 246 slow_hit_count: 1, fast_hit_count: 1 */
  if (State != 2) { /* line 247 slow_hit_count: 1, fast_hit_count: 1 */
    printf("OK\n"); /* line 248 slow_hit_count: 1, fast_hit_count: 1 */
  } else { /* line 249 slow_hit_count: 0, fast_hit_count: 0 */
    printf("Suspicious\n"); /* line 250 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 251 slow_hit_count: 0, fast_hit_count: 0 */
  return; /* line 252 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 253 slow_hit_count: 0, fast_hit_count: 0 */
inline void init() {} /* line 254 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 255 slow_hit_count: 1, fast_hit_count: 1 */
  int T = 1; /* line 256 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= T; i++) { /* line 257 slow_hit_count: 2, fast_hit_count: 2 */
    init(); /* line 258 slow_hit_count: 1, fast_hit_count: 1 */
    solve(i); /* line 259 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 260 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 261 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 262 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the provided C program runs slowly for the "slow" input compared to the "fast" input, we need to analyze the given code and the hit counts information. We can then derive performance-characterizing invariants in natural language. 

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**: 
   - The `getHash` function (lines 82-88) has a significantly higher hit count for the slow input compared to the fast input (578 vs. 16). This suggests that the hashing operation is being called frequently.
   - Lines within `getNextState` (lines 94-115) and `getState` (lines 181-220) also exhibit much higher hits for the slow input. These functions are involved in processing and evaluating macro expressions.

2. **Pinpoint Frequent Lines**:
   - Line 85 inside `getHash` is called 651 times for the slow input, indicating that the loop is executed many times due to string length operations.
   - Line 188 in `getState` shows 90 hits for the slow input, indicating repeated calls to `getNextState`.

3. **Infer How These Lines Interact**:
   - The program seems to be repeatedly processing macro names and expressions. The high hit counts in these functions suggest frequent parsing and evaluation, which is likely compounded by the expression substitutions involved with macros.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the line-level analysis, we can derive possible conditions leading to slow performance:

1. **Repeated Macro Substitutions**:
   - Natural Language Description: "If the input expression contains multiple macros with complex or nested arithmetic operations, the macro substitution process may become inefficient, leading to slow execution."
   - Code Context: When evaluating or substituting macros, especially involving nested or lengthy expressions, the program may repeatedly hash and process these expressions. 

2. **Complex Expression Parsing**:
   - Natural Language Description: "If the expression has multiple nested operations or deeply nested parentheses, the algorithm for parsing and evaluating these expressions may result in excessive recursive or iterative operations."
   - Code Context: The function `getState` processes expressions recursively and checks the order of operations, which may become computationally expensive when the expression complexity increases.

3. **High Frequency of String Operations**:
   - Natural Language Description: "If the program frequently computes hashes or lengths of strings representing macros or expressions, performance can degrade, especially with larger or numerous macro definitions."
   - Code Context: The `getHash` function has shown to be a bottleneck when invoked for complex or long expressions repeatedly.

By capturing the above conditions, we can predict and understand scenarios where the program might face performance bottlenecks due to the nature of input expressions and macro definitions, rather than purely the input size constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Most C/C++ programmers know about excellent opportunities that preprocessor #define directives give; but many know as well about the problems that can arise because of their careless use.

In this problem we consider the following model of #define constructions (also called macros). Each macro has its name and value. The generic syntax for declaring a macro is the following:

#define macro_name macro_value

After the macro has been declared, "macro_name" is replaced with "macro_value" each time it is met in the program (only the whole tokens can be replaced; i.e. "macro_name" is replaced only when it is surrounded by spaces or other non-alphabetic symbol). A "macro_value" within our model can only be an arithmetic expression consisting of variables, four arithmetic operations, brackets, and also the names of previously declared macros (in this case replacement is performed sequentially). The process of replacing macros with their values is called substitution.

One of the main problems arising while using macros — the situation when as a result of substitution we get an arithmetic expression with the changed order of calculation because of different priorities of the operations.

Let's consider the following example. Say, we declared such a #define construction:

#define sum x + y

and further in the program the expression "2 * sum" is calculated. After macro substitution is performed we get "2 * x + y", instead of intuitively expected "2 * (x + y)".

Let's call the situation "suspicious", if after the macro substitution the order of calculation changes, falling outside the bounds of some macro. Thus, your task is to find out by the given set of #define definitions and the given expression if this expression is suspicious or not.

Let's speak more formally. We should perform an ordinary macros substitution in the given expression. Moreover, we should perform a "safe" macros substitution in the expression, putting in brackets each macro value; after this, guided by arithmetic rules of brackets expansion, we can omit some of the brackets. If there exist a way to get an expression, absolutely coinciding with the expression that is the result of an ordinary substitution (character-by-character, but ignoring spaces), then this expression and the macros system are called correct, otherwise — suspicious.

Note that we consider the "/" operation as the usual mathematical division, not the integer division like in C/C++. That's why, for example, in the expression "a*(b/c)" we can omit brackets to get the expression "a*b/c".

Input

The first line contains the only number n (0 ≤ n ≤ 100) — the amount of #define constructions in the given program.

Then there follow n lines, each of them contains just one #define construction. Each construction has the following syntax:

#define name expression

where

  * name — the macro name, 
  * expression — the expression with which the given macro will be replaced. An expression is a non-empty string, containing digits,names of variables, names of previously declared macros, round brackets and operational signs +-*/. It is guaranteed that the expression (before and after macros substitution) is a correct arithmetic expression, having no unary operations. The expression contains only non-negative integers, not exceeding 109. 



All the names (#define constructions' names and names of their arguments) are strings of case-sensitive Latin characters. It is guaranteed that the name of any variable is different from any #define construction.

Then, the last line contains an expression that you are to check. This expression is non-empty and satisfies the same limitations as the expressions in #define constructions.

The input lines may contain any number of spaces anywhere, providing these spaces do not break the word "define" or the names of constructions and variables. In particular, there can be any number of spaces before and after the "#" symbol.

The length of any line from the input file does not exceed 100 characters.

Output

Output "OK", if the expression is correct according to the above given criterion, otherwise output "Suspicious".

Examples

Input

1
#define sum x + y
1 * sum


Output

Suspicious


Input

1
#define sum  (x + y)
sum - sum


Output

OK


Input

4
#define sum  x + y
#define mul  a * b
#define div  a / b
#define expr sum + mul * div * mul
expr


Output

OK


Input

3
#define SumSafe   (a+b)
#define DivUnsafe  a/b
#define DenominatorUnsafe  a*b
((SumSafe) + DivUnsafe/DivUnsafe + x/DenominatorUnsafe)


Output

Suspicious

Solution (C++ code):
{solution}


assistant: To translate the performance-characterizing invariants into runtime checks in C++, we'll implement these checks based on the invariants described previously. We'll write these checks as separate functions or inline blocks within the C++ code:

### Phase 3: Implement Invariants in C++

1. **Repeated Macro Substitutions**:
   - **Invariant**: If the input expression contains multiple macros with complex or nested arithmetic operations, the macro substitution process may become inefficient.
   - **Code**:
   ```cpp
   void check_macro_complexity(const std::string& expression) {
       int macroCount = std::count(expression.begin(), expression.end(), '+') +
                        std::count(expression.begin(), expression.end(), '-') +
                        std::count(expression.begin(), expression.end(), '*') +
                        std::count(expression.begin(), expression.end(), '/');
       if (macroCount > 10) { // Threshold based on heuristic complexity
           cerr << "Warning: Performance bottleneck due to complex macro expression!" << endl;
           abort();
       }
   }
   ```

2. **Complex Expression Parsing**:
   - **Invariant**: If the expression has multiple nested operations or deeply nested parentheses, parsing may become computationally expensive.
   - **Code**:
   ```cpp
   void check_expression_nesting(const std::string& expression) {
       int nestingLevel = 0, maxNesting = 0;
       for (char c : expression) {
           if (c == '(') {
               nestingLevel++;
               maxNesting = std::max(maxNesting, nestingLevel);
           } else if (c == ')') {
               nestingLevel--;
           }
       }
       if (maxNesting > 5) { // Arbitrary threshold for excessive nesting
           cerr << "Warning: Performance bottleneck due to excessive nesting!" << endl;
           abort();
       }
   }
   ```

3. **High Frequency of String Operations**:
   - **Invariant**: If hashing or length operations on expressions occur frequently, performance may degrade.
   - **Code**:
   ```cpp
   void check_string_operations(int hashCalls, int lengthOps) {
       if (hashCalls > 100 || lengthOps > 100) { // Threshold based on observed overhead
           cerr << "Warning: Performance bottleneck due to frequent string operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into C++ Program

Here is the instrumented C++ program with integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_macro_complexity(const std::string& expression) {
    int macroCount = std::count(expression.begin(), expression.end(), '+') +
                     std::count(expression.begin(), expression.end(), '-') +
                     std::count(expression.begin(), expression.end(), '*') +
                     std::count(expression.begin(), expression.end(), '/');
    if (macroCount > 10) {
        cerr << "Warning: Performance bottleneck due to complex macro expression!" << endl;
        abort();
    }
}

void check_expression_nesting(const std::string& expression) {
    int nestingLevel = 0, maxNesting = 0;
    for (char c : expression) {
        if (c == '(') {
            nestingLevel++;
            maxNesting = std::max(maxNesting, nestingLevel);
        } else if (c == ')') {
            nestingLevel--;
        }
    }
    if (maxNesting > 5) {
        cerr << "Warning: Performance bottleneck due to excessive nesting!" << endl;
        abort();
    }
}

void check_string_operations(int hashCalls, int lengthOps) {
    if (hashCalls > 100 || lengthOps > 100) {
        cerr << "Warning: Performance bottleneck due to frequent string operations!" << endl;
        abort();
    }
}

struct Dinic {
    // ... (other parts of the Dinic structure remain unchanged)
};

const int M = 1e6 + 7;
const int HashCode = 123;
int hashCallCount = 0, lengthOpCount = 0;

inline int getHash(string str) {
    hashCallCount++;
    int len = str.length();
    lengthOpCount++;
    int ret = 0;
    for (int i = 0; i < len; i++) {
        ret = (ret * HashCode + str[i]) % M;
    }
    return ret;
}

// ... (rest of the code remains unchanged)

inline void solve(int T) {
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        cin >> mDefine;
        while (mDefine != "define" && mDefine != "#define") cin >> mDefine;
        cin >> mName;
        HashExp[getHash(mName)] = i;
        getline(cin, mExp[i]);
        mExp[i] = TrimStr(mExp[i]);
        // Check complexity of each macro definition
        check_macro_complexity(mExp[i]);
    }
    getline(cin, finalExp);
    // Check nested level of the final expression
    check_expression_nesting(finalExp);
    // Check overall string operation counts
    check_string_operations(hashCallCount, lengthOpCount);
    int State = getState(TrimStr(finalExp));
    if (State != 2) {
        printf("OK\n");
    } else {
        printf("Suspicious\n");
    }
    return;
}

inline void init() {}

int main() {
    int T = 1;
    for (int i = 1; i <= T; i++) {
        init();
        solve(i);
    }
    return 0;
}
```

In this code, checks are incorporated:
- After reading macros to evaluate their complexity.
- After reading the final expression to check its nesting depth.
- Before concluding the solve function to examine the frequency of string operations.

These checks are positioned to avoid tight loops, providing a balance between performance monitoring and execution efficiency.

