system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Most C/C++ programmers know about excellent opportunities that preprocessor #define directives give; but many know as well about the problems that can arise because of their careless use.

In this problem we consider the following model of #define constructions (also called macros). Each macro has its name and value. The generic syntax for declaring a macro is the following:

#define macro_name macro_value

After the macro has been declared, "macro_name" is replaced with "macro_value" each time it is met in the program (only the whole tokens can be replaced; i.e. "macro_name" is replaced only when it is surrounded by spaces or other non-alphabetic symbol). A "macro_value" within our model can only be an arithmetic expression consisting of variables, four arithmetic operations, brackets, and also the names of previously declared macros (in this case replacement is performed sequentially). The process of replacing macros with their values is called substitution.

One of the main problems arising while using macros — the situation when as a result of substitution we get an arithmetic expression with the changed order of calculation because of different priorities of the operations.

Let's consider the following example. Say, we declared such a #define construction:

#define sum x + y

and further in the program the expression "2 * sum" is calculated. After macro substitution is performed we get "2 * x + y", instead of intuitively expected "2 * (x + y)".

Let's call the situation "suspicious", if after the macro substitution the order of calculation changes, falling outside the bounds of some macro. Thus, your task is to find out by the given set of #define definitions and the given expression if this expression is suspicious or not.

Let's speak more formally. We should perform an ordinary macros substitution in the given expression. Moreover, we should perform a "safe" macros substitution in the expression, putting in brackets each macro value; after this, guided by arithmetic rules of brackets expansion, we can omit some of the brackets. If there exist a way to get an expression, absolutely coinciding with the expression that is the result of an ordinary substitution (character-by-character, but ignoring spaces), then this expression and the macros system are called correct, otherwise — suspicious.

Note that we consider the "/" operation as the usual mathematical division, not the integer division like in C/C++. That's why, for example, in the expression "a*(b/c)" we can omit brackets to get the expression "a*b/c".

Input

The first line contains the only number n (0 ≤ n ≤ 100) — the amount of #define constructions in the given program.

Then there follow n lines, each of them contains just one #define construction. Each construction has the following syntax:

#define name expression

where

  * name — the macro name, 
  * expression — the expression with which the given macro will be replaced. An expression is a non-empty string, containing digits,names of variables, names of previously declared macros, round brackets and operational signs +-*/. It is guaranteed that the expression (before and after macros substitution) is a correct arithmetic expression, having no unary operations. The expression contains only non-negative integers, not exceeding 109. 



All the names (#define constructions' names and names of their arguments) are strings of case-sensitive Latin characters. It is guaranteed that the name of any variable is different from any #define construction.

Then, the last line contains an expression that you are to check. This expression is non-empty and satisfies the same limitations as the expressions in #define constructions.

The input lines may contain any number of spaces anywhere, providing these spaces do not break the word "define" or the names of constructions and variables. In particular, there can be any number of spaces before and after the "#" symbol.

The length of any line from the input file does not exceed 100 characters.

Output

Output "OK", if the expression is correct according to the above given criterion, otherwise output "Suspicious".

Examples

Input

1
#define sum x + y
1 * sum


Output

Suspicious


Input

1
#define sum  (x + y)
sum - sum


Output

OK


Input

4
#define sum  x + y
#define mul  a * b
#define div  a / b
#define expr sum + mul * div * mul
expr


Output

OK


Input

3
#define SumSafe   (a+b)
#define DivUnsafe  a/b
#define DenominatorUnsafe  a*b
((SumSafe) + DivUnsafe/DivUnsafe + x/DenominatorUnsafe)


Output

Suspicious

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
map<string, string> mp;
map<string, int> mp2;
string str_cut(string str1, int index1, int index2) {
  string str2 = "";
  str2 = str1.substr(index1, index2 - index1);
  return str2;
}
int check(string str) {
  if (mp2[str] != 0) return (mp2[str] - 1);
  if (mp[str] != "") str = mp[str];
  int len = str.length();
  int in = 0;
  int index1 = -1, index2 = -1;
  for (int i = 0; i < len; i++) {
    if (str[i] == '(') in++;
    if (str[i] == ')') in--;
    if ((str[i] == '+' || str[i] == '-') && in == 0) index1 = i;
    if ((str[i] == '*' || str[i] == '/') && in == 0) index2 = i;
  }
  int index = 0;
  if (str[0] == '(' && str[len - 1] == ')' && index1 == -1 && index2 == -1) {
    if (check(str_cut(str, 1, len - 1)) == 3)
      return 3;
    else
      return 0;
  }
  if (index1 == -1 && index2 == -1) return 0;
  if (index1 == -1)
    index = index2;
  else
    index = index1;
  int num1 = check(str_cut(str, 0, index)),
      num2 = check(str_cut(str, index + 1, len));
  if (str[index] == '+') {
    if (num1 == 3 || num2 == 3) {
      mp2[str] = 4;
      return 3;
    } else {
      mp2[str] = 3;
      return 2;
    }
  } else if (str[index] == '-') {
    if (num1 == 3 || num2 == 2 || num2 == 3) {
      mp2[str] = 4;
      return 3;
    } else {
      mp2[str] = 3;
      return 2;
    }
  } else if (str[index] == '*') {
    if (num1 == 2 || num1 == 3 || num2 == 2 || num2 == 3) {
      mp2[str] = 4;
      return 3;
    } else {
      mp2[str] = 2;
      return 1;
    }
  } else {
    if (num1 == 2 || num1 == 3 || num2 == 1 || num2 == 2 || num2 == 3) {
      mp2[str] = 4;
      return 3;
    } else {
      mp2[str] = 2;
      return 1;
    }
  }
}
int main() {
  int n = 0;
  cin >> n;
  getchar();
  for (int i = 0; i < n; i++) {
    string s;
    string str1 = "", str2 = "", str3 = "";
    getline(cin, s);
    bool b = 0, b2 = 1;
    for (int i = 0; i < s.length(); i++) {
      if (str1 != "#define" && s[i] != ' ') {
        str1 += s[i];
        continue;
      }
      if (!b && s[i] != ' ' && b2) {
        b = 1;
      }
      if (b && s[i] == ' ') {
        b = 0;
        b2 = 0;
      }
      if (b) {
        str2 += s[i];
        continue;
      }
      if (s[i] != ' ') str3 += s[i];
    }
    mp[str2] = str3;
  }
  string check_str = "";
  getline(cin, check_str);
  string check_str2 = "";
  for (int i = 0; i < check_str.length(); i++)
    if (check_str[i] != ' ') check_str2 += check_str[i];
  int ans = check(check_str2);
  if (ans == 3)
    cout << "Suspicious";
  else
    cout << "OK";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4
#define sum   xx+yy
#define difference  aaab-bbaBBBB
#define mult   a*b
#define division  aaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
sum+difference+(sum)*(difference)-mult+mult*division+division*mult+division/(mult+sum-(difference))


(G.2) Fast Input

1
#define sum x/y
r/mus


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
map<string, string> mp; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<string, int> mp2; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
string str_cut(string str1, int index1, int index2) { /* line 5 slow_hit_count: 54, fast_hit_count: 2 */
  string str2 = ""; /* line 6 slow_hit_count: 54, fast_hit_count: 2 */
  str2 = str1.substr(index1, index2 - index1); /* line 7 slow_hit_count: 54, fast_hit_count: 2 */
  return str2; /* line 8 slow_hit_count: 54, fast_hit_count: 2 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int check(string str) { /* line 10 slow_hit_count: 55, fast_hit_count: 3 */
  if (mp2[str] != 0) return (mp2[str] - 1); /* line 11 slow_hit_count: 55, fast_hit_count: 3 */
  if (mp[str] != "") str = mp[str]; /* line 12 slow_hit_count: 55, fast_hit_count: 3 */
  int len = str.length(); /* line 13 slow_hit_count: 55, fast_hit_count: 3 */
  int in = 0; /* line 14 slow_hit_count: 55, fast_hit_count: 3 */
  int index1 = -1, index2 = -1; /* line 15 slow_hit_count: 55, fast_hit_count: 3 */
  for (int i = 0; i < len; i++) { /* line 16 slow_hit_count: 945, fast_hit_count: 12 */
    if (str[i] == '(') in++; /* line 17 slow_hit_count: 890, fast_hit_count: 9 */
    if (str[i] == ')') in--; /* line 18 slow_hit_count: 890, fast_hit_count: 9 */
    if ((str[i] == '+' || str[i] == '-') && in == 0) index1 = i; /* line 19 slow_hit_count: 890, fast_hit_count: 9 */
    if ((str[i] == '*' || str[i] == '/') && in == 0) index2 = i; /* line 20 slow_hit_count: 890, fast_hit_count: 9 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  int index = 0; /* line 22 slow_hit_count: 55, fast_hit_count: 3 */
  if (str[0] == '(' && str[len - 1] == ')' && index1 == -1 && index2 == -1) { /* line 23 slow_hit_count: 55, fast_hit_count: 3 */
    if (check(str_cut(str, 1, len - 1)) == 3) /* line 24 slow_hit_count: 4, fast_hit_count: 0 */
      return 3; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 27 slow_hit_count: 4, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  if (index1 == -1 && index2 == -1) return 0; /* line 29 slow_hit_count: 51, fast_hit_count: 3 */
  if (index1 == -1) /* line 30 slow_hit_count: 25, fast_hit_count: 1 */
    index = index2; /* line 31 slow_hit_count: 11, fast_hit_count: 1 */
  else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    index = index1; /* line 33 slow_hit_count: 14, fast_hit_count: 0 */
  int num1 = check(str_cut(str, 0, index)), /* line 34 slow_hit_count: 25, fast_hit_count: 1 */
      num2 = check(str_cut(str, index + 1, len)); /* line 35 slow_hit_count: 25, fast_hit_count: 1 */
  if (str[index] == '+') { /* line 36 slow_hit_count: 25, fast_hit_count: 1 */
    if (num1 == 3 || num2 == 3) { /* line 37 slow_hit_count: 9, fast_hit_count: 0 */
      mp2[str] = 4; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      return 3; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      mp2[str] = 3; /* line 41 slow_hit_count: 9, fast_hit_count: 0 */
      return 2; /* line 42 slow_hit_count: 9, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (str[index] == '-') { /* line 44 slow_hit_count: 16, fast_hit_count: 1 */
    if (num1 == 3 || num2 == 2 || num2 == 3) { /* line 45 slow_hit_count: 5, fast_hit_count: 0 */
      mp2[str] = 4; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      return 3; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      mp2[str] = 3; /* line 49 slow_hit_count: 5, fast_hit_count: 0 */
      return 2; /* line 50 slow_hit_count: 5, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (str[index] == '*') { /* line 52 slow_hit_count: 11, fast_hit_count: 1 */
    if (num1 == 2 || num1 == 3 || num2 == 2 || num2 == 3) { /* line 53 slow_hit_count: 7, fast_hit_count: 0 */
      mp2[str] = 4; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      return 3; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      mp2[str] = 2; /* line 57 slow_hit_count: 7, fast_hit_count: 0 */
      return 1; /* line 58 slow_hit_count: 7, fast_hit_count: 0 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    if (num1 == 2 || num1 == 3 || num2 == 1 || num2 == 2 || num2 == 3) { /* line 61 slow_hit_count: 4, fast_hit_count: 1 */
      mp2[str] = 4; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      return 3; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      mp2[str] = 2; /* line 65 slow_hit_count: 4, fast_hit_count: 1 */
      return 1; /* line 66 slow_hit_count: 4, fast_hit_count: 1 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  int n = 0; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  getchar(); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 74 slow_hit_count: 5, fast_hit_count: 2 */
    string s; /* line 75 slow_hit_count: 8, fast_hit_count: 2 */
    string str1 = "", str2 = "", str3 = ""; /* line 76 slow_hit_count: 16, fast_hit_count: 4 */
    getline(cin, s); /* line 77 slow_hit_count: 4, fast_hit_count: 1 */
    bool b = 0, b2 = 1; /* line 78 slow_hit_count: 4, fast_hit_count: 1 */
    for (int i = 0; i < s.length(); i++) { /* line 79 slow_hit_count: 144, fast_hit_count: 16 */
      if (str1 != "#define" && s[i] != ' ') { /* line 80 slow_hit_count: 140, fast_hit_count: 15 */
        str1 += s[i]; /* line 81 slow_hit_count: 28, fast_hit_count: 7 */
        continue; /* line 82 slow_hit_count: 28, fast_hit_count: 7 */
      } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
      if (!b && s[i] != ' ' && b2) { /* line 84 slow_hit_count: 112, fast_hit_count: 8 */
        b = 1; /* line 85 slow_hit_count: 4, fast_hit_count: 1 */
      } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
      if (b && s[i] == ' ') { /* line 87 slow_hit_count: 112, fast_hit_count: 8 */
        b = 0; /* line 88 slow_hit_count: 4, fast_hit_count: 1 */
        b2 = 0; /* line 89 slow_hit_count: 4, fast_hit_count: 1 */
      } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
      if (b) { /* line 91 slow_hit_count: 112, fast_hit_count: 8 */
        str2 += s[i]; /* line 92 slow_hit_count: 25, fast_hit_count: 3 */
        continue; /* line 93 slow_hit_count: 25, fast_hit_count: 3 */
      } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
      if (s[i] != ' ') str3 += s[i]; /* line 95 slow_hit_count: 87, fast_hit_count: 5 */
    } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
    mp[str2] = str3; /* line 97 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  string check_str = ""; /* line 99 slow_hit_count: 2, fast_hit_count: 2 */
  getline(cin, check_str); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  string check_str2 = ""; /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < check_str.length(); i++) /* line 102 slow_hit_count: 100, fast_hit_count: 6 */
    if (check_str[i] != ' ') check_str2 += check_str[i]; /* line 103 slow_hit_count: 99, fast_hit_count: 5 */
  int ans = check(check_str2); /* line 104 slow_hit_count: 1, fast_hit_count: 1 */
  if (ans == 3) /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "Suspicious"; /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "OK"; /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 109 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 110 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts

1. **Function `check`**: The `check` function is heavily invoked, with a hit count of 55 in the slow run compared to just 3 in the fast run. This suggests a substantial difference in the complexity of expressions or macro replacements between the two inputs.

2. **Loop Inside `check` (Line 16)**: The loop iterating over the length of the string is executed 945 times in the slow input but only 12 times for the fast input. This indicates that the slow input likely involves more complex expressions or more nested macro substitutions, leading to more extensive processing.

3. **Function `str_cut`**: This function is called 54 times in the slow run versus only 2 times in the fast run. This suggests that the expressions involved in the slow input are likely being split or analyzed much more frequently, pointing towards more complicated macro expressions or compositions.

4. **Condition Checks**: The conditions on lines 19-20 (involving operators and parentheses) are executed 890 times in the slow input but just 9 times in the fast input. This further highlights differences in expression complexity or structure, leading to more branching or decision-making.

5. **Recursive Calls**: Recursive calls in `check` (like those on lines 34-35) show high involvement, indicating that recursion is a potential bottleneck when handling nested or complex expressions.

### Interaction with Data Structures

- The maps `mp` and `mp2` are used to store macro definitions and intermediate results, respectively. The repeated accesses may be more frequent due to the complexity of expressions, causing additional overhead in the slow input case.

- The use of deeply nested or recursive macro expressions (with potential re-evaluation or re-substitution) can lead to exponential growth in processing time due to increased recursion depth and branching.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **Complex Expression Structures**: "When the macro expression involves multiple nested operations without adequate parentheses, leading to potential changes in operation precedence, the evaluation becomes increasingly recursive and complex, potentially slowing down the execution."

2. **High Recursive Depth**: "If the macro substitutions lead to a recursive evaluation where expressions are deeply nested, especially involving multiple arithmetic operations, the program may slow down significantly due to increased depth and branching."

3. **Frequent Macro Splitting**: "When expressions frequently require splitting (e.g., involving multiple operators or complex arithmetic without clear boundaries), the program spends excessive time in parsing and recursive checks, causing sluggish performance."

4. **Inefficient Operator Handling**: "If an arithmetic expression after macro substitution includes multiple operators with potential precedence conflicts (e.g., '+' versus '*' without parentheses), the evaluation becomes complex and can degrade performance due to excessive condition checks."

5. **Extensive Conditional Checks**: "In cases where the expressions lead to numerous conditional checks and backtracking (e.g., evaluating which branches to take during parsing), the processing time can increase significantly, indicating potential inefficiencies."

These invariants abstractly describe conditions that trigger slow execution, primarily due to complex macro expressions, recursive depth, and inefficient parsing of nested operations. They are broad enough to capture future scenarios where similar slowdowns might occur.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Most C/C++ programmers know about excellent opportunities that preprocessor #define directives give; but many know as well about the problems that can arise because of their careless use.

In this problem we consider the following model of #define constructions (also called macros). Each macro has its name and value. The generic syntax for declaring a macro is the following:

#define macro_name macro_value

After the macro has been declared, "macro_name" is replaced with "macro_value" each time it is met in the program (only the whole tokens can be replaced; i.e. "macro_name" is replaced only when it is surrounded by spaces or other non-alphabetic symbol). A "macro_value" within our model can only be an arithmetic expression consisting of variables, four arithmetic operations, brackets, and also the names of previously declared macros (in this case replacement is performed sequentially). The process of replacing macros with their values is called substitution.

One of the main problems arising while using macros — the situation when as a result of substitution we get an arithmetic expression with the changed order of calculation because of different priorities of the operations.

Let's consider the following example. Say, we declared such a #define construction:

#define sum x + y

and further in the program the expression "2 * sum" is calculated. After macro substitution is performed we get "2 * x + y", instead of intuitively expected "2 * (x + y)".

Let's call the situation "suspicious", if after the macro substitution the order of calculation changes, falling outside the bounds of some macro. Thus, your task is to find out by the given set of #define definitions and the given expression if this expression is suspicious or not.

Let's speak more formally. We should perform an ordinary macros substitution in the given expression. Moreover, we should perform a "safe" macros substitution in the expression, putting in brackets each macro value; after this, guided by arithmetic rules of brackets expansion, we can omit some of the brackets. If there exist a way to get an expression, absolutely coinciding with the expression that is the result of an ordinary substitution (character-by-character, but ignoring spaces), then this expression and the macros system are called correct, otherwise — suspicious.

Note that we consider the "/" operation as the usual mathematical division, not the integer division like in C/C++. That's why, for example, in the expression "a*(b/c)" we can omit brackets to get the expression "a*b/c".

Input

The first line contains the only number n (0 ≤ n ≤ 100) — the amount of #define constructions in the given program.

Then there follow n lines, each of them contains just one #define construction. Each construction has the following syntax:

#define name expression

where

  * name — the macro name, 
  * expression — the expression with which the given macro will be replaced. An expression is a non-empty string, containing digits,names of variables, names of previously declared macros, round brackets and operational signs +-*/. It is guaranteed that the expression (before and after macros substitution) is a correct arithmetic expression, having no unary operations. The expression contains only non-negative integers, not exceeding 109. 



All the names (#define constructions' names and names of their arguments) are strings of case-sensitive Latin characters. It is guaranteed that the name of any variable is different from any #define construction.

Then, the last line contains an expression that you are to check. This expression is non-empty and satisfies the same limitations as the expressions in #define constructions.

The input lines may contain any number of spaces anywhere, providing these spaces do not break the word "define" or the names of constructions and variables. In particular, there can be any number of spaces before and after the "#" symbol.

The length of any line from the input file does not exceed 100 characters.

Output

Output "OK", if the expression is correct according to the above given criterion, otherwise output "Suspicious".

Examples

Input

1
#define sum x + y
1 * sum


Output

Suspicious


Input

1
#define sum  (x + y)
sum - sum


Output

OK


Input

4
#define sum  x + y
#define mul  a * b
#define div  a / b
#define expr sum + mul * div * mul
expr


Output

OK


Input

3
#define SumSafe   (a+b)
#define DivUnsafe  a/b
#define DenominatorUnsafe  a*b
((SumSafe) + DivUnsafe/DivUnsafe + x/DenominatorUnsafe)


Output

Suspicious

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the checker functions that implement the performance-characterizing invariants derived in natural language:

```cpp
// Check for complex expression structures leading to potential precedence issues
void check_complex_expression_structure(bool condition) {
    if (condition) {
        cerr << "Warning: Complex expression structure with potential precedence issues!" << endl;
        abort();
    }
}

// Check for excessive recursion depth due to nested operations
void check_recursive_depth_invariant(int currentDepth, int maxAllowedDepth) {
    if (currentDepth > maxAllowedDepth) {
        cerr << "Warning: Excessive recursive depth detected!" << endl;
        abort();
    }
}

// Check for frequent splitting of expressions
void check_frequent_splitting(bool condition) {
    if (condition) {
        cerr << "Warning: Frequent expression splitting detected!" << endl;
        abort();
    }
}

// Check for inefficient operator handling due to precedence conflicts
void check_operator_precedence(bool condition) {
    if (condition) {
        cerr << "Warning: Inefficient operator handling due to precedence conflicts!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Below is the instrumented C++ code with performance-characterizing checks incorporated:

```cpp
#include <bits/stdc++.h>
using namespace std;

map<string, string> mp;
map<string, int> mp2;

string str_cut(string str1, int index1, int index2) {
    string str2 = "";
    str2 = str1.substr(index1, index2 - index1);
    return str2;
}

int check(string str, int currentDepth) {
    // Check recursion depth invariant
    check_recursive_depth_invariant(currentDepth, 10); // Arbitrary max depth for demonstration

    if (mp2[str] != 0) return (mp2[str] - 1);
    if (mp[str] != "") str = mp[str];
    int len = str.length();
    int in = 0;
    int index1 = -1, index2 = -1;
    for (int i = 0; i < len; i++) {
        if (str[i] == '(') in++;
        if (str[i] == ')') in--;
        if ((str[i] == '+' || str[i] == '-') && in == 0) index1 = i;
        if ((str[i] == '*' || str[i] == '/') && in == 0) index2 = i;
    }
    int index = 0;
    if (str[0] == '(' && str[len - 1] == ')' && index1 == -1 && index2 == -1) {
        if (check(str_cut(str, 1, len - 1), currentDepth + 1) == 3)
            return 3;
        else
            return 0;
    }
    if (index1 == -1 && index2 == -1) return 0;
    if (index1 == -1)
        index = index2;
    else
        index = index1;
    int num1 = check(str_cut(str, 0, index), currentDepth + 1),
        num2 = check(str_cut(str, index + 1, len), currentDepth + 1);

    // Check for potential precedence conflicts
    check_operator_precedence((num1 == 3 || num2 == 3) && (str[index] == '+' || str[index] == '-'));
    check_operator_precedence((num1 == 2 || num2 == 2) && (str[index] == '*' || str[index] == '/'));

    if (str[index] == '+') {
        if (num1 == 3 || num2 == 3) {
            mp2[str] = 4;
            return 3;
        } else {
            mp2[str] = 3;
            return 2;
        }
    } else if (str[index] == '-') {
        if (num1 == 3 || num2 == 2 || num2 == 3) {
            mp2[str] = 4;
            return 3;
        } else {
            mp2[str] = 3;
            return 2;
        }
    } else if (str[index] == '*') {
        if (num1 == 2 || num1 == 3 || num2 == 2 || num2 == 3) {
            mp2[str] = 4;
            return 3;
        } else {
            mp2[str] = 2;
            return 1;
        }
    } else {
        if (num1 == 2 || num1 == 3 || num2 == 1 || num2 == 2 || num2 == 3) {
            mp2[str] = 4;
            return 3;
        } else {
            mp2[str] = 2;
            return 1;
        }
    }
}

int main() {
    int n = 0;
    cin >> n;
    getchar();
    for (int i = 0; i < n; i++) {
        string s;
        string str1 = "", str2 = "", str3 = "";
        getline(cin, s);
        bool b = 0, b2 = 1;
        for (int i = 0; i < s.length(); i++) {
            if (str1 != "#define" && s[i] != ' ') {
                str1 += s[i];
                continue;
            }
            if (!b && s[i] != ' ' && b2) {
                b = 1;
            }
            if (b && s[i] == ' ') {
                b = 0;
                b2 = 0;
            }
            if (b) {
                str2 += s[i];
                continue;
            }
            if (s[i] != ' ') str3 += s[i];
        }
        mp[str2] = str3;
    }
    string check_str = "";
    getline(cin, check_str);
    string check_str2 = "";
    for (int i = 0; i < check_str.length(); i++)
        if (check_str[i] != ' ') check_str2 += check_str[i];
    int ans = check(check_str2, 0);
    if (ans == 3)
        cout << "Suspicious";
    else
        cout << "OK";
    return 0;
}
```

### Explanation
- **Check Recursive Depth**: This is added to ensure that the program does not go too deep into recursion, which can slow down execution significantly.
  
- **Check Operator Precedence**: These checks are designed to catch situations where operator precedence might lead to different execution paths that result in performance degradation.

These checks are strategically placed to avoid performance impacts, while still providing helpful warnings during testing or fuzzing to catch potential slowdowns.

