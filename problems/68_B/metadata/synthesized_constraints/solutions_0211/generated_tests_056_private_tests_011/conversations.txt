system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

It is well known that the planet suffers from the energy crisis. Little Petya doesn't like that and wants to save the world. For this purpose he needs every accumulator to contain the same amount of energy. Initially every accumulator has some amount of energy: the i-th accumulator has ai units of energy. Energy can be transferred from one accumulator to the other. Every time x units of energy are transferred (x is not necessarily an integer) k percent of it is lost. That is, if x units were transferred from one accumulator to the other, amount of energy in the first one decreased by x units and in other increased by <image> units.

Your task is to help Petya find what maximum equal amount of energy can be stored in each accumulator after the transfers.

Input

First line of the input contains two integers n and k (1 ≤ n ≤ 10000, 0 ≤ k ≤ 99) — number of accumulators and the percent of energy that is lost during transfers.

Next line contains n integers a1, a2, ... , an — amounts of energy in the first, second, .., n-th accumulator respectively (0 ≤ ai ≤ 1000, 1 ≤ i ≤ n).

Output

Output maximum possible amount of energy that can remain in each of accumulators after the transfers of energy.

The absolute or relative error in the answer should not exceed 10 - 6.

Examples

Input

3 50
4 2 1


Output

2.000000000


Input

2 90
1 11


Output

1.909090909

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAX_N = 10004;
int a[MAX_N];
int main() {
  int n, k;
  double sum = 0;
  cin >> n >> k;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    sum += a[i];
  }
  double left = 0;
  double right = 1e6;
  for (int i = 0; i < 10000; i++) {
    double middle = (left + right) / 2;
    double pod = middle * n;
    for (int i = 0; i < n; i++) {
      if (a[i] < middle) {
        pod += (middle - a[i]) * ((double)100 / (double)(100 - k) - (double)1);
      }
    }
    if (pod > sum)
      right = middle;
    else
      left = middle;
  }
  cout << fixed << setprecision(10) << left;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

103 26
33 455 273 884 569 636 360 69 802 310 405 594 693 339 43 53 1057 514 590 835 1000 191 456 582 641 35 731 207 600 830 416 483 431 377 481 910 367 597 58 413 128 873 42 173 104 553 26 383 673 849 728 503 924 819 108 422 169 454 333 134 926 247 464 289 115 547 567 663 123 396 21 890 385 436 584 432 984 683 345 706 294 901 291 606 12 24 89 1706 203 962 804 745 166 425 393 252 811 195 571 596 41 486 445


(G.2) Fast Input

5 26
42 65 23 43 64


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX_N = 10004; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[MAX_N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  double sum = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 9 slow_hit_count: 104, fast_hit_count: 6 */
    cin >> a[i]; /* line 10 slow_hit_count: 103, fast_hit_count: 5 */
    sum += a[i]; /* line 11 slow_hit_count: 103, fast_hit_count: 5 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  double left = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  double right = 1e6; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 10000; i++) { /* line 15 slow_hit_count: 10001, fast_hit_count: 10001 */
    double middle = (left + right) / 2; /* line 16 slow_hit_count: 10000, fast_hit_count: 10000 */
    double pod = middle * n; /* line 17 slow_hit_count: 10000, fast_hit_count: 10000 */
    for (int i = 0; i < n; i++) { /* line 18 slow_hit_count: 1040000, fast_hit_count: 60000 */
      if (a[i] < middle) { /* line 19 slow_hit_count: 1030000, fast_hit_count: 50000 */
        pod += (middle - a[i]) * ((double)100 / (double)(100 - k) - (double)1); /* line 20 slow_hit_count: 500504, fast_hit_count: 30020 */
      } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    if (pod > sum) /* line 23 slow_hit_count: 10000, fast_hit_count: 10000 */
      right = middle; /* line 24 slow_hit_count: 9975, fast_hit_count: 42 */
    else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      left = middle; /* line 26 slow_hit_count: 25, fast_hit_count: 9958 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << fixed << setprecision(10) << left; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Performance Analysis and Invariants**

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts:**
   - The line `for (int i = 0; i < n; i++)` inside the binary search loop (line 18) has significantly more hits in the slow input (1,040,000) compared to the fast input (60,000). This suggests that more iterations are performed in the inner loop for the slow input.
   - The conditional `if (a[i] < middle)` (line 19) is also hit extensively, indicating frequent evaluation during the inner loop iterations.
   - The line `pod += (middle - a[i]) * ((double)100 / (double)(100 - k) - (double)1);` (line 20) is executed 500,504 times for the slow input in contrast to 30,020 times for the fast input, highlighting costly operations related to pod calculation.

2. **Inference on Data Interactions:**
   - The inner loop iterates over each accumulator and likely recalculates a transfer potential. This is computationally intensive due to the nested loop and arithmetic operations.
   - The primary difference between fast and slow input is the number of accumulators (`n` = 103 vs 5), which amplifies the number of computations, especially when `middle` is adjusted during the binary search process.

### Phase 2: Derive Performance-characterizing Invariants

1. **Invariant on Input Size and Loops:**
   - "When the number of accumulators (`n`) approaches the upper constraint limit and the energy variance among them is large, the repeated calculations in the nested loop can significantly slow down the execution."
   
2. **Invariant on Energy Distribution:**
   - "If the initial energy values (`a[i]`) vary greatly from one another, especially where many values are below the calculated `middle`, the program may enter a slow path due to increased iterations and recalculations within the nested loops."
   
3. **Invariant on Transfer Loss Rate (`k`):**
   - "As the energy loss percentage (`k`) increases, the number of necessary recalculations in the nested loop tends to rise, potentially triggering slower execution paths."

4. **Invariant on Binary Search Iterations:**
   - "If the value of `middle` requires frequent adjustment due to the summation condition (`pod > sum`), this will cause prolonged execution through the binary search process, particularly when many accumulators are involved."

These invariants abstractly capture potential slowdowns based on input characteristics and program behavior without relying on specific numeric values from the slow input. The focus is on input patterns that lead to increased computational overhead, especially concerning the constraints of `n <= 10000`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
It is well known that the planet suffers from the energy crisis. Little Petya doesn't like that and wants to save the world. For this purpose he needs every accumulator to contain the same amount of energy. Initially every accumulator has some amount of energy: the i-th accumulator has ai units of energy. Energy can be transferred from one accumulator to the other. Every time x units of energy are transferred (x is not necessarily an integer) k percent of it is lost. That is, if x units were transferred from one accumulator to the other, amount of energy in the first one decreased by x units and in other increased by <image> units.

Your task is to help Petya find what maximum equal amount of energy can be stored in each accumulator after the transfers.

Input

First line of the input contains two integers n and k (1 ≤ n ≤ 10000, 0 ≤ k ≤ 99) — number of accumulators and the percent of energy that is lost during transfers.

Next line contains n integers a1, a2, ... , an — amounts of energy in the first, second, .., n-th accumulator respectively (0 ≤ ai ≤ 1000, 1 ≤ i ≤ n).

Output

Output maximum possible amount of energy that can remain in each of accumulators after the transfers of energy.

The absolute or relative error in the answer should not exceed 10 - 6.

Examples

Input

3 50
4 2 1


Output

2.000000000


Input

2 90
1 11


Output

1.909090909

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characteristic invariants from Phase 2 into C++ checker functions (Phase 3) and then integrate these checkers into the provided C++ program (Phase 4).

### Phase 3: Implementing Checkers in C++

For each invariant derived in Phase 2, we will write a corresponding checker function in C++.

1. **Invariant on Input Size and Loops:**
   - "When the number of accumulators (`n`) approaches the upper constraint limit and the energy variance among them is large, the repeated calculations in the nested loop can significantly slow down the execution."
   
   ```cpp
   void check_input_size_and_variance(int n, vector<int>& a) {
       int max_energy = *max_element(a.begin(), a.end());
       int min_energy = *min_element(a.begin(), a.end());
       if (n > 9000 && (max_energy - min_energy) > 500) { // Threshold chosen based on problem constraints
           cerr << "Warning: Performance bottleneck due to large input size and high energy variance!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Energy Distribution:**
   - "If the initial energy values (`a[i]`) vary greatly from one another, especially where many values are below the calculated `middle`, the program may enter a slow path due to increased iterations and recalculations within the nested loops."
   
   ```cpp
   void check_energy_distribution(vector<int>& a) {
       int max_energy = *max_element(a.begin(), a.end());
       int count_below_half_max = count_if(a.begin(), a.end(), [&](int energy) { return energy < max_energy / 2; });
       if (count_below_half_max > a.size() / 2) { // More than half the elements are below half the max energy
           cerr << "Warning: High number of accumulators with low energy leading to slow execution!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Transfer Loss Rate (`k`):**
   - "As the energy loss percentage (`k`) increases, the number of necessary recalculations in the nested loop tends to rise, potentially triggering slower execution paths."
   
   ```cpp
   void check_loss_rate(int k) {
       if (k > 80) { // Arbitrary high threshold for loss rate
           cerr << "Warning: High energy loss rate causing potential performance degradation!" << endl;
           abort();
       }
   }
   ```

4. **Invariant on Binary Search Iterations:**
   - "If the value of `middle` requires frequent adjustment due to the summation condition (`pod > sum`), this will cause prolonged execution through the binary search process, particularly when many accumulators are involved."
   
   ```cpp
   void check_binary_search_iterations(int n, double pod, double sum) {
       if (pod > sum * 1.1 && n > 9000) { // Arbitrary threshold for pod deviation and high n
           cerr << "Warning: Excessive binary search iterations due to pod exceeding sum!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the C++ Program

Now, let's integrate these checkers into the provided C++ code.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAX_N = 10004;
int a[MAX_N];

void check_input_size_and_variance(int n, vector<int>& a) {
    int max_energy = *max_element(a.begin(), a.end());
    int min_energy = *min_element(a.begin(), a.end());
    if (n > 9000 && (max_energy - min_energy) > 500) {
        cerr << "Warning: Performance bottleneck due to large input size and high energy variance!" << endl;
        abort();
    }
}

void check_energy_distribution(vector<int>& a) {
    int max_energy = *max_element(a.begin(), a.end());
    int count_below_half_max = count_if(a.begin(), a.end(), [&](int energy) { return energy < max_energy / 2; });
    if (count_below_half_max > a.size() / 2) {
        cerr << "Warning: High number of accumulators with low energy leading to slow execution!" << endl;
        abort();
    }
}

void check_loss_rate(int k) {
    if (k > 80) {
        cerr << "Warning: High energy loss rate causing potential performance degradation!" << endl;
        abort();
    }
}

void check_binary_search_iterations(int n, double pod, double sum) {
    if (pod > sum * 1.1 && n > 9000) {
        cerr << "Warning: Excessive binary search iterations due to pod exceeding sum!" << endl;
        abort();
    }
}

int main() {
    int n, k;
    double sum = 0;
    cin >> n >> k;
    vector<int> energy_levels(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        energy_levels[i] = a[i];
        sum += a[i];
    }

    check_input_size_and_variance(n, energy_levels); // Check for large input size and energy variance
    check_energy_distribution(energy_levels); // Check energy distribution variance
    check_loss_rate(k); // Check the loss rate invariant

    double left = 0;
    double right = 1e6;
    for (int i = 0; i < 10000; i++) {
        double middle = (left + right) / 2;
        double pod = middle * n;
        for (int i = 0; i < n; i++) {
            if (a[i] < middle) {
                pod += (middle - a[i]) * ((double)100 / (double)(100 - k) - (double)1);
            }
        }
        check_binary_search_iterations(n, pod, sum); // Check during binary search iterations
        if (pod > sum)
            right = middle;
        else
            left = middle;
    }
    cout << fixed << setprecision(10) << left;
    return 0;
}
```

### Explanation of Integration:

- **Input Checks**: After input is read, invariants related to input size and distribution are checked to avoid potential slow paths.
- **Loss Rate Check**: Before starting the binary search, the loss rate is checked to prevent performance degradation.
- **Binary Search Check**: During the binary search loop, if the recalculations appear excessive (i.e., `pod` consistently overshooting `sum`), a check warns about possible inefficiency. 

These checks help identify performance bottlenecks early in execution and are structured to facilitate fuzz testing for slow input scenarios.

