system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

It is well known that the planet suffers from the energy crisis. Little Petya doesn't like that and wants to save the world. For this purpose he needs every accumulator to contain the same amount of energy. Initially every accumulator has some amount of energy: the i-th accumulator has ai units of energy. Energy can be transferred from one accumulator to the other. Every time x units of energy are transferred (x is not necessarily an integer) k percent of it is lost. That is, if x units were transferred from one accumulator to the other, amount of energy in the first one decreased by x units and in other increased by <image> units.

Your task is to help Petya find what maximum equal amount of energy can be stored in each accumulator after the transfers.

Input

First line of the input contains two integers n and k (1 ≤ n ≤ 10000, 0 ≤ k ≤ 99) — number of accumulators and the percent of energy that is lost during transfers.

Next line contains n integers a1, a2, ... , an — amounts of energy in the first, second, .., n-th accumulator respectively (0 ≤ ai ≤ 1000, 1 ≤ i ≤ n).

Output

Output maximum possible amount of energy that can remain in each of accumulators after the transfers of energy.

The absolute or relative error in the answer should not exceed 10 - 6.

Examples

Input

3 50
4 2 1


Output

2.000000000


Input

2 90
1 11


Output

1.909090909

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long N = 200005, INF = 2000000000000000000;
long double pi = 3.1415926535897932, minn = 1e-11;
long long power(long long a, long long b, long long p) {
  if (a == 0) return 0;
  long long res = 1;
  a %= p;
  while (b > 0) {
    if (b & 1) res = (res * a) % p;
    b >>= 1;
    a = (a * a) % p;
  }
  return res;
}
int32_t main() {
  std::ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout.precision(std::numeric_limits<double>::max_digits10);
  ;
  long long n;
  long double k, ans = 0;
  cin >> n >> k;
  long double ar[n];
  for (long long i = 0; i < n; i++) cin >> ar[i];
  long double l = 0, r = 1000.0;
  while ((r - l) > minn) {
    long double m = (l + r) / 2.0;
    map<long double, long long> mp;
    for (long long i = 0; i < n; i++) mp[ar[i]]++;
    long long f = 0;
    while (mp.size()) {
      auto it = mp.begin();
      long double cu = (*it).first;
      it = mp.end();
      it--;
      long double last = (*it).first;
      if (cu >= m) break;
      long double req = (100.0 * (m - cu)) / (100.0 - k);
      auto itr = mp.lower_bound(req + m);
      if (itr == mp.end()) {
        if (last <= m) {
          f = 1;
          break;
        }
        long double g = last - m;
        mp[last]--;
        if (mp[last] == 0) mp.erase(last);
        mp[cu]--;
        if (mp[cu] == 0) mp.erase(cu);
        mp[cu + (g * ((100.0 - k) / 100.0))]++;
      } else {
        long double fin = (*itr).first;
        mp[fin]--;
        if (mp[fin] == 0) mp.erase(fin);
        mp[fin - req]++;
        mp[cu]--;
        if (mp[cu] == 0) mp.erase(cu);
      }
    }
    if (f == 0) {
      ans = m;
      l = m;
    } else
      r = m;
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

103 26
33 455 273 884 569 636 360 69 802 310 405 594 693 339 43 53 1057 514 590 835 1000 191 456 582 641 35 731 207 600 830 416 483 431 377 481 910 367 597 58 413 128 873 42 173 104 553 26 383 673 849 728 503 924 819 108 422 169 454 333 134 926 247 464 289 115 547 567 663 123 396 21 890 385 436 584 432 984 683 345 706 294 901 238 606 12 24 89 1706 203 962 804 745 166 425 393 252 415 195 571 596 41 486 445


(G.2) Fast Input

5 26
42 65 23 43 64


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 200005, INF = 2000000000000000000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long double pi = 3.1415926535897932, minn = 1e-11; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long a, long long b, long long p) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0) return 0; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  a %= p; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  while (b > 0) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) res = (res * a) % p; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    a = (a * a) % p; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios::sync_with_stdio(false); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(std::numeric_limits<double>::max_digits10); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  long long n; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  long double k, ans = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  long double ar[n]; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) cin >> ar[i]; /* line 26 slow_hit_count: 104, fast_hit_count: 6 */
  long double l = 0, r = 1000.0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  while ((r - l) > minn) { /* line 28 slow_hit_count: 48, fast_hit_count: 48 */
    long double m = (l + r) / 2.0; /* line 29 slow_hit_count: 47, fast_hit_count: 47 */
    map<long double, long long> mp; /* line 30 slow_hit_count: 94, fast_hit_count: 94 */
    for (long long i = 0; i < n; i++) mp[ar[i]]++; /* line 31 slow_hit_count: 4888, fast_hit_count: 282 */
    long long f = 0; /* line 32 slow_hit_count: 47, fast_hit_count: 47 */
    while (mp.size()) { /* line 33 slow_hit_count: 4340, fast_hit_count: 213 */
      auto it = mp.begin(); /* line 34 slow_hit_count: 4340, fast_hit_count: 213 */
      long double cu = (*it).first; /* line 35 slow_hit_count: 4340, fast_hit_count: 213 */
      it = mp.end(); /* line 36 slow_hit_count: 4340, fast_hit_count: 213 */
      it--; /* line 37 slow_hit_count: 4340, fast_hit_count: 213 */
      long double last = (*it).first; /* line 38 slow_hit_count: 4340, fast_hit_count: 213 */
      if (cu >= m) break; /* line 39 slow_hit_count: 4357, fast_hit_count: 241 */
      long double req = (100.0 * (m - cu)) / (100.0 - k); /* line 40 slow_hit_count: 4310, fast_hit_count: 194 */
      auto itr = mp.lower_bound(req + m); /* line 41 slow_hit_count: 4310, fast_hit_count: 194 */
      if (itr == mp.end()) { /* line 42 slow_hit_count: 4310, fast_hit_count: 194 */
        if (last <= m) { /* line 43 slow_hit_count: 2173, fast_hit_count: 95 */
          f = 1; /* line 44 slow_hit_count: 17, fast_hit_count: 28 */
          break; /* line 45 slow_hit_count: 17, fast_hit_count: 28 */
        } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        long double g = last - m; /* line 47 slow_hit_count: 2156, fast_hit_count: 67 */
        mp[last]--; /* line 48 slow_hit_count: 2156, fast_hit_count: 67 */
        if (mp[last] == 0) mp.erase(last); /* line 49 slow_hit_count: 2156, fast_hit_count: 67 */
        mp[cu]--; /* line 50 slow_hit_count: 2156, fast_hit_count: 67 */
        if (mp[cu] == 0) mp.erase(cu); /* line 51 slow_hit_count: 2156, fast_hit_count: 67 */
        mp[cu + (g * ((100.0 - k) / 100.0))]++; /* line 52 slow_hit_count: 2156, fast_hit_count: 67 */
      } else { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        long double fin = (*itr).first; /* line 54 slow_hit_count: 2137, fast_hit_count: 99 */
        mp[fin]--; /* line 55 slow_hit_count: 2137, fast_hit_count: 99 */
        if (mp[fin] == 0) mp.erase(fin); /* line 56 slow_hit_count: 2137, fast_hit_count: 99 */
        mp[fin - req]++; /* line 57 slow_hit_count: 2137, fast_hit_count: 99 */
        mp[cu]--; /* line 58 slow_hit_count: 2137, fast_hit_count: 99 */
        if (mp[cu] == 0) mp.erase(cu); /* line 59 slow_hit_count: 2137, fast_hit_count: 99 */
      } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    if (f == 0) { /* line 62 slow_hit_count: 47, fast_hit_count: 47 */
      ans = m; /* line 63 slow_hit_count: 30, fast_hit_count: 19 */
      l = m; /* line 64 slow_hit_count: 30, fast_hit_count: 19 */
    } else /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      r = m; /* line 66 slow_hit_count: 17, fast_hit_count: 28 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 68 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 69 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C code, let's go through the tasks:

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Line-Level Hit Count Analysis:
1. **Line 31 (`for (long long i = 0; i < n; i++) mp[ar[i]]++;`)**: This line shows a significant difference in hit counts between the slow input (4888 hits) and the fast input (282 hits). It's involved in populating a map with the initial energy values of accumulators.
2. **Lines 33-59**: These lines form a nested loop where significant disparity is observed:
   - **Line 33 (`while (mp.size())`)**: Loop iterations are much higher for the slow input (4340 hits) compared to the fast input (213 hits).
   - **Lines 34-41**: These lines are part of the process to find whether energy can be transferred, with hit counts aligning with the outer loop's iterations.
   - **Line 42 (`if (itr == mp.end())`)** and subsequent blocks: Differentiating between finding a suitable energy level in the map or iterating through adjustments.
3. **Line 39 (`if (cu >= m) break;`)**: It has slightly higher hits in the slow run (4357) than in the fast run (241), indicating more iterations before breaking out of the loop due to the condition not being met.
4. **Lines 47-59**: Operations that adjust energy levels in the map, again showing a disparity in hit counts, indicating more actions being required to balance energy levels for the slow input.

These lines are involved in a binary search algorithm that attempts to equalize the energy distribution among accumulators and seem to be the main contributors to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Given the analysis, the performance issues can be characterized by the following natural language invariants:

1. **Invariant 1: High Variability Among Energy Levels**
   - **Description**: When the initial energy levels of accumulators have high variability, the program tends to perform more operations to balance energy among them. This is due to the increased need for repeated redistribution and adjustments in the map data structure, resulting in longer execution times.
   
2. **Invariant 2: Large Number of Accumulators**
   - **Description**: When the number of accumulators (`n`) is significantly large, close to its upper constraint (n ≈ 10000), the binary search algorithm performs more iterations as it tries to find the optimal energy level, leading to increased execution time. This is especially true if there is a wide range of initial energy levels.

3. **Invariant 3: High Energy Loss Percentage**
   - **Description**: If the percentage of energy lost during transmission (`k`) is high, closer to the upper bound (k ≈ 99), the number of necessary iterations in the map manipulation increases because energy transfer becomes less efficient, requiring more redistribution attempts.

### Summary of Performance Conditions

- **High Variability in Energy Levels**: The more varied the initial energies, the more complex the task of finding a common level for all accumulators, thus increasing the number of iterations in loops.
- **Large n (Number of Accumulators)**: As n approaches its upper constraint, the process of equalizing energy becomes more computationally demanding.
- **High k (Energy Loss Percentage)**: The greater the energy loss percentage, the more challenging it becomes to efficiently balance energy, leading to more loop iterations and computational overhead.

These conditions should be monitored to predict and potentially mitigate slowdowns in future inputs and align with the problem's constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
It is well known that the planet suffers from the energy crisis. Little Petya doesn't like that and wants to save the world. For this purpose he needs every accumulator to contain the same amount of energy. Initially every accumulator has some amount of energy: the i-th accumulator has ai units of energy. Energy can be transferred from one accumulator to the other. Every time x units of energy are transferred (x is not necessarily an integer) k percent of it is lost. That is, if x units were transferred from one accumulator to the other, amount of energy in the first one decreased by x units and in other increased by <image> units.

Your task is to help Petya find what maximum equal amount of energy can be stored in each accumulator after the transfers.

Input

First line of the input contains two integers n and k (1 ≤ n ≤ 10000, 0 ≤ k ≤ 99) — number of accumulators and the percent of energy that is lost during transfers.

Next line contains n integers a1, a2, ... , an — amounts of energy in the first, second, .., n-th accumulator respectively (0 ≤ ai ≤ 1000, 1 ≤ i ≤ n).

Output

Output maximum possible amount of energy that can remain in each of accumulators after the transfers of energy.

The absolute or relative error in the answer should not exceed 10 - 6.

Examples

Input

3 50
4 2 1


Output

2.000000000


Input

2 90
1 11


Output

1.909090909

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Code in C++

Here are the checker functions for each of the performance-characterizing invariants derived previously:

```cpp
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>

using namespace std;

// Invariant checkers

// Check for high variability among energy levels
void check_variability_invariant(const vector<long double>& ar, long double threshold) {
    long double minEnergy = *min_element(ar.begin(), ar.end());
    long double maxEnergy = *max_element(ar.begin(), ar.end());

    if (maxEnergy - minEnergy > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high variability among energy levels!" << endl;
        abort();
    }
}

// Check for large number of accumulators
void check_accumulator_size_invariant(long long n, long long threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of accumulators!" << endl;
        abort();
    }
}

// Check for high energy loss percentage
void check_energy_loss_invariant(long double k, long double threshold) {
    if (k > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high energy loss percentage!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers with the Original Program

Here is the complete C++ program with integrated performance-checking code:

```cpp
#include <bits/stdc++.h>
using namespace std;

const long long N = 200005, INF = 2000000000000000000;
long double pi = 3.1415926535897932, minn = 1e-11;

// Invariant checkers

// Check for high variability among energy levels
void check_variability_invariant(const vector<long double>& ar, long double threshold) {
    long double minEnergy = *min_element(ar.begin(), ar.end());
    long double maxEnergy = *max_element(ar.begin(), ar.end());

    if (maxEnergy - minEnergy > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high variability among energy levels!" << endl;
        abort();
    }
}

// Check for large number of accumulators
void check_accumulator_size_invariant(long long n, long long threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of accumulators!" << endl;
        abort();
    }
}

// Check for high energy loss percentage
void check_energy_loss_invariant(long double k, long double threshold) {
    if (k > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high energy loss percentage!" << endl;
        abort();
    }
}

int32_t main() {
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cout.precision(std::numeric_limits<double>::max_digits10);
    
    long long n;
    long double k, ans = 0;
    cin >> n >> k;

    // Check for large number of accumulators
    check_accumulator_size_invariant(n, 9000); // Threshold set close to upper limit

    vector<long double> ar(n);
    for (long long i = 0; i < n; i++) cin >> ar[i];

    // Check for high variability among energy levels
    check_variability_invariant(ar, 800); // Arbitrary threshold for variability

    // Check for high energy loss percentage
    check_energy_loss_invariant(k, 90); // High threshold for energy loss percentage

    long double l = 0, r = 1000.0;
    while ((r - l) > minn) {
        long double m = (l + r) / 2.0;
        map<long double, long long> mp;
        for (long long i = 0; i < n; i++) mp[ar[i]]++;
        long long f = 0;
        while (mp.size()) {
            auto it = mp.begin();
            long double cu = (*it).first;
            it = mp.end();
            it--;
            long double last = (*it).first;
            if (cu >= m) break;
            long double req = (100.0 * (m - cu)) / (100.0 - k);
            auto itr = mp.lower_bound(req + m);
            if (itr == mp.end()) {
                if (last <= m) {
                    f = 1;
                    break;
                }
                long double g = last - m;
                mp[last]--;
                if (mp[last] == 0) mp.erase(last);
                mp[cu]--;
                if (mp[cu] == 0) mp.erase(cu);
                mp[cu + (g * ((100.0 - k) / 100.0))]++;
            } else {
                long double fin = (*itr).first;
                mp[fin]--;
                if (mp[fin] == 0) mp.erase(fin);
                mp[fin - req]++;
                mp[cu]--;
                if (mp[cu] == 0) mp.erase(cu);
            }
        }
        if (f == 0) {
            ans = m;
            l = m;
        } else
            r = m;
    }
    cout << ans;
}
```

### Explanation:

- **High Variability Check**: This is checked after reading the energy levels to see if the range between minimum and maximum initial energy exceeds a set threshold.
- **Large Number of Accumulators**: Checked right after reading `n` to ensure the program stops if `n` exceeds an operationally large threshold.
- **High Energy Loss Percentage**: Checked after reading `k` to abort if the energy loss percentage is too high, affecting performance.

These checks are placed after input reading and initial setup but before any heavy computation, thus avoiding unnecessary overhead in the main processing loop.

