system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

It is well known that the planet suffers from the energy crisis. Little Petya doesn't like that and wants to save the world. For this purpose he needs every accumulator to contain the same amount of energy. Initially every accumulator has some amount of energy: the i-th accumulator has ai units of energy. Energy can be transferred from one accumulator to the other. Every time x units of energy are transferred (x is not necessarily an integer) k percent of it is lost. That is, if x units were transferred from one accumulator to the other, amount of energy in the first one decreased by x units and in other increased by <image> units.

Your task is to help Petya find what maximum equal amount of energy can be stored in each accumulator after the transfers.

Input

First line of the input contains two integers n and k (1 ≤ n ≤ 10000, 0 ≤ k ≤ 99) — number of accumulators and the percent of energy that is lost during transfers.

Next line contains n integers a1, a2, ... , an — amounts of energy in the first, second, .., n-th accumulator respectively (0 ≤ ai ≤ 1000, 1 ≤ i ≤ n).

Output

Output maximum possible amount of energy that can remain in each of accumulators after the transfers of energy.

The absolute or relative error in the answer should not exceed 10 - 6.

Examples

Input

3 50
4 2 1


Output

2.000000000


Input

2 90
1 11


Output

1.909090909

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void file() {}
void fast() {
  std::ios_base::sync_with_stdio(0);
  cin.tie(NULL);
}
int com(double a, double b) {
  if (abs(a - b) <= 1e-6)
    return 0;
  else if (a > b)
    return 1;
  else
    return 2;
}
int valid(vector<long long>& v1, double num, long long k) {
  double pos = 0, neg = 0;
  for (int i = 0; i < (int)(v1.size()); i++) {
    if (com(v1[i], num) == 1)
      pos += (v1[i] - num);
    else if (com(v1[i], num) == 2)
      neg += (num - v1[i]) * 100 / (100 - k);
  }
  return com(neg, pos);
}
int main() {
  file();
  fast();
  long long n, k;
  cin >> n >> k;
  vector<long long> v1(n);
  for (int i = 0; i < n; i++) cin >> v1[i];
  double start = 0, end = 1e12, mid, ans = -1;
  for (int i = 0; i < 1000; i++) {
    if (com(start, end) == 1) break;
    mid = (start + end) / 2.0;
    if (valid(v1, mid, k) == 2)
      start = mid;
    else {
      end = mid;
      ans = mid;
    }
  }
  cout << fixed << setprecision(9);
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

103 26
33 455 273 884 569 636 360 69 802 310 405 594 693 339 43 57 1057 514 590 835 1000 191 456 582 641 35 731 207 600 830 416 483 431 377 481 910 367 597 58 413 128 873 42 173 104 553 26 383 673 849 728 503 924 819 108 422 169 454 333 134 926 247 464 289 115 547 567 663 123 396 21 890 385 436 584 432 984 683 345 706 294 901 291 606 12 24 89 1706 203 962 804 745 166 425 393 252 811 195 571 596 41 486 445


(G.2) Fast Input

5 26
42 65 23 43 64


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void file() {} /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
void fast() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios_base::sync_with_stdio(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
int com(double a, double b) { /* line 8 slow_hit_count: 156543, fast_hit_count: 10064 */
  if (abs(a - b) <= 1e-6) /* line 9 slow_hit_count: 156543, fast_hit_count: 10064 */
    return 0; /* line 10 slow_hit_count: 954, fast_hit_count: 954 */
  else if (a > b) /* line 11 slow_hit_count: 155589, fast_hit_count: 9110 */
    return 1; /* line 12 slow_hit_count: 51501, fast_hit_count: 1978 */
  else /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    return 2; /* line 14 slow_hit_count: 104088, fast_hit_count: 7132 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int valid(vector<long long>& v1, double num, long long k) { /* line 16 slow_hit_count: 1000, fast_hit_count: 1000 */
  double pos = 0, neg = 0; /* line 17 slow_hit_count: 1000, fast_hit_count: 1000 */
  for (int i = 0; i < (int)(v1.size()); i++) { /* line 18 slow_hit_count: 104000, fast_hit_count: 6000 */
    if (com(v1[i], num) == 1) /* line 19 slow_hit_count: 103000, fast_hit_count: 5000 */
      pos += (v1[i] - num); /* line 20 slow_hit_count: 51457, fast_hit_count: 1936 */
    else if (com(v1[i], num) == 2) /* line 21 slow_hit_count: 51543, fast_hit_count: 3064 */
      neg += (num - v1[i]) * 100 / (100 - k); /* line 22 slow_hit_count: 51543, fast_hit_count: 3064 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return com(neg, pos); /* line 24 slow_hit_count: 1000, fast_hit_count: 1000 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  file(); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  fast(); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> v1(n); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> v1[i]; /* line 32 slow_hit_count: 104, fast_hit_count: 6 */
  double start = 0, end = 1e12, mid, ans = -1; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 1000; i++) { /* line 34 slow_hit_count: 1001, fast_hit_count: 1001 */
    if (com(start, end) == 1) break; /* line 35 slow_hit_count: 1000, fast_hit_count: 1000 */
    mid = (start + end) / 2.0; /* line 36 slow_hit_count: 1000, fast_hit_count: 1000 */
    if (valid(v1, mid, k) == 2) /* line 37 slow_hit_count: 1000, fast_hit_count: 1000 */
      start = mid; /* line 38 slow_hit_count: 942, fast_hit_count: 944 */
    else { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      end = mid; /* line 40 slow_hit_count: 58, fast_hit_count: 56 */
      ans = mid; /* line 41 slow_hit_count: 58, fast_hit_count: 56 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cout << fixed << setprecision(9); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << "\n"; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, let's analyze the line-level hit counts and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Hit Counts:
1. **Function `com`:** 
   - **Lines 8-14:** The function `com` is called very frequently, with 156,543 hits on the slow input compared to 10,064 hits on the fast input. This suggests that a large portion of the execution time is spent in this comparison function.
   
2. **Function `valid`:**
   - **Line 18 (Loop):** The loop inside `valid` runs 104,000 times for the slow input, compared to only 6,000 times for the fast input. This indicates a significant difference in the number of iterations, contributing to the slowdown.
   
3. **Main Loop:**
   - **Line 34 (Binary Search Loop):** Iteration count is consistent (1,000 times for both inputs), indicating that the loop itself isn't directly responsible for the difference, but rather the operations inside it.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the major slowdown is due to the loop within the `valid` function and the frequent calls to the `com` function. Let's derive natural language statements describing conditions under which the program likely enters a slow path:

1. **High Number of Iterations in Energy Redistribution Check:**
   - **Invariant 1:** "When the number of accumulators `n` is large, the function calculating the potential energy redistribution (`valid`) is called frequently within a binary search loop, leading to increased computational cost. This is exacerbated when the values of energy across accumulators vary significantly, causing frequent updates to `pos` and `neg` variables."

2. **Frequent Comparisons in Binary Search:**
   - **Invariant 2:** "If the range of potential maximum energy values (`start` to `end` in binary search) is vast due to disparate initial energy values in accumulators, the comparison function `com` is heavily utilized. This leads to a high number of comparisons and subsequent performance degradation."

3. **Large Energy Values Increasing Calculation Complexity:**
   - **Invariant 3:** "When individual accumulator energy values are large, especially nearing the upper input constraint (e.g., close to 1000), calculations involving energy transfer adjustments (like calculating `neg` in `valid`) become more complex and numerous, thereby slowing down the loop execution."

### Summary

The slow execution path in the code is primarily triggered by a high number of iterations in the `valid` function due to large discrepancies in accumulator energies and frequent comparisons within the binary search loop. These conditions, when combined with large accumulator counts or high values, cause significant performance degradation. Identifying and potentially optimizing these aspects (e.g., reducing unnecessary comparisons or optimizing energy calculations) could help mitigate the slowdown.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
It is well known that the planet suffers from the energy crisis. Little Petya doesn't like that and wants to save the world. For this purpose he needs every accumulator to contain the same amount of energy. Initially every accumulator has some amount of energy: the i-th accumulator has ai units of energy. Energy can be transferred from one accumulator to the other. Every time x units of energy are transferred (x is not necessarily an integer) k percent of it is lost. That is, if x units were transferred from one accumulator to the other, amount of energy in the first one decreased by x units and in other increased by <image> units.

Your task is to help Petya find what maximum equal amount of energy can be stored in each accumulator after the transfers.

Input

First line of the input contains two integers n and k (1 ≤ n ≤ 10000, 0 ≤ k ≤ 99) — number of accumulators and the percent of energy that is lost during transfers.

Next line contains n integers a1, a2, ... , an — amounts of energy in the first, second, .., n-th accumulator respectively (0 ≤ ai ≤ 1000, 1 ≤ i ≤ n).

Output

Output maximum possible amount of energy that can remain in each of accumulators after the transfers of energy.

The absolute or relative error in the answer should not exceed 10 - 6.

Examples

Input

3 50
4 2 1


Output

2.000000000


Input

2 90
1 11


Output

1.909090909

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's implement the performance-characterizing invariants derived in Phase 2 as runtime checks in C++.

#### Invariant 1: High Number of Iterations in Energy Redistribution Check
```cpp
void check_iterations_invariant(size_t loopIterations, size_t threshold) {
    if (loopIterations > threshold) {
        cerr << "Warning: Performance bottleneck due to high number of iterations in energy redistribution!" << endl;
        abort();
    }
}
```

#### Invariant 2: Frequent Comparisons in Binary Search
```cpp
void check_comparisons_invariant(size_t comparisonCount, size_t threshold) {
    if (comparisonCount > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive comparisons in binary search!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Energy Values Increasing Calculation Complexity
```cpp
void check_energy_values_invariant(const vector<long long>& energies, long long maxEnergyValue) {
    for (const auto& energy : energies) {
        if (energy > maxEnergyValue) {
            cerr << "Warning: Performance bottleneck due to large energy values causing complex calculations!" << endl;
            abort();
        }
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

void file() {}
void fast() {
    std::ios_base::sync_with_stdio(0);
    cin.tie(NULL);
}

int com(double a, double b) {
    if (abs(a - b) <= 1e-6)
        return 0;
    else if (a > b)
        return 1;
    else
        return 2;
}

int valid(vector<long long>& v1, double num, long long k) {
    double pos = 0, neg = 0;
    for (int i = 0; i < (int)(v1.size()); i++) {
        if (com(v1[i], num) == 1)
            pos += (v1[i] - num);
        else if (com(v1[i], num) == 2)
            neg += (num - v1[i]) * 100 / (100 - k);
    }
    return com(neg, pos);
}

// Phase 3 - Invariant check functions
void check_iterations_invariant(size_t loopIterations, size_t threshold) {
    if (loopIterations > threshold) {
        cerr << "Warning: Performance bottleneck due to high number of iterations in energy redistribution!" << endl;
        abort();
    }
}

void check_comparisons_invariant(size_t comparisonCount, size_t threshold) {
    if (comparisonCount > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive comparisons in binary search!" << endl;
        abort();
    }
}

void check_energy_values_invariant(const vector<long long>& energies, long long maxEnergyValue) {
    for (const auto& energy : energies) {
        if (energy > maxEnergyValue) {
            cerr << "Warning: Performance bottleneck due to large energy values causing complex calculations!" << endl;
            abort();
        }
    }
}

int main() {
    file();
    fast();
    
    long long n, k;
    cin >> n >> k;
    vector<long long> v1(n);
    for (int i = 0; i < n; i++) cin >> v1[i];

    // Check for large energy values
    check_energy_values_invariant(v1, 1000); // Max energy value threshold based on problem constraints

    double start = 0, end = 1e12, mid, ans = -1;
    size_t totalComparisons = 0; // Track the number of comparisons
    
    for (int i = 0; i < 1000; i++) {
        if (com(start, end) == 1) break;
        mid = (start + end) / 2.0;
        
        // Count comparisons in binary search
        totalComparisons++;
        
        if (valid(v1, mid, k) == 2)
            start = mid;
        else {
            end = mid;
            ans = mid;
        }
    }

    // Check for excessive comparisons in binary search
    check_comparisons_invariant(totalComparisons, 150000);  // Example threshold

    cout << fixed << setprecision(9);
    cout << ans << "\n";
    return 0;
}
```

### Explanation:
- **Checker Functions**: We created functions for each invariant that abort execution if certain thresholds are exceeded.
- **Integration**: We placed checks strategically:
  - After input reading to check for large energy values.
  - After the binary search loop to check the number of comparisons.
- **Thresholds**: We used thresholds consistent with the problem constraints (e.g., maximum energy value of 1000) and typical operational expectations (e.g., number of comparisons). Adjust these as needed based on empirical analysis.

