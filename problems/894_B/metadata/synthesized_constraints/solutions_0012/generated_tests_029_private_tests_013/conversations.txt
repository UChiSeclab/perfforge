system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ralph has a magic field which is divided into n × m blocks. That is to say, there are n rows and m columns on the field. Ralph can put an integer in each block. However, the magic field doesn't always work properly. It works only if the product of integers in each row and each column equals to k, where k is either 1 or -1.

Now Ralph wants you to figure out the number of ways to put numbers in each block in such a way that the magic field works properly. Two ways are considered different if and only if there exists at least one block where the numbers in the first way and in the second way are different. You are asked to output the answer modulo 1000000007 = 109 + 7.

Note that there is no range of the numbers to put in the blocks, but we can prove that the answer is not infinity.

Input

The only line contains three integers n, m and k (1 ≤ n, m ≤ 1018, k is either 1 or -1).

Output

Print a single number denoting the answer modulo 1000000007.

Examples

Input

1 1 -1


Output

1


Input

1 3 1


Output

1


Input

3 3 -1


Output

16

Note

In the first example the only way is to put -1 into the only block.

In the second example the only way is to put 1 into every block.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct trio {
  int first;
  int second;
  int third;
};
struct long_trio {
  long long first;
  long long second;
  long long third;
};
const long long INF = 1e18 + 2;
const int LIT = 505;
const int BIG = 200001;
string months[12] = {"January",   "February", "March",    "April",
                     "May",       "June",     "July",     "August",
                     "September", "October",  "November", "December"};
int days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
long long fact[13] = {1,    1,     2,      6,       24,       120,      720,
                      5040, 40320, 362280, 3622800, 39916800, 479001600};
int cx[6] = {1, -1, 0, 0, 0, 0};
int cy[6] = {0, 0, 1, -1, 0, 0};
int cz[6] = {0, 0, 0, 0, 1, -1};
long long st_10[10] = {1,       10,       100,       1000,      10000,
                       1000000, 10000000, 100000000, 1000000000};
long long n, m, k, l, r, x, y, t, ans = 1, w, s;
int main() {
  cin >> n >> m >> k;
  if (k == -1) {
    if ((n + m) % 2 == 1) {
      cout << 0;
      return 0;
    }
  }
  n--;
  m--;
  n = n % (1000000007 - 1);
  m = m % (1000000007 - 1);
  n = (n * m) % (1000000007 - 1);
  long long i2_in_10_6 = 1;
  for (int i = 0; i < 1000000; i++) {
    i2_in_10_6 = (i2_in_10_6 * 2) % 1000000007;
  }
  while (n > 0) {
    if (n > 1000000) {
      ans = (ans * i2_in_10_6) % 1000000007;
      n -= 1000000;
    } else {
      ans = (ans * 2) % 1000000007;
      n--;
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000001000000000000 2 1


(G.2) Fast Input

2 2 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct trio { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int first; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int second; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int third; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
struct long_trio { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  long long first; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  long long second; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  long long third; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e18 + 2; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int LIT = 505; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const int BIG = 200001; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
string months[12] = {"January",   "February", "March",    "April", /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
                     "May",       "June",     "July",     "August", /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
                     "September", "October",  "November", "December"}; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int days[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long fact[13] = {1,    1,     2,      6,       24,       120,      720, /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
                      5040, 40320, 362280, 3622800, 39916800, 479001600}; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int cx[6] = {1, -1, 0, 0, 0, 0}; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int cy[6] = {0, 0, 1, -1, 0, 0}; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int cz[6] = {0, 0, 0, 0, 1, -1}; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
long long st_10[10] = {1,       10,       100,       1000,      10000, /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
                       1000000, 10000000, 100000000, 1000000000}; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, k, l, r, x, y, t, ans = 1, w, s; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == -1) { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    if ((n + m) % 2 == 1) { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      cout << 0; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  n--; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  m--; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  n = n % (1000000007 - 1); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  m = m % (1000000007 - 1); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  n = (n * m) % (1000000007 - 1); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  long long i2_in_10_6 = 1; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 1000000; i++) { /* line 42 slow_hit_count: 1000001, fast_hit_count: 1000001 */
    i2_in_10_6 = (i2_in_10_6 * 2) % 1000000007; /* line 43 slow_hit_count: 1000000, fast_hit_count: 1000000 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  while (n > 0) { /* line 45 slow_hit_count: 995041, fast_hit_count: 2 */
    if (n > 1000000) { /* line 46 slow_hit_count: 995040, fast_hit_count: 1 */
      ans = (ans * i2_in_10_6) % 1000000007; /* line 47 slow_hit_count: 999, fast_hit_count: 0 */
      n -= 1000000; /* line 48 slow_hit_count: 999, fast_hit_count: 0 */
    } else { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      ans = (ans * 2) % 1000000007; /* line 50 slow_hit_count: 994041, fast_hit_count: 1 */
      n--; /* line 51 slow_hit_count: 994041, fast_hit_count: 1 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 55 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the task, let me systematically analyze the C program and derive performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Analysis**:
   - The lines within the loop starting at line 45 (`while (n > 0)`) are hit significantly more during the slow input compared to the fast input:
     - Lines 45, 46, 47, and 48 are hit very frequently with the slow input.
   - The loop on line 42 (`for (int i = 0; i < 1000000; i++)`) completes a fixed number of iterations (1,000,000) regardless of input size, so it doesn't contribute to a differential slowdown.

2. **Interpreting the Hits**:
   - The `while` loop on line 45 iterates based on the value of `n` after the transformations and calculations preceding it. The computation inside involves multiplying and reducing `n` iteratively. 
   - For the slow input, `n` is significantly larger after its initial setup. Therefore, it causes the loop to execute many more times than for the fast input.

3. **Interaction with Data**:
   - The multiplication and modulo operations on lines 38-40 transform input `n` and `m` into smaller equivalents, potentially leading to a large value of `n` in the `while` loop.
   - The condition `if (n > 1000000)` on line 46 is true for many iterations in the slow input, hence the block with `n -= 1000000` executes repeatedly, contributing to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are natural language statements that characterize the performance issues:

1. **Large Effective Size of `n`**:
   - **Invariant**: "When the effective value of `n` after modulo operations is significantly large, the program enters a long loop of computation, slowing down execution."
   - **Explanation**: The effective size of `n` dictates how many times the loop executes. A large `n` results in many iterations, especially when reduced by a constant like 1,000,000 each time.

2. **Conditional Path Execution**:
   - **Invariant**: "If the condition `n > 1000000` is frequently true within the loop, this indicates repeated execution of heavy computations, leading to slow performance."
   - **Explanation**: The loop has two branches, one for `n > 1000000` and another for smaller values. Frequent satisfaction of the larger condition results in a slower path.

3. **Input-Driven Behavior**:
   - **Invariant**: "Larger input values for `n` and `m` combined with the condition `(n * m) % (1000000007 - 1)` result in operations that scale poorly, especially near boundary conditions."
   - **Explanation**: The calculations effectively scale down large values, but still manage to produce a significant number of iterations for the loop.

These invariants abstractly describe why the program slows down for specific inputs without relying on exact values. They reflect the impact of input transformations and branching conditions on execution time.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ralph has a magic field which is divided into n × m blocks. That is to say, there are n rows and m columns on the field. Ralph can put an integer in each block. However, the magic field doesn't always work properly. It works only if the product of integers in each row and each column equals to k, where k is either 1 or -1.

Now Ralph wants you to figure out the number of ways to put numbers in each block in such a way that the magic field works properly. Two ways are considered different if and only if there exists at least one block where the numbers in the first way and in the second way are different. You are asked to output the answer modulo 1000000007 = 109 + 7.

Note that there is no range of the numbers to put in the blocks, but we can prove that the answer is not infinity.

Input

The only line contains three integers n, m and k (1 ≤ n, m ≤ 1018, k is either 1 or -1).

Output

Print a single number denoting the answer modulo 1000000007.

Examples

Input

1 1 -1


Output

1


Input

1 3 1


Output

1


Input

3 3 -1


Output

16

Note

In the first example the only way is to put -1 into the only block.

In the second example the only way is to put 1 into every block.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code for Performance Invariants

Based on the performance-characterizing invariants I previously outlined, here are the C++ checker functions:

1. **Checker for Large Effective Size of `n`**:

```cpp
void check_large_n_invariant(long long n) {
    if (n > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - large effective value of n." << endl;
        abort();
    }
}
```

2. **Checker for Frequent Large Condition Execution**:

```cpp
void check_frequent_large_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent large condition execution in loop." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

The following is the instrumented C++ code with the checker functions integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_n_invariant(long long n) {
    if (n > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - large effective value of n." << endl;
        abort();
    }
}

void check_frequent_large_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent large condition execution in loop." << endl;
        abort();
    }
}

int main() {
    long long n, m, k, ans = 1;
    cin >> n >> m >> k;
    if (k == -1) {
        if ((n + m) % 2 == 1) {
            cout << 0;
            return 0;
        }
    }
    n--;
    m--;
    n = n % (1000000007 - 1);
    m = m % (1000000007 - 1);
    n = (n * m) % (1000000007 - 1);

    // Check for large effective value of n
    check_large_n_invariant(n);

    long long i2_in_10_6 = 1;
    for (int i = 0; i < 1000000; i++) {
        i2_in_10_6 = (i2_in_10_6 * 2) % 1000000007;
    }
    
    while (n > 0) {
        // Check for frequent large condition execution
        check_frequent_large_condition(n > 1000000);

        if (n > 1000000) {
            ans = (ans * i2_in_10_6) % 1000000007;
            n -= 1000000;
        } else {
            ans = (ans * 2) % 1000000007;
            n--;
        }
    }
    cout << ans;
}
```

### Explanation of Checker Placement

- **`check_large_n_invariant`:** This is placed immediately after `n` is transformed and reduced since it checks whether `n` has a large effective value that could lead to a slowdown.
- **`check_frequent_large_condition`:** This is placed inside the `while` loop to trigger if the condition `n > 1000000` is repeatedly and frequently true, indicating a possible slow path in execution. 

These checks help detect when the program might experience performance bottlenecks due to large values or frequent execution paths that are computationally expensive.

