system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.

There are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.

Having finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).

So as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.

Input

The first and only line contains three integers n, m and k (1 ≤ n,m ≤ 2000, 0 ≤ k ≤ n-1) — the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.

Output

Print one integer — the number of ways to color bricks modulo 998 244 353.

Examples

Input


3 3 0


Output


3


Input


3 2 1


Output


4

Note

In the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.

In the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long Mod = 998244353;
int n, m, k;
long long dp[2010][2010];
long long Rec(int i, int k) {
  if (i == n) return (k == 0);
  if (dp[i][k] != -1) return dp[i][k];
  long long Res1 = Rec(i + 1, k);
  long long Res2 = ((Rec(i + 1, k - 1) % Mod) * ((m - 1) % Mod)) % Mod;
  return dp[i][k] = ((Res1 % Mod) + (Res2 % Mod)) % Mod;
}
int main() {
  cin >> n >> m >> k;
  memset(dp, -1, sizeof(dp));
  cout << ((m % Mod) * (Rec(1, k) % Mod)) % Mod;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

918 1704 19


(G.2) Fast Input

147 1704 19


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long Mod = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2010][2010]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long Rec(int i, int k) { /* line 6 slow_hit_count: 841807, fast_hit_count: 21463 */
  if (i == n) return (k == 0); /* line 7 slow_hit_count: 841807, fast_hit_count: 21463 */
  if (dp[i][k] != -1) return dp[i][k]; /* line 8 slow_hit_count: 839973, fast_hit_count: 21171 */
  long long Res1 = Rec(i + 1, k); /* line 9 slow_hit_count: 420903, fast_hit_count: 10731 */
  long long Res2 = ((Rec(i + 1, k - 1) % Mod) * ((m - 1) % Mod)) % Mod; /* line 10 slow_hit_count: 420903, fast_hit_count: 10731 */
  return dp[i][k] = ((Res1 % Mod) + (Res2 % Mod)) % Mod; /* line 11 slow_hit_count: 420903, fast_hit_count: 10731 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ((m % Mod) * (Rec(1, k) % Mod)) % Mod; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Line-Level Hit Counts:
1. **Function `Rec(int i, int k)`**:
   - Line 6 (Function call): `slow_hit_count` = 841807, `fast_hit_count` = 21463
   - Line 7 (Base case check): `slow_hit_count` = 841807, `fast_hit_count` = 21463
   - Line 8 (Memoization check): `slow_hit_count` = 839973, `fast_hit_count` = 21171
   - Line 9 (Recursive call `Rec(i + 1, k)`): `slow_hit_count` = 420903, `fast_hit_count` = 10731
   - Line 10 (Recursive call `Rec(i + 1, k - 1)`): `slow_hit_count` = 420903, `fast_hit_count` = 10731
   - Line 11 (Return and memoize result): `slow_hit_count` = 420903, `fast_hit_count` = 10731

#### Observations:
- The recursive function `Rec` is heavily called in the slow input scenario, indicating a deep or wide recursion tree.
- Lines 9 and 10 show equal hit counts, suggesting that both branches of recursion are being explored extensively.
- The hit count on Line 8 (memoization check) is particularly high, highlighting reliance on recomputation rather than leveraging memoized results effectively.

### Phase 2: Derive Performance-Characterizing Invariants

#### Invariant 1: Deep Recursion Triggered by High `n`
- **Natural language description**: "When `n` is large, the recursion depth within the function `Rec` becomes significant, leading to performance degradation due to extensive backtracking and recomputation."
- **Potential check in code**:
  ```c
  void check_deep_recursion_invariant(bool condition) {
      if (condition) {
          cerr << "Warning: deep_recursion_invariant triggered - large recursion depth due to high n" << endl;
          abort();
      }
  }

  // Example usage before starting recursion
  check_deep_recursion_invariant(n > 900); // arbitrary threshold considering n <= 2000
  ```

#### Invariant 2: Extensive Recursive Branching
- **Natural language description**: "When `k` is close to 0 or `n`, the recursion explores a broad search space due to the branching factor, which can slow down computation significantly."
- **Potential check in code**:
  ```c
  void check_branching_invariant(bool condition) {
      if (condition) {
          cerr << "Warning: branching_invariant triggered - broad branching due to extreme k values" << endl;
          abort();
      }
  }

  // Example usage before starting recursion
  check_branching_invariant(k < 10 || k > n - 10);
  ```

#### Invariant 3: Insufficient Memoization Efficiency
- **Natural language description**: "When a large portion of recursion calls require computing results rather than retrieving them from memoization, performance may degrade, especially in scenarios where `k` varies extensively."
- **Potential check in code**:
  ```c
  void check_memoization_invariant(bool condition) {
      if (condition) {
          cerr << "Warning: memoization_invariant triggered - high recomputation in recursion" << endl;
          abort();
      }
  }

  // Example usage to suggest inefficiency
  check_memoization_invariant(n * k > 1800000); // arbitrary threshold for memoization inefficiency
  ```

### Conclusion
These performance-characterizing invariants help identify scenarios where the recursive approach becomes inefficient, either due to excessive depth or breadth of recursion, or inefficient use of memoization. By abstracting the conditions into these invariants, we can better understand and anticipate slowdowns, allowing for more focused optimization efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.

There are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.

Having finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).

So as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.

Input

The first and only line contains three integers n, m and k (1 ≤ n,m ≤ 2000, 0 ≤ k ≤ n-1) — the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.

Output

Print one integer — the number of ways to color bricks modulo 998 244 353.

Examples

Input


3 3 0


Output


3


Input


3 2 1


Output


4

Note

In the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.

In the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets implementing each performance-characterizing invariant as checks:

#### Invariant 1: Deep Recursion Triggered by High `n`
```cpp
void check_deep_recursion_invariant(int n) {
    if (n > 900) { // arbitrary threshold considering n <= 2000
        cerr << "Warning: deep_recursion_invariant triggered - large recursion depth due to high n" << endl;
        abort();
    }
}
```

#### Invariant 2: Extensive Recursive Branching
```cpp
void check_branching_invariant(int k, int n) {
    if (k < 10 || k > n - 10) { // threshold to detect broad branching
        cerr << "Warning: branching_invariant triggered - broad branching due to extreme k values" << endl;
        abort();
    }
}
```

#### Invariant 3: Insufficient Memoization Efficiency
```cpp
void check_memoization_invariant(int n, int k) {
    if (n * k > 1800000) { // arbitrary threshold for memoization inefficiency
        cerr << "Warning: memoization_invariant triggered - high recomputation in recursion" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Now, let's integrate these checks into the C++ program. We'll place the checks after reading the input values to avoid adding overhead during the recursive computations.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long Mod = 998244353;
int n, m, k;
long long dp[2010][2010];

void check_deep_recursion_invariant(int n) {
    if (n > 900) { // check for deep recursion potential due to high n
        cerr << "Warning: deep_recursion_invariant triggered - large recursion depth due to high n" << endl;
        abort();
    }
}

void check_branching_invariant(int k, int n) {
    if (k < 10 || k > n - 10) { // check for extensive branching
        cerr << "Warning: branching_invariant triggered - broad branching due to extreme k values" << endl;
        abort();
    }
}

void check_memoization_invariant(int n, int k) {
    if (n * k > 1800000) { // check for insufficient memoization efficiency
        cerr << "Warning: memoization_invariant triggered - high recomputation in recursion" << endl;
        abort();
    }
}

long long Rec(int i, int k) {
    if (i == n) return (k == 0);
    if (dp[i][k] != -1) return dp[i][k];
    long long Res1 = Rec(i + 1, k);
    long long Res2 = ((Rec(i + 1, k - 1) % Mod) * ((m - 1) % Mod)) % Mod;
    return dp[i][k] = ((Res1 % Mod) + (Res2 % Mod)) % Mod;
}

int main() {
    cin >> n >> m >> k;
    
    // Insert performance-checking invariants
    check_deep_recursion_invariant(n);
    check_branching_invariant(k, n);
    check_memoization_invariant(n, k);
    
    memset(dp, -1, sizeof(dp));
    cout << ((m % Mod) * (Rec(1, k) % Mod)) % Mod;
    return 0;
}
```

### Explanation

- **Deep Recursion Invariant Check**: This check is placed to detect if `n` is large enough to potentially cause deep recursion, which could slow down the program.
  
- **Branching Invariant Check**: This check ensures that `k` does not take on extreme values that would result in excessive branching during recursive calls.

- **Memoization Efficiency Check**: This check analyzes the product of `n` and `k` to anticipate inefficiencies in memoization leading to high recomputation costs.

These checks are positioned after input reading to ensure they intercept potential performance problems before the recursive function is executed.

