system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.

There are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.

Having finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).

So as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.

Input

The first and only line contains three integers n, m and k (1 ≤ n,m ≤ 2000, 0 ≤ k ≤ n-1) — the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.

Output

Print one integer — the number of ways to color bricks modulo 998 244 353.

Examples

Input


3 3 0


Output


3


Input


3 2 1


Output


4

Note

In the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.

In the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long Gcd(long long a, long long b) {
  if (a % b == 0) return b;
  return Gcd(b, a % b);
}
long long Max(long long a, long long b) {
  if (a > b) return a;
  return b;
}
long long Min(long long a, long long b) {
  if (a < b) return a;
  return b;
}
long long gcdExtended(long long a, long long b, long long *x, long long *y) {
  if (a == 0) {
    *x = 0, *y = 1;
    return b;
  }
  long long x1, y1;
  long long gcd = gcdExtended(b % a, a, &x1, &y1);
  *x = y1 - (b / a) * x1;
  *y = x1;
  return gcd;
}
long long power(long long x, long long y, long long p) {
  long long res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1) res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
long long modInverse(long long a, long long m) {
  long long x, y;
  long long g = gcdExtended(a, m, &x, &y);
  if (g != 1)
    return -1;
  else {
    long long res = (x % m + m) % m;
    return res;
  }
}
vector<int> primeFactors(int n) {
  vector<int> v;
  while (n % 2 == 0) {
    v.push_back(2);
    n = n / 2;
  }
  for (int i = 3; i <= sqrt(n); i = i + 2) {
    while (n % i == 0) {
      v.push_back(i);
      n = n / i;
    }
  }
  if (n > 2) v.push_back(n);
  return v;
}
long long spf[100001];
void sieve() {
  spf[1] = 1;
  for (int i = 2; i < 100001; i++) spf[i] = i;
  for (int i = 4; i < 100001; i += 2) spf[i] = 2;
  for (int i = 3; i * i < 100001; i++) {
    if (spf[i] == i) {
      for (int j = i * i; j < 100001; j += i)
        if (spf[j] == j) spf[j] = i;
    }
  }
}
long long binarySearch(long long arr[], long long l, long long r, long long x) {
  if (r >= l) {
    long long mid = l + (r - l) / 2;
    if (arr[mid] == x) return mid;
    if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x);
    return binarySearch(arr, mid + 1, r, x);
  }
  return -1;
}
const long long N = 100000;
long long n;
long long tree[2 * N];
void build(long long arr[]) {
  for (long long i = 0; i < n; i++) {
    tree[n + i] = arr[i];
  }
  for (long long i = n - 1; i > 0; --i) {
    tree[i] = tree[i << 1] + tree[i << 1 | 1];
  }
}
void updateTreeNode(long long p, long long value) {
  tree[p + n] = value;
  p = p + n;
  for (long long i = p; i > 1; i >>= 1) {
    tree[i >> 1] = tree[i] + tree[i ^ 1];
  }
}
long long query(long long l, long long r) {
  long long res = 0;
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l & 1) {
      res += tree[l++];
    }
    if (r & 1) {
      res += tree[--r];
    }
  }
  return res;
}
void dfs(std::vector<long long> v[], long long s, bool visited[]) {
  visited[s] = true;
  for (long long i = 0; i < v[s].size(); ++i) {
    if (!visited[v[s][i]]) {
      dfs(v, v[s][i], visited);
    }
  }
}
long long C[2001][2000];
void binomialCoeff(long long n, long long k) {
  long long i, j;
  for (i = 0; i <= n; i++) {
    for (j = 0; j <= k; j++) {
      if (j == 0 || j == i)
        C[i][j] = 1;
      else
        C[i][j] =
            (C[i - 1][j - 1] % 998244353 + C[i - 1][j] % 998244353) % 998244353;
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, m, k;
  cin >> n >> m >> k;
  binomialCoeff(n, k);
  long long mminus1 = power(m - 1, k, 998244353);
  mminus1 %= 998244353;
  long long ans = 1;
  ans *= mminus1 % 998244353;
  ans = ((ans % 998244353) * (m)) % 998244353;
  ans = ((ans % 998244353) * (C[n - 1][k])) % 998244353;
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

918 1704 848


(G.2) Fast Input

918 1704 19


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long Gcd(long long a, long long b) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  if (a % b == 0) return b; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return Gcd(b, a % b); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long Max(long long a, long long b) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) return a; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return b; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long Min(long long a, long long b) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) return a; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return b; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long gcdExtended(long long a, long long b, long long *x, long long *y) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    *x = 0, *y = 1; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    return b; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  long long x1, y1; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  long long gcd = gcdExtended(b % a, a, &x1, &y1); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  *x = y1 - (b / a) * x1; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  *y = x1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long x, long long y, long long p) { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  long long res = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  x = x % p; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  while (y > 0) { /* line 29 slow_hit_count: 11, fast_hit_count: 6 */
    if (y & 1) res = (res * x) % p; /* line 30 slow_hit_count: 10, fast_hit_count: 5 */
    y = y >> 1; /* line 31 slow_hit_count: 10, fast_hit_count: 5 */
    x = (x * x) % p; /* line 32 slow_hit_count: 10, fast_hit_count: 5 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
long long modInverse(long long a, long long m) { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  long long x, y; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  long long g = gcdExtended(a, m, &x, &y); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  if (g != 1) /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    return -1; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    long long res = (x % m + m) % m; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    return res; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> primeFactors(int n) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> v; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  while (n % 2 == 0) { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    v.push_back(2); /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    n = n / 2; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 3; i <= sqrt(n); i = i + 2) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    while (n % i == 0) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      v.push_back(i); /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      n = n / i; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  if (n > 2) v.push_back(n); /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  return v; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
long long spf[100001]; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
void sieve() { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  spf[1] = 1; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i < 100001; i++) spf[i] = i; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 4; i < 100001; i += 2) spf[i] = 2; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 3; i * i < 100001; i++) { /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    if (spf[i] == i) { /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = i * i; j < 100001; j += i) /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
        if (spf[j] == j) spf[j] = i; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
long long binarySearch(long long arr[], long long l, long long r, long long x) { /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  if (r >= l) { /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    long long mid = l + (r - l) / 2; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    if (arr[mid] == x) return mid; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
    return binarySearch(arr, mid + 1, r, x); /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  return -1; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 100000; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
long long n; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
long long tree[2 * N]; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
void build(long long arr[]) { /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    tree[n + i] = arr[i]; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = n - 1; i > 0; --i) { /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    tree[i] = tree[i << 1] + tree[i << 1 | 1]; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
void updateTreeNode(long long p, long long value) { /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  tree[p + n] = value; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  p = p + n; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = p; i > 1; i >>= 1) { /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
    tree[i >> 1] = tree[i] + tree[i ^ 1]; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
long long query(long long l, long long r) { /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 0; /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) { /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    if (l & 1) { /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
      res += tree[l++]; /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
    if (r & 1) { /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
      res += tree[--r]; /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(std::vector<long long> v[], long long s, bool visited[]) { /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
  visited[s] = true; /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < v[s].size(); ++i) { /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
    if (!visited[v[s][i]]) { /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
      dfs(v, v[s][i], visited); /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
long long C[2001][2000]; /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
void binomialCoeff(long long n, long long k) { /* line 121 slow_hit_count: 1, fast_hit_count: 1 */
  long long i, j; /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i <= n; i++) { /* line 123 slow_hit_count: 920, fast_hit_count: 920 */
    for (j = 0; j <= k; j++) { /* line 124 slow_hit_count: 781150, fast_hit_count: 19299 */
      if (j == 0 || j == i) /* line 125 slow_hit_count: 780231, fast_hit_count: 18380 */
        C[i][j] = 1; /* line 126 slow_hit_count: 1767, fast_hit_count: 938 */
      else /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
        C[i][j] = /* line 128 slow_hit_count: 778464, fast_hit_count: 17442 */
            (C[i - 1][j - 1] % 998244353 + C[i - 1][j] % 998244353) % 998244353; /* line 129 slow_hit_count: 778464, fast_hit_count: 17442 */
    } /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 132 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 133 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 134 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 135 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m, k; /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> k; /* line 137 slow_hit_count: 1, fast_hit_count: 1 */
  binomialCoeff(n, k); /* line 138 slow_hit_count: 1, fast_hit_count: 1 */
  long long mminus1 = power(m - 1, k, 998244353); /* line 139 slow_hit_count: 1, fast_hit_count: 1 */
  mminus1 %= 998244353; /* line 140 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 141 slow_hit_count: 1, fast_hit_count: 1 */
  ans *= mminus1 % 998244353; /* line 142 slow_hit_count: 1, fast_hit_count: 1 */
  ans = ((ans % 998244353) * (m)) % 998244353; /* line 143 slow_hit_count: 1, fast_hit_count: 1 */
  ans = ((ans % 998244353) * (C[n - 1][k])) % 998244353; /* line 144 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << endl; /* line 145 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 146 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 147 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify and derive performance-characterizing invariants from the given C code and input data, we'll follow the outlined phases.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - Significant discrepancy is observed in the `binomialCoeff` function, specifically in the nested loop on lines 123-129. The slow input results in significantly more hits than the fast input.
   - The `power` function also shows different behavior in terms of hit counts, particularly in the loop spanning lines 29-32, although the impact seems secondary compared to the `binomialCoeff`.

2. **Pinpoint Lines/Functions with More Hits on Slow Input:**
   - **`binomialCoeff(n, k)`:** The inner loop at line 124 is executed 781,150 times for the slow input versus 19,299 times for the fast input, indicating a quadratic time complexity relative to `n` and `k`.
   - **`power(m - 1, k, 998244353)`:** The loop runs 11 times for the slow input compared to 6 times for the fast input.

3. **Infer Interactions with Data Structures and Constraints:**
   - The `binomialCoeff` function is heavily dependent on the values of `n` and `k`, where `n` represents the number of bricks and `k` the number of color changes.
   - Given constraints (e.g., `n` and `k` both ≤ 2000), the nested loops become a significant factor when both `n` and `k` are large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements Describing Slow Path Conditions:**

   - **Invariant #1: Nested Binomial Coefficient Computation**
     - Condition: "If both `n` (number of bricks) and `k` (number of color changes) are large, the binomial coefficient computation may involve significant nested iteration, slowing down the program."
     - Implementation Suggestion:
       ```cpp
       void check_binomial_invariant(bool condition) {
           if (condition) {
               cerr << "Warning: binomial_invariant triggered - intensive binomial coefficient computation" << endl;
               abort();
           }
       }
       check_binomial_invariant(n > 1500 && k > 1500);
       ```

   - **Invariant #2: Exponentiation Over Large Values**
     - Condition: "If `k` (number of color changes) is large, the power function may perform many multiplications leading to longer execution times."
     - Implementation Suggestion:
       ```cpp
       void check_power_invariant(bool condition) {
           if (condition) {
               cerr << "Warning: power_invariant triggered - excessive computations in power function" << endl;
               abort();
           }
       }
       check_power_invariant(k > 1500);
       ```

2. **Correlate Conditions to Input Patterns:**
   - These conditions highlight situations where both the number of bricks and allowed color changes approach their maximum constraints. This is critical as it reflects potential inefficiencies in handling larger combinatorial computations.

3. **Broad Yet Realistic Triggers:**
   - The proposed checks focus on broad categories where both dimensions (`n` and `k`) are large but without relying on specific input values, thus ensuring they are applicable to future inputs respecting the constraints.

In summary, the code's performance bottlenecks are primarily due to the extensive nested computations linked to large combinatorial problems as both `n` and `k` grow. The invariants suggest monitoring these cases to preemptively identify potential slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.

There are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.

Having finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).

So as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.

Input

The first and only line contains three integers n, m and k (1 ≤ n,m ≤ 2000, 0 ≤ k ≤ n-1) — the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.

Output

Print one integer — the number of ways to color bricks modulo 998 244 353.

Examples

Input


3 3 0


Output


3


Input


3 2 1


Output


4

Note

In the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.

In the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as C++ Checkers

Below are the C++ checkers for the performance-characterizing invariants we derived:

1. **Checker for Nested Binomial Coefficient Computation**
```cpp
void check_binomial_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - intensive binomial coefficient computation!" << endl;
        abort();
    }
}
```

2. **Checker for Exponentiation Over Large Values**
```cpp
void check_power_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive computations in power function!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the C++ Program

Now we integrate these checkers into the original program. We'll place the checks after reading inputs to avoid adding overhead in tight loops. 

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance bottlenecks
void check_binomial_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - intensive binomial coefficient computation!" << endl;
        abort();
    }
}

void check_power_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive computations in power function!" << endl;
        abort();
    }
}

// Function declarations
long long power(long long x, long long y, long long p);
void binomialCoeff(long long n, long long k);

long long C[2001][2000];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    long long n, m, k;
    cin >> n >> m >> k;

    // Performance bottleneck checks
    check_binomial_invariant(n > 1500 && k > 1500); // Checks for expensive binomial coefficient computation
    check_power_invariant(k > 1500); // Checks for excessive power computations

    binomialCoeff(n, k);
    
    long long mminus1 = power(m - 1, k, 998244353);
    mminus1 %= 998244353;
    long long ans = 1;
    ans *= mminus1 % 998244353;
    ans = ((ans % 998244353) * (m)) % 998244353;
    ans = ((ans % 998244353) * (C[n - 1][k])) % 998244353;
    cout << ans << endl;
    return 0;
}

long long power(long long x, long long y, long long p) {
    long long res = 1;
    x = x % p;
    while (y > 0) {
        if (y & 1) res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

void binomialCoeff(long long n, long long k) {
    long long i, j;
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= k; j++) {
            if (j == 0 || j == i)
                C[i][j] = 1;
            else
                C[i][j] = (C[i - 1][j - 1] % 998244353 + C[i - 1][j] % 998244353) % 998244353;
        }
    }
}
```

### Explanation:

- **Checker Integration:**
  - **`check_binomial_invariant`**: This is placed after reading inputs to ensure `n` and `k` are large enough to potentially cause a slowdown due to nested loops in `binomialCoeff`.
  - **`check_power_invariant`**: This is used similarly, checking if `k` is large enough to cause excessive execution in the `power` function.

By integrating these checks, we can now detect scenarios where the program is likely to run slowly due to computationally intensive operations. These checks help identify performance bottlenecks during testing and debugging.

