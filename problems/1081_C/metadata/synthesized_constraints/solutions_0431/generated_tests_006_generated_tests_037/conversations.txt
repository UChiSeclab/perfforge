system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.

There are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.

Having finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).

So as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.

Input

The first and only line contains three integers n, m and k (1 ≤ n,m ≤ 2000, 0 ≤ k ≤ n-1) — the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.

Output

Print one integer — the number of ways to color bricks modulo 998 244 353.

Examples

Input


3 3 0


Output


3


Input


3 2 1


Output


4

Note

In the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.

In the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
inline long long min2(long long a, long long b) {
  return (a) < (b) ? (a) : (b);
}
inline long long max2(long long a, long long b) {
  return (a) > (b) ? (a) : (b);
}
inline long long max3(long long a, long long b, long long c) {
  return (a) > (b) ? ((a) > (c) ? (a) : (c)) : ((b) > (c) ? (b) : (c));
}
inline long long min3(long long a, long long b, long long c) {
  return (a) < (b) ? ((a) < (c) ? (a) : (c)) : ((b) < (c) ? (b) : (c));
}
using namespace std::chrono;
long long int n, m, k;
long long int dp[2001][2001];
long long int fun(long long int i, long long int c) {
  if (i == n + 1) {
    if (c == k)
      return 1;
    else
      return 0;
  }
  if (dp[i][c] != -1) return dp[i][c];
  if (i == 1)
    dp[i][c] = (m * fun(i + 1, c)) % 998244353;
  else
    dp[i][c] = (((m - 1) * fun(i + 1, c + 1)) % 998244353 +
                (1 * fun(i + 1, c)) % 998244353) %
               998244353;
  return dp[i][c];
}
void process() {
  cin >> n >> m >> k;
  memset(dp, -1, sizeof(dp));
  cout << fun(1, 0) << endl;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  process();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

918 1704 19


(G.2) Fast Input

147 1704 19


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
inline long long min2(long long a, long long b) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  return (a) < (b) ? (a) : (b); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
inline long long max2(long long a, long long b) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  return (a) > (b) ? (a) : (b); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline long long max3(long long a, long long b, long long c) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return (a) > (b) ? ((a) > (c) ? (a) : (c)) : ((b) > (c) ? (b) : (c)); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
inline long long min3(long long a, long long b, long long c) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return (a) < (b) ? ((a) < (c) ? (a) : (c)) : ((b) < (c) ? (b) : (c)); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std::chrono; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long int n, m, k; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long int dp[2001][2001]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long int fun(long long int i, long long int c) { /* line 18 slow_hit_count: 841808, fast_hit_count: 21464 */
  if (i == n + 1) { /* line 19 slow_hit_count: 841808, fast_hit_count: 21464 */
    if (c == k) /* line 20 slow_hit_count: 1834, fast_hit_count: 292 */
      return 1; /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
    else /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 23 slow_hit_count: 1832, fast_hit_count: 290 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[i][c] != -1) return dp[i][c]; /* line 25 slow_hit_count: 839974, fast_hit_count: 21172 */
  if (i == 1) /* line 26 slow_hit_count: 420904, fast_hit_count: 10732 */
    dp[i][c] = (m * fun(i + 1, c)) % 998244353; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    dp[i][c] = (((m - 1) * fun(i + 1, c + 1)) % 998244353 + /* line 29 slow_hit_count: 420903, fast_hit_count: 10731 */
                (1 * fun(i + 1, c)) % 998244353) % /* line 30 slow_hit_count: 420903, fast_hit_count: 10731 */
               998244353; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[i][c]; /* line 32 slow_hit_count: 420904, fast_hit_count: 10732 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
void process() { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fun(1, 0) << endl; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  process(); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 45 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck in the provided C program, let's analyze the hit count information and identify the expensive code segments. Afterward, we'll derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

The function `fun` is the main recursion function that implements a dynamic programming approach to solve the problem. Here are some observations:

1. **Line 18 (`fun` function declaration):** 
   - Slow hit count: 841,808
   - Fast hit count: 21,464
   
2. **Line 19 (`if (i == n + 1) {`):**
   - Slow hit count: 841,808
   - Fast hit count: 21,464
   
3. **Line 25 (`if (dp[i][c] != -1) return dp[i][c];`):**
   - Slow hit count: 839,974
   - Fast hit count: 21,172

4. **Line 29-30 (recursive call for calculating dp[i][c]):**
   - Slow hit count: 420,903
   - Fast hit count: 10,731

The `fun` function gets significantly more hits for the slow input compared to the fast input, especially the recursive calls at lines 29-30. This indicates that the recursion depth and the number of states being evaluated are much larger for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on our analysis, we can derive the following performance-characterizing invariants:

1. **Invariant #1: Large Recursive State Space**
   - **Natural Language Description:** "If the number of bricks `n` is large, the recursive state space becomes vast, leading to performance degradation. This is especially true when `n` approaches its upper limit and `k` requires exploring many state combinations, significantly increasing the number of recursive calls."
   
2. **Invariant #2: High Recursive Call Overhead**
   - **Natural Language Description:** "When the number of bricks `n` is large, and the difference constraints `k` necessitate frequent changes in brick colors, the recursive function `fun` is invoked excessively. This results in high computational overhead due to the repeated calculations in the dynamic programming approach."

3. **Invariant #3: Large Dynamic Programming Table**
   - **Natural Language Description:** "As `n` increases, the size of the dynamic programming table grows, which increases memory usage and reduces cache efficiency. This contributes to slower performance when the input size is near its maximum constraints."

By identifying these conditions, we recognize that the slowdown occurs primarily due to the increased recursion depth and the larger state space that needs to be explored. This is exacerbated when `n` is large and `k` requires many color changes, leading to a significant computational burden.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.

There are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.

Having finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).

So as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.

Input

The first and only line contains three integers n, m and k (1 ≤ n,m ≤ 2000, 0 ≤ k ≤ n-1) — the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.

Output

Print one integer — the number of ways to color bricks modulo 998 244 353.

Examples

Input


3 3 0


Output


3


Input


3 2 1


Output


4

Note

In the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.

In the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.

<image>

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants as runtime checks in C++. We'll then integrate these checks into the original program.

### Phase 3: Implement the Invariants as C++ Checkers

Based on the derived invariants, we'll create checkers to monitor potential performance bottlenecks:

1. **Invariant 1 Check - Large Recursive State Space:**

```cpp
void check_large_recursive_state_space(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - large recursive state space detected!" << endl;
        abort();
    }
}
```

2. **Invariant 2 Check - High Recursive Call Overhead:**

```cpp
void check_high_recursive_call_overhead(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - high recursive call overhead detected!" << endl;
        abort();
    }
}
```

3. **Invariant 3 Check - Large Dynamic Programming Table:**

```cpp
void check_large_dp_table(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - large dynamic programming table detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Program

We'll integrate these checks at appropriate points in the original C++ program. The checks should be placed after reading inputs but before the recursive function is heavily invoked.

```cpp
#include <bits/stdc++.h>
using namespace std;

inline long long min2(long long a, long long b) {
    return (a) < (b) ? (a) : (b);
}

inline long long max2(long long a, long long b) {
    return (a) > (b) ? (a) : (b);
}

inline long long max3(long long a, long long b, long long c) {
    return (a) > (b) ? ((a) > (c) ? (a) : (c)) : ((b) > (c) ? (b) : (c));
}

inline long long min3(long long a, long long b, long long c) {
    return (a) < (b) ? ((a) < (c) ? (a) : (c)) : ((b) < (c) ? (b) : (c));
}

using namespace std::chrono;

long long int n, m, k;
long long int dp[2001][2001];

void check_large_recursive_state_space(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - large recursive state space detected!" << endl;
        abort();
    }
}

void check_high_recursive_call_overhead(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - high recursive call overhead detected!" << endl;
        abort();
    }
}

void check_large_dp_table(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck - large dynamic programming table detected!" << endl;
        abort();
    }
}

long long int fun(long long int i, long long int c) {
    if (i == n + 1) {
        if (c == k)
            return 1;
        else
            return 0;
    }

    if (dp[i][c] != -1) return dp[i][c];

    if (i == 1)
        dp[i][c] = (m * fun(i + 1, c)) % 998244353;
    else
        dp[i][c] = (((m - 1) * fun(i + 1, c + 1)) % 998244353 +
                    (1 * fun(i + 1, c)) % 998244353) %
                   998244353;

    return dp[i][c];
}

void process() {
    cin >> n >> m >> k;
    memset(dp, -1, sizeof(dp));

    // Check #1: Large recursive state space
    check_large_recursive_state_space(n > 1500);

    // Check #2: High recursive call overhead
    check_high_recursive_call_overhead(n > 1500 && k > 0.75 * n);

    // Check #3: Large dynamic programming table
    check_large_dp_table(n * k > 2000000);

    cout << fun(1, 0) << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    process();
}
```

### Explanation of Inserted Checks

- **Check for Large Recursive State Space:** This check is triggered when `n` exceeds a threshold (e.g., 1500), indicating that the state space of recursion could be too large.
- **Check for High Recursive Call Overhead:** This check is activated for large `n` and when `k` is a significant fraction of `n`, potentially leading to high overhead due to frequent changes in colors.
- **Check for Large Dynamic Programming Table:** This check monitors if the product `n * k` exceeds a certain threshold, indicating a potentially large DP table impacting performance.

These checks aim to alert you when typical performance bottlenecks may occur, helping ensure efficient execution as input sizes vary.

