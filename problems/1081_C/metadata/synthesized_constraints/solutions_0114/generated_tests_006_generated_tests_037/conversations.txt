system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.

There are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.

Having finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).

So as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.

Input

The first and only line contains three integers n, m and k (1 ≤ n,m ≤ 2000, 0 ≤ k ≤ n-1) — the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.

Output

Print one integer — the number of ways to color bricks modulo 998 244 353.

Examples

Input


3 3 0


Output


3


Input


3 2 1


Output


4

Note

In the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.

In the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 2005;
const int MOD = 998244353;
int N, M, K;
long long dp[MAXN][MAXN];
long long ways(int n, int k) {
  if (n == 1) {
    if (k == 0) return M;
    return 0;
  }
  if (dp[n][k] != -1) return dp[n][k];
  return dp[n][k] = (ways(n - 1, k) + ways(n - 1, k - 1) * (M - 1) % MOD) % MOD;
}
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  memset(dp, -1, sizeof dp);
  cin >> N >> M >> K;
  cout << ways(N, K) << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

918 1704 19


(G.2) Fast Input

147 1704 19


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 2005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 998244353; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int N, M, K; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[MAXN][MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long ways(int n, int k) { /* line 7 slow_hit_count: 841807, fast_hit_count: 21463 */
  if (n == 1) { /* line 8 slow_hit_count: 841807, fast_hit_count: 21463 */
    if (k == 0) return M; /* line 9 slow_hit_count: 1834, fast_hit_count: 292 */
    return 0; /* line 10 slow_hit_count: 1832, fast_hit_count: 290 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[n][k] != -1) return dp[n][k]; /* line 12 slow_hit_count: 839973, fast_hit_count: 21171 */
  return dp[n][k] = (ways(n - 1, k) + ways(n - 1, k - 1) * (M - 1) % MOD) % MOD; /* line 13 slow_hit_count: 420903, fast_hit_count: 10731 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof dp); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N >> M >> K; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ways(N, K) << "\n"; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identification of Expensive Code Segments

The primary focus for potential performance bottlenecks is the `ways` function, specifically:

- **Line 7 (Function Call):** The `ways` function itself is invoked a staggering 841,807 times with the slow input compared to only 21,463 times with the fast input. This indicates that the recursive calls within this function are significantly more frequent for the slow input.
  
- **Line 12 (Memoization Check):** The check for memoized results (`dp[n][k] != -1`) is hit 839,973 times in the slow case versus 21,171 times in the fast case. This suggests that memoization is not as effective in preventing redundant computations in the slow scenario.

- **Line 13 (Recursive Calculation):** The recursive calculation itself is executed 420,903 times in the slow run compared to only 10,731 times in the fast run, implying that the recursive depth or the branching involved is significantly larger for the slow input.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the observed behavior of the `ways` function, we can derive the following performance-characterizing invariants in natural language:

1. **High Recursive Depth with Limited Memoization Effectiveness:**
   - **Invariant:** "When `n` is large and `k` is relatively small, the recursive depth of computations increases, leading to a significant number of function calls and recursive evaluations. This can occur when memoization is less effective due to unique `(n, k)` combinations in the recursive tree."
   - **Reasoning:** The slow input likely results from the need to explore many unique paths in the recursion tree, with limited reuse of previously computed results.

2. **Increased Recursive Branching Factor:**
   - **Invariant:** "If the branching factor, determined by the combinatorial growth of possible colorings as captured by `(M - 1)`, is substantial compared to the effective memoization and input constraints (n <= 2000), the computation becomes expensive."
   - **Reasoning:** The term `(M - 1)` in the recursive calls multiplies the number of branches that need to be evaluated, especially when `K` is not too large, which limits the pruning of these branches.

3. **Inefficient Memoization Utilization:**
   - **Invariant:** "When the complexity of different `(n, k)` paths is not effectively reduced through memoization, possibly due to a large space of possibilities with unique `(n, k)` pairs, the program experiences slower performance."
   - **Reasoning:** The frequent hits on the memoization check (line 12) indicate that the complexity might stem from insufficient overlap in subproblems being solved.

These invariants abstract the potential causes of slowdown without relying on exact data values, focusing instead on broader conditions that may lead to increased computational workload.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.

There are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.

Having finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).

So as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.

Input

The first and only line contains three integers n, m and k (1 ≤ n,m ≤ 2000, 0 ≤ k ≤ n-1) — the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.

Output

Print one integer — the number of ways to color bricks modulo 998 244 353.

Examples

Input


3 3 0


Output


3


Input


3 2 1


Output


4

Note

In the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.

In the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as C++ Checkers

Here are the invariant checks implemented in C++ based on the natural language descriptions:

1. **High Recursive Depth with Limited Memoization Effectiveness:**

```cpp
void check_recursive_depth_invariant(int n, int k) {
    // Assuming a threshold where n is large and k is small increases recursive calls
    if (n > 1000 && k < 100) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursive depth with limited memoization!" << endl;
        abort();
    }
}
```

2. **Increased Recursive Branching Factor:**

```cpp
void check_branching_factor_invariant(int m, int k) {
    // Check if the branching factor is substantial
    if (k < m / 2 && m > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - increased recursive branching factor!" << endl;
        abort();
    }
}
```

3. **Inefficient Memoization Utilization:**

```cpp
void check_memoization_invariant(int n, int k) {
    // Assuming inefficient memoization when many unique (n, k) combinations exist
    if (n * k > 1000000) { // This threshold assumes a large search space
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization utilization!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Below is the instrumented C++ code with the invariant checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 2005;
const int MOD = 998244353;
int N, M, K;
long long dp[MAXN][MAXN];

// Invariant checkers
void check_recursive_depth_invariant(int n, int k) {
    if (n > 1000 && k < 100) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursive depth with limited memoization!" << endl;
        abort();
    }
}

void check_branching_factor_invariant(int m, int k) {
    if (k < m / 2 && m > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - increased recursive branching factor!" << endl;
        abort();
    }
}

void check_memoization_invariant(int n, int k) {
    if (n * k > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization utilization!" << endl;
        abort();
    }
}

long long ways(int n, int k) {
    // Before diving into the recursion, check for high recursion and branching factor
    check_recursive_depth_invariant(n, k);
    check_branching_factor_invariant(M, k); // Using global M

    if (n == 1) {
        if (k == 0) return M;
        return 0;
    }
    if (dp[n][k] != -1) return dp[n][k];

    // Recursive call
    return dp[n][k] = (ways(n - 1, k) + ways(n - 1, k - 1) * (M - 1) % MOD) % MOD;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    memset(dp, -1, sizeof dp);
    cin >> N >> M >> K;

    // Checking memoization inefficiency right after input
    check_memoization_invariant(N, K);

    cout << ways(N, K) << "\n";
}
```

### Explanation

- **Placement of Checks:** The invariant checks are placed strategically:
  - `check_recursive_depth_invariant` and `check_branching_factor_invariant` are called within the `ways` function before recursion to catch potential recursion issues.
  - `check_memoization_invariant` is placed in `main` after reading inputs to preemptively catch potential memoization inefficiencies across large input spaces.
- **Thresholds:** The thresholds are chosen based on likely conditions where recursive depth, branching factor, and memoization could lead to performance issues, considering the constraints `n, m <= 2000`. These are abstractions aimed at catching possible slow scenarios beyond the provided inputs.

