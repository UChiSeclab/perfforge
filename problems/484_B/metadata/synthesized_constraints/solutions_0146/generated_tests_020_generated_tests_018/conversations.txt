system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<int> v;
int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    v.push_back(x);
  }
  sort(v.begin(), v.end());
  int lim = 1000000;
  int ans = -1;
  for (int i = 0; i < n; i++) {
    if (i > 0 and v[i] == v[i - 1]) continue;
    int cur = 2 * v[i];
    while (1) {
      auto it = lower_bound(v.begin(), v.end(), cur - 1);
      if (it == v.end()) {
        ans = max(ans, v[n - 1] % v[i]);
      } else {
        if (*it == cur - 1)
          ans = max(ans, *(it) % v[i]);
        else
          ans = max(ans, *(--it) % v[i]);
      }
      if (cur > lim) break;
      cur += v[i];
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
6 4 19 13 28 30 35 43 22 61 70 117


(G.2) Fast Input

12
4 4 19 13 28 30 35 43 22 61 70 117


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> v; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 13, fast_hit_count: 13 */
    int x; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &x); /* line 9 slow_hit_count: 12, fast_hit_count: 12 */
    v.push_back(x); /* line 10 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end()); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int lim = 1000000; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = -1; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 15 slow_hit_count: 13, fast_hit_count: 13 */
    if (i > 0 and v[i] == v[i - 1]) continue; /* line 16 slow_hit_count: 12, fast_hit_count: 12 */
    int cur = 2 * v[i]; /* line 17 slow_hit_count: 12, fast_hit_count: 11 */
    while (1) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      auto it = lower_bound(v.begin(), v.end(), cur - 1); /* line 19 slow_hit_count: 751772, fast_hit_count: 585106 */
      if (it == v.end()) { /* line 20 slow_hit_count: 751772, fast_hit_count: 585106 */
        ans = max(ans, v[n - 1] % v[i]); /* line 21 slow_hit_count: 751701, fast_hit_count: 585053 */
      } else { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        if (*it == cur - 1) /* line 23 slow_hit_count: 71, fast_hit_count: 53 */
          ans = max(ans, *(it) % v[i]); /* line 24 slow_hit_count: 5, fast_hit_count: 4 */
        else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
          ans = max(ans, *(--it) % v[i]); /* line 26 slow_hit_count: 66, fast_hit_count: 49 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      if (cur > lim) break; /* line 28 slow_hit_count: 751772, fast_hit_count: 585106 */
      cur += v[i]; /* line 29 slow_hit_count: 751760, fast_hit_count: 585095 */
    } /* line 30 slow_hit_count: 751760, fast_hit_count: 585095 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

By comparing the line-level hit counts between the fast and slow runs, we can pinpoint the lines that are significantly more active during the slow input scenario:

1. **Lines with Notable Difference in Hit Counts**:
   - **Line 19**: The `lower_bound` function is called 751,772 times in the slow input, compared to 585,106 times in the fast input.
   - **Line 21 & 28**: Both of these lines are executed an equally high number of times as line 19 in the slow and fast cases, indicating a tight correlation between the loop operations and the total number of iterations in the `while` loop.
   - **Line 29**: Incrementing `cur` by `v[i]` is directly related to how often the loop runs, suggesting the loop iterates many times with high values of `v[i]`.

2. **Inference on Data Structure Interaction**:
   - The `lower_bound` call suggests a heavy reliance on searching through the vector `v`. In particular, this operation is performed in a loop that iterates significantly more times when `v[i]` is larger, since `cur` is continuously incremented by `v[i]` until a defined limit.
   - The frequent execution of `max(ans, v[n - 1] % v[i])` implies the program often has to compute remainders, which might involve handling large numbers or complex calculations.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis of the code and its execution hit count patterns, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant 1: High Frequency of Lower Bound Searches**:
   - **Description**: "If the program frequently performs lower bound searches on a sorted list with a large number of iterations in nested loops, this can lead to significant slowdowns. This is particularly true when `v[i]` values are larger since they increase the iteration count."
   - **Explanation**: The increased number of `lower_bound` calls in the slow input suggests that larger values in the array lead to more iterations, significantly impacting performance due to repeated searches.

2. **Invariant 2: Extensive Remainder Calculations**:
   - **Description**: "When the sequence contains numbers that lead to a high number of remainder calculations with large divisors, performance may degrade. The repeated use of the modulus operation can be costly if the divisor `v[i]` is large."
   - **Explanation**: Frequent computations of `v[n - 1] % v[i]` or similar expressions indicate potential hotspots, especially when these operations are done repeatedly with large numbers.

3. **Invariant 3: Loop Iteration with Large Multipliers**:
   - **Description**: "If elements in the sequence are large, causing the loop to iterate many times due to the factor `cur = 2 * v[i]`, this can create significant overhead."
   - **Explanation**: The loop's condition and incrementation based on `v[i]` suggest a direct correlation between larger sequence elements and the number of loop iterations, exacerbating performance issues.

These invariants describe general conditions that can lead to performance degradation in the C program, helping identify how input patterns correlate with increased execution times without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as Checker Code in C++

Based on the performance-characterizing invariants derived earlier, here are the corresponding C++ code snippets that will check these conditions at runtime:

1. **Invariant 1: High Frequency of Lower Bound Searches**

```cpp
void check_lower_bound_invariant(int iterationCount, int threshold) {
    if (iterationCount > threshold) {
        cerr << "Warning: High frequency of lower bound searches detected!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Extensive Remainder Calculations**

```cpp
void check_remainder_invariant(int divisor, int threshold) {
    if (divisor > threshold) {
        cerr << "Warning: Extensive remainder calculations with large divisor!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Loop Iteration with Large Multipliers**

```cpp
void check_loop_multiplier_invariant(int multiplier, int threshold) {
    if (multiplier > threshold) {
        cerr << "Warning: Large loop multiplier causing excessive iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Propagating and Inserting Conditional Checks into the Original Program

Now I will integrate the above checker functions into the provided C++ solution, inserting them at points that will not add overhead to tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;
vector<int> v;

void check_lower_bound_invariant(int iterationCount, int threshold) {
    if (iterationCount > threshold) {
        cerr << "Warning: High frequency of lower bound searches detected!" << endl;
        abort();
    }
}

void check_remainder_invariant(int divisor, int threshold) {
    if (divisor > threshold) {
        cerr << "Warning: Extensive remainder calculations with large divisor!" << endl;
        abort();
    }
}

void check_loop_multiplier_invariant(int multiplier, int threshold) {
    if (multiplier > threshold) {
        cerr << "Warning: Large loop multiplier causing excessive iterations!" << endl;
        abort();
    }
}

int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        v.push_back(x);
    }
    sort(v.begin(), v.end());
    int lim = 1000000;
    int ans = -1;

    // Check before the loop starts
    check_loop_multiplier_invariant(v.back(), 100000);  // check if largest number is too high

    for (int i = 0; i < n; i++) {
        if (i > 0 and v[i] == v[i - 1]) continue;
        int cur = 2 * v[i];
        int iterationCount = 0; // To track iterations for the lower_bound search

        while (1) {
            iterationCount++;
            auto it = lower_bound(v.begin(), v.end(), cur - 1);
            if (it == v.end()) {
                ans = max(ans, v[n - 1] % v[i]);
            } else {
                if (*it == cur - 1)
                    ans = max(ans, *(it) % v[i]);
                else
                    ans = max(ans, *(--it) % v[i]);
            }

            // Check for high frequency of lower bound searches
            check_lower_bound_invariant(iterationCount, 50000);  // arbitrary but reasonable threshold

            if (cur > lim) break;
            cur += v[i];

            // Check for large divisor in remainder calculations
            check_remainder_invariant(v[i], 100000);  // arbitrary threshold
        }
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **Check for High Frequency of Lower Bound Searches**: Inserted inside the while loop and tracks the number of iterations. It checks if the loop runs excessively.
- **Check for Large Loop Multiplier**: Placed outside the loop, before it starts, to ensure we are not repeatedly checking in tight loops.
- **Check for Extensive Remainder Calculations**: Added inside the while loop, in a manner that tracks large divisors without adding significant overhead.

These checks are designed to catch potential performance bottlenecks based on the conditions derived in the natural language invariants. By strategically placing these checks, we avoid unnecessary overhead while maintaining the ability to detect slow execution paths.

