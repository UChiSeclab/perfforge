system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long N = 1e6;
long long has[N];
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, a;
  cin >> n;
  vector<long long> s;
  for (long long i = 0; i < n; i++) {
    cin >> a;
    has[a] = 1;
    s.push_back(a);
  }
  sort(s.begin(), s.end());
  long long ans = 0;
  for (long long i = 1; i <= N; i++) {
    if (has[i])
      for (long long j = 2 * i; j <= N + i; j += i) {
        auto it = lower_bound(s.begin(), s.end(), j);
        if (it != s.begin()) {
          it--;
          ans = max(ans, *it % i);
        }
      }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
6 4 19 13 28 30 35 43 22 61 70 117


(G.2) Fast Input

12
4 4 19 13 28 30 35 43 22 61 70 117


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 1e6; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long has[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, a; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> s; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < n; i++) { /* line 11 slow_hit_count: 13, fast_hit_count: 13 */
    cin >> a; /* line 12 slow_hit_count: 12, fast_hit_count: 12 */
    has[a] = 1; /* line 13 slow_hit_count: 12, fast_hit_count: 12 */
    s.push_back(a); /* line 14 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  sort(s.begin(), s.end()); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= N; i++) { /* line 18 slow_hit_count: 1000001, fast_hit_count: 1000001 */
    if (has[i]) /* line 19 slow_hit_count: 1000000, fast_hit_count: 1000000 */
      for (long long j = 2 * i; j <= N + i; j += i) { /* line 20 slow_hit_count: 751784, fast_hit_count: 585117 */
        auto it = lower_bound(s.begin(), s.end(), j); /* line 21 slow_hit_count: 751772, fast_hit_count: 585106 */
        if (it != s.begin()) { /* line 22 slow_hit_count: 751772, fast_hit_count: 585106 */
          it--; /* line 23 slow_hit_count: 751772, fast_hit_count: 585106 */
          ans = max(ans, *it % i); /* line 24 slow_hit_count: 751772, fast_hit_count: 585106 */
        } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program and derive performance-characterizing invariants, we'll go through the hit count information, focusing on differences between the fast and slow inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The line `for (long long i = 1; i <= N; i++) {` has a high hit count of 1,000,001 for both inputs, suggesting it iterates through all potential values regardless of the input.
   - The nested loop `for (long long j = 2 * i; j <= N + i; j += i) {` has a significantly higher hit count for the slow input (751,784) compared to the fast input (585,117). This indicates that the loop is a major contributor to the slowdown.
   - The use of `lower_bound` within this nested loop is also notably high, suggesting frequent and possibly costly binary searches on the sorted vector `s`.

2. **Potential Performance Issues:**
   - The outer loop iterates over all integers from 1 to N, and for each `i` where `has[i]` is true, it iterates through multiples of `i`. If `has[i]` is set for many values, it leads to extensive computation.
   - The inner loop likely becomes expensive when `i` values have many multiples that exist in the input data, causing frequent and repeated operations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Frequency of Active Multiples**
   - **Natural Language Description:** "If the input array contains many values that are multiples of smaller numbers, the program is likely to enter a slow path due to repeated operations in nested loops."
   - **Explanation:** This scenario causes the inner loop to execute numerous times, significantly increasing the number of operations.

2. **Invariant 2: Dense Distribution of Values**
   - **Natural Language Description:** "When many input values are close together or form sequences of consecutive numbers, the program can spend a lot of time performing binary searches and repetitive calculations."
   - **Explanation:** This leads to increased hit counts for lines involving `lower_bound` and modulo operations, slowing down execution.

3. **Invariant 3: Presence of Small Divisors**
   - **Natural Language Description:** "If the input contains many small numbers acting as divisors for larger numbers, the execution time rises due to increased branching and iterations over potential divisors."
   - **Explanation:** More small divisors result in additional checks and calculations, particularly in the nested loop structure.

By focusing on these invariants, one can anticipate slowdowns related to the structure and distribution of input values rather than relying solely on specific input sizes or values. This approach helps identify broader input patterns that lead to inefficient execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the three identified performance-characterizing invariants into C++ code.

#### Invariant 1: High Frequency of Active Multiples

```cpp
void check_active_multiples_invariant(const vector<long long>& has, long long threshold) {
    long long active_multiples = 0;
    for (long long i = 1; i <= 1e6; ++i) {
        if (has[i]) {
            ++active_multiples;
        }
    }
    if (active_multiples > threshold) {
        cerr << "Warning: active_multiples_invariant triggered - too many active multiples!" << endl;
        abort();
    }
}
```

#### Invariant 2: Dense Distribution of Values

```cpp
void check_dense_distribution_invariant(const vector<long long>& s, long long threshold) {
    for (size_t i = 1; i < s.size(); ++i) {
        if (s[i] - s[i - 1] < threshold) {
            cerr << "Warning: dense_distribution_invariant triggered - values too densely packed!" << endl;
            abort();
        }
    }
}
```

#### Invariant 3: Presence of Small Divisors

```cpp
void check_small_divisors_invariant(const vector<long long>& has, long long small_threshold, long long count_threshold) {
    long long count = 0;
    for (long long i = 1; i <= small_threshold; ++i) {
        if (has[i]) {
            ++count;
        }
    }
    if (count > count_threshold) {
        cerr << "Warning: small_divisors_invariant triggered - too many small divisors!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate These Checkers into the Original Program

Now, let's integrate these checkers into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long N = 1e6;
long long has[N];

void check_active_multiples_invariant(const vector<long long>& has, long long threshold) {
    long long active_multiples = 0;
    for (long long i = 1; i <= N; ++i) {
        if (has[i]) {
            ++active_multiples;
        }
    }
    if (active_multiples > threshold) {
        cerr << "Warning: active_multiples_invariant triggered - too many active multiples!" << endl;
        abort();
    }
}

void check_dense_distribution_invariant(const vector<long long>& s, long long threshold) {
    for (size_t i = 1; i < s.size(); ++i) {
        if (s[i] - s[i - 1] < threshold) {
            cerr << "Warning: dense_distribution_invariant triggered - values too densely packed!" << endl;
            abort();
        }
    }
}

void check_small_divisors_invariant(const vector<long long>& has, long long small_threshold, long long count_threshold) {
    long long count = 0;
    for (long long i = 1; i <= small_threshold; ++i) {
        if (has[i]) {
            ++count;
        }
    }
    if (count > count_threshold) {
        cerr << "Warning: small_divisors_invariant triggered - too many small divisors!" << endl;
        abort();
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, a;
    cin >> n;
    vector<long long> s;
    for (long long i = 0; i < n; i++) {
        cin >> a;
        has[a] = 1;
        s.push_back(a);
    }
    sort(s.begin(), s.end());

    // Inserted checks
    check_active_multiples_invariant(vector<long long>(begin(has), end(has)), /* threshold */ 100); // Example threshold
    check_dense_distribution_invariant(s, /* threshold */ 1); // Example threshold
    check_small_divisors_invariant(vector<long long>(begin(has), end(has)), /* small_threshold */ 100, /* count_threshold */ 10); // Example thresholds

    long long ans = 0;
    for (long long i = 1; i <= N; i++) {
        if (has[i])
            for (long long j = 2 * i; j <= N + i; j += i) {
                auto it = lower_bound(s.begin(), s.end(), j);
                if (it != s.begin()) {
                    it--;
                    ans = max(ans, *it % i);
                }
            }
    }
    cout << ans;
}
```

### Explanation

1. **Active Multiples Check:** This checks for the number of entries in `has[]` array that are set, indicating the presence of numbers that could be divisors. A threshold is used to trigger a warning if too many are present.

2. **Dense Distribution Check:** Checks if the sorted array `s` has values that are too closely packed, which could indicate excessive repeated operations.

3. **Small Divisors Check:** Checks for the number of small numbers acting as divisors, which could make the nested loops expensive.

These checks are placed after sorting the input, as they rely on the sorted nature of the input or the setup of the `has` array. They are designed to detect potential slow execution paths based on the input distribution.

