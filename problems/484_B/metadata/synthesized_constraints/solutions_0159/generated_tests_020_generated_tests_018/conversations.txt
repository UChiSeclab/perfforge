system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 1000000;
vector<int> a;
int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    a.push_back(x);
  }
  set<int> s(a.begin(), a.end());
  a.assign(s.begin(), s.end());
  sort(a.begin(), a.end());
  int ans = 0;
  for (int i = 0; i < a.size(); i++) {
    for (int j = 2; a[i] * j <= 2 * MAXN; j++) {
      int d = lower_bound(a.begin(), a.end(), j * a[i]) - a.begin();
      if (d >= i + 1 && d - 1 < a.size()) ans = max(ans, a[d - 1] % a[i]);
    }
  }
  printf("%d\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
6 4 19 13 28 30 35 43 22 61 70 117


(G.2) Fast Input

12
4 4 19 13 28 30 35 43 22 61 70 117


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 1000000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> a; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 13, fast_hit_count: 13 */
    int x; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &x); /* line 10 slow_hit_count: 12, fast_hit_count: 12 */
    a.push_back(x); /* line 11 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  set<int> s(a.begin(), a.end()); /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  a.assign(s.begin(), s.end()); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  sort(a.begin(), a.end()); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < a.size(); i++) { /* line 17 slow_hit_count: 13, fast_hit_count: 12 */
    for (int j = 2; a[i] * j <= 2 * MAXN; j++) { /* line 18 slow_hit_count: 1503549, fast_hit_count: 1170216 */
      int d = lower_bound(a.begin(), a.end(), j * a[i]) - a.begin(); /* line 19 slow_hit_count: 1503537, fast_hit_count: 1170205 */
      if (d >= i + 1 && d - 1 < a.size()) ans = max(ans, a[d - 1] % a[i]); /* line 20 slow_hit_count: 1503537, fast_hit_count: 1170205 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the performance issues in the given C program, we'll analyze the hit count information and generate performance-characterizing invariants. Here's how the analysis unfolds:

### Phase 1: Identify Expensive or Inefficient Code Segments

Upon comparing the hit counts for the fast and slow inputs, we observe that lines 18 through 20 have significantly higher hit counts for the slow input. This suggests that these lines are involved in a loop or process that is repeated much more frequently in the slow case. Let's break down these lines:

- **Lines 18-20** form a nested loop where `j` is iterated such that `a[i] * j <= 2 * MAXN`. The `lower_bound` function is used here to find the first element in the sorted array `a` that is not less than `j * a[i]`.
- The expensive part of the computation seems to occur due to the repeated execution of this nested loop, especially since `a[i] * j` grows significantly when `a[i]` is a small number and `j` becomes large. This results in a large number of iterations for smaller values in the array.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language performance invariants:

1. **Invariant on Small Values in Array:**
   - "When the input array contains small integers, the program may spend excessive time iterating over large ranges due to the multiplicative growth in the nested loop. This is exacerbated when these small values are combined with larger multiples leading to repeated execution of expensive operations."

2. **Invariant on High Loop Counts:**
   - "If an element `ai` in the array is small, the inner loop condition `a[i] * j <= 2 * MAXN` allows many iterations, potentially causing the loop to execute a very high number of times, which can degrade performance significantly."

3. **Invariant on Element Distribution:**
   - "Wide distribution or diverse sizes of elements in the input array can lead to frequent recalculation via `lower_bound`, especially when smaller elements are present, leading to prolonged execution times."

### Conclusion

The performance of the program is sensitive to the distribution of values within the input array. Particularly, smaller values lead to high iteration counts in the inner loop, causing excessive computation. This effect is evident when small elements are included in the sequence, prompting the loop to perform many redundant operations. Systems that ensure minimized inclusion of such small values, or optimize the loop structure to handle these efficiently, would likely see improved performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we translate the derived performance-characterizing invariants into C++ checker code.

### Phase 3: Implement Checker Code in C++

Here are the C++ checkers for the performance-characterizing invariants:

1. **Invariant on Small Values in Array:**
   - This invariant checks if there are elements in the array that, when combined with a large range of multipliers, lead to excessive computations. We can check this by verifying if the smallest element leads to many loop iterations.

```cpp
void check_small_value_invariant(vector<int>& a, int maxValue) {
    if (!a.empty() && a[0] * 2 < maxValue) {
        cerr << "Warning: Small value invariant triggered - excessive iterations possible!" << endl;
        abort();
    }
}
```

2. **Invariant on High Loop Counts:**
   - This invariant checks if a small element in the array causes a large number of iterations in the inner loop due to the `a[i] * j <= 2 * MAXN` condition.

```cpp
void check_iteration_count_invariant(int element, int maxValue) {
    if (element < maxValue / 2) {
        cerr << "Warning: High iteration count invariant triggered - may lead to slowdown!" << endl;
        abort();
    }
}
```

3. **Invariant on Element Distribution:**
   - This invariant checks if the distribution of elements leads to frequent and potentially costly recalculations. We'll check if there's a noticeable distribution gap that might trigger redundant computations.

```cpp
void check_distribution_invariant(vector<int>& a) {
    for (size_t i = 1; i < a.size(); ++i) {
        if (a[i] - a[i-1] > 1000) {  // Arbitrary gap threshold for large distribution
            cerr << "Warning: Distribution invariant triggered - suboptimal element distribution!" << endl;
            abort();
        }
    }
}
```

### Phase 4: Integrate Checker Code with Original Solution

Here is the original C++ code, now instrumented with the checker functions developed above:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 1000000;
vector<int> a;

void check_small_value_invariant(vector<int>& a, int maxValue) {
    if (!a.empty() && a[0] * 2 < maxValue) {
        cerr << "Warning: Small value invariant triggered - excessive iterations possible!" << endl;
        abort();
    }
}

void check_iteration_count_invariant(int element, int maxValue) {
    if (element < maxValue / 2) {
        cerr << "Warning: High iteration count invariant triggered - may lead to slowdown!" << endl;
        abort();
    }
}

void check_distribution_invariant(vector<int>& a) {
    for (size_t i = 1; i < a.size(); ++i) {
        if (a[i] - a[i-1] > 1000) {  // Arbitrary gap threshold for large distribution
            cerr << "Warning: Distribution invariant triggered - suboptimal element distribution!" << endl;
            abort();
        }
    }
}

int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        a.push_back(x);
    }
    set<int> s(a.begin(), a.end());
    a.assign(s.begin(), s.end());
    sort(a.begin(), a.end());

    // Check invariants after sorting
    check_small_value_invariant(a, 2 * MAXN);
    check_distribution_invariant(a);

    int ans = 0;
    for (int i = 0; i < a.size(); i++) {
        // Check invariant for each element before entering the inner loop
        check_iteration_count_invariant(a[i], 2 * MAXN);
        
        for (int j = 2; a[i] * j <= 2 * MAXN; j++) {
            int d = lower_bound(a.begin(), a.end(), j * a[i]) - a.begin();
            if (d >= i + 1 && d - 1 < a.size()) ans = max(ans, a[d - 1] % a[i]);
        }
    }
    printf("%d\n", ans);
}
```

### Explanation of Instrumented Code
- **`check_small_value_invariant`** is placed after sorting to ensure the smallest values are considered for potential excessive iterations.
- **`check_iteration_count_invariant`** is called before the inner loop for each element to check for possible large iteration counts.
- **`check_distribution_invariant`** ensures elements are not too widely distributed, which might trigger redundant computations. This is placed after sorting to assess the distribution effectively.

These checks help identify performance bottlenecks by warning about conditions that may lead to slow execution, thereby aiding in the optimization or debugging process.

