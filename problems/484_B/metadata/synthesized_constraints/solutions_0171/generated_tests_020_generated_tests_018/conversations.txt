system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 200005;
const int MAX = 1000006;
int a[maxn];
int n;
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) scanf("%d", &a[i]);
  sort(a, a + n);
  n = unique(a, a + n) - a;
  int ans = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 2 * a[i]; j < MAX; j += a[i]) {
      ans = max(ans, *(lower_bound(a, a + n, j) - 1) % a[i]);
    }
    ans = max(ans, a[n - 1] % a[i]);
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
6 4 19 13 28 30 35 43 22 61 70 117


(G.2) Fast Input

12
4 4 19 13 28 30 35 43 22 61 70 117


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 200005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX = 1000006; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf("%d", &a[i]); /* line 9 slow_hit_count: 13, fast_hit_count: 13 */
  sort(a, a + n); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  n = unique(a, a + n) - a; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 13 slow_hit_count: 13, fast_hit_count: 12 */
    for (int j = 2 * a[i]; j < MAX; j += a[i]) { /* line 14 slow_hit_count: 751774, fast_hit_count: 585107 */
      ans = max(ans, *(lower_bound(a, a + n, j) - 1) % a[i]); /* line 15 slow_hit_count: 751762, fast_hit_count: 585096 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    ans = max(ans, a[n - 1] % a[i]); /* line 17 slow_hit_count: 12, fast_hit_count: 11 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts, the following observations about the program's performance can be made:

1. **Line 14: `for (int j = 2 * a[i]; j < MAX; j += a[i])`**
   - This line is a nested loop that runs significantly more times for the slow input (751,774 hits) compared to the fast input (585,107 hits).
   - The repeated execution suggests that this loop heavily contributes to the slowness. Since `j` increments by `a[i]` each time, the loop iterates more when `a[i]` is small relative to `MAX`.

2. **Line 15: `ans = max(ans, *(lower_bound(a, a + n, j) - 1) % a[i]);`**
   - This line also has a high hit count, mirroring the outer loop on line 14. Its execution frequency indicates that the `lower_bound` operation is being performed repeatedly, contributing to inefficiency.
   - Since `lower_bound` is a logarithmic operation, its repetition inside a large loop exacerbates the performance issue.

3. **Line 13: `for (int i = 0; i < n; i++)`**
   - The outer loop is executed `n` times, but the difference in hit count is minimal between the slow (13 hits) and fast (12 hits) inputs. This suggests the main difference in execution time arises from what happens inside this loop.

The primary performance bottleneck is the nested loop structure on lines 14-15, particularly due to the conditions that cause this loop to run extensively for the slow input.

### Phase 2: Performance-Characterizing Invariants

Based on the analysis in Phase 1, we can derive the following performance-characterizing invariants:

1. **Invariant: Small Elements Causing Long Iterations**
   - **Natural Language Description:** "When there are small elements in the array that are factors of larger numbers, the nested loop may iterate a large number of times, leading to performance degradation."
   - **Reasoning:** In the given implementation, smaller elements in the array increase the iteration count of the inner loop, because the loop increments by these element values and iterates until reaching `MAX`. This is exacerbated when these elements are divisors of many numbers up to `MAX`.

2. **Invariant: Repeated Lower Bound Searches**
   - **Natural Language Description:** "If the array contains many closely-spaced elements, the repeated binary search operations (`lower_bound`) within nested loops may lead to a significant overhead."
   - **Reasoning:** The `lower_bound` function is executed multiple times for each iteration of the nested loop, and if there are many elements close to each other, each search may require more steps to find the appropriate position, especially if the array is large.

3. **Invariant: Array Uniqueness After Sorting**
   - **Natural Language Description:** "If the unique elements of the array after sorting are significantly fewer than the original count, redundant operations might be reduced, but the initial sorting and uniquifying can still be costly."
   - **Reasoning:** The process of sorting and making the array unique is efficient, but if the array was initially very large with many duplicates, removing duplicates still results in a reduced but significant number of iterations for subsequent operations.

These invariants provide a broad understanding of the conditions that can trigger slow performance in the program, without relying on specific input values. They can help in anticipating potential slowdowns in future inputs that meet these criteria.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Checkers

Let's translate the natural language invariants derived earlier into C++ checker functions.

#### Invariant 1: Small Elements Causing Long Iterations
**Natural Language Description:**
"When there are small elements in the array that are factors of larger numbers, the nested loop may iterate a large number of times, leading to performance degradation."

```cpp
void check_small_elements_invariant(int element) {
    if (element < 10) { // Assume small elements are those less than a threshold like 10
        cerr << "Warning: small_elements_invariant triggered - small elements causing long iterations" << endl;
        abort();
    }
}
```

#### Invariant 2: Repeated Lower Bound Searches
**Natural Language Description:**
"If the array contains many closely-spaced elements, the repeated binary search operations (`lower_bound`) within nested loops may lead to a significant overhead."

```cpp
void check_repeated_searches_invariant(int n) {
    if (n > 100) { // Threshold for number of elements in array
        cerr << "Warning: repeated_searches_invariant triggered - repeated searches on large data" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code with the Original Program

Now, we integrate these runtime checks into the given C++ program to detect performance bottlenecks effectively, without adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 200005;
const int MAX = 1000006;
int a[maxn];
int n;

// Checker functions based on derived invariants
void check_small_elements_invariant(int element) {
    if (element < 10) { // Assume small elements are those less than a threshold like 10
        cerr << "Warning: small_elements_invariant triggered - small elements causing long iterations" << endl;
        abort();
    }
}

void check_repeated_searches_invariant(int n) {
    if (n > 100) { // Threshold for number of elements in array
        cerr << "Warning: repeated_searches_invariant triggered - repeated searches on large data" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++) scanf("%d", &a[i]);
    
    // Check for repeated searches invariant after reading input
    check_repeated_searches_invariant(n);
    
    sort(a, a + n);
    n = unique(a, a + n) - a;
    int ans = 0;
    
    for (int i = 0; i < n; i++) {
        // Check for small elements invariant before processing
        check_small_elements_invariant(a[i]);
        
        for (int j = 2 * a[i]; j < MAX; j += a[i]) {
            ans = max(ans, *(lower_bound(a, a + n, j) - 1) % a[i]);
        }
        ans = max(ans, a[n - 1] % a[i]);
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **`check_small_elements_invariant`:** Inserted before processing each element in the outer loop to detect if small values could lead to excessive iterations.
- **`check_repeated_searches_invariant`:** Applied after reading input to ensure the number of elements does not trigger performance issues related to repeated searches.
- **Comments:** Added in the code to explain the purpose of each check, helping in understanding the potential performance bottlenecks each check aims to capture. 

These checks are designed to help identify when the program may run into performance issues based on the characteristics observed from previous analysis without adding overhead to the loop where performance is critical.

