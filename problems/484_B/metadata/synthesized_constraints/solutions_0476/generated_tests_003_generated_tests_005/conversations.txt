system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e6 + 5;
int N, a[maxn];
int solve(int x) {
  int ret = 0, p = x;
  while (p < maxn) {
    p += x;
    int k = lower_bound(a, a + N, p) - a;
    if (k == 0)
      continue;
    else
      k--;
    if (a[k] <= x) continue;
    ret = max(ret, a[k] % x);
  }
  return ret;
}
int main() {
  scanf("%d", &N);
  for (int i = 0; i < N; i++) scanf("%d", &a[i]);
  sort(a, a + N);
  int ans = 0;
  for (int i = N - 1; i >= 0; i--) {
    if (ans >= a[i] - 1) break;
    if (i < N - 1 && a[i] == a[i + 1]) continue;
    ans = max(ans, solve(a[i]));
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
4 4 10 13 28 30 35 43 58 61 70 88


(G.2) Fast Input

12
4 4 10 13 28 30 35 43 58 61 70 117


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1e6 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int N, a[maxn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int solve(int x) { /* line 5 slow_hit_count: 6, fast_hit_count: 4 */
  int ret = 0, p = x; /* line 6 slow_hit_count: 6, fast_hit_count: 4 */
  while (p < maxn) { /* line 7 slow_hit_count: 111114, fast_hit_count: 56470 */
    p += x; /* line 8 slow_hit_count: 111108, fast_hit_count: 56466 */
    int k = lower_bound(a, a + N, p) - a; /* line 9 slow_hit_count: 111108, fast_hit_count: 56466 */
    if (k == 0) /* line 10 slow_hit_count: 111108, fast_hit_count: 56466 */
      continue; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      k--; /* line 13 slow_hit_count: 111108, fast_hit_count: 56466 */
    if (a[k] <= x) continue; /* line 14 slow_hit_count: 111108, fast_hit_count: 56466 */
    ret = max(ret, a[k] % x); /* line 15 slow_hit_count: 99745, fast_hit_count: 47919 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 17 slow_hit_count: 6, fast_hit_count: 4 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &N); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; i++) scanf("%d", &a[i]); /* line 21 slow_hit_count: 13, fast_hit_count: 13 */
  sort(a, a + N); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = N - 1; i >= 0; i--) { /* line 24 slow_hit_count: 7, fast_hit_count: 5 */
    if (ans >= a[i] - 1) break; /* line 25 slow_hit_count: 7, fast_hit_count: 5 */
    if (i < N - 1 && a[i] == a[i + 1]) continue; /* line 26 slow_hit_count: 6, fast_hit_count: 4 */
    ans = max(ans, solve(a[i])); /* line 27 slow_hit_count: 6, fast_hit_count: 4 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, let's go through the specified phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `solve(int x)` function's loop (lines 7-15) is called significantly more times in the slow input compared to the fast input. This is particularly evident in the hit counts for line 7 (111,114 vs. 56,470).

2. **Pinpoint Lines with More Hits:**
   - The loop inside `solve(int x)` (line 7) and the operations within it (lines 8-15) are executed much more frequently in the slow input. This suggests a heavy computation load in this section.

3. **Interaction with Data Structures:**
   - The `lower_bound` function (line 9) is frequently called, indicating many searches are being performed on the sorted array `a`.
   - The loop in `solve(int x)` continues until `p` is greater than `maxn`, performing multiple computations for each element of the sequence.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are potential performance-characterizing invariants in natural language:

1. **Invariant Related to Repeated Lower Bound Searches:**
   - "If the elements in the sequence are such that many values are close to each other, numerous searches using `lower_bound` are triggered, leading to frequent evaluations in the inner loop."

2. **Invariant Related to High Computational Load in the Loop:**
   - "When an element `ai` causes the loop in `solve` to iterate extensively due to its value and relative positions in the sorted array, the repeated modulus calculations (`a[k] % x`) and checks can significantly increase computational load."

3. **Invariant Related to Large Differences and Repetitions:**
   - "If there are large gaps between consecutive elements in the sorted sequence, or if elements appear frequently, the number of iterations in the loop inside `solve` can increase, resulting in performance degradation."

4. **Invariant Related to Element Positioning:**
   - "The performance might slow down if the largest elements of the sequence repeatedly cause the `solve` function to perform many iterations of the loop, particularly when these elements are near the end of the sequence."

These conditions describe scenarios where the program's performance may degrade due to the nature of the input sequence, involving factors like element distribution, repetition, and positioning in sorted order. The invariants do not rely on specific numeric values but rather on abstract conditions that are aligned with potential input patterns and problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Let's translate the natural language invariants into C++ checker code:

1. **Checker for Repeated Lower Bound Searches:**

    This checker verifies if the program is frequently performing `lower_bound` searches due to closely positioned elements.

    ```cpp
    void check_lower_bound_invariant(int searchCount, int threshold) {
        if (searchCount > threshold) {
            cerr << "Warning: Performance bottleneck - excessive lower_bound searches!" << endl;
            abort();
        }
    }
    ```

2. **Checker for High Computational Load in the Loop:**

    This checker evaluates how many times the loop in `solve` is executed, hinting at potential computational overhead.

    ```cpp
    void check_computational_load_invariant(int loopCount, int threshold) {
        if (loopCount > threshold) {
            cerr << "Warning: Performance bottleneck - high computational load in loop!" << endl;
            abort();
        }
    }
    ```

3. **Checker for Large Differences and Repetitions:**

    This checker detects when element gaps or repetitions might lead to an excessive number of loop iterations.

    ```cpp
    void check_element_difference_invariant(int maxElement, int minElement, int elementGapThreshold) {
        if ((maxElement - minElement) > elementGapThreshold) {
            cerr << "Warning: Performance bottleneck - large differences between elements!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrate Checker Functions into the Original C++ Program

Now, let's integrate these checkers into the original program to ensure they effectively identify performance issues without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e6 + 5;
int N, a[maxn];

// Performance checker functions
void check_lower_bound_invariant(int searchCount, int threshold) {
    if (searchCount > threshold) {
        cerr << "Warning: Performance bottleneck - excessive lower_bound searches!" << endl;
        abort();
    }
}

void check_computational_load_invariant(int loopCount, int threshold) {
    if (loopCount > threshold) {
        cerr << "Warning: Performance bottleneck - high computational load in loop!" << endl;
        abort();
    }
}

void check_element_difference_invariant(int maxElement, int minElement, int elementGapThreshold) {
    if ((maxElement - minElement) > elementGapThreshold) {
        cerr << "Warning: Performance bottleneck - large differences between elements!" << endl;
        abort();
    }
}

int solve(int x) {
    int ret = 0, p = x;
    int loopCount = 0;  // Track the number of iterations in the loop
    
    while (p < maxn) {
        p += x;
        int k = lower_bound(a, a + N, p) - a;
        loopCount++; // Increment loop count for each iteration
        
        if (k == 0)
            continue;
        else
            k--;

        if (a[k] <= x) continue;
        ret = max(ret, a[k] % x);
    }

    // Check for high computational load in the loop
    check_computational_load_invariant(loopCount, 100000); // Example threshold

    return ret;
}

int main() {
    scanf("%d", &N);
    for (int i = 0; i < N; i++) scanf("%d", &a[i]);
    sort(a, a + N);

    // Check for large differences between elements
    check_element_difference_invariant(a[N-1], a[0], 50000); // Example threshold

    int ans = 0;
    int searchCount = 0; // Track the number of lower_bound searches

    for (int i = N - 1; i >= 0; i--) {
        if (ans >= a[i] - 1) break;
        if (i < N - 1 && a[i] == a[i + 1]) continue;
        
        ans = max(ans, solve(a[i]));
        searchCount++;
    }

    // Check for excessive lower_bound searches
    check_lower_bound_invariant(searchCount, 1000); // Example threshold

    printf("%d\n", ans);
    return 0;
}
```

### Explanation of Inserted Checkers

- **`check_lower_bound_invariant`:** Placed after the main loop to track the number of times lower bound searches are performed.
- **`check_computational_load_invariant`:** Integrated within the `solve` function to count loop iterations.
- **`check_element_difference_invariant`:** Executed right after sorting, assessing differences between the smallest and largest elements.

These integrations ensure performance bottlenecks are effectively detected without imposing significant additional overhead within the core loops.

