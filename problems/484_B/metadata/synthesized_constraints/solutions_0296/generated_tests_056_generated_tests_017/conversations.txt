system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 2e5 + 10;
const int MAXX = 1e6;
int cnt[MAXX + 10];
int pcnt[MAXX + 10];
int main() {
  int n;
  scanf("%d", &n);
  vector<int> a;
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    if (x == 1) continue;
    a.push_back(x);
  }
  sort(a.begin(), a.end());
  a.erase(unique(a.begin(), a.end()), a.end());
  int asz = a.size();
  for (int i = 0; i < asz; i++) cnt[a[i]]++;
  for (int i = 1; i <= MAXX; i++) {
    pcnt[i] = pcnt[i - 1] + cnt[i];
  }
  int ans = 0;
  for (int i = asz - 1; i >= 0; i--) {
    for (int j = a[i]; j <= MAXX; j += a[i]) {
      int L = j, R = min(MAXX, j + a[i] - 1);
      while (L <= R) {
        int M = (R + L) / 2;
        int ccnt = pcnt[min(MAXX, j + a[i] - 1)] - pcnt[M - 1];
        if (ccnt > 0)
          L = M + 1;
        else
          R = M - 1;
      }
      if (R >= j) {
        ans = max(ans, R - j);
      }
    }
  }
  printf("%d", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
2 3 5


(G.2) Fast Input

3
2 5 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 2e5 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXX = 1e6; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[MAXX + 10]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int pcnt[MAXX + 10]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 11 slow_hit_count: 4, fast_hit_count: 4 */
    int x; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &x); /* line 13 slow_hit_count: 3, fast_hit_count: 3 */
    if (x == 1) continue; /* line 14 slow_hit_count: 3, fast_hit_count: 3 */
    a.push_back(x); /* line 15 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a.begin(), a.end()); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  a.erase(unique(a.begin(), a.end()), a.end()); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  int asz = a.size(); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < asz; i++) cnt[a[i]]++; /* line 20 slow_hit_count: 4, fast_hit_count: 3 */
  for (int i = 1; i <= MAXX; i++) { /* line 21 slow_hit_count: 1000001, fast_hit_count: 1000001 */
    pcnt[i] = pcnt[i - 1] + cnt[i]; /* line 22 slow_hit_count: 1000000, fast_hit_count: 1000000 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = asz - 1; i >= 0; i--) { /* line 25 slow_hit_count: 4, fast_hit_count: 3 */
    for (int j = a[i]; j <= MAXX; j += a[i]) { /* line 26 slow_hit_count: 1033336, fast_hit_count: 700002 */
      int L = j, R = min(MAXX, j + a[i] - 1); /* line 27 slow_hit_count: 1033333, fast_hit_count: 700000 */
      while (L <= R) { /* line 28 slow_hit_count: 2600000, fast_hit_count: 1600002 */
        int M = (R + L) / 2; /* line 29 slow_hit_count: 1566667, fast_hit_count: 900002 */
        int ccnt = pcnt[min(MAXX, j + a[i] - 1)] - pcnt[M - 1]; /* line 30 slow_hit_count: 1566667, fast_hit_count: 900002 */
        if (ccnt > 0) /* line 31 slow_hit_count: 1566667, fast_hit_count: 900002 */
          L = M + 1; /* line 32 slow_hit_count: 7, fast_hit_count: 4 */
        else /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
          R = M - 1; /* line 34 slow_hit_count: 1566660, fast_hit_count: 899998 */
      } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      if (R >= j) { /* line 36 slow_hit_count: 1033333, fast_hit_count: 700000 */
        ans = max(ans, R - j); /* line 37 slow_hit_count: 4, fast_hit_count: 3 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d", ans); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the line-level hit counts, the following observations can be made:

1. **Array Initialization and Preprocessing:**
   - The loops for computing `pcnt` (lines 21-22) execute 1,000,001 times for both inputs, indicating a preprocessing step that is necessary for both fast and slow cases.

2. **Main Computational Loop:**
   - The nested loop structure (lines 25-39) is the main computational core.
   - Specifically, the inner loop starting at line 26 is executed significantly more times for the slow input (1,033,336 times) compared to the fast input (700,002 times).
   - The repeated execution of the `while` loop (line 28) is notably high: 2,600,000 for the slow input and 1,600,002 for the fast input.
   - Lines within the `while` loop, especially the calculation of `M` and `ccnt` (lines 29-34), are heavily hit, indicating repeated computations for binary searching.

3. **Slowdown Analysis:**
   - The slowdown is primarily due to the number of iterations in the nested loops and the repeated execution of the binary search loop, which depends on the range and distribution of numbers in the array `a`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **Invariant on Array Uniqueness:**
   - **Natural Language Description:** "If the input array contains many unique elements close to the upper bound of the input size, resulting in a large number of unique elements after sorting, the number of iterations in the nested loop increases, leading to potential slowdowns."
   - **Reasoning:** A higher number of unique elements increases the size of `asz`, leading to more iterations in the outer loop (line 25).

2. **Invariant on Element Values and Gaps:**
   - **Natural Language Description:** "If elements in the array are spaced such that the steps in the inner loop cover large ranges, the binary search within these ranges can become excessively deep, causing slowdowns."
   - **Reasoning:** When the values in `a` lead to large gaps, the inner loop (line 26) covers many values, resulting in numerous iterations and a deeper binary search.

3. **Invariant on Binary Search Efficiency:**
   - **Natural Language Description:** "When the value of `a[i]` is small relative to the maximum value in the array, the number of divisions and checks in the binary search becomes large, potentially slowing down execution."
   - **Reasoning:** Smaller values of `a[i]` increase the potential `j` range size, causing more binary search operations.

4. **Invariant on Distribution of High Values:**
   - **Natural Language Description:** "If the array contains a significant number of high values that are not evenly distributed, the nested loops handle a large search space, possibly increasing execution time."
   - **Reasoning:** High values increase possible `R` values (line 27), expanding the search space and causing more iterations.

These invariants provide a broad understanding of conditions leading to performance issues, focusing on array uniqueness, element distribution, and loop iteration depth without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance invariants derived earlier, here are the corresponding C++ checks for each condition:

1. **Invariant on Array Uniqueness:**
   ```cpp
   void check_uniqueness_invariant(int asz, int n) {
       if (asz > n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - too many unique elements!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Element Values and Gaps:**
   ```cpp
   void check_element_gap_invariant(const vector<int>& a) {
       for (size_t i = 1; i < a.size(); ++i) {
           if (a[i] - a[i-1] > 10000) {  // arbitrary large gap threshold
               cerr << "Warning: Performance bottleneck condition triggered - large gaps between elements!" << endl;
               abort();
           }
       }
   }
   ```

3. **Invariant on Binary Search Efficiency:**
   ```cpp
   void check_binary_search_invariant(int smallest, int largest) {
       if (smallest < largest / 100) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive binary search range!" << endl;
           abort();
       }
   }
   ```

4. **Invariant on Distribution of High Values:**
   ```cpp
   void check_high_value_distribution(const vector<int>& a) {
       int high_count = 0;
       for (int value : a) {
           if (value > 900000) {
               high_count++;
           }
       }
       if (high_count > a.size() / 4) {  // arbitrary threshold
           cerr << "Warning: Performance bottleneck condition triggered - too many high values!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Here is the instrumented version of the original C++ program, with the checker code integrated at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 2e5 + 10;
const int MAXX = 1e6;
int cnt[MAXX + 10];
int pcnt[MAXX + 10];

void check_uniqueness_invariant(int asz, int n) {
    if (asz > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - too many unique elements!" << endl;
        abort();
    }
}

void check_element_gap_invariant(const vector<int>& a) {
    for (size_t i = 1; i < a.size(); ++i) {
        if (a[i] - a[i-1] > 10000) {  // arbitrary large gap threshold
            cerr << "Warning: Performance bottleneck condition triggered - large gaps between elements!" << endl;
            abort();
        }
    }
}

void check_binary_search_invariant(int smallest, int largest) {
    if (smallest < largest / 100) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive binary search range!" << endl;
        abort();
    }
}

void check_high_value_distribution(const vector<int>& a) {
    int high_count = 0;
    for (int value : a) {
        if (value > 900000) {
            high_count++;
        }
    }
    if (high_count > a.size() / 4) {  // arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered - too many high values!" << endl;
        abort();
    }
}

int main() {
    int n;
    scanf("%d", &n);
    vector<int> a;
    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        if (x == 1) continue;
        a.push_back(x);
    }

    sort(a.begin(), a.end());
    a.erase(unique(a.begin(), a.end()), a.end());
    int asz = a.size();

    // Check for high value distribution
    check_high_value_distribution(a);

    // Check for element gap invariant
    check_element_gap_invariant(a);

    for (int i = 0; i < asz; i++) cnt[a[i]]++;
    for (int i = 1; i <= MAXX; i++) {
        pcnt[i] = pcnt[i - 1] + cnt[i];
    }
    
    int ans = 0;
    for (int i = asz - 1; i >= 0; i--) {
        // Check for binary search efficiency
        check_binary_search_invariant(a[0], a[i]);

        for (int j = a[i]; j <= MAXX; j += a[i]) {
            int L = j, R = min(MAXX, j + a[i] - 1);
            while (L <= R) {
                int M = (R + L) / 2;
                int ccnt = pcnt[min(MAXX, j + a[i] - 1)] - pcnt[M - 1];
                if (ccnt > 0)
                    L = M + 1;
                else
                    R = M - 1;
            }
            if (R >= j) {
                ans = max(ans, R - j);
            }
        }
    }

    // Check for array uniqueness
    check_uniqueness_invariant(asz, n);

    printf("%d", ans);
    return 0;
}
```

### Explanation

- **Uniqueness Check:** Placed after determining the unique elements count (`asz`), ensuring it is reasonable relative to `n`.
- **Element Gap Check:** Placed after sorting to check for large gaps between consecutive elements.
- **Binary Search Efficiency Check:** Placed inside the main loop to ensure the effective range of binary search remains manageable.
- **High Value Distribution Check:** Placed after sorting to determine if too many values are excessively high. 

These checks should help identify performance bottlenecks without adding significant overhead to the original program.

