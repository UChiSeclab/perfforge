system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int A[200010];
int main() {
  int N;
  cin >> N;
  for (int i = 0; i < N; ++i) {
    cin >> A[i];
  }
  sort(A, A + N);
  N = unique(A, A + N) - A;
  int ma = 0;
  for (int i = 0; i < N; ++i) {
    for (int j = A[i]; j <= 1000000; j += A[i]) {
      int f = j, s = j + A[i];
      int p = lower_bound(A + i + 1, A + N, s) - A;
      if (p == 0) continue;
      p--;
      ma = max(ma, A[p] - f);
    }
  }
  cout << ma << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
4 6 19 13 33 30 49 43 58 61 70 117


(G.2) Fast Input

12
4 4 19 13 33 30 49 43 58 61 70 117


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int A[200010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int N; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; ++i) { /* line 7 slow_hit_count: 13, fast_hit_count: 13 */
    cin >> A[i]; /* line 8 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  sort(A, A + N); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  N = unique(A, A + N) - A; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int ma = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; ++i) { /* line 13 slow_hit_count: 13, fast_hit_count: 12 */
    for (int j = A[i]; j <= 1000000; j += A[i]) { /* line 14 slow_hit_count: 709997, fast_hit_count: 543330 */
      int f = j, s = j + A[i]; /* line 15 slow_hit_count: 709985, fast_hit_count: 543319 */
      int p = lower_bound(A + i + 1, A + N, s) - A; /* line 16 slow_hit_count: 709985, fast_hit_count: 543319 */
      if (p == 0) continue; /* line 17 slow_hit_count: 709985, fast_hit_count: 543319 */
      p--; /* line 18 slow_hit_count: 709985, fast_hit_count: 543319 */
      ma = max(ma, A[p] - f); /* line 19 slow_hit_count: 709985, fast_hit_count: 543319 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ma << endl; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance characteristics of the given C program, we need to identify the segments of code responsible for the disparity in execution times between the fast and slow inputs. We will perform this analysis in two phases: identifying expensive code segments and then deriving performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The `for` loop at line 14 (`for (int j = A[i]; j <= 1000000; j += A[i])`) is executed significantly more times for the slow input (709,997 hits) compared to the fast input (543,330 hits).
   - This loop's execution count is directly tied to the value of `A[i]` since it iterates `j` from `A[i]` to 1,000,000 in steps of `A[i]`.

2. **Understanding the Loop:**
   - This loop iterates over a range incrementing by `A[i]`, which suggests that if `A[i]` is small, the loop will execute more often.
   - The nested operations, including `lower_bound` and updating `ma`, are high-frequency operations due to the outer loop's behavior.

3. **Data Structure Interaction:**
   - The use of `lower_bound` within the loop indicates a search operation that could become costly if invoked too frequently.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

1. **Small Element Values in the Array:**
   - "If the array contains small values relative to other elements in the sequence, these small values may cause the outer loop to iterate a large number of times, leading to performance degradation."
   - This invariant suggests that when `A[i]` is small, the program enters a slower path because the loop at line 14 executes more iterations.

2. **Frequent Use of `lower_bound`:**
   - "If `lower_bound` is frequently called within a loop that itself has a high iteration count, the accumulated cost of these search operations can degrade performance."
   - This invariant highlights the performance impact of repeated binary search operations within a loop, especially when the loop has a large number of iterations due to small `A[i]`.

3. **Unique Elements and Loop Iterations:**
   - "When the number of unique elements is maximized, and some elements are significantly smaller than others, the repeated operations over these elements can lead to excessive computation times."
   - This invariant shows that the unique elements processed by the loop could exacerbate the iteration count if some are small.

By considering these invariants, we can better understand what makes the execution slow and anticipate other scenarios that might trigger similar performance bottlenecks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a sequence a consisting of n integers. Find the maximum possible value of <image> (integer remainder of ai divided by aj), where 1 ≤ i, j ≤ n and ai ≥ aj.

Input

The first line contains integer n — the length of the sequence (1 ≤ n ≤ 2·105). 

The second line contains n space-separated integers ai (1 ≤ ai ≤ 106).

Output

Print the answer to the problem.

Examples

Input

3
3 4 5


Output

2

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, let's implement the invariants as runtime checks in C++.

1. **Invariant for Small Element Values in the Array:**
   - Checks if there is a small element in the array which would cause a large number of iterations in the loop.

```cpp
void check_small_value_invariant(int smallestElement) {
    // Threshold is arbitrary but should reflect a value small enough to cause many iterations
    if (smallestElement < 10) {
        cerr << "Warning: Performance bottleneck triggered due to small array element!" << endl;
        abort();
    }
}
```

2. **Invariant for Frequent Use of `lower_bound`:**
   - Monitors the number of times `lower_bound` is called within the loop.

```cpp
void check_lower_bound_invariant(int lowerBoundCalls, int threshold) {
    if (lowerBoundCalls > threshold) {
        cerr << "Warning: Performance bottleneck triggered due to frequent lower_bound calls!" << endl;
        abort();
    }
}
```

3. **Invariant for Unique Elements and Loop Iterations:**
   - Ensures the loop isn't iterating too many times due to a large number of unique small elements.

```cpp
void check_iterations_invariant(int iterations, int maxIterations) {
    if (iterations > maxIterations) {
        cerr << "Warning: Performance bottleneck triggered due to too many loop iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Performance Checkers into the Original Program

Below is the instrumented C++ code with the performance checkers added at strategic points to detect potential bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

int A[200010];

void check_small_value_invariant(int smallestElement) {
    if (smallestElement < 10) {
        cerr << "Warning: Performance bottleneck triggered due to small array element!" << endl;
        abort();
    }
}

void check_lower_bound_invariant(int lowerBoundCalls, int threshold) {
    if (lowerBoundCalls > threshold) {
        cerr << "Warning: Performance bottleneck triggered due to frequent lower_bound calls!" << endl;
        abort();
    }
}

void check_iterations_invariant(int iterations, int maxIterations) {
    if (iterations > maxIterations) {
        cerr << "Warning: Performance bottleneck triggered due to too many loop iterations!" << endl;
        abort();
    }
}

int main() {
    int N;
    cin >> N;
    for (int i = 0; i < N; ++i) {
        cin >> A[i];
    }

    sort(A, A + N);
    N = unique(A, A + N) - A;

    // Check for small element invariant
    check_small_value_invariant(A[0]);  // Assuming A is non-empty and sorted

    int ma = 0;
    int lowerBoundCalls = 0;

    for (int i = 0; i < N; ++i) {
        int iterations = 0;
        for (int j = A[i]; j <= 1000000; j += A[i]) {
            int f = j, s = j + A[i];
            int p = lower_bound(A + i + 1, A + N, s) - A;
            lowerBoundCalls++;

            if (p == 0) continue;
            p--;
            ma = max(ma, A[p] - f);
            iterations++;
        }

        // Check for iteration invariant within this loop
        check_iterations_invariant(iterations, 100000);  // Arbitrary max iterations for a single element
    }

    // Check for frequent lower_bound calls invariant
    check_lower_bound_invariant(lowerBoundCalls, 100000);  // Arbitrary threshold for total calls

    cout << ma << endl;
}
```

### Explanation:

- **`check_small_value_invariant`** is called after sorting to check if the smallest element is below a threshold that could result in excessive iterations.
- **`check_lower_bound_invariant`** is used to detect if `lower_bound` is called excessively due to small values in the loop, potentially slowing down execution.
- **`check_iterations_invariant`** monitors the loop for excessive iteration counts, ensuring performance isn't degraded due to too many loop iterations for any specific element.

These checks are strategically placed to capture scenarios where performance bottlenecks could occur based on the previously derived invariants.

