system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You came to the exhibition and one exhibit has drawn your attention. It consists of n stacks of blocks, where the i-th stack consists of a_i blocks resting on the surface.

The height of the exhibit is equal to m. Consequently, the number of blocks in each stack is less than or equal to m.

There is a camera on the ceiling that sees the top view of the blocks and a camera on the right wall that sees the side view of the blocks.

<image>

Find the maximum number of blocks you can remove such that the views for both the cameras would not change.

Note, that while originally all blocks are stacked on the floor, it is not required for them to stay connected to the floor after some blocks are removed. There is no gravity in the whole exhibition, so no block would fall down, even if the block underneath is removed. It is not allowed to move blocks by hand either.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100 000, 1 ≤ m ≤ 10^9) — the number of stacks and the height of the exhibit.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ m) — the number of blocks in each stack from left to right.

Output

Print exactly one integer — the maximum number of blocks that can be removed.

Examples

Input

5 6
3 3 3 3 3


Output

10

Input

3 5
1 2 4


Output

3

Input

5 5
2 3 1 4 4


Output

9

Input

1 1000
548


Output

0

Input

3 3
3 1 1


Output

1

Note

The following pictures illustrate the first example and its possible solution.

Blue cells indicate removed blocks. There are 10 blue cells, so the answer is 10.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int a[100001];
int main() {
  long long int n, m, i, Ans = 0, sum = 0, cnt;
  cin >> n >> m;
  for (i = 0; i < n; i++) {
    scanf("%I64d", &a[i]);
    sum += a[i];
  }
  if (n == 1) {
    cout << 0;
    return 0;
  }
  sort(a, a + n);
  cnt = 1;
  Ans = 1;
  for (i = 1; i < n; i++) {
    if (a[i] == cnt)
      Ans++;
    else if (a[i] > cnt && i == n - 1)
      Ans += a[i] - cnt;
    else if (a[i] > cnt && i < n - 1) {
      Ans++;
      cnt++;
    }
  }
  cout << sum - Ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1000
55 84 52 34 3 2 107 80 58 19 13 81 23 89 90 64 71 25 98 5 24 27 60 9 21 66 1 74 51 33 39 18 28 59 40 73 7 41 65 62 32 5 45 70 57 87 61 91 78 20 82 17 50 86 77 96 31 11 68 76 6 53 88 97 15 79 63 37 67 72 48 49 92 16 75 35 69 83 42 100 95 93 94 38 46 8 26 47 4 29 56 99 44 8 30 43 36 54 14 12


(G.2) Fast Input

1 1000
103


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int a[100001]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, m, i, Ans = 0, sum = 0, cnt; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 7 slow_hit_count: 101, fast_hit_count: 2 */
    scanf("%I64d", &a[i]); /* line 8 slow_hit_count: 100, fast_hit_count: 1 */
    sum += a[i]; /* line 9 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (n == 1) { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0; /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 13 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a, a + n); /* line 15 slow_hit_count: 1, fast_hit_count: 0 */
  cnt = 1; /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
  Ans = 1; /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = 1; i < n; i++) { /* line 18 slow_hit_count: 100, fast_hit_count: 0 */
    if (a[i] == cnt) /* line 19 slow_hit_count: 99, fast_hit_count: 0 */
      Ans++; /* line 20 slow_hit_count: 2, fast_hit_count: 0 */
    else if (a[i] > cnt && i == n - 1) /* line 21 slow_hit_count: 97, fast_hit_count: 0 */
      Ans += a[i] - cnt; /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
    else if (a[i] > cnt && i < n - 1) { /* line 23 slow_hit_count: 96, fast_hit_count: 0 */
      Ans++; /* line 24 slow_hit_count: 96, fast_hit_count: 0 */
      cnt++; /* line 25 slow_hit_count: 96, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << sum - Ans << endl; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program and derive performance-characterizing invariants, we need to analyze the code and hit count data from the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

Upon reviewing both the provided code and the hit count data, we can identify several potential areas where performance could degrade:

1. **Sorting Operation**: 
   - The call to `sort(a, a + n)` on line 15 has a significant impact when `n` is large. This operation is an `O(n log n)` complexity and affects runtime noticeably. It is hit once in the slow input and not in the fast input.

2. **Loop Iteration**:
   - The loop starting at line 18 is hit 100 times in the slow input, implying a significant iteration count. This loop includes checks and operations that add up to `Ans`, impacting performance with more data points.
   - The conditions on lines 19, 21, and 23 are evaluated frequently, with the branch on line 23 being particularly active (hit 96 times).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified expensive segments, we can derive the following invariants:

1. **Sorting Invariant**:
   - **Natural Language Description**: "If the number of stacks `n` is large, the sorting operation can become a bottleneck."
   - **Explanation**: The `sort` operation has a complexity of `O(n log n)`, which can lead to performance degradation when `n` approaches its upper constraint (e.g., close to 100,000).

2. **Loop Interaction Invariant**:
   - **Natural Language Description**: "When the number of stacks is large and there is significant variation in block counts, the iterative adjustments in the loop may degrade performance."
   - **Explanation**: The main loop (lines 18-25) repeatedly adjusts the block count (`Ans`) and the counter (`cnt`), which can lead to inefficiencies if there is a wide spread in stack heights, causing many incremental updates.

3. **Conditional Checks Invariant**:
   - **Natural Language Description**: "Frequent conditional evaluations in the loop can slow down the program when the number of stacks is large."
   - **Explanation**: The conditions inside the loop (lines 19, 21, 23) are checked often. If variations in stack heights trigger these conditions frequently, it results in additional computational overhead.

### Final Considerations

- The critical performance issue seems to stem from operations that scale with `n`. While the constraints (such as `m <= 10^9`) don't directly affect operations, the number of stacks (`n`) increases the workload of sorting and conditional logic.

- Overall, performance degradation is predominantly driven by the size of `n` and the structure of input data (variance in stack heights), which affects sorting and loop operations significantly more than simpler cases. This analysis should guide developers in optimizing or refactoring the code to handle larger inputs more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You came to the exhibition and one exhibit has drawn your attention. It consists of n stacks of blocks, where the i-th stack consists of a_i blocks resting on the surface.

The height of the exhibit is equal to m. Consequently, the number of blocks in each stack is less than or equal to m.

There is a camera on the ceiling that sees the top view of the blocks and a camera on the right wall that sees the side view of the blocks.

<image>

Find the maximum number of blocks you can remove such that the views for both the cameras would not change.

Note, that while originally all blocks are stacked on the floor, it is not required for them to stay connected to the floor after some blocks are removed. There is no gravity in the whole exhibition, so no block would fall down, even if the block underneath is removed. It is not allowed to move blocks by hand either.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100 000, 1 ≤ m ≤ 10^9) — the number of stacks and the height of the exhibit.

The second line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ m) — the number of blocks in each stack from left to right.

Output

Print exactly one integer — the maximum number of blocks that can be removed.

Examples

Input

5 6
3 3 3 3 3


Output

10

Input

3 5
1 2 4


Output

3

Input

5 5
2 3 1 4 4


Output

9

Input

1 1000
548


Output

0

Input

3 3
3 1 1


Output

1

Note

The following pictures illustrate the first example and its possible solution.

Blue cells indicate removed blocks. There are 10 blue cells, so the answer is 10.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants we derived earlier into C++ runtime checks:

1. **Sorting Invariant**:
   - **Condition**: Check if `n` is close to its upper constraint, which could make the sorting operation a bottleneck.
   
   ```cpp
   void check_sorting_invariant(long long n) {
       if (n > 10000) { // Threshold chosen considering n's constraint
           cerr << "Warning: Performance bottleneck condition triggered - large n may cause sorting overhead!" << endl;
           abort();
       }
   }
   ```

2. **Loop Interaction Invariant**:
   - **Condition**: Check for significant variation in stack heights causing frequent operations in the loop.
   
   ```cpp
   void check_loop_invariant(long long n, const vector<long long>& stacks) {
       long long max_stack = *max_element(stacks.begin(), stacks.end());
       long long min_stack = *min_element(stacks.begin(), stacks.end());
       if (n > 5000 && (max_stack - min_stack) > n / 10) { // Arbitrary variation threshold
           cerr << "Warning: Performance bottleneck condition triggered - high variation in stack heights!" << endl;
           abort();
       }
   }
   ```

3. **Conditional Checks Invariant**:
   - **Condition**: Frequent conditional evaluations in the loop can slow down execution when `n` is large.
   
   ```cpp
   void check_conditional_invariant(long long n) {
       if (n > 50000) { // Threshold to account for high conditional checks
           cerr << "Warning: Performance bottleneck condition triggered - frequent conditional evaluations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long int a[100001];

// Check if n is large enough to potentially cause sorting overhead
void check_sorting_invariant(long long n) {
    if (n > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - large n may cause sorting overhead!" << endl;
        abort();
    }
}

// Check for high variation in stack heights
void check_loop_invariant(long long n, const long long a[]) {
    long long max_stack = *max_element(a, a + n);
    long long min_stack = *min_element(a, a + n);
    if (n > 5000 && (max_stack - min_stack) > n / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high variation in stack heights!" << endl;
        abort();
    }
}

// Check for frequent conditional evaluations in loops
void check_conditional_invariant(long long n) {
    if (n > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent conditional evaluations!" << endl;
        abort();
    }
}

int main() {
    long long int n, m, i, Ans = 0, sum = 0, cnt;
    cin >> n >> m;
    for (i = 0; i < n; i++) {
        scanf("%I64d", &a[i]);
        sum += a[i];
    }
    
    check_sorting_invariant(n);         // Check before sorting
    check_loop_invariant(n, a);         // Check for stack height variability
    check_conditional_invariant(n);     // Check for potential loop evaluation issues
    
    if (n == 1) {
        cout << 0;
        return 0;
    }
    
    sort(a, a + n);
    cnt = 1;
    Ans = 1;
    for (i = 1; i < n; i++) {
        if (a[i] == cnt)
            Ans++;
        else if (a[i] > cnt && i == n - 1)
            Ans += a[i] - cnt;
        else if (a[i] > cnt && i < n - 1) {
            Ans++;
            cnt++;
        }
    }
    cout << sum - Ans << endl;
    return 0;
}
```

### Explanation

- **Sorting Invariant**: The check is placed before the sorting operation to catch potential sorting overhead.
- **Loop Interaction Invariant**: This check is inserted after input processing to analyze stack variance.
- **Conditional Checks Invariant**: This check is placed before entering the loop to assess potential excessive conditional evaluations.

These checks will help identify performance bottlenecks during runtime, particularly useful for fuzz testing or performance debugging sessions.

