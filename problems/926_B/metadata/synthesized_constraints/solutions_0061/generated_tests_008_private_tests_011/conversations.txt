system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int gdc(int a, int b) {
  if (!b)
    return a;
  else
    return gdc(b, a % b);
}
int execute() {
  int n;
  cin >> n;
  int a[n], i, diff[n], minDiff, ans = 0;
  for (i = 0; i < n; i++) cin >> a[i];
  sort(a, a + n);
  for (i = 1; i < n; i++) diff[i - 1] = a[i] - a[i - 1];
  minDiff = diff[0];
  for (i = 1; i < n - 1 && ans != 1; i++) minDiff = gdc(minDiff, diff[i]);
  for (i = 0; i < n - 1; i++) {
    while (a[i] + minDiff != a[i + 1]) {
      a[i] += minDiff;
      ans++;
    }
  }
  cout << ans << endl;
  return 0;
}
char mtest = false;
unsigned short TE = 1;
int main() {
  ios_base::sync_with_stdio(false);
  if (mtest) cin >> TE;
  while (TE--) execute();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7
996073710 -164874875 34663194 35526441 634003254 -704646201 -905166147


(G.2) Fast Input

7
996073710 -246878649 34663194 35526441 634003254 -704646201 -905166147


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int gdc(int a, int b) { /* line 3 slow_hit_count: 29, fast_hit_count: 23 */
  if (!b) /* line 4 slow_hit_count: 29, fast_hit_count: 23 */
    return a; /* line 5 slow_hit_count: 5, fast_hit_count: 5 */
  else /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    return gdc(b, a % b); /* line 7 slow_hit_count: 24, fast_hit_count: 18 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int execute() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int a[n], i, diff[n], minDiff, ans = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) cin >> a[i]; /* line 13 slow_hit_count: 8, fast_hit_count: 8 */
  sort(a, a + n); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i < n; i++) diff[i - 1] = a[i] - a[i - 1]; /* line 15 slow_hit_count: 7, fast_hit_count: 7 */
  minDiff = diff[0]; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i < n - 1 && ans != 1; i++) minDiff = gdc(minDiff, diff[i]); /* line 17 slow_hit_count: 6, fast_hit_count: 6 */
  for (i = 0; i < n - 1; i++) { /* line 18 slow_hit_count: 7, fast_hit_count: 7 */
    while (a[i] + minDiff != a[i + 1]) { /* line 19 slow_hit_count: 1901239857, fast_hit_count: 15417 */
      a[i] += minDiff; /* line 20 slow_hit_count: 1901239851, fast_hit_count: 15411 */
      ans++; /* line 21 slow_hit_count: 1901239851, fast_hit_count: 15411 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
char mtest = false; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
unsigned short TE = 1; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  if (mtest) cin >> TE; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  while (TE--) execute(); /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Performance Analysis and Characterization

#### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The line `while (a[i] + minDiff != a[i + 1])` (line 19) has a drastically higher hit count in the slow input (1,901,239,857 hits) compared to the fast input (15,417 hits).
   - Similarly, lines incrementing `a[i]` and `ans` (lines 20 and 21) also show excessive hits for the slow input.

2. **Identification of Significant Lines:**
   - The disparity in hit counts suggests that the loop containing the `while` statement in line 19 is responsible for the slowdown. The loop is iterating excessively, which likely corresponds to very small values of `minDiff` causing many iterations to fill the gap between points.

3. **Interaction with Data Structures:**
   - The `while` loop iterates based on the difference between consecutive points adjusted by the minimum difference (`minDiff`). A small `minDiff` leads to many iterations as it tries to fill the large gaps between points.

#### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants:**

   - **Invariant #1: Small `minDiff` Value**
     - Natural language description: "If the computed minimum difference (`minDiff`) between points is very small, especially less than the smallest possible gap between points, the program may enter a slow path due to numerous iterations to equalize distances."
     - This situation arises when the greatest common divisor (GCD) of differences is small, leading to frequent additions to fill gaps, especially when points are widely and unevenly spaced.

   - **Invariant #2: Large Gap Relative to `minDiff`**
     - Natural language description: "If there is a large gap between some consecutive sorted points relative to `minDiff`, and this gap cannot be evenly filled with the calculated `minDiff`, the program may slow down as it attempts to incrementally equalize these gaps."
     - This causes the `while` loop to run excessively, incrementing by small steps to close large gaps.

   - **Invariant #3: High Density of Points with Uneven Gaps**
     - Natural language description: "When a high concentration of points with significantly uneven initial spacing results in a small `minDiff`, the program may experience performance degradation due to iterative gap equalization."
     - This often happens when points are clustered and spread, leading to small `minDiff` and requiring many iterations to balance.

2. **Thresholds and Conditions:**
   - The thresholds for these invariants can be inferred by observing that `n` is capped at 100,000, allowing for computations using small `minDiff` values to trigger slow paths.
   - Conditions to be checked include the relative size of `minDiff` compared to the largest gap found in the sorted array of points.

3. **Fuzzer Utility:**
   - Implementing checks for these conditions can help trigger warnings about potential slow paths during testing, allowing optimizations in cases where `minDiff` becomes impractically small relative to point gaps.

By understanding these performance invariants, we can better predict and optimize future scenarios where the code might experience slow execution paths due to the configuration and spacing of input points.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ implementations for the performance-characterizing invariants derived earlier:

```cpp
void check_minDiff_invariant(int minDiff, int maxGap) {
    if (minDiff < 1 || maxGap / minDiff > 100000) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - small minDiff relative to gaps!" << endl;
        abort();
    }
}

void check_large_gap_invariant(int maxGap, int minDiff) {
    if (maxGap > 100000 && minDiff < 10) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - large gap with small minDiff!" << endl;
        abort();
    }
}

void check_uneven_spacing_invariant(int minDiff, int n) {
    if (minDiff < 1 && n > 10000) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - high density with uneven spacing!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Below is the instrumented version of the original C++ program with performance checks added:

```cpp
#include <bits/stdc++.h>
using namespace std;

int gdc(int a, int b) {
    if (!b)
        return a;
    else
        return gdc(b, a % b);
}

// Performance checks based on derived invariants
void check_minDiff_invariant(int minDiff, int maxGap) {
    if (minDiff < 1 || maxGap / minDiff > 100000) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - small minDiff relative to gaps!" << endl;
        abort();
    }
}

void check_large_gap_invariant(int maxGap, int minDiff) {
    if (maxGap > 100000 && minDiff < 10) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - large gap with small minDiff!" << endl;
        abort();
    }
}

void check_uneven_spacing_invariant(int minDiff, int n) {
    if (minDiff < 1 && n > 10000) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - high density with uneven spacing!" << endl;
        abort();
    }
}

int execute() {
    int n;
    cin >> n;
    int a[n], i, diff[n], minDiff, ans = 0;
    for (i = 0; i < n; i++) cin >> a[i];
    sort(a, a + n);

    // Calculate differences
    for (i = 1; i < n; i++) diff[i - 1] = a[i] - a[i - 1];
    minDiff = diff[0];
    int maxGap = diff[0];

    // Calculate minDiff using GCD
    for (i = 1; i < n - 1 && ans != 1; i++) {
        minDiff = gdc(minDiff, diff[i]);
        if (diff[i] > maxGap) maxGap = diff[i];
    }

    // Insert performance checks after computing minDiff
    check_minDiff_invariant(minDiff, maxGap);
    check_large_gap_invariant(maxGap, minDiff);
    check_uneven_spacing_invariant(minDiff, n);

    // Calculate number of points to add
    for (i = 0; i < n - 1; i++) {
        while (a[i] + minDiff != a[i + 1]) {
            a[i] += minDiff;
            ans++;
        }
    }
    cout << ans << endl;
    return 0;
}

char mtest = false;
unsigned short TE = 1;

int main() {
    ios_base::sync_with_stdio(false);
    if (mtest) cin >> TE;
    while (TE--) execute();
    return 0;
}
```

### Explanation of Inserted Checks

1. **`check_minDiff_invariant`** is called after calculating `minDiff` and `maxGap` to detect if `minDiff` is too small relative to the maximum gap, which could lead to excessive iterations.
2. **`check_large_gap_invariant`** verifies if the largest gap is unreasonably large compared to `minDiff`, which can also cause performance issues.
3. **`check_uneven_spacing_invariant`** checks if `minDiff` is very small in conjunction with a high number of points, indicating potential performance degradation due to uneven initial spacing. 

These checks provide warnings and abort the program if any performance bottleneck conditions are triggered, which is useful for detecting slow paths during testing.

