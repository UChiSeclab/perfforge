system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const long long INFLL = 1e18;
const int MOD = 1e9 + 9;
const long double PI = atan(1.0) * 4L;
const int MAXINT = 1e5 + 1;
long long gcd(long long a, long long b) {
  if (a % b == 0)
    return b;
  else
    return gcd(b, a % b);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n;
  cin >> n;
  long long a[n];
  for (int i = 0; i < n; i++) cin >> a[i];
  sort(a, a + n);
  long long sum = 0, GCD = 0;
  for (int i = 1; i < n; i++)
    sum += a[i] - a[i - 1], GCD = gcd(GCD, a[i] - a[i - 1]);
  long long ans = INFLL;
  for (int i = 1; i < sqrtl(GCD) + 1; i++)
    if (GCD % i == 0) {
      int p = i;
      ans = min(ans, sum / p - (n - 1));
      p = GCD / i;
      ans = min(ans, sum / p - (n - 1));
    }
  cout << ans << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
300000002 -799999998 -599999998


(G.2) Fast Input

3
1 6 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3f3f3f3f; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFLL = 1e18; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long double PI = atan(1.0) * 4L; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXINT = 1e5 + 1; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { /* line 8 slow_hit_count: 4, fast_hit_count: 2 */
  if (a % b == 0) /* line 9 slow_hit_count: 4, fast_hit_count: 2 */
    return b; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  else /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return gcd(b, a % b); /* line 12 slow_hit_count: 2, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  long long a[n]; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> a[i]; /* line 20 slow_hit_count: 4, fast_hit_count: 4 */
  sort(a, a + n); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  long long sum = 0, GCD = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < n; i++) /* line 23 slow_hit_count: 3, fast_hit_count: 3 */
    sum += a[i] - a[i - 1], GCD = gcd(GCD, a[i] - a[i - 1]); /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
  long long ans = INFLL; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < sqrtl(GCD) + 1; i++) /* line 26 slow_hit_count: 10001, fast_hit_count: 2 */
    if (GCD % i == 0) { /* line 27 slow_hit_count: 10000, fast_hit_count: 1 */
      int p = i; /* line 28 slow_hit_count: 41, fast_hit_count: 1 */
      ans = min(ans, sum / p - (n - 1)); /* line 29 slow_hit_count: 41, fast_hit_count: 1 */
      p = GCD / i; /* line 30 slow_hit_count: 41, fast_hit_count: 1 */
      ans = min(ans, sum / p - (n - 1)); /* line 31 slow_hit_count: 41, fast_hit_count: 1 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C program, we will first examine the line-level hit counts to identify bottlenecks, then derive performance-characterizing invariants that describe conditions under which the slowdown occurs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Identify Hotspots:**
   - The line with the most significant hit count difference between the slow and fast inputs is line 26, which executes a loop iterating `sqrtl(GCD) + 1` times.
   - The loop in line 26 is hit 10,001 times for the slow input but only twice for the fast input, indicating this is a major source of the slowdown.

2. **Code Interaction with Data Structures:**
   - This line is part of a loop iterating over potential divisors of `GCD`, attempting to find the smallest number of additional points needed. The gcd calculation might be influenced by the differences in point coordinates, as seen in line 24.

3. **Characteristics of Slow Input:**
   - The gcd computation in line 24 shows a higher complexity due to larger differences or an unfavorable gcd value, causing the loop in line 26 to iterate more times than for the fast input.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

Based on the analysis, we can derive the following performance invariants:

1. **Increased Iterations in Divisor Check:**
   - **Natural Language Description:** "If the greatest common divisor (GCD) of differences between consecutive sorted points is large, the loop iterating over potential divisors may cause a slowdown due to increased iterations proportional to the square root of this GCD."
   - **Explanation:** This invariant captures the scenario where a large GCD value leads to significant computational overhead in the divisor-checking loop, as seen in the slow input.

2. **High GCD Impact:**
   - **Natural Language Description:** "When the differences between coordinates result in a GCD that is not trivially small, the program must check many divisors, potentially slowing down due to extensive looping."
   - **Explanation:** This condition refers to the scenario where the differences between adjacent points yield a non-trivial gcd, resulting in a considerable loop count in divisor checking.

3. **Potential for Large Coordinate Spans:**
   - **Natural Language Description:** "If the coordinate range is large, causing the differences between adjacent points to yield a large GCD, the program may slow significantly as it traverses a large number of divisor candidates."
   - **Explanation:** This invariant suggests that large spans among points can exacerbate the gcd-based divisor checking, leading to performance issues.

In summary, the slowdown for the slow input is largely caused by a combination of a large GCD value for the differences between consecutive points, leading to extensive iterations in the divisor-checking loop. These invariants serve to highlight conditions that can trigger performance degradation due to the specific algorithmic structure.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the performance-characterizing invariants derived in natural language, here are the corresponding C++ code snippets that check these conditions at runtime.

1. **Increased Iterations in Divisor Check:**
   - **Invariant:** "If the greatest common divisor (GCD) of differences between consecutive sorted points is large, the loop iterating over potential divisors may cause a slowdown due to increased iterations proportional to the square root of this GCD."

    ```cpp
    void check_gcd_iterations_invariant(long long GCD) {
        if (sqrtl(GCD) > 10000) {  // Arbitrary threshold based on potential slowdown analysis
            cerr << "Warning: Performance bottleneck condition triggered due to high number of divisor checks!" << endl;
            abort();
        }
    }
    ```

2. **High GCD Impact:**
   - **Invariant:** "When the differences between coordinates result in a GCD that is not trivially small, the program must check many divisors, potentially slowing down due to extensive looping."

    ```cpp
    void check_large_gcd_invariant(long long GCD) {
        if (GCD > 1e9) {  // Assume large GCD might cause a slowdown
            cerr << "Warning: Large GCD detected, potential performance impact!" << endl;
            abort();
        }
    }
    ```

3. **Potential for Large Coordinate Spans:**
   - **Invariant:** "If the coordinate range is large, causing the differences between adjacent points to yield a large GCD, the program may slow significantly as it traverses a large number of divisor candidates."

    ```cpp
    void check_large_coordinate_span_invariant(long long min_coord, long long max_coord) {
        if ((max_coord - min_coord) > 1e9) {  // Consider large coordinate span
            cerr << "Warning: Large coordinate span detected, potential performance impact!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrate Checker Code into the Original Program

Now, I'll integrate the above checker functions into the original C++ program at appropriate points to detect these performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const long long INFLL = 1e18;
const int MOD = 1e9 + 9;
const long double PI = atan(1.0) * 4L;
const int MAXINT = 1e5 + 1;

long long gcd(long long a, long long b) {
    if (a % b == 0)
        return b;
    else
        return gcd(b, a % b);
}

// Checker functions
void check_gcd_iterations_invariant(long long GCD) {
    if (sqrtl(GCD) > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered due to high number of divisor checks!" << endl;
        abort();
    }
}

void check_large_gcd_invariant(long long GCD) {
    if (GCD > 1e9) {
        cerr << "Warning: Large GCD detected, potential performance impact!" << endl;
        abort();
    }
}

void check_large_coordinate_span_invariant(long long min_coord, long long max_coord) {
    if ((max_coord - min_coord) > 1e9) {
        cerr << "Warning: Large coordinate span detected, potential performance impact!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);

    int n;
    cin >> n;
    long long a[n];
    for (int i = 0; i < n; i++) cin >> a[i];

    sort(a, a + n);

    long long min_coord = a[0], max_coord = a[n - 1];
    check_large_coordinate_span_invariant(min_coord, max_coord);  // Check large coordinate spans

    long long sum = 0, GCD = 0;
    for (int i = 1; i < n; i++)
        sum += a[i] - a[i - 1], GCD = gcd(GCD, a[i] - a[i - 1]);
    
    check_large_gcd_invariant(GCD);  // Check large GCD impact

    long long ans = INFLL;
    check_gcd_iterations_invariant(GCD);  // Check for potential slowdown due to GCD divisor checks

    for (int i = 1; i < sqrtl(GCD) + 1; i++)
        if (GCD % i == 0) {
            int p = i;
            ans = min(ans, sum / p - (n - 1));
            p = GCD / i;
            ans = min(ans, sum / p - (n - 1));
        }

    cout << ans << '\n';
    return 0;
}
```

### Explanation of Inserted Checks

1. **`check_large_coordinate_span_invariant`:** This check is placed after sorting and finding the min and max coordinates to ensure we detect large spans early in the process.
2. **`check_large_gcd_invariant`:** This is checked after calculating the initial GCD from the differences to catch potential issues with large gcd values.
3. **`check_gcd_iterations_invariant`:** This check is made before entering the divisor-checking loop to prevent excessive iterations if the GCD is too large.

These checks should help identify when the program might enter a slow execution path due to the identified performance bottlenecks.

