system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const int N = 1e5 + 5;
int v[N];
int main() {
  int n;
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) scanf("%d", &v[i]);
  sort(v, v + n);
  int minn = v[0], maxx = v[n - 1];
  for (int i = 1; i < n; ++i) v[i - 1] = v[i] - v[i - 1];
  sort(v, v + n - 1);
  int ans = maxx - minn + 1 - n;
  for (long long now = 1; now * now <= v[0]; ++now) {
    if (v[0] % now != 0) continue;
    int answer = 0;
    for (int i = 0; i < n - 1; ++i) {
      if (v[i] % now != 0) {
        answer = -1;
        break;
      }
      answer += v[i] / now - 1;
    }
    if (answer != -1) ans = min(answer, ans);
    int then = now;
    now = v[0] / now;
    answer = 0;
    for (int i = 0; i < n - 1; ++i) {
      if (v[i] % now != 0) {
        answer = -1;
        break;
      }
      answer += v[i] / now - 1;
    }
    if (answer != -1) ans = min(answer, ans);
    now = then;
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
-1000000000 2 1000000000


(G.2) Fast Input

3
-1000000000 999999998 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3f3f3f3f; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int v[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) scanf("%d", &v[i]); /* line 9 slow_hit_count: 4, fast_hit_count: 4 */
  sort(v, v + n); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int minn = v[0], maxx = v[n - 1]; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < n; ++i) v[i - 1] = v[i] - v[i - 1]; /* line 12 slow_hit_count: 3, fast_hit_count: 3 */
  sort(v, v + n - 1); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = maxx - minn + 1 - n; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long now = 1; now * now <= v[0]; ++now) { /* line 15 slow_hit_count: 31623, fast_hit_count: 2 */
    if (v[0] % now != 0) continue; /* line 16 slow_hit_count: 31622, fast_hit_count: 1 */
    int answer = 0; /* line 17 slow_hit_count: 4, fast_hit_count: 1 */
    for (int i = 0; i < n - 1; ++i) { /* line 18 slow_hit_count: 10, fast_hit_count: 3 */
      if (v[i] % now != 0) { /* line 19 slow_hit_count: 8, fast_hit_count: 2 */
        answer = -1; /* line 20 slow_hit_count: 2, fast_hit_count: 0 */
        break; /* line 21 slow_hit_count: 2, fast_hit_count: 0 */
      } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      answer += v[i] / now - 1; /* line 23 slow_hit_count: 6, fast_hit_count: 2 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    if (answer != -1) ans = min(answer, ans); /* line 25 slow_hit_count: 4, fast_hit_count: 1 */
    int then = now; /* line 26 slow_hit_count: 4, fast_hit_count: 1 */
    now = v[0] / now; /* line 27 slow_hit_count: 4, fast_hit_count: 1 */
    answer = 0; /* line 28 slow_hit_count: 4, fast_hit_count: 1 */
    for (int i = 0; i < n - 1; ++i) { /* line 29 slow_hit_count: 8, fast_hit_count: 3 */
      if (v[i] % now != 0) { /* line 30 slow_hit_count: 8, fast_hit_count: 2 */
        answer = -1; /* line 31 slow_hit_count: 4, fast_hit_count: 0 */
        break; /* line 32 slow_hit_count: 4, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      answer += v[i] / now - 1; /* line 34 slow_hit_count: 4, fast_hit_count: 2 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    if (answer != -1) ans = min(answer, ans); /* line 36 slow_hit_count: 4, fast_hit_count: 1 */
    now = then; /* line 37 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Upon comparing the line-level hit counts for the fast and slow inputs, a few key observations can be made:

1. **Line 15: Loop Initialization** - This line, which initializes a loop with `now` starting from 1 up to `sqrt(v[0])`, gets hit 31,623 times for the slow input but only 2 times for the fast input. This indicates that the loop iterating over possible factors of `v[0]` is the primary source of the slowdown.

2. **Lines 18-23 and 29-34: Inner Loops** - Both these loops are part of the factor checking process and are nested within the loop on line 15. They execute significantly more often on the slow input, suggesting that the work done inside these loops is repeated many times due to the high number of iterations in the outer loop.

### Phase 2: Deriving Performance-Characterizing Invariants

Given the observations, we can derive performance-characterizing invariants for when and why the program exhibits slow behavior. These invariants focus on the conditions that cause the outer loop to iterate many times, driving up the execution time.

1. **Invariant on Distance Range**:
   - **Natural Language Description**: "If the initial difference between the smallest and largest points is large and includes multiple small divisors, the computation may slow down significantly due to extensive factor checking."
   - **Explanation**: The outer loop depends on the range of distances between the smallest and largest points. If this range is large and includes a number with many small divisors, the `now` loop will iterate extensively, causing a slowdown.

2. **Invariant on Divisor Density**:
   - **Natural Language Description**: "When the smallest distance between any two sorted points has a large prime factorization, the efficiency of the algorithm degrades as the number of potential divisors to check increases."
   - **Explanation**: If the smallest distance (`v[0]` after sorting differences) is a number with numerous small divisors, the loop will perform many additional checks, leading to a slowdown.

3. **Invariant on Point Distribution**:
   - **Natural Language Description**: "A non-uniform distribution of points, leading to large disparities in distances between them, can result in computational inefficiencies as the algorithm attempts to equalize these distances."
   - **Explanation**: When the points are distributed such that there are large variations between adjacent distances after sorting, the program will spend additional cycles attempting to balance these distances, slowing down the process.

These invariants focus on the conditions that lead to excessive iterations within the loops, highlighting how the input distribution and characteristics directly impact performance. They help capture scenarios that can lead to slow execution beyond merely considering maximum input sizes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Let's implement the performance-characterizing invariants as runtime checks:

1. **Invariant on Distance Range**
   ```cpp
   void check_distance_range_invariant(int maxx, int minn) {
       if (maxx - minn > 1e9) { // Example threshold for large distances
           cerr << "Warning: Performance bottleneck condition triggered - large distance range!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Divisor Density**
   ```cpp
   void check_divisor_density_invariant(int first_diff) {
       int divisor_count = 0;
       for (int i = 1; i * i <= first_diff; ++i) {
           if (first_diff % i == 0) {
               ++divisor_count;
               if (i != first_diff / i) ++divisor_count;
           }
       }
       if (divisor_count > 1000) { // Example threshold for high divisor density
           cerr << "Warning: Performance bottleneck condition triggered - high divisor density!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Point Distribution**
   ```cpp
   void check_point_distribution_invariant(int* differences, int size) {
       int max_diff = *max_element(differences, differences + size);
       int min_diff = *min_element(differences, differences + size);
       if (max_diff - min_diff > 1e8) { // Example threshold for disparity
           cerr << "Warning: Performance bottleneck condition triggered - non-uniform point distribution!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checks into the Original Program

Now let's integrate these checks into the original C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const int N = 1e5 + 5;
int v[N];

void check_distance_range_invariant(int maxx, int minn) {
    if (maxx - minn > 1e9) { // Example threshold for large distances
        cerr << "Warning: Performance bottleneck condition triggered - large distance range!" << endl;
        abort();
    }
}

void check_divisor_density_invariant(int first_diff) {
    int divisor_count = 0;
    for (int i = 1; i * i <= first_diff; ++i) {
        if (first_diff % i == 0) {
            ++divisor_count;
            if (i != first_diff / i) ++divisor_count;
        }
    }
    if (divisor_count > 1000) { // Example threshold for high divisor density
        cerr << "Warning: Performance bottleneck condition triggered - high divisor density!" << endl;
        abort();
    }
}

void check_point_distribution_invariant(int* differences, int size) {
    int max_diff = *max_element(differences, differences + size);
    int min_diff = *min_element(differences, differences + size);
    if (max_diff - min_diff > 1e8) { // Example threshold for disparity
        cerr << "Warning: Performance bottleneck condition triggered - non-uniform point distribution!" << endl;
        abort();
    }
}

int main() {
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) scanf("%d", &v[i]);
    sort(v, v + n);
    int minn = v[0], maxx = v[n - 1];

    check_distance_range_invariant(maxx, minn); // Check for large distance range

    for (int i = 1; i < n; ++i) v[i - 1] = v[i] - v[i - 1];
    sort(v, v + n - 1);

    check_divisor_density_invariant(v[0]); // Check for high divisor density
    check_point_distribution_invariant(v, n - 1); // Check for non-uniform distribution

    int ans = maxx - minn + 1 - n;
    for (long long now = 1; now * now <= v[0]; ++now) {
        if (v[0] % now != 0) continue;
        int answer = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (v[i] % now != 0) {
                answer = -1;
                break;
            }
            answer += v[i] / now - 1;
        }
        if (answer != -1) ans = min(answer, ans);
        int then = now;
        now = v[0] / now;
        answer = 0;
        for (int i = 0; i < n - 1; ++i) {
            if (v[i] % now != 0) {
                answer = -1;
                break;
            }
            answer += v[i] / now - 1;
        }
        if (answer != -1) ans = min(answer, ans);
        now = then;
    }
    printf("%d\n", ans);
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are strategically placed after the input processing and sorting, where the data needed for each invariant is available. This ensures they do not introduce unnecessary overhead in performance-critical loops.
- **Thresholds**: The thresholds and conditions used in the checks are based on the invariants and aim to capture conditions that might lead to performance degradation.
- **Abort on Trigger**: Each check will output a warning and terminate the program if a bottleneck condition is detected, which helps in identifying problematic inputs during testing or fuzzing.

