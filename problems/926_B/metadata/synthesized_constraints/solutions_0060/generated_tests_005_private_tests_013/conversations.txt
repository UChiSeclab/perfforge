system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename A, typename B>
string to_string(pair<A, B> p);
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) { return '"' + s + '"'; }
string to_string(const char& ch) {
  string s = "";
  s += ch;
  return "'" + s + "', ";
}
string to_string(const char* s) { return to_string((string)s); }
string to_string(bool b) { return (b ? "true" : "false"); }
string to_string(vector<bool> v) {
  bool first = true;
  string res = "{";
  for (int i = 0; i < static_cast<int>(v.size()); i++) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(v[i]);
  }
  res += "}";
  return res;
}
template <size_t N>
string to_string(bitset<N> v) {
  string res = "";
  for (size_t i = 0; i < N; i++) {
    res += static_cast<char>('0' + v[i]);
  }
  return res;
}
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto& x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " +
         to_string(get<2>(p)) + ")";
}
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " +
         to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}
void debug_out() { cout << endl; }
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cout << " " << to_string(H);
  debug_out(T...);
}
const long long mod = (long long)1000000007;
const long long inf = (long long)2e18;
vector<long long> get_divisor(long long n) {
  vector<long long> ans;
  for (long long i = 1; i * i <= n; ++i) {
    if (n % i == 0) {
      ans.push_back(i);
      if (n / i != i) ans.push_back(n / i);
    }
  }
  sort((ans).begin(), (ans).end());
  return ans;
}
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout << fixed << setprecision(9);
  long long n;
  cin >> n;
  vector<long long> a(n);
  for (long long& x : a) cin >> x;
  sort((a).begin(), (a).end());
  vector<long long> v;
  for (long long i = 1; i < ((long long)(a).size()); ++i) {
    v.push_back(a[i] - a[i - 1]);
  }
  long long dist = a.back() - a.front();
  vector<long long> pr = get_divisor(dist);
  reverse((pr).begin(), (pr).end());
  for (long long& d : pr) {
    bool ok = true;
    for (long long& x : v) ok &= (x % d == 0);
    if (ok) {
      long long tot = dist / d + 1;
      42;
      cout << tot - n << '\n';
      return 0;
    }
  }
  assert(false);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
-1000000000 2 1000000000


(G.2) Fast Input

3
1 2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(pair<A, B> p); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B, typename C> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(tuple<A, B, C> p); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B, typename C, typename D> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(tuple<A, B, C, D> p); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(const string& s) { return '"' + s + '"'; } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(const char& ch) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  string s = ""; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  s += ch; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return "'" + s + "', "; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(const char* s) { return to_string((string)s); } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(bool b) { return (b ? "true" : "false"); } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(vector<bool> v) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  bool first = true; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  string res = "{"; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < static_cast<int>(v.size()); i++) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    if (!first) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      res += ", "; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    first = false; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    res += to_string(v[i]); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  res += "}"; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
template <size_t N> /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(bitset<N> v) { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  string res = ""; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  for (size_t i = 0; i < N; i++) { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    res += static_cast<char>('0' + v[i]); /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A> /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(A v) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  bool first = true; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  string res = "{"; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (const auto& x : v) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    if (!first) { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      res += ", "; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    first = false; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    res += to_string(x); /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  res += "}"; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B> /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(pair<A, B> p) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B, typename C> /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(tuple<A, B, C> p) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
         to_string(get<2>(p)) + ")"; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B, typename C, typename D> /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(tuple<A, B, C, D> p) { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
         to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")"; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
void debug_out() { cout << endl; } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
template <typename Head, typename... Tail> /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
void debug_out(Head H, Tail... T) { /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  cout << " " << to_string(H); /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  debug_out(T...); /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = (long long)1000000007; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
const long long inf = (long long)2e18; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> get_divisor(long long n) { /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> ans; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i * i <= n; ++i) { /* line 76 slow_hit_count: 44722, fast_hit_count: 3 */
    if (n % i == 0) { /* line 77 slow_hit_count: 44721, fast_hit_count: 2 */
      ans.push_back(i); /* line 78 slow_hit_count: 55, fast_hit_count: 1 */
      if (n / i != i) ans.push_back(n / i); /* line 79 slow_hit_count: 55, fast_hit_count: 1 */
    } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  sort((ans).begin(), (ans).end()); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  return ans; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed << setprecision(9); /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> a(n); /* line 91 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long& x : a) cin >> x; /* line 92 slow_hit_count: 4, fast_hit_count: 4 */
  sort((a).begin(), (a).end()); /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> v; /* line 94 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 1; i < ((long long)(a).size()); ++i) { /* line 95 slow_hit_count: 3, fast_hit_count: 3 */
    v.push_back(a[i] - a[i - 1]); /* line 96 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  long long dist = a.back() - a.front(); /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> pr = get_divisor(dist); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  reverse((pr).begin(), (pr).end()); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long& d : pr) { /* line 101 slow_hit_count: 109, fast_hit_count: 2 */
    bool ok = true; /* line 102 slow_hit_count: 109, fast_hit_count: 2 */
    for (long long& x : v) ok &= (x % d == 0); /* line 103 slow_hit_count: 327, fast_hit_count: 6 */
    if (ok) { /* line 104 slow_hit_count: 109, fast_hit_count: 2 */
      long long tot = dist / d + 1; /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
      42; /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
      cout << tot - n << '\n'; /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
      return 0; /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  assert(false); /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 113 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C code and generate performance-characterizing invariants, we need to follow the provided phases. Based on the hit count information, we can identify where the code spends significant time during the slow input execution compared to the fast input. 

### Phase 1: Identify Expensive or Inefficient Code Segments

**1. Compare Line-Level Hit Counts:**
   - The `get_divisor` function shows a significant hit count difference between slow and fast inputs, especially at line 76 (`for (long long i = 1; i * i <= n; ++i)`), indicating that this loop iterates many more times for the slow input.
   - The main computation at line 101 (`for (long long& d : pr)`) and line 103 (`for (long long& x : v) ok &= (x % d == 0)`) also have higher hit counts for the slow input, suggesting more iterations and checks are involved.

**2. Pinpoint Lines or Functions:**
   - The `get_divisor` function, specifically the loop calculating divisors, is a significant bottleneck due to the large number of iterations.
   - The nested loop structure at line 101 and line 103 in the main function suggests that the divisor checking process is more intensive for the slow input.

**3. Infer Interactions with Data Structures:**
   - The `dist` calculated from the input points is significantly larger for the slow input, leading to more divisors and, consequently, more iterations over divisors and differences.

### Phase 2: Derive Performance-Characterizing Invariants

**1. Natural Language Performance Invariants:**

1. **Invariant for Large Distances:**
   - "When the difference between the maximum and minimum points (`dist`) is large, the computation of divisors becomes a bottleneck as it requires checking a large number of possible divisors, leading to increased iterations and condition checks."

2. **Invariant for Nested Loops with Divisors:**
   - "When the range of divisors (`pr`) derived from a large `dist` is extensive, the program enters a slow path due to the nested loops iterating over these divisors and differences, increasing the computational overhead."

3. **Invariant for Input Range:**
   - "If the input points are spaced far apart, leading to a large `dist`, the effort to ensure that all neighboring differences are divisible by a common divisor increases significantly, causing a slowdown."

**2. Threshold Values:**
    - While specific values in the slow input cannot be directly mentioned, the focus should be on recognition of patterns, such as large spans between the smallest and largest point (`abs(max-min)`), which trigger inefficiencies.

These invariants provide a clear picture of conditions under which the program experiences slowdowns, focusing on large spans in input data and the resulting computationally heavy divisor checks. By abstracting these into broad categories, we capture potential slow paths without tying them to specific numeric values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checks

Let's translate the previously derived natural language invariants into C++ code checks.

**Invariant 1: Large Distance Calculation Bottleneck**
```cpp
void check_large_distance_invariant(long long dist) {
    if (dist > 1000000000LL) { // Example threshold for a large distance
        cerr << "Warning: Performance bottleneck condition triggered - large distance between points!" << endl;
        abort();
    }
}
```

**Invariant 2: Extensive Divisor Checking**
```cpp
void check_extensive_divisor_invariant(size_t divisor_count, size_t threshold) {
    if (divisor_count > threshold) { // Example threshold for too many divisors
        cerr << "Warning: Performance bottleneck condition triggered - too many divisors to check!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original C++ Program

In this phase, we will integrate the checker code into the original program at appropriate locations to detect the performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_distance_invariant(long long dist) {
    if (dist > 1000000000LL) { // Example threshold for a large distance
        cerr << "Warning: Performance bottleneck condition triggered - large distance between points!" << endl;
        abort();
    }
}

void check_extensive_divisor_invariant(size_t divisor_count, size_t threshold = 10000) {
    if (divisor_count > threshold) { // Example threshold for too many divisors
        cerr << "Warning: Performance bottleneck condition triggered - too many divisors to check!" << endl;
        abort();
    }
}

template <typename A, typename B>
string to_string(pair<A, B> p);
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);
string to_string(const string& s) { return '"' + s + '"'; }
string to_string(const char& ch) {
  string s = "";
  s += ch;
  return "'" + s + "', ";
}
string to_string(const char* s) { return to_string((string)s); }
string to_string(bool b) { return (b ? "true" : "false"); }
string to_string(vector<bool> v) {
  bool first = true;
  string res = "{";
  for (int i = 0; i < static_cast<int>(v.size()); i++) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(v[i]);
  }
  res += "}";
  return res;
}
template <size_t N>
string to_string(bitset<N> v) {
  string res = "";
  for (size_t i = 0; i < N; i++) {
    res += static_cast<char>('0' + v[i]);
  }
  return res;
}
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto& x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " +
         to_string(get<2>(p)) + ")";
}
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " +
         to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}
void debug_out() { cout << endl; }
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cout << " " << to_string(H);
  debug_out(T...);
}
const long long mod = (long long)1000000007;
const long long inf = (long long)2e18;

vector<long long> get_divisor(long long n) {
  vector<long long> ans;
  for (long long i = 1; i * i <= n; ++i) {
    if (n % i == 0) {
      ans.push_back(i);
      if (n / i != i) ans.push_back(n / i);
    }
  }
  sort((ans).begin(), (ans).end());
  return ans;
}

int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout << fixed << setprecision(9);

  long long n;
  cin >> n;
  vector<long long> a(n);
  for (long long& x : a) cin >> x;
  sort((a).begin(), (a).end());

  vector<long long> v;
  for (long long i = 1; i < ((long long)(a).size()); ++i) {
    v.push_back(a[i] - a[i - 1]);
  }

  long long dist = a.back() - a.front();
  check_large_distance_invariant(dist); // Check large distance between points

  vector<long long> pr = get_divisor(dist);
  check_extensive_divisor_invariant(pr.size()); // Check for too many divisors

  reverse((pr).begin(), (pr).end());
  for (long long& d : pr) {
    bool ok = true;
    for (long long& x : v) ok &= (x % d == 0);
    if (ok) {
      long long tot = dist / d + 1;
      cout << tot - n << '\n';
      return 0;
    }
  }

  assert(false);
  return 0;
}
```

### Explanation:
- **Large Distance Check**: Added after calculating the `dist` variable to detect potentially large spans between points.
- **Extensive Divisor Check**: Added after computing divisors to detect when the number of divisors becomes too large, indicating a potential bottleneck in processing. 

These checks will abort the program and print a warning message if the performance bottleneck conditions are met, helping to identify potential performance issues during execution.

