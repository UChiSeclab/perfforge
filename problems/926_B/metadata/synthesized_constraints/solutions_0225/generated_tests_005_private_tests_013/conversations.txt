system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 3;
long long a[N];
bool go(long long n, long long m) {
  long long i, l = (a[n - 1] - a[0]) / m;
  for (i = 1; i < n; i++) {
    if (((a[i] - a[0]) % l) != 0) return false;
  }
  return true;
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  long long t, i, j, n, m, l, r, ans = -1;
  scanf("%lld", &n);
  ;
  for (i = 0; i < n; i++) scanf("%lld", &a[i]);
  ;
  sort(a, a + n);
  l = a[n - 1] - a[0];
  vector<long long> v;
  for (i = 1; i <= (l / i); i++) {
    if (l % i == 0) {
      if (i >= (n - 1)) v.push_back(i);
      if (i != (l / i) && (l / i) >= (n - 1)) v.push_back(l / i);
    }
  }
  sort(v.begin(), v.end());
  r = 0;
  while (ans == -1) {
    if (go(n, v[r]) == true) ans = v[r] - n + 1;
    r++;
  }
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
-1000000000 2 1000000000


(G.2) Fast Input

3
1 2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 3; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long a[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool go(long long n, long long m) { /* line 5 slow_hit_count: 108, fast_hit_count: 1 */
  long long i, l = (a[n - 1] - a[0]) / m; /* line 6 slow_hit_count: 108, fast_hit_count: 1 */
  for (i = 1; i < n; i++) { /* line 7 slow_hit_count: 110, fast_hit_count: 3 */
    if (((a[i] - a[0]) % l) != 0) return false; /* line 8 slow_hit_count: 109, fast_hit_count: 2 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  long long t, i, j, n, m, l, r, ans = -1; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld", &n); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < n; i++) scanf("%lld", &a[i]); /* line 19 slow_hit_count: 4, fast_hit_count: 4 */
  ; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a, a + n); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  l = a[n - 1] - a[0]; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> v; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= (l / i); i++) { /* line 24 slow_hit_count: 44722, fast_hit_count: 3 */
    if (l % i == 0) { /* line 25 slow_hit_count: 44721, fast_hit_count: 2 */
      if (i >= (n - 1)) v.push_back(i); /* line 26 slow_hit_count: 55, fast_hit_count: 1 */
      if (i != (l / i) && (l / i) >= (n - 1)) v.push_back(l / i); /* line 27 slow_hit_count: 55, fast_hit_count: 1 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end()); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  r = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  while (ans == -1) { /* line 32 slow_hit_count: 109, fast_hit_count: 2 */
    if (go(n, v[r]) == true) ans = v[r] - n + 1; /* line 33 slow_hit_count: 108, fast_hit_count: 1 */
    r++; /* line 34 slow_hit_count: 108, fast_hit_count: 1 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem statement and analyze the given C code, I'll provide a list of natural language performance invariants explaining under what conditions the code slows down.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `go` Execution**: The function `go` is called significantly more often in the slow input case (108 times) than in the fast input case (1 time). This indicates that the condition inside the while loop (`while (ans == -1)`) is hit many times, triggering numerous checks within `go`.

2. **Loop for Divisor Calculation**: The loop starting at line 24 is executed a large number of times (44,722 times for the slow input versus 3 times for the fast input). This suggests that the operations involving the calculation of divisors of the difference `l = a[n - 1] - a[0]` are expensive.

3. **Behavior of `go` with Large Range**: The `go` function likely performs poorly when `l` is large, as seen in the slow input being `2,000,000,000` (i.e., the difference between the maximum and minimum coordinates).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Large Coordinate Range**:
   - **Natural Language Description**: "The program may slow down significantly when the difference between the maximum and minimum point coordinates is large, leading to a high number of divisor checks and repeated calls to the function `go`."
   - **Reasoning**: With a larger range, the number of potential divisors grows, increasing the workload within the loop checking divisibility conditions.
   
2. **Excessive Iterations in Divisor Loop**:
   - **Natural Language Description**: "If the difference between the farthest points is large and close to the input constraint maximum (up to 2e9), the computation of divisors becomes costly, resulting in slow performance."
   - **Reasoning**: Large values for `l` result in a high number of iterations in the divisor loop, as shown by the line hit counts.

3. **High Number of Function Calls**:
   - **Natural Language Description**: "The execution time increases if the distance between points results in many function calls to check for evenly spaced points, especially when the common divisor is small."
   - **Reasoning**: If many potential divisors are tested, function `go` is called multiple times, each time performing checks for the condition of evenly spaced points.

### Conclusion

These invariants collectively highlight the program's performance being strongly related to the spread of point coordinates. When the difference between the largest and smallest coordinates is considerable, the program may slow down due to the increased complexity of divisor calculations and the number of checks performed by the `go` function. These insights can help in optimizing or refactoring the code to handle such cases more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n points on a straight line, and the i-th point among them is located at xi. All these coordinates are distinct.

Determine the number m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Input

The first line contains a single integer n (3 ≤ n ≤ 100 000) — the number of points.

The second line contains a sequence of integers x1, x2, ..., xn ( - 109 ≤ xi ≤ 109) — the coordinates of the points. All these coordinates are distinct. The points can be given in an arbitrary order.

Output

Print a single integer m — the smallest number of points you should add on the line to make the distances between all neighboring points equal. 

Examples

Input

3
-5 10 5


Output

1


Input

6
100 200 400 300 600 500


Output

0


Input

4
10 9 0 -1


Output

8

Note

In the first example you can add one point with coordinate 0.

In the second example the distances between all neighboring points are already equal, so you shouldn't add anything.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

We previously identified the following performance-characterizing invariants:

1. **Large Coordinate Range**: The program slows when the difference between the max and min point coordinates is large, leading to many divisor checks.

2. **Excessive Iterations in Divisor Loop**: High costs occur when the distance between the farthest points results in a large number of divisor checks.

3. **High Number of Function Calls**: The function `go` is called excessively if many divisors are tested, each time performing checks for the condition of evenly spaced points.

Below is the C++ code implementing these checks:

```cpp
void check_large_range_invariant(long long range) {
    if (range > 1e9) {  // Arbitrary threshold close to the maximum coordinate difference
        cerr << "Warning: large_range_invariant triggered - large coordinate range" << endl;
        abort();
    }
}

void check_divisor_iterations_invariant(long long iterations) {
    if (iterations > 1e5) {  // Arbitrary threshold for excessive iterations
        cerr << "Warning: divisor_iterations_invariant triggered - excessive divisor checks" << endl;
        abort();
    }
}

void check_function_calls_invariant(int calls) {
    if (calls > 1000) {  // Arbitrary threshold for excessive function calls
        cerr << "Warning: function_calls_invariant triggered - excessive function calls" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Here is the original C++ code instrumented with the checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 3;
long long a[N];

bool go(long long n, long long m) {
    long long i, l = (a[n - 1] - a[0]) / m;
    for (i = 1; i < n; i++) {
        if (((a[i] - a[0]) % l) != 0) return false;
    }
    return true;
}

void check_large_range_invariant(long long range) {
    if (range > 1e9) {
        cerr << "Warning: large_range_invariant triggered - large coordinate range" << endl;
        abort();
    }
}

void check_divisor_iterations_invariant(long long iterations) {
    if (iterations > 1e5) {
        cerr << "Warning: divisor_iterations_invariant triggered - excessive divisor checks" << endl;
        abort();
    }
}

void check_function_calls_invariant(int calls) {
    if (calls > 1000) {
        cerr << "Warning: function_calls_invariant triggered - excessive function calls" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    long long t, i, j, n, m, l, r, ans = -1;
    scanf("%lld", &n);
    for (i = 0; i < n; i++) scanf("%lld", &a[i]);
    sort(a, a + n);
    l = a[n - 1] - a[0];
    
    // Check for large coordinate range
    check_large_range_invariant(l);

    vector<long long> v;
    long long divisor_iterations = 0;
    for (i = 1; i <= (l / i); i++) {
        divisor_iterations++;
        if (l % i == 0) {
            if (i >= (n - 1)) v.push_back(i);
            if (i != (l / i) && (l / i) >= (n - 1)) v.push_back(l / i);
        }
    }

    // Check for excessive divisor iterations
    check_divisor_iterations_invariant(divisor_iterations);

    sort(v.begin(), v.end());
    r = 0;
    int function_calls = 0;
    while (ans == -1) {
        function_calls++;
        if (go(n, v[r]) == true) ans = v[r] - n + 1;
        r++;
    }

    // Check for excessive function calls
    check_function_calls_invariant(function_calls);

    printf("%lld\n", ans);
    return 0;
}
```

**Explanation**:
- **Check for Large Coordinate Range**: This is added immediately after the range `l` is computed, which is critical to detecting potential slowdowns early.
- **Check for Excessive Divisor Iterations**: This check is placed after the divisor loop to catch scenarios where the loop executes excessively.
- **Check for Excessive Function Calls**: This check is placed after the loop where the function `go` is called repeatedly, allowing for detection of excessive calls.

This code provides runtime checks for the conditions under which performance bottlenecks occur, aiming to help identify slow execution paths through these checks.

