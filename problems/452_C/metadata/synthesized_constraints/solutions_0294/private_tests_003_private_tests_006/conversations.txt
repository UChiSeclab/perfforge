system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alex enjoys performing magic tricks. He has a trick that requires a deck of n cards. He has m identical decks of n different cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs n cards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.

The trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.

You don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.

Input

First line of the input consists of two integers n and m (1 ≤ n, m ≤ 1000), separated by space — number of cards in each deck, and number of decks.

Output

On the only line of the output print one floating point number – probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10 - 6.

Examples

Input

2 2


Output

0.6666666666666666


Input

4 4


Output

0.4000000000000000


Input

1 2


Output

1.0000000000000000

Note

In the first sample, with probability <image> Alex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.

With the remaining <image> probability he took two different cards, and the probability of pulling off the trick is <image>.

The resulting probability is <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int countBits(long long mask) {
  int res = 0;
  while (mask) mask &= (mask - 1), ++res;
  return res;
}
string toString(long long n) {
  stringstream ss;
  ss << n;
  return ss.str();
}
long long toNumber(string s) {
  stringstream ss;
  long long n;
  ss << s;
  ss >> n;
  return n;
}
void nCr(int n, int k, vector<long double> &foo2, vector<long double> &ta7t) {
  for (int i = (int)(1), _m = (int)(k + 1); i < _m; ++i) ta7t.push_back(i);
  for (int i = (int)(n), _m = (int)(n - k + 1); i >= _m; --i) foo2.push_back(i);
}
long double solve(int n, int m, int m2) {
  vector<long double> foo2, ta7t;
  nCr(n * m - m, n - m2, foo2, ta7t);
  nCr(n * m, n, ta7t, foo2);
  nCr(m, m2, foo2, ta7t);
  foo2.push_back(m2), foo2.push_back(m2);
  ta7t.push_back(n);
  sort(foo2.rbegin(), foo2.rend()), sort(ta7t.rbegin(), ta7t.rend());
  int common = min((int)foo2.size(), (int)ta7t.size());
  long double res = 1;
  for (int i = (int)(0), _m = (int)(common); i < _m; ++i)
    res *= foo2[i] / ta7t[i];
  for (int i = (int)(common), _m = (int)(foo2.size()); i < _m; ++i)
    res *= foo2[i];
  for (int i = (int)(common), _m = (int)(ta7t.size()); i < _m; ++i)
    res /= ta7t[i];
  return res;
}
int main() {
  int n, m;
  while (cin >> n >> m) {
    long double res = 0;
    for (int m2 = (int)(1), _m = (int)(min(n, m) + 1); m2 < _m; ++m2)
      res += solve(n, m, m2);
    cout.precision(8);
    cout << fixed << res << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

999 999


(G.2) Fast Input

1 999


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int countBits(long long mask) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 0; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  while (mask) mask &= (mask - 1), ++res; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string toString(long long n) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  stringstream ss; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  ss << n; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return ss.str(); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long toNumber(string s) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  stringstream ss; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  long long n; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  ss << s; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  ss >> n; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return n; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
void nCr(int n, int k, vector<long double> &foo2, vector<long double> &ta7t) { /* line 20 slow_hit_count: 2997, fast_hit_count: 3 */
  for (int i = (int)(1), _m = (int)(k + 1); i < _m; ++i) ta7t.push_back(i); /* line 21 slow_hit_count: 1998999, fast_hit_count: 5 */
  for (int i = (int)(n), _m = (int)(n - k + 1); i >= _m; --i) foo2.push_back(i); /* line 22 slow_hit_count: 1998999, fast_hit_count: 5 */
} /* line 23 slow_hit_count: 2997, fast_hit_count: 3 */
long double solve(int n, int m, int m2) { /* line 24 slow_hit_count: 999, fast_hit_count: 1 */
  vector<long double> foo2, ta7t; /* line 25 slow_hit_count: 1998, fast_hit_count: 2 */
  nCr(n * m - m, n - m2, foo2, ta7t); /* line 26 slow_hit_count: 999, fast_hit_count: 1 */
  nCr(n * m, n, ta7t, foo2); /* line 27 slow_hit_count: 999, fast_hit_count: 1 */
  nCr(m, m2, foo2, ta7t); /* line 28 slow_hit_count: 999, fast_hit_count: 1 */
  foo2.push_back(m2), foo2.push_back(m2); /* line 29 slow_hit_count: 999, fast_hit_count: 1 */
  ta7t.push_back(n); /* line 30 slow_hit_count: 999, fast_hit_count: 1 */
  sort(foo2.rbegin(), foo2.rend()), sort(ta7t.rbegin(), ta7t.rend()); /* line 31 slow_hit_count: 999, fast_hit_count: 1 */
  int common = min((int)foo2.size(), (int)ta7t.size()); /* line 32 slow_hit_count: 999, fast_hit_count: 1 */
  long double res = 1; /* line 33 slow_hit_count: 999, fast_hit_count: 1 */
  for (int i = (int)(0), _m = (int)(common); i < _m; ++i) /* line 34 slow_hit_count: 1998000, fast_hit_count: 4 */
    res *= foo2[i] / ta7t[i]; /* line 35 slow_hit_count: 1997001, fast_hit_count: 3 */
  for (int i = (int)(common), _m = (int)(foo2.size()); i < _m; ++i) /* line 36 slow_hit_count: 1998, fast_hit_count: 2 */
    res *= foo2[i]; /* line 37 slow_hit_count: 999, fast_hit_count: 1 */
  for (int i = (int)(common), _m = (int)(ta7t.size()); i < _m; ++i) /* line 38 slow_hit_count: 999, fast_hit_count: 1 */
    res /= ta7t[i]; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 40 slow_hit_count: 1998, fast_hit_count: 2 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
  int n, m; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  while (cin >> n >> m) { /* line 44 slow_hit_count: 2, fast_hit_count: 2 */
    long double res = 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    for (int m2 = (int)(1), _m = (int)(min(n, m) + 1); m2 < _m; ++m2) /* line 46 slow_hit_count: 1000, fast_hit_count: 2 */
      res += solve(n, m, m2); /* line 47 slow_hit_count: 999, fast_hit_count: 1 */
    cout.precision(8); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    cout << fixed << res << endl; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program, we need to identify where the slow input incurs significantly more computation than the fast input. We will then derive performance-characterizing invariants based on these insights.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The `nCr` function (lines 20-23) is called significantly more times for the slow input, especially lines 21 and 22. 
   - The `solve` function (lines 24-41) is invoked numerous times in the outer loop (line 46), with a noticeable difference in the number of iterations and computations for slow vs. fast inputs.
   - High hit counts on lines 34 and 35 indicate extensive computation in the nested loop within the `solve` function.

2. **Analysis of Data Structures and Loops**:
   - The combination computations in `nCr` contribute heavily to the workload, especially due to repeated population of the `foo2` and `ta7t` vectors.
   - The nested loops in the `solve` function iterate over potentially large vector sizes, exacerbating the computational load when `n` and `m` are large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants in natural language:

1. **Invariant: Large Input Sizes**:
   - "When both `n` (number of cards per deck) and `m` (number of decks) are large, the computation of combinations becomes a bottleneck due to extensive vector operations and nested loops."

2. **Invariant: High Combination Calculations**:
   - "If the calculation of combinations (`nCr`) involves large parameters leading to frequent large vector operations and sorting, performance may degrade."

3. **Invariant: Repeated Nested Loop Operations**:
   - "If the outer loop iterates over a large range due to high values of `n` and `m`, and especially when `m` approaches `n`, the cumulative effect of nested loop operations in `solve` leads to significant slowdowns."

4. **Invariant: Vector Size and Sorting Overhead**:
   - "Whenever the vectors `foo2` and `ta7t` in the `solve` function grow large and are sorted, the overhead can cause the program to slow significantly, particularly if combined with recursive-like calls to `nCr`."

### Conclusion

The main bottleneck arises from high computation costs in calculating combinations repeatedly and managing large vectors, which are exacerbated by nested loop operations and sorting. These conditions align with situations where both `n` and `m` approach their upper constraint limit (e.g., close to 1000). Recognizing and mitigating these scenarios can help in improving the program's performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alex enjoys performing magic tricks. He has a trick that requires a deck of n cards. He has m identical decks of n different cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs n cards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.

The trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.

You don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.

Input

First line of the input consists of two integers n and m (1 ≤ n, m ≤ 1000), separated by space — number of cards in each deck, and number of decks.

Output

On the only line of the output print one floating point number – probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10 - 6.

Examples

Input

2 2


Output

0.6666666666666666


Input

4 4


Output

0.4000000000000000


Input

1 2


Output

1.0000000000000000

Note

In the first sample, with probability <image> Alex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.

With the remaining <image> probability he took two different cards, and the probability of pulling off the trick is <image>.

The resulting probability is <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below, I will translate the natural language invariants into C++ checker functions. These functions will assess performance characteristics and alert when certain conditions are met that might lead to slowdowns:

```cpp
#include <iostream>
using namespace std;

// Checker for large input sizes causing performance degradation
void check_large_input_invariant(int n, int m) {
    if (n > 800 && m > 800) {  // Considering n, m close to their maximum constraint
        cerr << "Warning: Performance bottleneck condition triggered due to large n and m!" << endl;
        abort();
    }
}

// Checker for extensive combination calculations
void check_combination_invariant(int k) {
    if (k > 800) {  // Assuming large k (selected cards) leads to extensive operations
        cerr << "Warning: Performance bottleneck condition triggered due to extensive combination calculations!" << endl;
        abort();
    }
}

// Checker for repeated nested loop operations with large vectors
void check_nested_loop_operations(int vectorSize) {
    if (vectorSize > 1000) {  // Assuming a large vector size might indicate heavy operations
        cerr << "Warning: Performance bottleneck condition triggered due to large vector operations!" << endl;
        abort();
    }
}

// Checker for large sorting overhead
void check_sorting_invariant(int vectorSize) {
    if (vectorSize > 1000) {  // This also checks for large vectors being sorted
        cerr << "Warning: Performance bottleneck condition triggered due to large sorting operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Functions into the Original Program

Now, we will integrate the checker functions into the existing C++ program at appropriate points. This integration ensures that performance bottlenecks can be detected during execution without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions as defined above
void check_large_input_invariant(int n, int m) {
    if (n > 800 && m > 800) {
        cerr << "Warning: Performance bottleneck condition triggered due to large n and m!" << endl;
        abort();
    }
}

void check_combination_invariant(int k) {
    if (k > 800) {
        cerr << "Warning: Performance bottleneck condition triggered due to extensive combination calculations!" << endl;
        abort();
    }
}

void check_nested_loop_operations(int vectorSize) {
    if (vectorSize > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large vector operations!" << endl;
        abort();
    }
}

void check_sorting_invariant(int vectorSize) {
    if (vectorSize > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large sorting operations!" << endl;
        abort();
    }
}

void nCr(int n, int k, vector<long double> &foo2, vector<long double> &ta7t) {
    // Check for extensive combination calculations
    check_combination_invariant(k);

    for (int i = (int)(1), _m = (int)(k + 1); i < _m; ++i) 
        ta7t.push_back(i);
    for (int i = (int)(n), _m = (int)(n - k + 1); i >= _m; --i) 
        foo2.push_back(i);

    // Check for large vector operations after filling
    check_nested_loop_operations(foo2.size());
}

long double solve(int n, int m, int m2) {
    vector<long double> foo2, ta7t;

    nCr(n * m - m, n - m2, foo2, ta7t);
    nCr(n * m, n, ta7t, foo2);
    nCr(m, m2, foo2, ta7t);

    foo2.push_back(m2), foo2.push_back(m2);
    ta7t.push_back(n);

    // Check for large sorting overhead
    check_sorting_invariant(foo2.size());
    check_sorting_invariant(ta7t.size());

    sort(foo2.rbegin(), foo2.rend()), sort(ta7t.rbegin(), ta7t.rend());
    int common = min((int)foo2.size(), (int)ta7t.size());
    long double res = 1;
    for (int i = (int)(0), _m = (int)(common); i < _m; ++i)
        res *= foo2[i] / ta7t[i];
    for (int i = (int)(common), _m = (int)(foo2.size()); i < _m; ++i)
        res *= foo2[i];
    for (int i = (int)(common), _m = (int)(ta7t.size()); i < _m; ++i)
        res /= ta7t[i];
    return res;
}

int main() {
    int n, m;
    while (cin >> n >> m) {
        // Check for large input sizes
        check_large_input_invariant(n, m);

        long double res = 0;
        for (int m2 = (int)(1), _m = (int)(min(n, m) + 1); m2 < _m; ++m2)
            res += solve(n, m, m2);
        cout.precision(8);
        cout << fixed << res << endl;
    }
    return 0;
}
```

### Explanation

- **Checker Functions**: These are placed before significant performance-impacting operations like vector manipulations and sorting. They help detect conditions that cause bottlenecks by checking input sizes, vector sizes, and other characteristics related to computational load.
- **Integration**: The checkers are integrated at strategic points before operations that could lead to significant performance degradation, ensuring that they don't add overhead to critical loops or sections.

