=== Invariants Response ===
### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information, we can make the following observations:

1. **Recursive Function Calls:**
   - The `DP` function is called very frequently (997,003 times) for the slow input but not at all for the fast input. This indicates that the recursive calls are a significant contributor to the slow execution.

2. **Memoization Check and Update:**
   - Lines within the `DP` function, specifically the memoization-related lines (lines 10-13), are accessed extremely frequently for the slow input. This suggests that even with memoization, the recursive exploration of states is substantial.

3. **Recursive Branching:**
   - Both recursive calls on lines 14 and 16 are triggered extensively, which means that the branching within the recursion is being heavily exercised, leading to many different states being explored, despite memoization.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language invariants that describe the performance characteristics and triggers for the slow execution path:

1. **High Recursion Depth with Large State Space:**
   - "If both the number of cards (n) and the number of decks (m) are large, leading to a high total number of cards (`n * m`), the recursive function explores a large state space, causing extensive recursive branching and resulting in significant slowdown."

2. **Inadequate Memoization Efficiency:**
   - "When the memoization table is accessed frequently across a vast range of states due to large input values, the overhead of checking and updating memoization can contribute to performance degradation."

3. **Recursive Branching with Large Inputs:**
   - "If the recursive function has multiple branching points and these branches are executed frequently due to large input values, the cumulative effect can slow down execution significantly."

These invariants capture scenarios where the recursive approach in the program is likely to experience slowdowns due to the high cost of exploring a large state space, despite the use of memoization. The conditions focus on large input sizes relative to the constraints (1 ≤ n, m ≤ 1000), which exacerbate the recursive branching and state exploration.

=== Checker Response ===
### Phase 3: Implement the Performance-Characterizing Invariants in C++

Here’s how we can translate the natural language invariants into C++ checker code:

1. **High Recursion Depth with Large State Space:**
   ```cpp
   void check_high_recursion_invariant(int n, int m) {
       if (n * m > 900000) { // Example threshold suited for the problem constraints
           cerr << "Warning: High recursion depth with large state space triggered!" << endl;
           abort();
       }
   }
   ```

2. **Inadequate Memoization Efficiency:**
   ```cpp
   void check_memoization_invariant(int n, int m) {
       // Since n and m are large, memoization might not cover all states efficiently
       if (n > 950 || m > 950) { // Threshold based on possible state coverage
           cerr << "Warning: Memoization efficiency bottleneck triggered - high n or m!" << endl;
           abort();
       }
   }
   ```

3. **Recursive Branching with Large Inputs:**
   ```cpp
   void check_recursive_branching_invariant(int n, int m) {
       if ((n > 950) && (m > 950)) { // High combined input threshold
           cerr << "Warning: Recursive branching with large inputs triggered!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ program with the added performance invariant checks:

```cpp
#include <bits/stdc++.h>
#pragma warning(disable : 4786)
#pragma warning(disable : 4996)
using namespace std;
double dp[1003][1003];
int vis[1003][1003];
int m;

// Check for high recursion depth with large state space
void check_high_recursion_invariant(int n, int m) {
    if (n * m > 900000) { // Example threshold suited for the problem constraints
        cerr << "Warning: High recursion depth with large state space triggered!" << endl;
        abort();
    }
}

// Check for inadequate memoization efficiency
void check_memoization_invariant(int n, int m) {
    if (n > 950 || m > 950) { // Threshold based on possible state coverage
        cerr << "Warning: Memoization efficiency bottleneck triggered - high n or m!" << endl;
        abort();
    }
}

// Check for recursive branching with large inputs
void check_recursive_branching_invariant(int n, int m) {
    if ((n > 950) && (m > 950)) { // High combined input threshold
        cerr << "Warning: Recursive branching with large inputs triggered!" << endl;
        abort();
    }
}

double DP(int total, int n, int k) {
    if (n == 0) return k;
    double &ret = dp[n][k];
    if (vis[n][k]) return ret;
    vis[n][k] = 1;
    ret = 0;
    if (k < m) ret += (1. * m - k) / total * DP(total - 1, n - 1, k + 1);
    if (total > m - k)
        ret += (1. * total - (m - k)) / total * DP(total - 1, n - 1, k);
    return ret;
}

int main() {
    int n;
    scanf("%d %d", &n, &m);

    // Insert checks after reading input
    check_high_recursion_invariant(n, m);
    check_memoization_invariant(n, m);
    check_recursive_branching_invariant(n, m);

    if (n == 1) {
        printf("%.10lf\n", 1.0);
        return 0;
    }
    double ans = (DP(n * m - 1, n - 1, 1)) / n;
    printf("%.10lf\n", ans);
    return 0;
}
```

### Explanation

- **Checker Functions:** Implemented as separate functions for clarity and reuse.
- **Placement:** Check functions are called right after reading the input, avoiding adding overhead inside recursive calls or tight loops.
- **Thresholds:** Chosen to be conservatively high, respecting problem constraints, ensuring they trigger only under conditions likely to cause performance issues.
