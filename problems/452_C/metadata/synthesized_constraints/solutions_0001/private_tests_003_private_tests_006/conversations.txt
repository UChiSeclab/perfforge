system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alex enjoys performing magic tricks. He has a trick that requires a deck of n cards. He has m identical decks of n different cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs n cards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.

The trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.

You don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.

Input

First line of the input consists of two integers n and m (1 ≤ n, m ≤ 1000), separated by space — number of cards in each deck, and number of decks.

Output

On the only line of the output print one floating point number – probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10 - 6.

Examples

Input

2 2


Output

0.6666666666666666


Input

4 4


Output

0.4000000000000000


Input

1 2


Output

1.0000000000000000

Note

In the first sample, with probability <image> Alex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.

With the remaining <image> probability he took two different cards, and the probability of pulling off the trick is <image>.

The resulting probability is <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma warning(disable : 4786)
#pragma warning(disable : 4996)
using namespace std;
double dp[1003][1003];
int vis[1003][1003];
int m;
double DP(int total, int n, int k) {
  if (n == 0) return k;
  double &ret = dp[n][k];
  if (vis[n][k]) return ret;
  vis[n][k] = 1;
  ret = 0;
  if (k < m) ret += (1. * m - k) / total * DP(total - 1, n - 1, k + 1);
  if (total > m - k)
    ret += (1. * total - (m - k)) / total * DP(total - 1, n - 1, k);
  return ret;
}
int main() {
  int n;
  scanf("%d %d", &n, &m);
  if (n == 1) {
    printf("%.10lf\n", 1.0);
    return 0;
  }
  double ans = (DP(n * m - 1, n - 1, 1)) / n;
  printf("%.10lf\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

999 999


(G.2) Fast Input

1 999


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma warning(disable : 4786) /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma warning(disable : 4996) /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
double dp[1003][1003]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int vis[1003][1003]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
double DP(int total, int n, int k) { /* line 8 slow_hit_count: 997003, fast_hit_count: 0 */
  if (n == 0) return k; /* line 9 slow_hit_count: 997003, fast_hit_count: 0 */
  double &ret = dp[n][k]; /* line 10 slow_hit_count: 995007, fast_hit_count: 0 */
  if (vis[n][k]) return ret; /* line 11 slow_hit_count: 995007, fast_hit_count: 0 */
  vis[n][k] = 1; /* line 12 slow_hit_count: 498501, fast_hit_count: 0 */
  ret = 0; /* line 13 slow_hit_count: 498501, fast_hit_count: 0 */
  if (k < m) ret += (1. * m - k) / total * DP(total - 1, n - 1, k + 1); /* line 14 slow_hit_count: 498501, fast_hit_count: 0 */
  if (total > m - k) /* line 15 slow_hit_count: 498501, fast_hit_count: 0 */
    ret += (1. * total - (m - k)) / total * DP(total - 1, n - 1, k); /* line 16 slow_hit_count: 498501, fast_hit_count: 0 */
  return ret; /* line 17 slow_hit_count: 498501, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d", &n, &m); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 1) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    printf("%.10lf\n", 1.0); /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 24 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  double ans = (DP(n * m - 1, n - 1, 1)) / n; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
  printf("%.10lf\n", ans); /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information, we can make the following observations:

1. **Recursive Function Calls:**
   - The `DP` function is called very frequently (997,003 times) for the slow input but not at all for the fast input. This indicates that the recursive calls are a significant contributor to the slow execution.

2. **Memoization Check and Update:**
   - Lines within the `DP` function, specifically the memoization-related lines (lines 10-13), are accessed extremely frequently for the slow input. This suggests that even with memoization, the recursive exploration of states is substantial.

3. **Recursive Branching:**
   - Both recursive calls on lines 14 and 16 are triggered extensively, which means that the branching within the recursion is being heavily exercised, leading to many different states being explored, despite memoization.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language invariants that describe the performance characteristics and triggers for the slow execution path:

1. **High Recursion Depth with Large State Space:**
   - "If both the number of cards (n) and the number of decks (m) are large, leading to a high total number of cards (`n * m`), the recursive function explores a large state space, causing extensive recursive branching and resulting in significant slowdown."

2. **Inadequate Memoization Efficiency:**
   - "When the memoization table is accessed frequently across a vast range of states due to large input values, the overhead of checking and updating memoization can contribute to performance degradation."

3. **Recursive Branching with Large Inputs:**
   - "If the recursive function has multiple branching points and these branches are executed frequently due to large input values, the cumulative effect can slow down execution significantly."

These invariants capture scenarios where the recursive approach in the program is likely to experience slowdowns due to the high cost of exploring a large state space, despite the use of memoization. The conditions focus on large input sizes relative to the constraints (1 ≤ n, m ≤ 1000), which exacerbate the recursive branching and state exploration.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alex enjoys performing magic tricks. He has a trick that requires a deck of n cards. He has m identical decks of n different cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs n cards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.

The trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.

You don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.

Input

First line of the input consists of two integers n and m (1 ≤ n, m ≤ 1000), separated by space — number of cards in each deck, and number of decks.

Output

On the only line of the output print one floating point number – probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10 - 6.

Examples

Input

2 2


Output

0.6666666666666666


Input

4 4


Output

0.4000000000000000


Input

1 2


Output

1.0000000000000000

Note

In the first sample, with probability <image> Alex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.

With the remaining <image> probability he took two different cards, and the probability of pulling off the trick is <image>.

The resulting probability is <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Performance-Characterizing Invariants in C++

Here’s how we can translate the natural language invariants into C++ checker code:

1. **High Recursion Depth with Large State Space:**
   ```cpp
   void check_high_recursion_invariant(int n, int m) {
       if (n * m > 900000) { // Example threshold suited for the problem constraints
           cerr << "Warning: High recursion depth with large state space triggered!" << endl;
           abort();
       }
   }
   ```

2. **Inadequate Memoization Efficiency:**
   ```cpp
   void check_memoization_invariant(int n, int m) {
       // Since n and m are large, memoization might not cover all states efficiently
       if (n > 950 || m > 950) { // Threshold based on possible state coverage
           cerr << "Warning: Memoization efficiency bottleneck triggered - high n or m!" << endl;
           abort();
       }
   }
   ```

3. **Recursive Branching with Large Inputs:**
   ```cpp
   void check_recursive_branching_invariant(int n, int m) {
       if ((n > 950) && (m > 950)) { // High combined input threshold
           cerr << "Warning: Recursive branching with large inputs triggered!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ program with the added performance invariant checks:

```cpp
#include <bits/stdc++.h>
#pragma warning(disable : 4786)
#pragma warning(disable : 4996)
using namespace std;
double dp[1003][1003];
int vis[1003][1003];
int m;

// Check for high recursion depth with large state space
void check_high_recursion_invariant(int n, int m) {
    if (n * m > 900000) { // Example threshold suited for the problem constraints
        cerr << "Warning: High recursion depth with large state space triggered!" << endl;
        abort();
    }
}

// Check for inadequate memoization efficiency
void check_memoization_invariant(int n, int m) {
    if (n > 950 || m > 950) { // Threshold based on possible state coverage
        cerr << "Warning: Memoization efficiency bottleneck triggered - high n or m!" << endl;
        abort();
    }
}

// Check for recursive branching with large inputs
void check_recursive_branching_invariant(int n, int m) {
    if ((n > 950) && (m > 950)) { // High combined input threshold
        cerr << "Warning: Recursive branching with large inputs triggered!" << endl;
        abort();
    }
}

double DP(int total, int n, int k) {
    if (n == 0) return k;
    double &ret = dp[n][k];
    if (vis[n][k]) return ret;
    vis[n][k] = 1;
    ret = 0;
    if (k < m) ret += (1. * m - k) / total * DP(total - 1, n - 1, k + 1);
    if (total > m - k)
        ret += (1. * total - (m - k)) / total * DP(total - 1, n - 1, k);
    return ret;
}

int main() {
    int n;
    scanf("%d %d", &n, &m);

    // Insert checks after reading input
    check_high_recursion_invariant(n, m);
    check_memoization_invariant(n, m);
    check_recursive_branching_invariant(n, m);

    if (n == 1) {
        printf("%.10lf\n", 1.0);
        return 0;
    }
    double ans = (DP(n * m - 1, n - 1, 1)) / n;
    printf("%.10lf\n", ans);
    return 0;
}
```

### Explanation

- **Checker Functions:** Implemented as separate functions for clarity and reuse.
- **Placement:** Check functions are called right after reading the input, avoiding adding overhead inside recursive calls or tight loops.
- **Thresholds:** Chosen to be conservatively high, respecting problem constraints, ensuring they trigger only under conditions likely to cause performance issues.

