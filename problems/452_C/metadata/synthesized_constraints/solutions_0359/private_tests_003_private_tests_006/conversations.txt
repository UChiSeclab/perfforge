system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alex enjoys performing magic tricks. He has a trick that requires a deck of n cards. He has m identical decks of n different cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs n cards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.

The trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.

You don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.

Input

First line of the input consists of two integers n and m (1 ≤ n, m ≤ 1000), separated by space — number of cards in each deck, and number of decks.

Output

On the only line of the output print one floating point number – probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10 - 6.

Examples

Input

2 2


Output

0.6666666666666666


Input

4 4


Output

0.4000000000000000


Input

1 2


Output

1.0000000000000000

Note

In the first sample, with probability <image> Alex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.

With the remaining <image> probability he took two different cards, and the probability of pulling off the trick is <image>.

The resulting probability is <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
double cr(int n, int m) {
  double res = 0;
  for (int i = 1; i < m + 1; i++) {
    res += -log(i) + log(n - i + 1);
  }
  return res;
}
int main() {
  int n, m;
  while (cin >> n >> m) {
    int mi = min(n, m);
    double ans = 0;
    for (int i = 1; i < mi + 1; i++) {
      double tem = 2 * (log(i) - log(n)) + log(n) + cr(m, i) +
                   cr((n - 1) * m, n - i) - cr(n * m, n);
      ans += exp(tem);
    }
    printf("%.9f\n", ans);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

999 999


(G.2) Fast Input

1 999


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
double cr(int n, int m) { /* line 3 slow_hit_count: 2997, fast_hit_count: 3 */
  double res = 0; /* line 4 slow_hit_count: 2997, fast_hit_count: 3 */
  for (int i = 1; i < m + 1; i++) { /* line 5 slow_hit_count: 1998999, fast_hit_count: 5 */
    res += -log(i) + log(n - i + 1); /* line 6 slow_hit_count: 1996002, fast_hit_count: 2 */
  } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 8 slow_hit_count: 2997, fast_hit_count: 3 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  int n, m; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  while (cin >> n >> m) { /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
    int mi = min(n, m); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    double ans = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i < mi + 1; i++) { /* line 15 slow_hit_count: 1000, fast_hit_count: 2 */
      double tem = 2 * (log(i) - log(n)) + log(n) + cr(m, i) + /* line 16 slow_hit_count: 999, fast_hit_count: 1 */
                   cr((n - 1) * m, n - i) - cr(n * m, n); /* line 17 slow_hit_count: 999, fast_hit_count: 1 */
      ans += exp(tem); /* line 18 slow_hit_count: 999, fast_hit_count: 1 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%.9f\n", ans); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Line-Level Hit Counts:**

1. **Function `cr` (Lines 3-9):**
   - The function `cr` is called significantly more often with the slow input (`2997` hits) compared to the fast input (`3` hits). 
   - The inner loop on line 5 is executed `1998999` times for the slow input, indicating it’s a major contributor to the slowdown.

2. **Main Function (Lines 10-23):**
   - The loop on line 15 iterates `1000` times for the slow input. Within this loop, the `cr` function is called multiple times (lines 16-17), suggesting nested calls that increase exponentially with larger inputs.
   - The hit count for the expression in lines 16-18 indicates repeated computation, which may become computationally expensive with larger values of `n` and `m`.

**Interactions with Data Structures:**

- The slow input has `n=999` and `m=999`, resulting in high-loop iterations and multiple recursive/exponential computations in the `cr` function.
- The problem's constraints (with the maximum `n` and `m` up to `1000`) mean that this slow input approaches the upper bounds, triggering deeply nested loops and recursive function calls.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language performance invariants that describe the conditions under which the program slows down:

1. **High Iteration Count in Nested Loops:**
   - "When the values of `n` and `m` are both very large, close to the constraint limit (e.g., `n` and `m` near 1000), the program significantly slows down due to high iteration counts within nested loops, leading to excessive repeated computations."

2. **Exponential Growth due to Nested Function Calls:**
   - "If both `n` and `m` are large, the recursive nature of the `cr` function, invoked within nested loops, causes the computations to grow exponentially, resulting in substantial performance degradation."

3. **Inefficient Logarithmic Calculations:**
   - "The repeated calculation of logarithmic expressions in nested loops, especially when the loop variable is large, can lead to performance issues due to the computational cost of logarithmic operations at scale."

4. **Complexity of Combining Inputs in Computation:**
   - "The complexity of computing probabilities based on large values of `n` and `m` (close to their maximum constraints) results in an increased number of operations, making the overall execution time notably longer."

These invariants are designed to capture broad conditions that induce slow performance, aligning with input constraint limits (up to `n, m ≤ 1000`), without relying on specific numeric values. They consider the potential for nested loops and recursive functions to exacerbate computation time when input values are high.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alex enjoys performing magic tricks. He has a trick that requires a deck of n cards. He has m identical decks of n different cards each, which have been mixed together. When Alex wishes to perform the trick, he grabs n cards at random and performs the trick with those. The resulting deck looks like a normal deck, but may have duplicates of some cards.

The trick itself is performed as follows: first Alex allows you to choose a random card from the deck. You memorize the card and put it back in the deck. Then Alex shuffles the deck, and pulls out a card. If the card matches the one you memorized, the trick is successful.

You don't think Alex is a very good magician, and that he just pulls a card randomly from the deck. Determine the probability of the trick being successful if this is the case.

Input

First line of the input consists of two integers n and m (1 ≤ n, m ≤ 1000), separated by space — number of cards in each deck, and number of decks.

Output

On the only line of the output print one floating point number – probability of Alex successfully performing the trick. Relative or absolute error of your answer should not be higher than 10 - 6.

Examples

Input

2 2


Output

0.6666666666666666


Input

4 4


Output

0.4000000000000000


Input

1 2


Output

1.0000000000000000

Note

In the first sample, with probability <image> Alex will perform the trick with two cards with the same value from two different decks. In this case the trick is guaranteed to succeed.

With the remaining <image> probability he took two different cards, and the probability of pulling off the trick is <image>.

The resulting probability is <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each invariant derived earlier, we will implement a corresponding runtime check in C++.

#### Invariant 1: High Iteration Count in Nested Loops

```cpp
void check_high_iteration_invariant(int n, int m) {
    if (n > 900 && m > 900) { // Assuming thresholds near the constraint limits.
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count in nested loops!" << endl;
        abort();
    }
}
```

#### Invariant 2: Exponential Growth due to Nested Function Calls

```cpp
void check_exponential_growth_invariant(int n, int m) {
    if (n > 900 && m > 900) { // Similar threshold as exponential growth is linked with high input values.
        cerr << "Warning: Performance bottleneck condition triggered - exponential growth due to nested function calls!" << endl;
        abort();
    }
}
```

#### Invariant 3: Inefficient Logarithmic Calculations

```cpp
void check_logarithmic_calculation_invariant(int n, int m) {
    if (n > 900 && m > 900) { // Thresholds chosen to reflect computational intensity at high values.
        cerr << "Warning: Performance bottleneck condition triggered - inefficient logarithmic calculations!" << endl;
        abort();
    }
}
```

#### Invariant 4: Complexity of Combining Inputs in Computation

```cpp
void check_combination_complexity_invariant(int n, int m) {
    if (n > 900 && m > 900) { // Larger values result in more complex computations.
        cerr << "Warning: Performance bottleneck condition triggered - complexity in combining inputs for computation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code with the Original Program

Now we will integrate these checks into the original C++ program. We will place these checks after reading the input values to avoid adding overhead within tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance bottlenecks
void check_high_iteration_invariant(int n, int m) {
    if (n > 900 && m > 900) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count in nested loops!" << endl;
        abort();
    }
}

void check_exponential_growth_invariant(int n, int m) {
    if (n > 900 && m > 900) {
        cerr << "Warning: Performance bottleneck condition triggered - exponential growth due to nested function calls!" << endl;
        abort();
    }
}

void check_logarithmic_calculation_invariant(int n, int m) {
    if (n > 900 && m > 900) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient logarithmic calculations!" << endl;
        abort();
    }
}

void check_combination_complexity_invariant(int n, int m) {
    if (n > 900 && m > 900) {
        cerr << "Warning: Performance bottleneck condition triggered - complexity in combining inputs for computation!" << endl;
        abort();
    }
}

// Original solution code
double cr(int n, int m) {
    double res = 0;
    for (int i = 1; i < m + 1; i++) {
        res += -log(i) + log(n - i + 1);
    }
    return res;
}

int main() {
    int n, m;
    while (cin >> n >> m) {

        // Insert checker functions after reading inputs
        check_high_iteration_invariant(n, m);
        check_exponential_growth_invariant(n, m);
        check_logarithmic_calculation_invariant(n, m);
        check_combination_complexity_invariant(n, m);

        int mi = min(n, m);
        double ans = 0;
        for (int i = 1; i < mi + 1; i++) {
            double tem = 2 * (log(i) - log(n)) + log(n) + cr(m, i) +
                         cr((n - 1) * m, n - i) - cr(n * m, n);
            ans += exp(tem);
        }
        printf("%.9f\n", ans);
    }
    return 0;
}
```

### Explanation

- **Checker Functions:** Each invariant is translated into a function that checks the conditions derived in the previous phase. The thresholds reflect points at which performance is observed to degrade significantly.
- **Integration:** The checkers are placed right after reading input values, ensuring they are evaluated once per input set, avoiding additional overhead in the main computational loops.

