system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const double eps = 1E-9;
const double pi = acos(-1);
const long long mod = 1000000007;
using namespace std;
long long a, b;
long long x;
long long f(long long i) {
  return ((((b * i) % mod) * x) % mod + (a * i) % mod) % mod;
}
int main() {
  scanf("%I64d%I64d", &a, &b);
  x = (a * (a + 1) / 2ll) % mod;
  long long i, kq = 0, j;
  for (i = 1; i < b; ++i) {
    kq = (kq + f(i)) % mod;
  }
  printf("%I64d\n", kq);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 16246560


(G.2) Fast Input

2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1E-9; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = acos(-1); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1000000007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long a, b; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long x; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long f(long long i) { /* line 8 slow_hit_count: 16246559, fast_hit_count: 1 */
  return ((((b * i) % mod) * x) % mod + (a * i) % mod) % mod; /* line 9 slow_hit_count: 16246559, fast_hit_count: 1 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%I64d%I64d", &a, &b); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  x = (a * (a + 1) / 2ll) % mod; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  long long i, kq = 0, j; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i < b; ++i) { /* line 15 slow_hit_count: 16246560, fast_hit_count: 2 */
    kq = (kq + f(i)) % mod; /* line 16 slow_hit_count: 16246559, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%I64d\n", kq); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts:

1. **Function `f(long long i)`**:
   - **Line 9**: The function `f(i)` is called 16,246,559 times for the slow input and only once for the fast input.
   - This indicates the function is heavily hit and likely contributes to the slowdown.

2. **Loop in `main()`**:
   - **Line 15**: The loop `for (i = 1; i < b; ++i)` iterates 16,246,560 times for the slow input and only twice for the fast input.
   - The high iteration count directly correlates to the slow execution time.

### Interaction with Data Structures and Constraints:
- The loop iterates `b-1` times, and for the slow input, `b` is a large number (16,246,560), compared to `b = 2` for the fast input.
- The function `f(i)` performs arithmetic operations, each involving a multiplication and modulo operation, which are computationally expensive when executed millions of times.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants:

1. **Invariant: High Iteration Counts in Loops**:
   - **Description**: "The program may slow down significantly if the loop executing function `f(i)` iterates a large number of times. This is particularly true when `b` is large, leading to a high number of loop iterations."
   - **Implication**: This invariant suggests that inputs with a large value of `b` will likely result in slow execution due to the sheer number of times the loop is executed.

2. **Invariant: Computational Overhead in Function Calls**:
   - **Description**: "If a function performing arithmetic operations is called repeatedly within a loop for many iterations, the overhead can accumulate, slowing the program. This situation occurs when `b` is significantly larger than 1."
   - **Implication**: This invariant highlights that the arithmetic operations in `f(i)`, when repeatedly executed, lead to performance degradation.

### Thresholds and Input Patterns:
- The main threshold here is the value of `b`. When `b` is close to its upper constraint (e.g., in the tens of millions), the execution time increases considerably.
- The loop's high iteration count is the central cause of the slowdown, indicating the need to optimize or reformulate the algorithm to handle large `b` values more efficiently.

These invariants provide insight into potential future slow scenarios, guiding optimization efforts by embracing input characteristics that lead to inefficiencies in the current implementation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we will implement the following checkers:

1. **Invariant for High Iteration Counts in Loops**:
   * Description: This checks whether the loop executes a large number of times, particularly when `b` is large.

2. **Invariant for Computational Overhead in Function Calls**:
   * Description: This checks if the function `f(i)` is called excessively, leading to performance degradation.

### Checker Code

```cpp
void check_loop_invariant(long long b) {
    if (b > 100000) { // Example threshold for significant slowdown
        cerr << "Warning: Performance bottleneck triggered - excessive loop iterations due to large b." << endl;
        abort();
    }
}

void check_function_call_invariant(long long iterations) {
    if (iterations > 100000) { // Example threshold for excessive function calls
        cerr << "Warning: Performance bottleneck triggered - excessive function calls." << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into the Original C++ Code

Next, we integrate the checkers into the provided C++ code, ensuring they are placed effectively to monitor potential performance issues without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
const double eps = 1E-9;
const double pi = acos(-1);
const long long mod = 1000000007;
using namespace std;
long long a, b;
long long x;

long long f(long long i) {
    return ((((b * i) % mod) * x) % mod + (a * i) % mod) % mod;
}

void check_loop_invariant(long long b) {
    if (b > 100000) { // Example threshold for significant slowdown
        cerr << "Warning: Performance bottleneck triggered - excessive loop iterations due to large b." << endl;
        abort();
    }
}

void check_function_call_invariant(long long iterations) {
    if (iterations > 100000) { // Example threshold for excessive function calls
        cerr << "Warning: Performance bottleneck triggered - excessive function calls." << endl;
        abort();
    }
}

int main() {
    scanf("%I64d%I64d", &a, &b);

    // Check if the loop will iterate excessively
    check_loop_invariant(b);

    x = (a * (a + 1) / 2ll) % mod;
    long long i, kq = 0, j;

    // Check if the function will be called excessively
    check_function_call_invariant(b - 1);

    for (i = 1; i < b; ++i) {
        kq = (kq + f(i)) % mod;
    }
    printf("%I64d\n", kq);
}
```

### Comments on Each Checker:

- **`check_loop_invariant()`**: This function is called after reading inputs and before the loop execution to ensure that if `b` exceeds a threshold indicating excessive iterations, a warning is issued.
  
- **`check_function_call_invariant()`**: This function checks if the number of expected function calls to `f(i)` is excessive, inserting a warning if so.

### Summary:

These checks are strategically placed to prevent adding overhead in the middle of the loop or function execution while effectively capturing the scenarios that could lead to performance bottlenecks. The thresholds are set conservatively to highlight potential slowdowns, serving as guides for further optimization or during testing with a fuzzer.

