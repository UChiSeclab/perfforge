system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int powmod(long long int a, int b, int n) {
  long long int rm = 1;
  while (b) {
    if (b % 2) {
      rm = (rm * a) % n;
    }
    a = (a * a) % n;
    b /= 2;
  }
  return rm;
}
int main() {
  long long int a, b, k, tsum = 0, sum2 = 0;
  cin >> a >> b;
  for (long long int i = 1; i < b; ++i) {
    sum2 = (a * (a + 1)) / 2;
    sum2 %= int(1e9 + 7);
    sum2 = (sum2 * i) % int(1e9 + 7);
    sum2 = (sum2 * b) % int(1e9 + 7);
    sum2 = (sum2 + (i * a) % int(1e9 + 7)) % int(1e9 + 7);
    tsum = (tsum + sum2) % int(1e9 + 7);
  }
  cout << tsum << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 16246560


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int powmod(long long int a, int b, int n) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long int rm = 1; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    if (b % 2) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
      rm = (rm * a) % n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    a = (a * a) % n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    b /= 2; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return rm; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  long long int a, b, k, tsum = 0, sum2 = 0; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int i = 1; i < b; ++i) { /* line 17 slow_hit_count: 16246560, fast_hit_count: 1 */
    sum2 = (a * (a + 1)) / 2; /* line 18 slow_hit_count: 16246559, fast_hit_count: 0 */
    sum2 %= int(1e9 + 7); /* line 19 slow_hit_count: 16246559, fast_hit_count: 0 */
    sum2 = (sum2 * i) % int(1e9 + 7); /* line 20 slow_hit_count: 16246559, fast_hit_count: 0 */
    sum2 = (sum2 * b) % int(1e9 + 7); /* line 21 slow_hit_count: 16246559, fast_hit_count: 0 */
    sum2 = (sum2 + (i * a) % int(1e9 + 7)) % int(1e9 + 7); /* line 22 slow_hit_count: 16246559, fast_hit_count: 0 */
    tsum = (tsum + sum2) % int(1e9 + 7); /* line 23 slow_hit_count: 16246559, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cout << tsum << endl; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the provided C program, we'll focus on identifying expensive or inefficient code segments and deriving performance-influencing invariants. Here’s a systematic breakdown:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**: 

    - The loop starting at line 17 is the primary bottleneck. For the slow input, the loop iterates 16,246,560 times, while for the fast input, it iterates only once.
  
2. **Pinpoint Lines or Functions with More Hits on Slow Input**: 

    - Lines 18 to 23 perform computations within the loop and are hit 16,246,559 times for the slow input compared to zero times for the fast input.

3. **Infer Interaction with Data Structures and Constraints**: 

    - The loop iterates over the range from 1 to \( b - 1 \) (inclusive), which means the complexity directly scales with \( b \). Given \( a = 1 \), the computations inside the loop remain constant in complexity, while the loop itself becomes the primary contributor to the slowdown due to its linear relation to \( b \).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements**:

   Based on the analysis, we can derive the following performance-characterizing invariants:

   - **Invariant #1**: "When the value of 'b' is large, the loop from 1 to b-1 executes many times, causing the program to slow down significantly."
   - **Invariant #2**: "The program's performance is heavily dependent on 'b'; as 'b' approaches its upper limit (10 million), the computation time increases linearly, leading to significant slowdowns."
   
2. **Correlate Conditions to Input Patterns**:

   - These conditions apply when \( b \) is large, especially close to its maximum constraint of 10 million. The loop's execution count is directly tied to the size of \( b \), which can lead to performance degradation due to repeated operations within the loop.
   
3. **Ensure Statements are Broad and Realistic**:

   - These statements capture realistic scenarios that would trigger slow execution of the program, focusing on the overarching structure of the problem rather than specific input values.

### Summary of Performance Invariants

1. **Invariant #1**: "When the parameter 'b' is large, approaching its maximum constraint, the inner loop incurs a significant number of iterations, resulting in prolonged execution time."

2. **Invariant #2**: "The computation becomes inefficient when the loop iterating up to 'b' grows extensive, emphasizing the linear relationship between 'b' and the loop's burden on performance."

These invariants provide insights into the conditions that lead to slow execution and can be useful in optimizing the program or tuning it to handle large inputs more effectively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Based on the natural language performance-characterizing invariants derived earlier, here are the corresponding runtime checks implemented in C++:

```cpp
void check_large_b_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Runtime Checks into the Original C++ Program

The C++ program with integrated performance checks is shown below. The check is placed after reading the input, ensuring it does not add overhead to the tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check performance condition related to large 'b'
void check_large_b_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
        abort();
    }
}

long long int powmod(long long int a, int b, int n) {
    long long int rm = 1;
    while (b) {
        if (b % 2) {
            rm = (rm * a) % n;
        }
        a = (a * a) % n;
        b /= 2;
    }
    return rm;
}

int main() {
    long long int a, b, k, tsum = 0, sum2 = 0;
    cin >> a >> b;

    // Check if 'b' is large enough to cause performance issues
    check_large_b_invariant(b > 1000000); // Threshold chosen based on performance observations

    for (long long int i = 1; i < b; ++i) {
        sum2 = (a * (a + 1)) / 2;
        sum2 %= int(1e9 + 7);
        sum2 = (sum2 * i) % int(1e9 + 7);
        sum2 = (sum2 * b) % int(1e9 + 7);
        sum2 = (sum2 + (i * a) % int(1e9 + 7)) % int(1e9 + 7);
        tsum = (tsum + sum2) % int(1e9 + 7);
    }
    cout << tsum << endl;
    return 0;
}
```

### Explanation of the Integration

- **Placement of Check**: The check is placed right after input is read, which ensures that it evaluates the condition before any potentially costly computations occur. This placement avoids adding unnecessary overhead within the loop.

- **Threshold for Condition**: The condition `b > 1000000` is used based on the understanding that `b` being close to its maximum limit (10 million) is likely to trigger heavy computational loads. Adjustments can be made based on further profiling and experimental results. 

This instrumented version of the program will help identify cases where the performance might degrade due to large values of `b`, making it useful for fuzzing and performance testing.

