system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long a, b;
  long long ans = 0, mod = 1e9 + 7;
  cin >> a >> b;
  for (long long k = 1; k < b; ++k) {
    long long diff = b * k, first = 2 * (k * b + k), n = a - 1, m = a;
    if (m % 2ll) {
      first /= 2;
      first %= mod;
      n /= 2;
      n %= mod;
      diff %= mod;
      diff *= n;
      diff %= mod;
      diff += first;
      diff %= mod;
      m %= mod;
      ans += (m * diff) % mod;
    } else {
      m /= 2;
      m %= mod;
      first %= mod;
      n %= mod;
      diff %= mod;
      diff *= n;
      diff %= mod;
      diff += first;
      diff %= mod;
      ans += (m * diff) % mod;
    }
    ans %= mod;
  }
  cout << ans % mod;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 16246560


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long a, b; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0, mod = 1e9 + 7; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long k = 1; k < b; ++k) { /* line 7 slow_hit_count: 16246560, fast_hit_count: 1 */
    long long diff = b * k, first = 2 * (k * b + k), n = a - 1, m = a; /* line 8 slow_hit_count: 16246559, fast_hit_count: 0 */
    if (m % 2ll) { /* line 9 slow_hit_count: 16246559, fast_hit_count: 0 */
      first /= 2; /* line 10 slow_hit_count: 16246559, fast_hit_count: 0 */
      first %= mod; /* line 11 slow_hit_count: 16246559, fast_hit_count: 0 */
      n /= 2; /* line 12 slow_hit_count: 16246559, fast_hit_count: 0 */
      n %= mod; /* line 13 slow_hit_count: 16246559, fast_hit_count: 0 */
      diff %= mod; /* line 14 slow_hit_count: 16246559, fast_hit_count: 0 */
      diff *= n; /* line 15 slow_hit_count: 16246559, fast_hit_count: 0 */
      diff %= mod; /* line 16 slow_hit_count: 16246559, fast_hit_count: 0 */
      diff += first; /* line 17 slow_hit_count: 16246559, fast_hit_count: 0 */
      diff %= mod; /* line 18 slow_hit_count: 16246559, fast_hit_count: 0 */
      m %= mod; /* line 19 slow_hit_count: 16246559, fast_hit_count: 0 */
      ans += (m * diff) % mod; /* line 20 slow_hit_count: 16246559, fast_hit_count: 0 */
    } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      m /= 2; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      m %= mod; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      first %= mod; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      n %= mod; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      diff %= mod; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      diff *= n; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      diff %= mod; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      diff += first; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      diff %= mod; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      ans += (m * diff) % mod; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    ans %= mod; /* line 33 slow_hit_count: 16246559, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans % mod; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the performance bottleneck in the given C program, we need to identify the parts of the code that are contributing to the slow execution. The hit count information along with the problem statement gives us valuable insight into where the program spends most of its time.

### Phase 1: Identify Expensive or Inefficient Code Segments

**1. Line-Level Hit Count Analysis:**
- **Line 7** (`for (long long k = 1; k < b; ++k)`): This line is executed 16,246,560 times for the slow input, indicating a potential bottleneck due to the loop's high iteration count.
- **Lines 8-20**: These lines are executed 16,246,559 times for the slow input. This means that most of the computation happens inside the loop.
  
**2. Inefficient Code Segment:**
- The loop runs `b-1` times, and each iteration involves several arithmetic operations and modulo operations. This results in a significant number of operations for large `b`. Since `b` is 16,246,560 for the slow input, this causes the main performance issue.
  
### Phase 2: Derive Performance-Characterizing Invariants

**1. Natural Language Performance Invariants:**

- **Invariant 1:** "When the value of `b` is large, close to its upper constraint, the loop iterating from 1 to `b-1` results in a high number of operations, leading to a slowdown."
  
- **Invariant 2:** "The program exhibits a slowdown when complex arithmetic and modulo operations are performed repeatedly for a large number of iterations, especially when `b` is large."

**2. Suggested Thresholds and Conditions:**

- For large values of `b`, approaching the upper limit of 10 million, the loop scales linearly with `b`, leading to potential performance issues. This should be considered when predicting performance with different inputs.

### Conclusion

The program's performance bottleneck is primarily due to the linear loop based on `b`. The loop’s iteration count scales directly with `b`, leading to a huge number of operations for large values. The derived invariants highlight that performance degradation is mainly due to arithmetic operations in a high-count loop when `b` is near its maximum allowed value.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the previously derived natural language invariants, we will implement runtime checks to detect when the program may encounter performance bottlenecks.

**Invariant 1**: "When the value of `b` is large, close to its upper constraint, the loop iterating from 1 to `b-1` results in a high number of operations, leading to a slowdown."

**Invariant 2**: "The program exhibits a slowdown when complex arithmetic and modulo operations are performed repeatedly for a large number of iterations, especially when `b` is large."

Let's implement these checks in C++.

```cpp
void check_large_b_invariant(long long b) {
    if (b > 1e7 / 2) { // Arbitrary threshold at half the maximum constraint to catch large values
        cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
        abort();
    }
}

void check_heavy_operations_invariant(long long b) {
    if (b > 1e7 / 2) { // Similarly checking for heavy operations based on large b
        cerr << "Warning: Performance bottleneck condition triggered due to heavy operations with large b!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code into the Original Program

Next, we will integrate these checks into the original C++ code. We will place the checks after reading the input values to ensure they capture the performance conditions without introducing overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_b_invariant(long long b) {
    if (b > 1e7 / 2) { // Arbitrary threshold at half the maximum constraint to catch large values
        cerr << "Warning: Performance bottleneck condition triggered due to large b!" << endl;
        abort();
    }
}

void check_heavy_operations_invariant(long long b) {
    if (b > 1e7 / 2) { // Similarly checking for heavy operations based on large b
        cerr << "Warning: Performance bottleneck condition triggered due to heavy operations with large b!" << endl;
        abort();
    }
}

int main() {
    long long a, b;
    long long ans = 0, mod = 1e9 + 7;
    cin >> a >> b;
    
    // Check for performance bottlenecks based on `b`
    check_large_b_invariant(b);
    check_heavy_operations_invariant(b);

    for (long long k = 1; k < b; ++k) {
        long long diff = b * k, first = 2 * (k * b + k), n = a - 1, m = a;
        if (m % 2ll) {
            first /= 2;
            first %= mod;
            n /= 2;
            n %= mod;
            diff %= mod;
            diff *= n;
            diff %= mod;
            diff += first;
            diff %= mod;
            m %= mod;
            ans += (m * diff) % mod;
        } else {
            m /= 2;
            m %= mod;
            first %= mod;
            n %= mod;
            diff %= mod;
            diff *= n;
            diff %= mod;
            diff += first;
            diff %= mod;
            ans += (m * diff) % mod;
        }
        ans %= mod;
    }
    cout << ans % mod;
}
```

### Explanation

- **Location of Checks**: The checks are placed immediately after input reading. This ensures that before the main computation begins, we ascertain if any performance bottleneck conditions are met.
- **Threshold Selection**: The threshold for `b` is set at half of its maximum constraint (5 million). This is chosen to capture large values of `b` before they lead to excessive computation.
- **Function Separation**: Separate functions (`check_large_b_invariant` and `check_heavy_operations_invariant`) are used for clarity and modular design, allowing each invariant to handle specific bottleneck conditions.

This integration should now help identify and abort execution when inputs likely to cause performance degradation are detected.

