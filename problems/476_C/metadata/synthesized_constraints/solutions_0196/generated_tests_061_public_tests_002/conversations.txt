system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long a, b, ans;
const int mod = (int)1e9 + 7;
inline long long qpow(long long a, long long b) {
  long long ans = 1;
  for (a %= mod; b; b >>= 1, a = a * a % mod)
    if (b & 1) ans = ans * a % mod;
  return ans;
}
int main() {
  scanf("%I64d%I64d", &a, &b);
  long long inv = qpow(2, mod - 2);
  for (int i = 1; i < b; ++i) {
    long long sum = ((b + 1) * i % mod + (a * b + 1) % mod * i % mod) % mod *
                    a % mod * inv % mod;
    ans = (ans + sum) % mod;
  }
  printf("%I64d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 16246560


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long a, b, ans; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = (int)1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
inline long long qpow(long long a, long long b) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (a %= mod; b; b >>= 1, a = a * a % mod) /* line 7 slow_hit_count: 31, fast_hit_count: 31 */
    if (b & 1) ans = ans * a % mod; /* line 8 slow_hit_count: 30, fast_hit_count: 30 */
  return ans; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%I64d%I64d", &a, &b); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  long long inv = qpow(2, mod - 2); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < b; ++i) { /* line 14 slow_hit_count: 16246560, fast_hit_count: 1 */
    long long sum = ((b + 1) * i % mod + (a * b + 1) % mod * i % mod) % mod * /* line 15 slow_hit_count: 16246559, fast_hit_count: 0 */
                    a % mod * inv % mod; /* line 16 slow_hit_count: 16246559, fast_hit_count: 0 */
    ans = (ans + sum) % mod; /* line 17 slow_hit_count: 16246559, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%I64d\n", ans); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program, let's focus on understanding the differences in execution profiles for the "fast" and "slow" input. The key aspect to notice is the condition under which the code becomes slower and then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Analysis**:
   - The line `for (int i = 1; i < b; ++i)` (line 14) is executed `b-1` times.
   - For the slow input, this loop runs 16,246,560 times, whereas for the fast input, it runs only once.
   - Lines 15, 16, and 17, which compute `sum` and update `ans`, are also run 16,246,559 times for the slow input and not at all for the fast input, indicating the heavy computation is concentrated here.

2. **Inference**:
   - The loop is the primary contributor to the slowdown due to its high iteration count when `b` is large.
   - The loop involves multiple arithmetic operations and modulus operations, which are computationally expensive when performed extensively.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following set of performance-characterizing invariants:

1. **Invariant 1: High Iteration Count**:
   - **Natural Language Description**: "The program may experience significant slowdown when the second input, `b`, is large because it leads to a high number of iterations in the loop. This is especially true when `b` is much larger than typical small values, pushing close to the maximum constraint, leading to repeated arithmetic and modulus operations."

2. **Invariant 2: Repeated Expensive Computations**:
   - **Natural Language Description**: "If the loop contains expensive operations such as high-frequency multiplication or modulus calculations over large numbers, the cumulative cost can trigger slow performance. This is exacerbated when the loop iterates close to its upper bound defined by the input constraints."

3. **Invariant 3: Scalability with Input Size**:
   - **Natural Language Description**: "The algorithm's performance scales with the size of the input `b`. When `b` is close to 10^7, the computational load increases substantially, potentially leading to significant execution time."

### Suggested Thresholds

- Given the constraint `1 ≤ a, b ≤ 10^7`, consider setting a threshold like `b > 10^6` to highlight when performance concerns become prominent, as the loop's execution count dramatically impacts runtime.

### Utility for Fuzzers

These invariants can guide fuzzers towards generating inputs that would more likely trigger slow execution paths, helping developers identify potential inefficiencies even without explicit large values. By focusing on conditions like high iteration counts and expensive operations, it can better test the program's scalability and efficiency under various input conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

We need to transform the performance-characterizing invariants into C++ code that can be used to detect potential slowdowns at runtime. Here are the checker functions derived from the natural language descriptions:

1. **Invariant 1: High Iteration Count**
   - This checks if the iteration count of the loop is high, potentially indicating a performance bottleneck.

```cpp
void check_high_iteration_invariant(int b) {
    if (b > 1000000) {  // Example threshold based on problem constraints
        cerr << "Warning: High iteration count triggered - possible slowdown due to large b" << endl;
        abort();
    }
}
```

2. **Invariant 2: Repeated Expensive Computations**
   - This checks if the loop contains expensive computations that are being executed excessively.

```cpp
void check_expensive_operations_invariant(int b) {
    if (b > 1000000) {  // Example threshold indicating potential excessive computations
        cerr << "Warning: Expensive operations invariant triggered - excessive computations in loop" << endl;
        abort();
    }
}
```

3. **Invariant 3: Scalability with Input Size**
   - This checks if the input size approaches the upper constraints, which might trigger performance issues.

```cpp
void check_scalability_invariant(int b) {
    if (b > 1000000) {  // Threshold indicating scalability issues
        cerr << "Warning: Scalability invariant triggered - large input size causing slowdown" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long a, b, ans;
const int mod = (int)1e9 + 7;

inline long long qpow(long long a, long long b) {
    long long ans = 1;
    for (a %= mod; b; b >>= 1, a = a * a % mod)
        if (b & 1) ans = ans * a % mod;
    return ans;
}

// Checker functions
void check_high_iteration_invariant(int b) {
    if (b > 1000000) {
        cerr << "Warning: High iteration count triggered - possible slowdown due to large b" << endl;
        abort();
    }
}

void check_expensive_operations_invariant(int b) {
    if (b > 1000000) {
        cerr << "Warning: Expensive operations invariant triggered - excessive computations in loop" << endl;
        abort();
    }
}

void check_scalability_invariant(int b) {
    if (b > 1000000) {
        cerr << "Warning: Scalability invariant triggered - large input size causing slowdown" << endl;
        abort();
    }
}

int main() {
    scanf("%I64d%I64d", &a, &b);

    // Place checks after input reading but before heavy computation
    check_high_iteration_invariant(b);
    check_expensive_operations_invariant(b);
    check_scalability_invariant(b);

    long long inv = qpow(2, mod - 2);
    for (int i = 1; i < b; ++i) {
        long long sum = ((b + 1) * i % mod + (a * b + 1) % mod * i % mod) % mod *
                        a % mod * inv % mod;
        ans = (ans + sum) % mod;
    }
    printf("%I64d\n", ans);
    return 0;
}
```

### Explanation of Integration

- **Checker Placement**: The checkers are placed immediately after reading the input values for `a` and `b`. This way, we avoid any unnecessary computations if the input triggers a known bottleneck condition.
- **Threshold Selection**: The threshold value of `b > 1000000` is selected based on the maximum constraint, allowing the detection of potential performance issues without hardcoding values from the slow input.
- **Warnings and Aborts**: Each invariant outputs a warning message and aborts the execution if triggered, facilitating debugging and testing through fuzzing or other methods.

