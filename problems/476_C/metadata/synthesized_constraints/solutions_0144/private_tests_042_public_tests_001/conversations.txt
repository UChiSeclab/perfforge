system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long const mod = 1e9 + 7;
long long power(long long b, long long p) {
  long long r = 1;
  while (p) {
    if (p & 1) r = (r * b) % mod;
    b = (b * b) % mod;
    p >>= 1;
  }
  return r;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  long long z = power(2, mod - 2);
  long long a, b;
  cin >> a >> b;
  long long ans = 0;
  for (long long k = 1; k <= a; k++) {
    long long x = k * b + 1;
    x %= mod;
    x = (x * b) % mod;
    x = (x * (b - 1)) % mod;
    x = (x + mod) % mod;
    x = (x * z) % mod;
    ans = (ans + x) % mod;
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10000000 2


(G.2) Fast Input

2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long const mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long b, long long p) { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long r = 1; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  while (p) { /* line 6 slow_hit_count: 31, fast_hit_count: 31 */
    if (p & 1) r = (r * b) % mod; /* line 7 slow_hit_count: 30, fast_hit_count: 30 */
    b = (b * b) % mod; /* line 8 slow_hit_count: 30, fast_hit_count: 30 */
    p >>= 1; /* line 9 slow_hit_count: 30, fast_hit_count: 30 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  long long z = power(2, mod - 2); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  long long a, b; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long k = 1; k <= a; k++) { /* line 21 slow_hit_count: 10000001, fast_hit_count: 3 */
    long long x = k * b + 1; /* line 22 slow_hit_count: 10000000, fast_hit_count: 2 */
    x %= mod; /* line 23 slow_hit_count: 10000000, fast_hit_count: 2 */
    x = (x * b) % mod; /* line 24 slow_hit_count: 10000000, fast_hit_count: 2 */
    x = (x * (b - 1)) % mod; /* line 25 slow_hit_count: 10000000, fast_hit_count: 2 */
    x = (x + mod) % mod; /* line 26 slow_hit_count: 10000000, fast_hit_count: 2 */
    x = (x * z) % mod; /* line 27 slow_hit_count: 10000000, fast_hit_count: 2 */
    ans = (ans + x) % mod; /* line 28 slow_hit_count: 10000000, fast_hit_count: 2 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the provided hit count information, it is evident that the primary performance bottleneck occurs in the loop starting at line 21:

1. **Loop Analysis:**
   - The line `for (long long k = 1; k <= a; k++)` (line 21) is hit 10,000,001 times for the slow input and 3 times for the fast input. This indicates a direct correlation between the value of `a` and the number of loop iterations.
   - Each operation within the loop (lines 22 to 28) reflects a similar scale of hit counts, signifying they are executed for each iteration of the loop.

2. **Inefficient Code Path:**
   - The lines within this loop perform several arithmetic operations, repeated for every value of `k` from 1 to `a`. These operations include multiplications, additions, and modulus operations, all of which, while not individually expensive, cumulatively contribute to the high execution time given the large value of `a`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis from Phase 1, the following performance-characterizing invariants describe conditions under which the program is likely to slow down:

1. **Iteration Count Invariant:**
   - **Description:** "If the value of `a` is large, particularly when it approaches the upper limit of the constraint (10,000,000), the loop executes many times, causing significant slowdowns due to repeated arithmetic operations."
   - **Rationale:** The slow input with `a = 10,000,000` results in a large number of loop iterations, whereas a smaller `a`, such as 2 for the fast input, results in only a few iterations. The performance degradation is directly tied to the number of iterations driven by `a`.

2. **Arithmetic Operation Invariant:**
   - **Description:** "For each increment in `k`, multiple arithmetic operations are performed, which can become costly when repeated a large number of times due to large values of `a`."
   - **Rationale:** Each iteration of the loop involves several operations (lines 22 to 28), whose cumulative effect becomes significant when iterated 10,000,000 times, as in the slow input.

3. **Exponential Growth Factor Invariant:**
   - **Description:** "When the combination of high values for `a` and a multiplier effect from the arithmetic operations in the loop (especially when `b` is also non-trivially large) occurs, computation time increases dramatically."
   - **Rationale:** The program performs operations based on `b` within the loop, and while the arithmetic isn’t inherently exponential, the repeated calculations can have compounding effects, particularly when `b` is not minimal.

These invariants help to identify scenarios that would trigger slow performance, primarily focusing on the size of `a` and the repetitive nature of the arithmetic operations within the loop. They align with the constraints, acknowledging scenarios where `a` is maximized and `b` contributes to the arithmetic complexity.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].

By <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.

The answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?

Input

The single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).

Output

Print a single integer representing the answer modulo 1 000 000 007 (109 + 7).

Examples

Input

1 1


Output

0


Input

2 2


Output

8

Note

For the first sample, there are no nice integers because <image> is always zero.

For the second sample, the set of nice integers is {3, 5}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants as runtime checks:

```cpp
void check_iteration_count_invariant(long long a) {
    if (a > 1e6) { // Threshold chosen based on constraints and potential slowdown.
        cerr << "Warning: Iteration count invariant triggered - too many loop iterations!" << endl;
        abort();
    }
}

void check_arithmetic_operation_invariant(long long a, long long b) {
    if (a > 1e6 && b > 1) { // High `a` combined with non-minimal `b` could be problematic.
        cerr << "Warning: Arithmetic operation invariant triggered - potential arithmetic overload!" << endl;
        abort();
    }
}

void check_exponential_growth_factor_invariant(long long a, long long b) {
    if (a > 1e6 && b > 1e6) { // Both `a` and `b` being large can compound the issue.
        cerr << "Warning: Exponential growth factor invariant triggered - excessive arithmetic operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Below is the instrumented C++ code with the runtime checks integrated at appropriate points in the program:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long const mod = 1e9 + 7;

long long power(long long b, long long p) {
    long long r = 1;
    while (p) {
        if (p & 1) r = (r * b) % mod;
        b = (b * b) % mod;
        p >>= 1;
    }
    return r;
}

void check_iteration_count_invariant(long long a) {
    if (a > 1e6) { // Threshold chosen based on constraints and potential slowdown.
        cerr << "Warning: Iteration count invariant triggered - too many loop iterations!" << endl;
        abort();
    }
}

void check_arithmetic_operation_invariant(long long a, long long b) {
    if (a > 1e6 && b > 1) { // High `a` combined with non-minimal `b` could be problematic.
        cerr << "Warning: Arithmetic operation invariant triggered - potential arithmetic overload!" << endl;
        abort();
    }
}

void check_exponential_growth_factor_invariant(long long a, long long b) {
    if (a > 1e6 && b > 1e6) { // Both `a` and `b` being large can compound the issue.
        cerr << "Warning: Exponential growth factor invariant triggered - excessive arithmetic operations!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    long long z = power(2, mod - 2);
    long long a, b;
    cin >> a >> b;

    // Insert checks before the main computation starts
    check_iteration_count_invariant(a);
    check_arithmetic_operation_invariant(a, b);
    check_exponential_growth_factor_invariant(a, b);

    long long ans = 0;
    for (long long k = 1; k <= a; k++) {
        long long x = k * b + 1;
        x %= mod;
        x = (x * b) % mod;
        x = (x * (b - 1)) % mod;
        x = (x + mod) % mod;
        x = (x * z) % mod;
        ans = (ans + x) % mod;
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **Iteration Count Invariant Check:** This is checked right after the input is read. If `a` exceeds a threshold representing a high number of loop iterations (e.g., `1e6`), a warning is triggered.
  
- **Arithmetic Operation Invariant Check:** This is also checked after reading the input to ensure `a` is high enough and `b` is non-trivial, as this combination can lead to potential overload.
  
- **Exponential Growth Factor Invariant Check:** This ensures that both `a` and `b` aren't simultaneously large, which significantly impacts performance. Again, it is checked immediately after input handling to prevent unnecessary computation.

These checks are designed to catch performance bottlenecks and will abort execution if they detect a potential issue. This helps in diagnosing and avoiding scenarios that would lead to significant slowdowns.

