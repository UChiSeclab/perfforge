system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name — The Huff-puffer.

So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with α liters of petrol (α ≥ 10 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. 

Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with α liters of petrol. Otherwise, he doesn't stop at the station and drives on. 

For example, if α = 43.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42 + 43.21 = 49.63 liters. The next stop is at the station number 12, 9.63 + 43.21 = 52.84. The next stop is at the station number 17 and so on. 

You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.

One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the α number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.

Input

The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds.

Output

Print in the first line "unique" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line "not unique".

Examples

Input

3
1 2 4


Output

unique
5


Input

2
1 2


Output

not unique

Note

In the second example the answer is not unique. For example, if α = 10, we'll have such a sequence as 1, 2, 3, and if α = 14, the sequence will be 1, 2, 4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MaxN = 1010;
const double Inf = 100010;
int main() {
  int N;
  int a[MaxN];
  int i, j, t;
  int ans, tmp;
  double m, v;
  bool ill, uni;
  scanf("%d", &N);
  for (i = 0; i < N; i++) scanf("%d", &a[i + 1]);
  a[0] = 0;
  ans = -1;
  uni = 0;
  m = a[1] * 10;
  for (t = 0; t < 1000000; t++) {
    v = m;
    ill = 0;
    for (i = 1; i <= N; i++) {
      v -= (double)(a[i] - a[i - 1]) * 10;
      if (v < 0 || v > 10) {
        ill = 1;
        break;
      }
      v += m;
    }
    m += 0.00001;
    if (ill) continue;
    tmp = a[N] + (int)(v / 10);
    if (ans == -1)
      ans = tmp;
    else if (ans != tmp) {
      uni = 1;
      break;
    }
  }
  if (uni)
    printf("not unique");
  else
    printf("unique\n%d", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
2 5 7 10 12 15 17 20 22


(G.2) Fast Input

1
2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MaxN = 1010; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double Inf = 100010; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int N; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  int a[MaxN]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int i, j, t; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  int ans, tmp; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  double m, v; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  bool ill, uni; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &N); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < N; i++) scanf("%d", &a[i + 1]); /* line 13 slow_hit_count: 10, fast_hit_count: 2 */
  a[0] = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  ans = -1; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  uni = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  m = a[1] * 10; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (t = 0; t < 1000000; t++) { /* line 18 slow_hit_count: 1000001, fast_hit_count: 500002 */
    v = m; /* line 19 slow_hit_count: 1000000, fast_hit_count: 500002 */
    ill = 0; /* line 20 slow_hit_count: 1000000, fast_hit_count: 500002 */
    for (i = 1; i <= N; i++) { /* line 21 slow_hit_count: 3231742, fast_hit_count: 1000004 */
      v -= (double)(a[i] - a[i - 1]) * 10; /* line 22 slow_hit_count: 3176187, fast_hit_count: 500002 */
      if (v < 0 || v > 10) { /* line 23 slow_hit_count: 3176187, fast_hit_count: 500002 */
        ill = 1; /* line 24 slow_hit_count: 944445, fast_hit_count: 0 */
        break; /* line 25 slow_hit_count: 944445, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      v += m; /* line 27 slow_hit_count: 2231742, fast_hit_count: 500002 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    m += 0.00001; /* line 29 slow_hit_count: 1000000, fast_hit_count: 500002 */
    if (ill) continue; /* line 30 slow_hit_count: 1000000, fast_hit_count: 500002 */
    tmp = a[N] + (int)(v / 10); /* line 31 slow_hit_count: 55555, fast_hit_count: 500002 */
    if (ans == -1) /* line 32 slow_hit_count: 55555, fast_hit_count: 500002 */
      ans = tmp; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    else if (ans != tmp) { /* line 34 slow_hit_count: 55554, fast_hit_count: 500001 */
      uni = 1; /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  if (uni) /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    printf("not unique"); /* line 40 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    printf("unique\n%d", ans); /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Line-Level Hit Counts:**

1. **Outer Loop (Lines 18-30):** The outer loop runs up to 1,000,000 times. For the slow input, it has reached 1,000,001 iterations, whereas the fast input terminated after 500,002 iterations. This drastic difference suggests that the outer loop is a significant bottleneck.

2. **Inner Loop (Lines 21-28):** The inner loop is executed a significantly higher number of times for the slow input (3,231,742) compared to the fast input (1,000,004). This indicates that the inner loop is heavily influenced by the number of stops `N`, contributing to the slowdown.

3. **Condition Checks (Line 23):** The condition `if (v < 0 || v > 10)` is a critical point where the execution diverges. For slow inputs, this condition is met 944,445 times, causing an early exit from the inner loop, which avoids calling `tmp = a[N] + (int)(v / 10)` often.

4. **Calculation of `tmp` (Line 31):** This line is called 55,555 times for the slow input but 500,002 times for the fast input, indicating the slow input finds a valid `tmp` less frequently due to more cases of `ill` being true.

5. **Unique Check Handling (Lines 32-36):** These lines are less frequently hit in the slow input, showing that conditions causing exits or identifications of unique results are less frequent compared to what's required.

### Phase 2: Derive Performance-Characterizing Invariants

**Natural Language Performance Invariants**

1. **Invariant Related to Loop Iterations:**
   - "If the range of potential `α` values is wide, the outer loop may iterate many times trying to find a valid `α`, leading to prolonged computation."

2. **Invariant Related to Inner Loop Efficiency:**
   - "When the number of stop stations `N` is large, the inner loop is executed frequently, making the computation more intensive."

3. **Invariant Related to Condition Fails:**
   - "If the sequence of stops often results in `v` values outside the permissible range (i.e., less than 0 or greater than 10), many iterations are deemed invalid, requiring the loop to continue instead of progressing towards a solution."

4. **Invariant Related to Value `m` Updates:**
   - "Frequent updates of `m` in small increments can lead to a high number of iterations, especially when the range for valid `m` values is broad and the sequence doesn't quickly resolve to a unique `tmp`."

### Summary

The slow performance arises primarily from the high number of iterations in the outer loop and the inefficiency of condition checks that repeatedly fail, leading to excessive recalculations. The performance is particularly strained when the number of stops `N` is large, and the sequence of stops does not quickly resolve to a unique future stop.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name — The Huff-puffer.

So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with α liters of petrol (α ≥ 10 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. 

Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with α liters of petrol. Otherwise, he doesn't stop at the station and drives on. 

For example, if α = 43.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42 + 43.21 = 49.63 liters. The next stop is at the station number 12, 9.63 + 43.21 = 52.84. The next stop is at the station number 17 and so on. 

You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.

One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the α number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.

Input

The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds.

Output

Print in the first line "unique" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line "not unique".

Examples

Input

3
1 2 4


Output

unique
5


Input

2
1 2


Output

not unique

Note

In the second example the answer is not unique. For example, if α = 10, we'll have such a sequence as 1, 2, 3, and if α = 14, the sequence will be 1, 2, 4.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's implement the checker code for each of the performance-characterizing invariants identified in Phase 2.

#### Invariant 1: Loop Iterations

- **Description:** If the range of potential `α` values is wide, the outer loop may iterate many times trying to find a valid `α`, leading to prolonged computation.

```cpp
void check_loop_range_invariant(int iterationCount, int threshold) {
    if (iterationCount > threshold) {
        cerr << "Warning: Loop range invariant triggered - excessive iterations in outer loop!" << endl;
        abort();
    }
}
```

#### Invariant 2: Inner Loop Efficiency

- **Description:** When the number of stop stations `N` is large, the inner loop is executed frequently, making the computation more intensive.

```cpp
void check_inner_loop_invariant(int N, int threshold) {
    if (N > threshold) {
        cerr << "Warning: Inner loop invariant triggered - large number of stations leading to frequent execution!" << endl;
        abort();
    }
}
```

#### Invariant 3: Condition Fails

- **Description:** If the sequence of stops often results in `v` values outside the permissible range (i.e., less than 0 or greater than 10), many iterations are deemed invalid, requiring the loop to continue instead of progressing towards a solution.

```cpp
void check_condition_fail_invariant(int failCount, int threshold) {
    if (failCount > threshold) {
        cerr << "Warning: Condition fail invariant triggered - frequent invalid v values!" << endl;
        abort();
    }
}
```

#### Invariant 4: Value `m` Updates

- **Description:** Frequent updates of `m` in small increments can lead to a high number of iterations, especially when the range for valid `m` values is broad.

```cpp
void check_m_update_invariant(double mIncrement, double threshold) {
    if (mIncrement < threshold) {
        cerr << "Warning: m update invariant triggered - very small increments leading to excessive updates!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Let's integrate the above invariant checks into the provided C++ program at appropriate places.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MaxN = 1010;
const double Inf = 100010;

// Invariant checker functions
void check_loop_range_invariant(int iterationCount, int threshold) {
    if (iterationCount > threshold) {
        cerr << "Warning: Loop range invariant triggered - excessive iterations in outer loop!" << endl;
        abort();
    }
}

void check_inner_loop_invariant(int N, int threshold) {
    if (N > threshold) {
        cerr << "Warning: Inner loop invariant triggered - large number of stations leading to frequent execution!" << endl;
        abort();
    }
}

void check_condition_fail_invariant(int failCount, int threshold) {
    if (failCount > threshold) {
        cerr << "Warning: Condition fail invariant triggered - frequent invalid v values!" << endl;
        abort();
    }
}

void check_m_update_invariant(double mIncrement, double threshold) {
    if (mIncrement < threshold) {
        cerr << "Warning: m update invariant triggered - very small increments leading to excessive updates!" << endl;
        abort();
    }
}

int main() {
    int N;
    int a[MaxN];
    int i, j, t;
    int ans, tmp;
    double m, v;
    bool ill, uni;
    scanf("%d", &N);
    for (i = 0; i < N; i++) scanf("%d", &a[i + 1]);
    a[0] = 0;
    ans = -1;
    uni = 0;
    m = a[1] * 10;

    // Check the inner loop invariant
    check_inner_loop_invariant(N, 500);  // Example threshold

    int iterationCount = 0;
    int conditionFailCount = 0;
    double mIncrement = 0.00001;  // As used in the loop

    // Check the m update invariant
    check_m_update_invariant(mIncrement, 0.0001);  // Example threshold

    for (t = 0; t < 1000000; t++) {
        iterationCount++;
        v = m;
        ill = 0;
        for (i = 1; i <= N; i++) {
            v -= (double)(a[i] - a[i - 1]) * 10;
            if (v < 0 || v > 10) {
                ill = 1;
                conditionFailCount++;
                break;
            }
            v += m;
        }
        m += mIncrement;
        if (ill) continue;
        tmp = a[N] + (int)(v / 10);
        if (ans == -1)
            ans = tmp;
        else if (ans != tmp) {
            uni = 1;
            break;
        }
    }

    // Check the loop range invariant
    check_loop_range_invariant(iterationCount, 500000);  // Example threshold

    // Check the condition fail invariant
    check_condition_fail_invariant(conditionFailCount, 300000);  // Example threshold

    if (uni)
        printf("not unique");
    else
        printf("unique\n%d", ans);
    return 0;
}
```

### Explanation

- **Placement of Checks:** The `check_inner_loop_invariant` is checked after reading `N` because it relates to the input size. The `check_m_update_invariant` is checked before the loop to ensure the increment isn't too small. The `check_loop_range_invariant` and `check_condition_fail_invariant` are checked after the loop to count iterations and failed conditions respectively.

- **Thresholds:** Example thresholds are used in the checks. These can be adjusted based on further profiling and expected performance characteristics.

