system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name — The Huff-puffer.

So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with α liters of petrol (α ≥ 10 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. 

Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with α liters of petrol. Otherwise, he doesn't stop at the station and drives on. 

For example, if α = 43.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42 + 43.21 = 49.63 liters. The next stop is at the station number 12, 9.63 + 43.21 = 52.84. The next stop is at the station number 17 and so on. 

You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.

One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the α number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.

Input

The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds.

Output

Print in the first line "unique" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line "not unique".

Examples

Input

3
1 2 4


Output

unique
5


Input

2
1 2


Output

not unique

Note

In the second example the answer is not unique. For example, if α = 10, we'll have such a sequence as 1, 2, 3, and if α = 14, the sequence will be 1, 2, 4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long double EPS = 1e-9;
const long double PI = 3.1415926535897932384626433832795;
const int INF = 1000 * 1000 * 1000;
const int NMAX = 1000 * 1000;
long ans, i, j, k, l, n, m, x, y;
double mx, cur, c;
bool first = true;
;
long a[1000];
long long mn;
int main() {
  freopen("out.deb", "w", stderr);
  scanf("%d", &n);
  for ((i) = (0); (i) < (n); (i)++) scanf("%d", &a[i]);
  mx = 10 + (a[1] - a[0]) * 10;
  for (cur = a[0] * 10; cur <= a[0] * 10 + 10; cur += 0.000001) {
    c = cur - a[0] * 10;
    if (c > 10) break;
    for ((i) = (1); (i) < (n); (i)++) {
      c += cur;
      c -= (a[i] - a[i - 1]) * 10;
      if (c > 10) {
        printf("unique\n%d", x);
        return 0;
      }
      if (c < 0) {
        break;
      }
    }
    if (c + cur > 0 && i == n) {
      y = (c + cur) / 10 + a[n - 1];
      if (first) {
        x = y;
        first = false;
      }
      if (x != y) {
        printf("not unique");
        return 0;
      }
    }
  }
  printf("unique\n%d", x);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
1 3 4


(G.2) Fast Input

1
4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long double EPS = 1e-9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long double PI = 3.1415926535897932384626433832795; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1000 * 1000 * 1000; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int NMAX = 1000 * 1000; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long ans, i, j, k, l, n, m, x, y; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
double mx, cur, c; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
bool first = true; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long a[1000]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long mn; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  freopen("out.deb", "w", stderr); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for ((i) = (0); (i) < (n); (i)++) scanf("%d", &a[i]); /* line 16 slow_hit_count: 4, fast_hit_count: 2 */
  mx = 10 + (a[1] - a[0]) * 10; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (cur = a[0] * 10; cur <= a[0] * 10 + 10; cur += 0.000001) { /* line 18 slow_hit_count: 6666668, fast_hit_count: 5000002 */
    c = cur - a[0] * 10; /* line 19 slow_hit_count: 6666668, fast_hit_count: 5000002 */
    if (c > 10) break; /* line 20 slow_hit_count: 6666668, fast_hit_count: 5000002 */
    for ((i) = (1); (i) < (n); (i)++) { /* line 21 slow_hit_count: 10000001, fast_hit_count: 5000002 */
      c += cur; /* line 22 slow_hit_count: 8333335, fast_hit_count: 0 */
      c -= (a[i] - a[i - 1]) * 10; /* line 23 slow_hit_count: 8333335, fast_hit_count: 0 */
      if (c > 10) { /* line 24 slow_hit_count: 8333335, fast_hit_count: 0 */
        printf("unique\n%d", x); /* line 25 slow_hit_count: 1, fast_hit_count: 0 */
        return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      if (c < 0) { /* line 28 slow_hit_count: 8333334, fast_hit_count: 0 */
        break; /* line 29 slow_hit_count: 5000001, fast_hit_count: 0 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    if (c + cur > 0 && i == n) { /* line 32 slow_hit_count: 6666667, fast_hit_count: 5000002 */
      y = (c + cur) / 10 + a[n - 1]; /* line 33 slow_hit_count: 1666666, fast_hit_count: 5000002 */
      if (first) { /* line 34 slow_hit_count: 1666666, fast_hit_count: 5000002 */
        x = y; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
        first = false; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      if (x != y) { /* line 38 slow_hit_count: 1666666, fast_hit_count: 5000002 */
        printf("not unique"); /* line 39 slow_hit_count: 0, fast_hit_count: 1 */
        return 0; /* line 40 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  printf("unique\n%d", x); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon reviewing the hit counts and the code, the following observations can be made regarding the lines with significant hit count differences between the slow and fast inputs:

1. **Line 18**: The outer loop increments `cur` by `0.000001` and runs from `cur = a[0] * 10` to `cur <= a[0] * 10 + 10`. This loop runs `10,000,000` times for the slow input, compared to `5,000,000` times for the fast input.

2. **Lines 21-23**: The nested loop iterates over the petrol station stops and gets executed a substantial number of times, specifically `10,000,001` times for the slow input versus `5,000,002` times for the fast input.

3. **Line 28**: The condition checking `if (c < 0)` is met frequently, resulting in frequent breaks from the inner loop.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified expensive or inefficient segments, the following natural language performance invariants can be derived:

1. **Fine Granularity in Floating Point Iteration**:
   - **Description**: The program uses very fine increments (`0.000001`) in a loop over a floating point range. This can lead to a large number of iterations, significantly impacting performance, especially when the range is such that the loop does not break early.
   - **Invariant**: "When the range of potential `α` values is too narrow, and the increment is very fine, the loop may result in excessive iterations."

2. **Frequent Inner Loop Breaks**:
   - **Description**: The inner loop frequently breaks due to the condition `c < 0`, indicating that many `cur` values do not satisfy the conditions, leading to potentially unnecessary checks.
   - **Invariant**: "If the difference between consecutive petrol station stops is irregular and doesn’t allow `c` to stay positive for long across iterations, the inner loop may break often, causing inefficiency."

3. **High Frequency of Non-unique Determination**:
   - **Description**: The program struggles with non-unique determinations of the next petrol station stop when there are multiple possible `α` values, leading to extensive computations over the range.
   - **Invariant**: "When the sequence of stops allows multiple valid interpretations for `α`, the search space increases, leading to longer computation times."

### Summary

The slow performance is primarily caused by the fine granularity of the floating-point iteration and frequent breaks in the nested loop due to the `c < 0` condition. These factors, combined with scenarios where the determination of the next stop is not unique, lead to the observed performance bottlenecks. Adjusting the granularity of `cur` increments or optimizing the search space based on observed patterns could help mitigate these issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name — The Huff-puffer.

So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with α liters of petrol (α ≥ 10 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. 

Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with α liters of petrol. Otherwise, he doesn't stop at the station and drives on. 

For example, if α = 43.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42 + 43.21 = 49.63 liters. The next stop is at the station number 12, 9.63 + 43.21 = 52.84. The next stop is at the station number 17 and so on. 

You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.

One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the α number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.

Input

The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds.

Output

Print in the first line "unique" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line "not unique".

Examples

Input

3
1 2 4


Output

unique
5


Input

2
1 2


Output

not unique

Note

In the second example the answer is not unique. For example, if α = 10, we'll have such a sequence as 1, 2, 3, and if α = 14, the sequence will be 1, 2, 4.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as C++ Checker Code

Below are the C++ code snippets implementing the performance-characterizing invariants derived earlier.

1. **Fine Granularity in Floating Point Iteration**:

   This invariant checks if the number of iterations in the loop that increments `cur` is excessively high due to fine granularity, potentially indicating a performance bottleneck:
   
   ```cpp
   void check_fine_granularity_invariant(double start, double end, double increment) {
       if ((end - start) / increment > 10000000) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to fine granularity!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Inner Loop Breaks**:

   This invariant checks for frequent breaks in the inner loop, which can signify inefficient execution when consecutive station intervals cause `c` to drop below zero repeatedly:
   
   ```cpp
   void check_frequent_breaks_invariant(int breakCount, int n) {
       if (breakCount > n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - frequent inner loop breaks!" << endl;
           abort();
       }
   }
   ```

3. **High Frequency of Non-unique Determination**:

   This invariant checks if the solution is non-unique due to multiple valid `α` values, which can lead to excessive exploration:
   
   ```cpp
   void check_non_unique_invariant(bool first, int x, int y) {
       if (!first && x != y) {
           cerr << "Warning: Performance bottleneck condition triggered - non-unique solution space!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here is the instrumented C++ code with the checker functions integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

const long double EPS = 1e-9;
const long double PI = 3.1415926535897932384626433832795;
const int INF = 1000 * 1000 * 1000;
const int NMAX = 1000 * 1000;
long ans, i, j, k, l, n, m, x, y;
double mx, cur, c;
bool first = true;
long a[1000];
long long mn;

// Checker functions to detect performance bottlenecks
void check_fine_granularity_invariant(double start, double end, double increment) {
    if ((end - start) / increment > 10000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to fine granularity!" << endl;
        abort();
    }
}

void check_frequent_breaks_invariant(int breakCount, int n) {
    if (breakCount > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent inner loop breaks!" << endl;
        abort();
    }
}

void check_non_unique_invariant(bool first, int x, int y) {
    if (!first && x != y) {
        cerr << "Warning: Performance bottleneck condition triggered - non-unique solution space!" << endl;
        abort();
    }
}

int main() {
    freopen("out.deb", "w", stderr);
    scanf("%d", &n);
    for ((i) = (0); (i) < (n); (i)++) scanf("%d", &a[i]);
    mx = 10 + (a[1] - a[0]) * 10;

    // Check for excessive iterations due to fine granularity
    check_fine_granularity_invariant(a[0] * 10, a[0] * 10 + 10, 0.000001);

    int breakCount = 0;
    for (cur = a[0] * 10; cur <= a[0] * 10 + 10; cur += 0.000001) {
        c = cur - a[0] * 10;
        if (c > 10) break;
        for ((i) = (1); (i) < (n); (i)++) {
            c += cur;
            c -= (a[i] - a[i - 1]) * 10;
            if (c > 10) {
                printf("unique\n%d", x);
                return 0;
            }
            if (c < 0) {
                breakCount++;
                break;
            }
        }
        // Check for frequent inner loop breaks
        check_frequent_breaks_invariant(breakCount, n);

        if (c + cur > 0 && i == n) {
            y = (c + cur) / 10 + a[n - 1];
            if (first) {
                x = y;
                first = false;
            }
            // Check for non-unique solution space
            check_non_unique_invariant(first, x, y);

            if (x != y) {
                printf("not unique");
                return 0;
            }
        }
    }
    printf("unique\n%d", x);
    return 0;
}
```

### Explanation

- **Check for Fine Granularity**: The `check_fine_granularity_invariant` is placed before the loop starts, ensuring that the loop will not run excessively due to too small increments.
  
- **Check for Frequent Breaks**: The `check_frequent_breaks_invariant` is called after the nested loop, counting how often the loop breaks early due to `c < 0`.

- **Check for Non-unique Solutions**: The `check_non_unique_invariant` is invoked when deciding if the solution is unique or not, ensuring that multiple potential `α` values do not cause unnecessary calculations.

