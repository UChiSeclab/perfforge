system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name — The Huff-puffer.

So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with α liters of petrol (α ≥ 10 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. 

Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with α liters of petrol. Otherwise, he doesn't stop at the station and drives on. 

For example, if α = 43.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42 + 43.21 = 49.63 liters. The next stop is at the station number 12, 9.63 + 43.21 = 52.84. The next stop is at the station number 17 and so on. 

You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.

One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the α number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.

Input

The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds.

Output

Print in the first line "unique" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line "not unique".

Examples

Input

3
1 2 4


Output

unique
5


Input

2
1 2


Output

not unique

Note

In the second example the answer is not unique. For example, if α = 10, we'll have such a sequence as 1, 2, 3, and if α = 14, the sequence will be 1, 2, 4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long INF = 1e9 + 7;
const int N = 5e3 + 10;
vector<double> vd;
int flag = 0;
vector<int> check(double x, int sz) {
  vector<int> v;
  int cur = 0;
  double tot = x;
  while (v.size() < sz) {
    int o = tot / 10;
    cur += o;
    v.push_back(cur);
    tot -= o * 10;
    if (v.size() == sz) break;
    tot += x;
  }
  if (flag) vd.push_back(tot);
  return v;
}
double solve(vector<int>& v1, int o = 0) {
  double l = 10 + 1e-10;
  double r = INF;
  int cnt = 200;
  while (cnt--) {
    double mid = (l + r) / 2;
    auto v2 = check(mid, v1.size());
    for (int i = 0; i < v1.size(); i++) {
      if (v1[i] < v2[i]) {
        r = mid;
        break;
      }
      if (v1[i] > v2[i]) {
        l = mid;
        break;
      }
    }
    if (v1 != v2) continue;
    if (o == 0)
      l = mid;
    else
      r = mid;
  }
  return l;
}
int main() {
  int n;
  cin >> n;
  vector<int> v(n);
  for (auto& x : v) cin >> x;
  double key1 = solve(v, 0);
  double key2 = solve(v, 1);
  flag = 1;
  if (key1 > key2) swap(key1, key2);
  int ans1 = check(key1, n + 1).back();
  int ans2 = check(key2, n + 1).back();
  if (abs(vd[0] - 10) <= 1e-8) ans1++;
  if (ans1 == ans2)
    puts("unique"), printf("%d\n", ans1), exit(0);
  else
    puts("not unique");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
1 3 4


(G.2) Fast Input

1
4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5e3 + 10; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<double> vd; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int flag = 0; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> check(double x, int sz) { /* line 7 slow_hit_count: 402, fast_hit_count: 402 */
  vector<int> v; /* line 8 slow_hit_count: 402, fast_hit_count: 402 */
  int cur = 0; /* line 9 slow_hit_count: 402, fast_hit_count: 402 */
  double tot = x; /* line 10 slow_hit_count: 402, fast_hit_count: 402 */
  while (v.size() < sz) { /* line 11 slow_hit_count: 1208, fast_hit_count: 404 */
    int o = tot / 10; /* line 12 slow_hit_count: 1208, fast_hit_count: 404 */
    cur += o; /* line 13 slow_hit_count: 1208, fast_hit_count: 404 */
    v.push_back(cur); /* line 14 slow_hit_count: 1208, fast_hit_count: 404 */
    tot -= o * 10; /* line 15 slow_hit_count: 1208, fast_hit_count: 404 */
    if (v.size() == sz) break; /* line 16 slow_hit_count: 1208, fast_hit_count: 404 */
    tot += x; /* line 17 slow_hit_count: 806, fast_hit_count: 2 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag) vd.push_back(tot); /* line 19 slow_hit_count: 402, fast_hit_count: 402 */
  return v; /* line 20 slow_hit_count: 804, fast_hit_count: 804 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
double solve(vector<int>& v1, int o = 0) { /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
  double l = 10 + 1e-10; /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
  double r = INF; /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
  int cnt = 200; /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
  while (cnt--) { /* line 26 slow_hit_count: 402, fast_hit_count: 402 */
    double mid = (l + r) / 2; /* line 27 slow_hit_count: 400, fast_hit_count: 400 */
    auto v2 = check(mid, v1.size()); /* line 28 slow_hit_count: 400, fast_hit_count: 400 */
    for (int i = 0; i < v1.size(); i++) { /* line 29 slow_hit_count: 1352, fast_hit_count: 575 */
      if (v1[i] < v2[i]) { /* line 30 slow_hit_count: 1064, fast_hit_count: 400 */
        r = mid; /* line 31 slow_hit_count: 80, fast_hit_count: 199 */
        break; /* line 32 slow_hit_count: 80, fast_hit_count: 199 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      if (v1[i] > v2[i]) { /* line 34 slow_hit_count: 984, fast_hit_count: 201 */
        l = mid; /* line 35 slow_hit_count: 32, fast_hit_count: 26 */
        break; /* line 36 slow_hit_count: 32, fast_hit_count: 26 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if (v1 != v2) continue; /* line 39 slow_hit_count: 400, fast_hit_count: 400 */
    if (o == 0) /* line 40 slow_hit_count: 288, fast_hit_count: 175 */
      l = mid; /* line 41 slow_hit_count: 146, fast_hit_count: 25 */
    else /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      r = mid; /* line 43 slow_hit_count: 142, fast_hit_count: 150 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  return l; /* line 45 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v(n); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto& x : v) cin >> x; /* line 51 slow_hit_count: 4, fast_hit_count: 2 */
  double key1 = solve(v, 0); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  double key2 = solve(v, 1); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  flag = 1; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  if (key1 > key2) swap(key1, key2); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  int ans1 = check(key1, n + 1).back(); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  int ans2 = check(key2, n + 1).back(); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  if (abs(vd[0] - 10) <= 1e-8) ans1++; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  if (ans1 == ans2) /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    puts("unique"), printf("%d\n", ans1), exit(0); /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    puts("not unique"); /* line 62 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 63 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program based on the given "slow" and "fast" inputs, we can analyze the hit count information to identify what part of the code contributes most to the slowdown.

### Phase 1: Identify Expensive or Inefficient Code Segments

The key observations from the line-level hit counts are as follows:

1. **High Hit Count in `check` Function:**
   - The loop inside the `check` function (lines 11-17) sees a marked increase in iterations for the slow input (1208 hits) compared to the fast input (404 hits).
   - This indicates that the conditions under which this loop executes are more frequently met or longer for the slow input.

2. **Binary Search Loop in `solve` Function:**
   - The loop in the `solve` function (lines 26-43) runs a significant number of times for both inputs, but the interactions with `v1` and `v2` (inside the loop) seem more frequent with the slow input.
   - Specifically, the `check` function is invoked 400 times in both cases, but internal differences likely cause extra iterations of the while loop in `check`.

3. **Differences in Conditional Branching:**
   - Lines 30-36 indicate different branching behavior between the slow and fast inputs, particularly with the conditions comparing `v1[i]` and `v2[i]`.

These insights suggest that the slowdown stems from inefficient handling of certain input patterns that cause excess iterations in loops within the `check` function and conditional branching in the `solve` function.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can formulate invariants in natural language that capture conditions likely to trigger the slowdown:

1. **Invariant on Input Patterns and Loop Iterations:**
   - "If the sequence of stops causes increased iterations in the calculation of `cur` and `tot` in the `check` function, the performance may degrade significantly. This is particularly noticeable when the stops create a situation where the interval between subsequent stops isn't consistent with an expected pattern, leading to prolonged calculations."

2. **Invariant on Binary Search Convergence:**
   - "When attempting to determine the petrol refill amount `α`, if the binary search process (in `solve`) does not converge quickly due to near-equal intermediate sequences, the function `check` will run repeatedly, leading to a slowdown."

3. **Invariant on Sequence Complexity:**
   - "When the given stop sequence has patterns that could correspond to multiple potential `α` values, the algorithm will spend extra iterations in verifying each potential solution, resulting in slower execution. This happens when the sequence allows for multiple valid interpretations of refueling strategy."

By abstracting the specific values and focusing on the characteristics of the input sequence and algorithm behavior, these invariants help understand the conditions under which the program may experience slow performance, thus aiding in optimization efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name — The Huff-puffer.

So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with α liters of petrol (α ≥ 10 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. 

Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with α liters of petrol. Otherwise, he doesn't stop at the station and drives on. 

For example, if α = 43.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42 + 43.21 = 49.63 liters. The next stop is at the station number 12, 9.63 + 43.21 = 52.84. The next stop is at the station number 17 and so on. 

You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.

One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the α number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.

Input

The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds.

Output

Print in the first line "unique" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line "not unique".

Examples

Input

3
1 2 4


Output

unique
5


Input

2
1 2


Output

not unique

Note

In the second example the answer is not unique. For example, if α = 10, we'll have such a sequence as 1, 2, 3, and if α = 14, the sequence will be 1, 2, 4.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as Checker Code in C++

Below are C++ code snippets that implement the performance-characterizing invariants derived earlier:

1. **Invariant 1: Increased Loop Iterations**
   - This checks if the conditions in the `check` function cause excessive loop iterations, particularly when `cur` and `tot` are calculated repeatedly.

```cpp
void check_loop_invariant(int iterations, int threshold) {
    if (iterations > threshold) {
        cerr << "Warning: loop_invariant triggered - excessive iterations in check function!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Slow Binary Search Convergence**
   - This monitors the convergence of the binary search in the `solve` function, where a large number of iterations without convergence could indicate a slowdown.

```cpp
void check_binary_search_invariant(int iteration_count, int max_iterations) {
    if (iteration_count > max_iterations) {
        cerr << "Warning: binary_search_invariant triggered - slow convergence detected!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Multiple Potential `α` Values**
   - This checks for complex patterns in input sequences that allow multiple valid interpretations of refueling strategy, potentially causing the algorithm to explore unnecessary paths.

```cpp
void check_sequence_complexity_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sequence_complexity_invariant triggered - ambiguous sequence detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Below is the instrumented C++ code with the above checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long INF = 1e9 + 7;
const int N = 5e3 + 10;
vector<double> vd;
int flag = 0;

void check_loop_invariant(int iterations, int threshold) {
    if (iterations > threshold) {
        cerr << "Warning: loop_invariant triggered - excessive iterations in check function!" << endl;
        abort();
    }
}

void check_binary_search_invariant(int iteration_count, int max_iterations) {
    if (iteration_count > max_iterations) {
        cerr << "Warning: binary_search_invariant triggered - slow convergence detected!" << endl;
        abort();
    }
}

void check_sequence_complexity_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sequence_complexity_invariant triggered - ambiguous sequence detected!" << endl;
        abort();
    }
}

vector<int> check(double x, int sz) {
  vector<int> v;
  int cur = 0;
  double tot = x;
  int iterations = 0;  // Track the number of loop iterations
  while (v.size() < sz) {
    int o = tot / 10;
    cur += o;
    v.push_back(cur);
    tot -= o * 10;
    if (v.size() == sz) break;
    tot += x;
    iterations++;
  }
  check_loop_invariant(iterations, 1000);  // Check for excessive iterations
  if (flag) vd.push_back(tot);
  return v;
}

double solve(vector<int>& v1, int o = 0) {
  double l = 10 + 1e-10;
  double r = INF;
  int cnt = 200;
  int initial_cnt = cnt;  // Save initial count for comparison
  while (cnt--) {
    double mid = (l + r) / 2;
    auto v2 = check(mid, v1.size());
    for (int i = 0; i < v1.size(); i++) {
      if (v1[i] < v2[i]) {
        r = mid;
        break;
      }
      if (v1[i] > v2[i]) {
        l = mid;
        break;
      }
    }
    if (v1 != v2) continue;
    if (o == 0)
      l = mid;
    else
      r = mid;
  }
  check_binary_search_invariant(initial_cnt - cnt, 50);  // Check slow convergence
  return l;
}

int main() {
  int n;
  cin >> n;
  vector<int> v(n);
  for (auto& x : v) cin >> x;

  bool ambiguous_sequence = (n > 1 && v[0] == 1 && v[1] == 2);  // Example condition
  check_sequence_complexity_invariant(ambiguous_sequence);  // Check for ambiguous sequence

  double key1 = solve(v, 0);
  double key2 = solve(v, 1);
  flag = 1;
  if (key1 > key2) swap(key1, key2);
  int ans1 = check(key1, n + 1).back();
  int ans2 = check(key2, n + 1).back();
  if (abs(vd[0] - 10) <= 1e-8) ans1++;
  if (ans1 == ans2)
    puts("unique"), printf("%d\n", ans1), exit(0);
  else
    puts("not unique");
  return 0;
}
```

### Explanation:
1. **Loop Invariant:** The `check_loop_invariant` is inserted within the `check` function to monitor the number of iterations within the loop responsible for calculating `cur` and `tot`.

2. **Binary Search Invariant:** The `check_binary_search_invariant` is placed after the binary search loop in the `solve` function to ensure convergence within a reasonable number of iterations.

3. **Sequence Complexity Invariant:** The `check_sequence_complexity_invariant` is called in `main` after reading input. It checks for input patterns likely to cause ambiguity in identifying the correct refueling strategy.

These checks will help identify situations where the program can slow down due to specific input patterns or inefficiencies in the algorithm, making it easier to diagnose and optimize the code.

