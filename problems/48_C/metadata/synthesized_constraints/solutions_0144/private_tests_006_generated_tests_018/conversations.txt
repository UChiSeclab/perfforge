system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name — The Huff-puffer.

So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with α liters of petrol (α ≥ 10 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. 

Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with α liters of petrol. Otherwise, he doesn't stop at the station and drives on. 

For example, if α = 43.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42 + 43.21 = 49.63 liters. The next stop is at the station number 12, 9.63 + 43.21 = 52.84. The next stop is at the station number 17 and so on. 

You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.

One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the α number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.

Input

The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds.

Output

Print in the first line "unique" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line "not unique".

Examples

Input

3
1 2 4


Output

unique
5


Input

2
1 2


Output

not unique

Note

In the second example the answer is not unique. For example, if α = 10, we'll have such a sequence as 1, 2, 3, and if α = 14, the sequence will be 1, 2, 4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[1010];
int n;
bool check(int v) {
  n++;
  a[n - 1] = v;
  double l = 10, r = 100000000;
  for (int it = (0); it < (200); ++it) {
    double m = (l + r) / 2;
    int v = 0;
    int st = 0;
    double have = m;
    for (int i = (0); i < (n); ++i) {
      int c = (int)(have / 10);
      if (c > a[i] - st) {
        v = 1;
        break;
      }
      if (c < a[i] - st) {
        v = -1;
        break;
      }
      have -= (a[i] - st) * 10;
      have += m;
      st = a[i];
    }
    if (v == -1)
      l = m;
    else if (v == 1)
      r = m;
    else {
      n--;
      return true;
    }
  }
  n--;
  return false;
}
int main() {
  scanf("%d", &n);
  for (int i = (0); i < (n); ++i) scanf("%d", &a[i]);
  bool f1 = check(a[n - 1] + a[0]);
  bool f2 = check(a[n - 1] + a[0] + 1);
  if ((f1) && (f2)) {
    printf("not unique\n");
  } else if (f1)
    printf("unique\n%d\n", a[n - 1] + a[0]);
  else
    printf("unique\n%d\n", a[n - 1] + a[0] + 1);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

33
9 19 29 39 49 59 69 79 89 99 109 119 129 139 149 159 168 178 188 198 208 218 228 238 248 258 268 278 288 298 308 318 327


(G.2) Fast Input

1
9


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[1010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int v) { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  n++; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  a[n - 1] = v; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  double l = 10, r = 100000000; /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  for (int it = (0); it < (200); ++it) { /* line 9 slow_hit_count: 233, fast_hit_count: 47 */
    double m = (l + r) / 2; /* line 10 slow_hit_count: 232, fast_hit_count: 47 */
    int v = 0; /* line 11 slow_hit_count: 232, fast_hit_count: 47 */
    int st = 0; /* line 12 slow_hit_count: 232, fast_hit_count: 47 */
    double have = m; /* line 13 slow_hit_count: 232, fast_hit_count: 47 */
    for (int i = (0); i < (n); ++i) { /* line 14 slow_hit_count: 5641, fast_hit_count: 52 */
      int c = (int)(have / 10); /* line 15 slow_hit_count: 5640, fast_hit_count: 50 */
      if (c > a[i] - st) { /* line 16 slow_hit_count: 5640, fast_hit_count: 50 */
        v = 1; /* line 17 slow_hit_count: 189, fast_hit_count: 40 */
        break; /* line 18 slow_hit_count: 189, fast_hit_count: 40 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      if (c < a[i] - st) { /* line 20 slow_hit_count: 5451, fast_hit_count: 10 */
        v = -1; /* line 21 slow_hit_count: 42, fast_hit_count: 5 */
        break; /* line 22 slow_hit_count: 42, fast_hit_count: 5 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      have -= (a[i] - st) * 10; /* line 24 slow_hit_count: 5409, fast_hit_count: 5 */
      have += m; /* line 25 slow_hit_count: 5409, fast_hit_count: 5 */
      st = a[i]; /* line 26 slow_hit_count: 5409, fast_hit_count: 5 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (v == -1) /* line 28 slow_hit_count: 232, fast_hit_count: 47 */
      l = m; /* line 29 slow_hit_count: 42, fast_hit_count: 5 */
    else if (v == 1) /* line 30 slow_hit_count: 190, fast_hit_count: 42 */
      r = m; /* line 31 slow_hit_count: 189, fast_hit_count: 40 */
    else { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      n--; /* line 33 slow_hit_count: 1, fast_hit_count: 2 */
      return true; /* line 34 slow_hit_count: 1, fast_hit_count: 2 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  n--; /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
  return false; /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i < (n); ++i) scanf("%d", &a[i]); /* line 42 slow_hit_count: 34, fast_hit_count: 2 */
  bool f1 = check(a[n - 1] + a[0]); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  bool f2 = check(a[n - 1] + a[0] + 1); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  if ((f1) && (f2)) { /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    printf("not unique\n"); /* line 46 slow_hit_count: 0, fast_hit_count: 1 */
  } else if (f1) /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
    printf("unique\n%d\n", a[n - 1] + a[0]); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    printf("unique\n%d\n", a[n - 1] + a[0] + 1); /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided, let's analyze the sections of the code that are significantly more active in the slow input compared to the fast input:

1. **Line 9:** 
   - The loop `for (int it = 0; it < 200; ++it)` has a hit count of 233 for the slow input versus 47 for the fast input. This suggests that the binary search approach iterates more in the slow scenario.

2. **Lines 14-26 (Inner Loop):** 
   - The loop `for (int i = 0; i < (n); ++i)` inside the function `check` is executed 5641 times for the slow input and only 52 times for the fast input. This loop is critical in iterating over the station stops, and its increased hit count indicates it's a key area contributing to the slowdown.

3. **Lines 15-18 and 20-22 (Conditional Checks):**
   - Conditional checks at lines 16 and 20 have significantly higher hit counts in the slow input (5640 vs. 50 and 5451 vs. 10, respectively).
   - The assignment operations and break statements within these checks (`v = 1; break;` and `v = -1; break;`) also show a notable difference in hit counts, indicating these conditions are frequently being evaluated.

4. **Lines 24-26 (Operations on `have`, `m`, and `st`):**
   - These lines are part of the calculation and update statements executed in each iteration of the inner loop. They also exhibit high hit counts in the slow scenario (5409 vs. 5), contributing to the complexity.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants that describe conditions under which the program enters slow execution paths:

1. **Invariant 1: High Number of Stops**
   - **Natural Language Description:** "If the number of petrol stations stopped at (`n`) is large, the binary search algorithm and the associated calculations within the loop over station stops will lead to increased computational cost."
   - **Explanation:** The inner loop scales with `n`, so as `n` increases, the number of operations grows, leading to slow performance.

2. **Invariant 2: Frequent Updates and Conditional Breaks**
   - **Natural Language Description:** "Frequent need to adjust the binary search bounds or to break out of internal loops due to condition checks can indicate computationally expensive paths."
   - **Explanation:** When the conditions inside the loop frequently trigger the assignments `v = 1` or `v = -1`, the binary search process becomes complex, leading to more iterations.

3. **Invariant 3: Binary Search Iterations**
   - **Natural Language Description:** "If the binary search loop iterates close to the maximum allowed iterations without finding a solution, this indicates a complex problem space requiring significant calculation, potentially slowing down the program."
   - **Explanation:** The outer loop (`for (int it = 0; it < 200; ++it)`) having a high number of executions suggests the problem space is challenging, requiring more computational effort to resolve.

4. **Invariant 4: Iterative Calculations in the Inner Loop**
   - **Natural Language Description:** "A high number of iterative calculations on variables `have`, `m`, and `st` within a loop tied to the number of stops can lead to performance bottlenecks."
   - **Explanation:** These calculations depend on the number of stops, and their repetition can slow down the program as `n` approaches the upper limit defined by the problem constraints.

By identifying these conditions, we can predict potential slow scenarios in future executions and adjust performance strategies accordingly.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Every year a race takes place on the motorway between cities A and B. This year Vanya decided to take part in the race and drive his own car that has been around and bears its own noble name — The Huff-puffer.

So, Vasya leaves city A on the Huff-puffer, besides, at the very beginning he fills the petrol tank with α liters of petrol (α ≥ 10 is Vanya's favorite number, it is not necessarily integer). Petrol stations are located on the motorway at an interval of 100 kilometers, i.e. the first station is located 100 kilometers away from the city A, the second one is 200 kilometers away from the city A, the third one is 300 kilometers away from the city A and so on. The Huff-puffer spends 10 liters of petrol every 100 kilometers. 

Vanya checks the petrol tank every time he passes by a petrol station. If the petrol left in the tank is not enough to get to the next station, Vanya fills the tank with α liters of petrol. Otherwise, he doesn't stop at the station and drives on. 

For example, if α = 43.21, then the car will be fuelled up for the first time at the station number 4, when there'll be 3.21 petrol liters left. After the fuelling up the car will have 46.42 liters. Then Vanya stops at the station number 8 and ends up with 6.42 + 43.21 = 49.63 liters. The next stop is at the station number 12, 9.63 + 43.21 = 52.84. The next stop is at the station number 17 and so on. 

You won't believe this but the Huff-puffer has been leading in the race! Perhaps it is due to unexpected snow. Perhaps it is due to video cameras that have been installed along the motorway which register speed limit breaking. Perhaps it is due to the fact that Vanya threatened to junk the Huff-puffer unless the car wins. Whatever the reason is, the Huff-puffer is leading, and jealous people together with other contestants wrack their brains trying to think of a way to stop that outrage.

One way to do this is to mine the next petrol station where Vanya will stop. Your task is to calculate at which station this will happen and warn Vanya. You don't know the α number, however, you are given the succession of the numbers of the stations where Vanya has stopped. Find the number of the station where the next stop will be.

Input

The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of petrol stations where Vanya has stopped. The next line has n space-separated integers which represent the numbers of the stations. The numbers are positive and do not exceed 106, they are given in the increasing order. No two numbers in the succession match. It is guaranteed that there exists at least one number α ≥ 10, to which such a succession of stops corresponds.

Output

Print in the first line "unique" (without quotes) if the answer can be determined uniquely. In the second line print the number of the station where the next stop will take place. If the answer is not unique, print in the first line "not unique".

Examples

Input

3
1 2 4


Output

unique
5


Input

2
1 2


Output

not unique

Note

In the second example the answer is not unique. For example, if α = 10, we'll have such a sequence as 1, 2, 3, and if α = 14, the sequence will be 1, 2, 4.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Natural Language Invariants as Checker Code in C++

For each of the performance-characterizing invariants derived, here is the corresponding C++ checker code:

1. **Invariant 1: High Number of Stops**

```cpp
void check_number_of_stops_invariant(int n) {
    if (n > 950) { // This threshold is chosen to be close to the maximum limit, signaling potential performance issues.
        cerr << "Warning: Performance bottleneck condition triggered - high number of stops!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Frequent Updates and Conditional Breaks**

```cpp
void check_frequent_breaks_invariant(int loop_iterations, int n) {
    if (loop_iterations > 200 * n) { // Assuming worst-case, every loop fully iterates without breaks.
        cerr << "Warning: Performance bottleneck condition triggered - frequent conditional breaks!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Binary Search Iterations**

```cpp
void check_binary_search_iterations_invariant(int iterations) {
    if (iterations >= 200) { // Given the program's design, reaching max iterations implies inefficiency.
        cerr << "Warning: Performance bottleneck condition triggered - excessive binary search iterations!" << endl;
        abort();
    }
}
```

4. **Invariant 4: Iterative Calculations in the Inner Loop**

```cpp
void check_inner_loop_calculations_invariant(int inner_loop_count, int n) {
    if (inner_loop_count > 5000) { // Arbitrary threshold based on total operations becoming computationally heavy.
        cerr << "Warning: Performance bottleneck condition triggered - excessive inner loop calculations!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code into the Original C++ Program

Here is the original C++ code with integrated performance-checking logic:

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[1010];
int n;

void check_number_of_stops_invariant(int n) {
    if (n > 950) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of stops!" << endl;
        abort();
    }
}

void check_frequent_breaks_invariant(int loop_iterations, int n) {
    if (loop_iterations > 200 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent conditional breaks!" << endl;
        abort();
    }
}

void check_binary_search_iterations_invariant(int iterations) {
    if (iterations >= 200) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive binary search iterations!" << endl;
        abort();
    }
}

void check_inner_loop_calculations_invariant(int inner_loop_count, int n) {
    if (inner_loop_count > 5000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive inner loop calculations!" << endl;
        abort();
    }
}

bool check(int v) {
    n++;
    a[n - 1] = v;
    double l = 10, r = 100000000;
    int binary_search_iterations = 0; // Track iterations to check invariant
    int total_inner_loop_calculations = 0; // Track inner loop operations

    for (int it = 0; it < 200; ++it) {
        binary_search_iterations++;
        double m = (l + r) / 2;
        int v = 0;
        int st = 0;
        double have = m;
        int inner_loop_iterations = 0;

        for (int i = 0; i < n; ++i) {
            inner_loop_iterations++;
            int c = (int)(have / 10);
            if (c > a[i] - st) {
                v = 1;
                break;
            }
            if (c < a[i] - st) {
                v = -1;
                break;
            }
            have -= (a[i] - st) * 10;
            have += m;
            st = a[i];
        }

        total_inner_loop_calculations += inner_loop_iterations;

        if (v == -1)
            l = m;
        else if (v == 1)
            r = m;
        else {
            n--;
            check_binary_search_iterations_invariant(binary_search_iterations);
            check_inner_loop_calculations_invariant(total_inner_loop_calculations, n);
            return true;
        }
    }
    n--;

    check_binary_search_iterations_invariant(binary_search_iterations);
    check_inner_loop_calculations_invariant(total_inner_loop_calculations, n);
    return false;
}

int main() {
    scanf("%d", &n);
    check_number_of_stops_invariant(n);
    for (int i = 0; i < n; ++i) scanf("%d", &a[i]);
    bool f1 = check(a[n - 1] + a[0]);
    bool f2 = check(a[n - 1] + a[0] + 1);
    if (f1 && f2) {
        printf("not unique\n");
    } else if (f1)
        printf("unique\n%d\n", a[n - 1] + a[0]);
    else
        printf("unique\n%d\n", a[n - 1] + a[0] + 1);
    return 0;
}
```

### Explanation:
- **Invariant Check Placement:** Checks are placed where data or control flow suggests a performance bottleneck might occur, such as after determining the number of stops or during/after key loop executions.
- **Efficient Checks:** These checks are outside tight loops to minimize the performance impact of the instrumentation itself.
- **Utility for Fuzzing:** These checks will help identify slow performance triggers during testing or fuzzing by providing clear warning messages when conditions are met.

