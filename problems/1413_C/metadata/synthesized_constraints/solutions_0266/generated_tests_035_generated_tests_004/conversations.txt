system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After battling Shikamaru, Tayuya decided that her flute is too predictable, and replaced it with a guitar. The guitar has 6 strings and an infinite number of frets numbered from 1. Fretting the fret number j on the i-th string produces the note a_{i} + j.

Tayuya wants to play a melody of n notes. Each note can be played on different string-fret combination. The easiness of performance depends on the difference between the maximal and the minimal indices of used frets. The less this difference is, the easier it is to perform the technique. Please determine the minimal possible difference.

For example, if a = [1, 1, 2, 2, 3, 3], and the sequence of notes is 4, 11, 11, 12, 12, 13, 13 (corresponding to the second example), we can play the first note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7, as shown on the picture.

<image>

Input

The first line contains 6 space-separated numbers a_{1}, a_{2}, ..., a_{6} (1 ≤ a_{i} ≤ 10^{9}) which describe the Tayuya's strings.

The second line contains the only integer n (1 ≤ n ≤ 100 000) standing for the number of notes in the melody.

The third line consists of n integers b_{1}, b_{2}, ..., b_{n} (1 ≤ b_{i} ≤ 10^{9}), separated by space. They describe the notes to be played. It's guaranteed that b_i > a_j for all 1≤ i≤ n and 1≤ j≤ 6, in other words, you can play each note on any string.

Output

Print the minimal possible difference of the maximal and the minimal indices of used frets.

Examples

Input


1 4 100 10 30 5
6
101 104 105 110 130 200


Output


0


Input


1 1 2 2 3 3
7
13 4 11 12 11 13 12


Output


7

Note

In the first sample test it is optimal to play the first note on the first string, the second note on the second string, the third note on the sixth string, the fourth note on the fourth string, the fifth note on the fifth string, and the sixth note on the third string. In this case the 100-th fret is used each time, so the difference is 100 - 100 = 0.

<image>

In the second test it's optimal, for example, to play the second note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long t, n, m, k, a[7], b[100010], c[100010][7];
map<long long, vector<long long>> h;
int32_t main() {
  ios_base ::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
  for (long long i = 1; i <= 6; i++) {
    cin >> a[i];
  }
  cin >> n;
  for (long long i = 1; i <= n; i++) {
    cin >> b[i];
  }
  set<long long> s;
  for (long long i = 1; i <= n; i++) {
    for (long long j = 1; j <= 6; j++) {
      c[i][j] = b[i] - a[j];
      s.insert(c[i][j]);
    }
  }
  for (long long i = 1; i <= n; i++) {
    sort(c[i] + 1, c[i] + 7);
    for (long long j = 1; j <= 6; j++) {
      h[c[i][j]].push_back(c[i][j]);
      h[c[i][j - 1]].push_back(-c[i][j]);
    }
  }
  auto it = s.end();
  it--;
  long long mn = 1e17;
  multiset<long long> ms;
  while (true) {
    long long x = *it;
    for (long long i = 0; i < h[x].size(); i++) {
      if (h[x][i] < 0) {
        auto it2 = ms.find(-h[x][i]);
        if (it2 != ms.end()) {
          ms.erase(it2);
        }
      } else {
        ms.insert(h[x][i]);
      }
    }
    if (ms.size() == n) {
      auto it2 = ms.end();
      it2--;
      mn = min(*it2 - (*ms.begin()), mn);
    }
    if (it == s.begin()) {
      break;
    }
    it--;
  }
  cout << mn;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

53019473 32004256 2436426 24979445 61648772 23690081
10
582107247 906728404 411434947 673536177 411497300 758156848 1035611341 800305059 992325267 94977249


(G.2) Fast Input

158260522 877914575 523276672 24979445 861648772 623690081
1
896194147


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long t, n, m, k, a[7], b[100010], c[100010][7]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, vector<long long>> h; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base ::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= 6; i++) { /* line 10 slow_hit_count: 7, fast_hit_count: 7 */
    cin >> a[i]; /* line 11 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) { /* line 14 slow_hit_count: 11, fast_hit_count: 2 */
    cin >> b[i]; /* line 15 slow_hit_count: 10, fast_hit_count: 1 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  set<long long> s; /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 1; i <= n; i++) { /* line 18 slow_hit_count: 11, fast_hit_count: 2 */
    for (long long j = 1; j <= 6; j++) { /* line 19 slow_hit_count: 70, fast_hit_count: 7 */
      c[i][j] = b[i] - a[j]; /* line 20 slow_hit_count: 60, fast_hit_count: 6 */
      s.insert(c[i][j]); /* line 21 slow_hit_count: 60, fast_hit_count: 6 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= n; i++) { /* line 24 slow_hit_count: 11, fast_hit_count: 2 */
    sort(c[i] + 1, c[i] + 7); /* line 25 slow_hit_count: 10, fast_hit_count: 1 */
    for (long long j = 1; j <= 6; j++) { /* line 26 slow_hit_count: 70, fast_hit_count: 7 */
      h[c[i][j]].push_back(c[i][j]); /* line 27 slow_hit_count: 60, fast_hit_count: 6 */
      h[c[i][j - 1]].push_back(-c[i][j]); /* line 28 slow_hit_count: 60, fast_hit_count: 6 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  auto it = s.end(); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  it--; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  long long mn = 1e17; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  multiset<long long> ms; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  while (true) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    long long x = *it; /* line 36 slow_hit_count: 60, fast_hit_count: 6 */
    for (long long i = 0; i < h[x].size(); i++) { /* line 37 slow_hit_count: 170, fast_hit_count: 17 */
      if (h[x][i] < 0) { /* line 38 slow_hit_count: 110, fast_hit_count: 11 */
        auto it2 = ms.find(-h[x][i]); /* line 39 slow_hit_count: 50, fast_hit_count: 5 */
        if (it2 != ms.end()) { /* line 40 slow_hit_count: 50, fast_hit_count: 5 */
          ms.erase(it2); /* line 41 slow_hit_count: 50, fast_hit_count: 5 */
        } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        ms.insert(h[x][i]); /* line 44 slow_hit_count: 60, fast_hit_count: 6 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    if (ms.size() == n) { /* line 47 slow_hit_count: 60, fast_hit_count: 6 */
      auto it2 = ms.end(); /* line 48 slow_hit_count: 6, fast_hit_count: 6 */
      it2--; /* line 49 slow_hit_count: 6, fast_hit_count: 6 */
      mn = min(*it2 - (*ms.begin()), mn); /* line 50 slow_hit_count: 6, fast_hit_count: 6 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    if (it == s.begin()) { /* line 52 slow_hit_count: 60, fast_hit_count: 6 */
      break; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    it--; /* line 55 slow_hit_count: 59, fast_hit_count: 5 */
  } /* line 56 slow_hit_count: 59, fast_hit_count: 5 */
  cout << mn; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 59 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit counts between the slow and fast inputs, several lines stand out as being hit significantly more often in the slow input:

1. **Line 19** (`for (long long j = 1; j <= 6; j++)`): The inner loop that computes possible frets for notes. This loop interacts with input size and string count.

2. **Line 25** (`sort(c[i] + 1, c[i] + 7)`): Sorting the fret differences for each note. Sorting can become expensive when executed repeatedly.

3. **Lines 37-44**: Insertion and removal operations from the multiset during the main computation loop, indicating a significant amount of time spent managing data in the multiset `ms`.

4. **Lines 52-55**: Iteration through the set `s` in reverse and checking conditions that determine the loop's execution path.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analyzed code and its hit counts, here are the performance-characterizing invariants:

1. **Frequent Sorting of Fret Differences**: 
   - **Description**: The program experiences slowdown when sorting operations on the fret differences array `c` occur frequently, especially when `n` is large, approaching the upper limit of 100,000.
   - **Natural Language Invariant**: "When the number of notes `n` is large, nearing 100,000, frequent sorting of fret differences across all strings can significantly degrade performance."

2. **Extensive Manipulation of Multiset for Fret Ranges**: 
   - **Description**: The program may slow down due to extensive insertion and deletion operations in a multiset, which grow linearly with the number of unique fret differences.
   - **Natural Language Invariant**: "If the set of possible fret differences is large, leading to many insertions and deletions in a multiset, performance can degrade significantly."

3. **High Iteration Count in the Fret Calculation Loop**: 
   - **Description**: When each note results in a large range of fret calculations due to the values of `a` and `b`, the inner loop can become a performance bottleneck.
   - **Natural Language Invariant**: "If a large number of fret possibilities must be computed for each note, caused by diverse note values exceeding many string base tones, the inner loop processing becomes computationally expensive."

4. **Management of Data Structures in the Main Loop**:
   - **Description**: The reverse iteration over the set of possible fret differences with frequent checks on multiset size can lead to slow execution if not optimized.
   - **Natural Language Invariant**: "When the number of unique fret differences is large, causing extensive iteration and conditional checks, the main loop can become inefficient, affecting overall performance."

These invariants help identify potential slow execution paths when processing large inputs or complex data interactions. They abstract the conditions under which the code is likely to slow down, providing a guide for optimization or triggering conditions for a fuzzer to detect performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After battling Shikamaru, Tayuya decided that her flute is too predictable, and replaced it with a guitar. The guitar has 6 strings and an infinite number of frets numbered from 1. Fretting the fret number j on the i-th string produces the note a_{i} + j.

Tayuya wants to play a melody of n notes. Each note can be played on different string-fret combination. The easiness of performance depends on the difference between the maximal and the minimal indices of used frets. The less this difference is, the easier it is to perform the technique. Please determine the minimal possible difference.

For example, if a = [1, 1, 2, 2, 3, 3], and the sequence of notes is 4, 11, 11, 12, 12, 13, 13 (corresponding to the second example), we can play the first note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7, as shown on the picture.

<image>

Input

The first line contains 6 space-separated numbers a_{1}, a_{2}, ..., a_{6} (1 ≤ a_{i} ≤ 10^{9}) which describe the Tayuya's strings.

The second line contains the only integer n (1 ≤ n ≤ 100 000) standing for the number of notes in the melody.

The third line consists of n integers b_{1}, b_{2}, ..., b_{n} (1 ≤ b_{i} ≤ 10^{9}), separated by space. They describe the notes to be played. It's guaranteed that b_i > a_j for all 1≤ i≤ n and 1≤ j≤ 6, in other words, you can play each note on any string.

Output

Print the minimal possible difference of the maximal and the minimal indices of used frets.

Examples

Input


1 4 100 10 30 5
6
101 104 105 110 130 200


Output


0


Input


1 1 2 2 3 3
7
13 4 11 12 11 13 12


Output


7

Note

In the first sample test it is optimal to play the first note on the first string, the second note on the second string, the third note on the sixth string, the fourth note on the fourth string, the fifth note on the fifth string, and the sixth note on the third string. In this case the 100-th fret is used each time, so the difference is 100 - 100 = 0.

<image>

In the second test it's optimal, for example, to play the second note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as C++ Checker Code

Let's convert the performance-characterizing invariants into C++ checker code.

1. **Frequent Sorting of Fret Differences**:
   - **Checker Code**: 

```cpp
void check_sort_invariant(int n, int sortCount) {
    if (n > 10000 && sortCount > n / 10) { // Assuming frequent sorting is problematic for large n
        cerr << "Warning: sort_invariant triggered - sorting fret differences too frequently!" << endl;
        abort();
    }
}
```

2. **Extensive Manipulation of Multiset for Fret Ranges**:
   - **Checker Code**:

```cpp
void check_multiset_invariant(int multisetOperations, int threshold) {
    if (multisetOperations > threshold) { // Assume a threshold for excessive multiset operations
        cerr << "Warning: multiset_invariant triggered - excessive multiset operations!" << endl;
        abort();
    }
}
```

3. **High Iteration Count in the Fret Calculation Loop**:
   - **Checker Code**:

```cpp
void check_iteration_invariant(int numNotes, int numFretPossibilities) {
    if (numNotes > 10000 && numFretPossibilities > numNotes * 6) { // If possibilities exceed a threshold
        cerr << "Warning: iteration_invariant triggered - excessive fret calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now let's integrate these checks into the given C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long t, n, m, k, a[7], b[100010], c[100010][7];
map<long long, vector<long long>> h;

void check_sort_invariant(int n, int sortCount) {
    if (n > 10000 && sortCount > n / 10) {
        cerr << "Warning: sort_invariant triggered - sorting fret differences too frequently!" << endl;
        abort();
    }
}

void check_multiset_invariant(int multisetOperations, int threshold) {
    if (multisetOperations > threshold) {
        cerr << "Warning: multiset_invariant triggered - excessive multiset operations!" << endl;
        abort();
    }
}

void check_iteration_invariant(int numNotes, int numFretPossibilities) {
    if (numNotes > 10000 && numFretPossibilities > numNotes * 6) {
        cerr << "Warning: iteration_invariant triggered - excessive fret calculations!" << endl;
        abort();
    }
}

int32_t main() {
    ios_base ::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

    for (long long i = 1; i <= 6; i++) {
        cin >> a[i];
    }
    cin >> n;
    for (long long i = 1; i <= n; i++) {
        cin >> b[i];
    }

    set<long long> s;

    int sortCount = 0;
    int numFretPossibilities = 0;

    for (long long i = 1; i <= n; i++) {
        for (long long j = 1; j <= 6; j++) {
            c[i][j] = b[i] - a[j];
            s.insert(c[i][j]);
            numFretPossibilities++;
        }
    }

    check_iteration_invariant(n, numFretPossibilities);

    for (long long i = 1; i <= n; i++) {
        sort(c[i] + 1, c[i] + 7);
        sortCount++;
        for (long long j = 1; j <= 6; j++) {
            h[c[i][j]].push_back(c[i][j]);
            h[c[i][j - 1]].push_back(-c[i][j]);
        }
    }

    check_sort_invariant(n, sortCount);

    auto it = s.end();
    it--;
    long long mn = 1e17;
    multiset<long long> ms;
    int multisetOperations = 0;
    const int multisetThreshold = 100000; // Example threshold, adjust as needed

    while (true) {
        long long x = *it;
        for (long long i = 0; i < h[x].size(); i++) {
            if (h[x][i] < 0) {
                auto it2 = ms.find(-h[x][i]);
                if (it2 != ms.end()) {
                    ms.erase(it2);
                }
            } else {
                ms.insert(h[x][i]);
            }
            multisetOperations++;
        }

        if (ms.size() == n) {
            auto it2 = ms.end();
            it2--;
            mn = min(*it2 - (*ms.begin()), mn);
        }
        if (it == s.begin()) {
            break;
        }
        it--;
    }

    check_multiset_invariant(multisetOperations, multisetThreshold);

    cout << mn;
    return 0;
}
```

### Explanation

- **Sorting Check**: The checker `check_sort_invariant` is called after counting how many times sorting is performed.
- **Multiset Check**: `check_multiset_invariant` is used to monitor the number of operations on the multiset `ms`, ensuring it doesn't exceed the defined threshold.
- **Iteration Check**: `check_iteration_invariant` is included to ensure the number of fret possibilities calculated doesn’t exceed a reasonable threshold for the input size `n`.

These checks will help to identify the conditions under which the program might slow down due to inefficient operations.

