system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After battling Shikamaru, Tayuya decided that her flute is too predictable, and replaced it with a guitar. The guitar has 6 strings and an infinite number of frets numbered from 1. Fretting the fret number j on the i-th string produces the note a_{i} + j.

Tayuya wants to play a melody of n notes. Each note can be played on different string-fret combination. The easiness of performance depends on the difference between the maximal and the minimal indices of used frets. The less this difference is, the easier it is to perform the technique. Please determine the minimal possible difference.

For example, if a = [1, 1, 2, 2, 3, 3], and the sequence of notes is 4, 11, 11, 12, 12, 13, 13 (corresponding to the second example), we can play the first note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7, as shown on the picture.

<image>

Input

The first line contains 6 space-separated numbers a_{1}, a_{2}, ..., a_{6} (1 ≤ a_{i} ≤ 10^{9}) which describe the Tayuya's strings.

The second line contains the only integer n (1 ≤ n ≤ 100 000) standing for the number of notes in the melody.

The third line consists of n integers b_{1}, b_{2}, ..., b_{n} (1 ≤ b_{i} ≤ 10^{9}), separated by space. They describe the notes to be played. It's guaranteed that b_i > a_j for all 1≤ i≤ n and 1≤ j≤ 6, in other words, you can play each note on any string.

Output

Print the minimal possible difference of the maximal and the minimal indices of used frets.

Examples

Input


1 4 100 10 30 5
6
101 104 105 110 130 200


Output


0


Input


1 1 2 2 3 3
7
13 4 11 12 11 13 12


Output


7

Note

In the first sample test it is optimal to play the first note on the first string, the second note on the second string, the third note on the sixth string, the fourth note on the fourth string, the fifth note on the fifth string, and the sixth note on the third string. In this case the 100-th fret is used each time, so the difference is 100 - 100 = 0.

<image>

In the second test it's optimal, for example, to play the second note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7.

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5, inf = 1e9;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int n = 6;
  int ary[n];
  for (int i = 0; i < n; ++i) {
    cin >> ary[i];
  }
  sort(ary, ary + n);
  int m;
  cin >> m;
  vector<int> note;
  for (int i = 0; i < m; ++i) {
    int a;
    cin >> a;
    note.push_back(a);
  }
  sort(note.begin(), note.end());
  int ans = inf + 10;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      int mn = note[j] - ary[i];
      int lo = 0;
      int hi = 1e9;
      while (hi > lo) {
        int mid = (hi + lo) / 2;
        int curl = 0;
        int curh = 0;
        int f = 0;
        for (int k = 0; k < n; ++k) {
          int l = ary[k] + mn;
          int h = l + mid;
          if (l > curh) {
            auto it = upper_bound(note.begin(), note.end(), curh);
            if (it != note.end() && (*it) < l) {
              f = 1;
              break;
            }
            curl = l;
            curh = h;
          } else {
            curh = h;
          }
        }
        auto it = upper_bound(note.begin(), note.end(), curh);
        if (it != note.end()) {
          f = 1;
        }
        if (f != 1) {
          hi = mid;
        } else {
          lo = mid + 1;
        }
      }
      ans = min(ans, lo);
    }
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 4 7 6 4 2
10
26 16 10 18 16 8 16 20 16 14


(G.2) Fast Input

1 1 2 96 99 100
3
101 146 175


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5, inf = 1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n = 6; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int ary[n]; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 10 slow_hit_count: 7, fast_hit_count: 7 */
    cin >> ary[i]; /* line 11 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  sort(ary, ary + n); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int m; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> note; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; ++i) { /* line 17 slow_hit_count: 11, fast_hit_count: 4 */
    int a; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 19 slow_hit_count: 10, fast_hit_count: 3 */
    note.push_back(a); /* line 20 slow_hit_count: 10, fast_hit_count: 3 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  sort(note.begin(), note.end()); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = inf + 10; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 24 slow_hit_count: 7, fast_hit_count: 7 */
    for (int j = 0; j < m; ++j) { /* line 25 slow_hit_count: 66, fast_hit_count: 24 */
      int mn = note[j] - ary[i]; /* line 26 slow_hit_count: 60, fast_hit_count: 18 */
      int lo = 0; /* line 27 slow_hit_count: 60, fast_hit_count: 18 */
      int hi = 1e9; /* line 28 slow_hit_count: 60, fast_hit_count: 18 */
      while (hi > lo) { /* line 29 slow_hit_count: 1811, fast_hit_count: 550 */
        int mid = (hi + lo) / 2; /* line 30 slow_hit_count: 1751, fast_hit_count: 532 */
        int curl = 0; /* line 31 slow_hit_count: 1751, fast_hit_count: 532 */
        int curh = 0; /* line 32 slow_hit_count: 1751, fast_hit_count: 532 */
        int f = 0; /* line 33 slow_hit_count: 1751, fast_hit_count: 532 */
        for (int k = 0; k < n; ++k) { /* line 34 slow_hit_count: 3731, fast_hit_count: 2587 */
          int l = ary[k] + mn; /* line 35 slow_hit_count: 3401, fast_hit_count: 2260 */
          int h = l + mid; /* line 36 slow_hit_count: 3401, fast_hit_count: 2260 */
          if (l > curh) { /* line 37 slow_hit_count: 3401, fast_hit_count: 2260 */
            auto it = upper_bound(note.begin(), note.end(), curh); /* line 38 slow_hit_count: 1751, fast_hit_count: 614 */
            if (it != note.end() && (*it) < l) { /* line 39 slow_hit_count: 1751, fast_hit_count: 614 */
              f = 1; /* line 40 slow_hit_count: 1421, fast_hit_count: 205 */
              break; /* line 41 slow_hit_count: 1421, fast_hit_count: 205 */
            } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
            curl = l; /* line 43 slow_hit_count: 330, fast_hit_count: 409 */
            curh = h; /* line 44 slow_hit_count: 330, fast_hit_count: 409 */
          } else { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
            curh = h; /* line 46 slow_hit_count: 1650, fast_hit_count: 1646 */
          } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
        auto it = upper_bound(note.begin(), note.end(), curh); /* line 49 slow_hit_count: 1751, fast_hit_count: 532 */
        if (it != note.end()) { /* line 50 slow_hit_count: 1751, fast_hit_count: 532 */
          f = 1; /* line 51 slow_hit_count: 1444, fast_hit_count: 216 */
        } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        if (f != 1) { /* line 53 slow_hit_count: 1751, fast_hit_count: 532 */
          hi = mid; /* line 54 slow_hit_count: 307, fast_hit_count: 316 */
        } else { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
          lo = mid + 1; /* line 56 slow_hit_count: 1444, fast_hit_count: 216 */
        } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      ans = min(ans, lo); /* line 59 slow_hit_count: 60, fast_hit_count: 18 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 63 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit counts between the fast and slow runs, several key observations can be made:

1. **Line-Level Hit Count Disparities:**
   - The `while (hi > lo)` loop on **line 29** is executed 1811 times in the slow input compared to 550 times in the fast input.
   - The nested `for (int k = 0; k < n; ++k)` loop on **line 34** gets executed 3731 times for the slow input and only 2587 times for the fast input.

2. **Critical Operations:**
   - The `upper_bound` function calls on **lines 38 and 49** are resource-intensive operations with high hit counts (1751 and 614 for slow input, respectively). This function is used to determine the smallest element greater than a given value, indicating frequent re-evaluation over the `note` array.
   - The iteration through the `note` array within the loops is a potential bottleneck due to the high number of iterations, especially since `note` is sorted and the `upper_bound` is frequently accessed.

3. **Loop Structure and Slow Input Characteristics:**
   - The loops are highly dependent on the values in the `ary` and `note` arrays. Given the constraints and operations, the primary issue lies within the nested loops and the repeated use of binary search (`upper_bound`), which can become costly, especially if there are many repetitive checks or if the conditions triggering early exits (like `break` on **line 41**) are not frequently met.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some performance-characterizing invariants in natural language:

1. **Invariant: High Repetition in Binary Search Within Nested Loops**
   - **Description:** "If the nested loops responsible for checking fret ranges execute many iterations due to minimal early exits from the loop, resulting in repeated binary search operations, the program may slow down significantly. This is likely when many notes create equivalent fret positions across strings, forcing extensive checks without resolution."
   
2. **Invariant: Large Number of Notes with Similar Values**
   - **Description:** "When the notes to be played are densely packed with similar or repeated values, the algorithm might repeatedly attempt to fit notes in suboptimal fret ranges, triggering excessive iterations and binary searches."
   
3. **Invariant: Insufficient Range Reduction in Binary Search**
   - **Description:** "If the range reduction within the binary search loop is inefficient due to many notes fitting suboptimally across available frets, the search may persistently operate over large ranges, leading to slow execution."
   
By focusing on these invariants, you can target scenarios where the algorithm's complexity can degrade due to inputs that tightly pack notes or when the checks within loops fail to break early due to ineffective range checks. These characteristics are crucial for efficiently handling up to the problem's constraints of n ≤ 100,000 notes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After battling Shikamaru, Tayuya decided that her flute is too predictable, and replaced it with a guitar. The guitar has 6 strings and an infinite number of frets numbered from 1. Fretting the fret number j on the i-th string produces the note a_{i} + j.

Tayuya wants to play a melody of n notes. Each note can be played on different string-fret combination. The easiness of performance depends on the difference between the maximal and the minimal indices of used frets. The less this difference is, the easier it is to perform the technique. Please determine the minimal possible difference.

For example, if a = [1, 1, 2, 2, 3, 3], and the sequence of notes is 4, 11, 11, 12, 12, 13, 13 (corresponding to the second example), we can play the first note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7, as shown on the picture.

<image>

Input

The first line contains 6 space-separated numbers a_{1}, a_{2}, ..., a_{6} (1 ≤ a_{i} ≤ 10^{9}) which describe the Tayuya's strings.

The second line contains the only integer n (1 ≤ n ≤ 100 000) standing for the number of notes in the melody.

The third line consists of n integers b_{1}, b_{2}, ..., b_{n} (1 ≤ b_{i} ≤ 10^{9}), separated by space. They describe the notes to be played. It's guaranteed that b_i > a_j for all 1≤ i≤ n and 1≤ j≤ 6, in other words, you can play each note on any string.

Output

Print the minimal possible difference of the maximal and the minimal indices of used frets.

Examples

Input


1 4 100 10 30 5
6
101 104 105 110 130 200


Output


0


Input


1 1 2 2 3 3
7
13 4 11 12 11 13 12


Output


7

Note

In the first sample test it is optimal to play the first note on the first string, the second note on the second string, the third note on the sixth string, the fourth note on the fourth string, the fifth note on the fifth string, and the sixth note on the third string. In this case the 100-th fret is used each time, so the difference is 100 - 100 = 0.

<image>

In the second test it's optimal, for example, to play the second note on the first string, and all the other notes on the sixth string. Then the maximal fret will be 10, the minimal one will be 3, and the answer is 10 - 3 = 7.

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Here are the C++ checker functions based on the performance-characterizing invariants discussed:

1. **Checker for High Repetition in Binary Search Within Nested Loops:**
   ```cpp
   void check_binary_search_repetition(int loopCount, int threshold) {
       if (loopCount > threshold) {
           cerr << "Warning: Performance bottleneck due to excessive binary search repetitions!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Large Number of Notes with Similar Values:**
   ```cpp
   void check_similar_notes(int similarCount, int threshold) {
       if (similarCount >= threshold) {
           cerr << "Warning: Performance bottleneck due to large number of similar note values!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Insufficient Range Reduction in Binary Search:**
   ```cpp
   void check_inefficient_range_reduction(int rangeSize, int threshold) {
       if (rangeSize > threshold) {
           cerr << "Warning: Performance bottleneck due to inefficient range reduction in binary search!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers with the Original Program

Here is the original C++ code instrumented with these performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5, inf = 1e9;

// Checker functions
void check_binary_search_repetition(int loopCount, int threshold) {
    if (loopCount > threshold) {
        cerr << "Warning: Performance bottleneck due to excessive binary search repetitions!" << endl;
        abort();
    }
}

void check_similar_notes(int similarCount, int threshold) {
    if (similarCount >= threshold) {
        cerr << "Warning: Performance bottleneck due to large number of similar note values!" << endl;
        abort();
    }
}

void check_inefficient_range_reduction(int rangeSize, int threshold) {
    if (rangeSize > threshold) {
        cerr << "Warning: Performance bottleneck due to inefficient range reduction in binary search!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n = 6;
    int ary[n];
    for (int i = 0; i < n; ++i) {
        cin >> ary[i];
    }
    sort(ary, ary + n);

    int m;
    cin >> m;
    vector<int> note;
    for (int i = 0; i < m; ++i) {
        int a;
        cin >> a;
        note.push_back(a);
    }
    sort(note.begin(), note.end());

    // Check for large number of similar notes
    int similarNoteCount = 0, prevNote = -1;
    for (int i = 0; i < m; ++i) {
        if (note[i] == prevNote) {
            similarNoteCount++;
        } else {
            similarNoteCount = 0;
            prevNote = note[i];
        }
        check_similar_notes(similarNoteCount, 5); // Assuming threshold for similar notes
    }

    int ans = inf + 10;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            int mn = note[j] - ary[i];
            int lo = 0;
            int hi = 1e9;
            int binarySearchLoopCount = 0;
            while (hi > lo) {
                binarySearchLoopCount++;
                check_binary_search_repetition(binarySearchLoopCount, 1000); // Check binary search repetition count

                int mid = (hi + lo) / 2;
                int curl = 0;
                int curh = 0;
                int f = 0;
                for (int k = 0; k < n; ++k) {
                    int l = ary[k] + mn;
                    int h = l + mid;
                    if (l > curh) {
                        auto it = upper_bound(note.begin(), note.end(), curh);
                        if (it != note.end() && (*it) < l) {
                            f = 1;
                            break;
                        }
                        curl = l;
                        curh = h;
                    } else {
                        curh = h;
                    }
                }
                auto it = upper_bound(note.begin(), note.end(), curh);
                if (it != note.end()) {
                    f = 1;
                }
                if (f != 1) {
                    hi = mid;
                } else {
                    lo = mid + 1;
                }
                
                // Check inefficient range reduction
                check_inefficient_range_reduction(hi - lo, 10000); // Assuming threshold for inefficient range reduction
            }
            ans = min(ans, lo);
        }
    }
    cout << ans << "\n";
    return 0;
}
```

### Explanation

- **`check_similar_notes`**: This function checks for a large number of consecutive similar notes. It's called after reading and sorting the notes to detect potential performance issues due to repetition.
- **`check_binary_search_repetition`**: This function monitors excessive iterations within the binary search loop, which could lead to performance degradation.
- **`check_inefficient_range_reduction`**: This function checks inefficient range reduction within the binary search, ensuring that the range shrinks effectively.

