system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

If the girl doesn't go to Denis, then Denis will go to the girl. Using this rule, the young man left home, bought flowers and went to Nastya. 

On the way from Denis's house to the girl's house is a road of n lines. This road can't be always crossed in one green light. Foreseeing this, the good mayor decided to place safety islands in some parts of the road. Each safety island is located after a line, as well as at the beginning and at the end of the road. Pedestrians can relax on them, gain strength and wait for a green light.

Denis came to the edge of the road exactly at the moment when the green light turned on. The boy knows that the traffic light first lights up g seconds green, and then r seconds red, then again g seconds green and so on.

Formally, the road can be represented as a segment [0, n]. Initially, Denis is at point 0. His task is to get to point n in the shortest possible time.

He knows many different integers d_1, d_2, …, d_m, where 0 ≤ d_i ≤ n — are the coordinates of points, in which the safety islands are located. Only at one of these points, the boy can be at a time when the red light is on.

Unfortunately, Denis isn't always able to control himself because of the excitement, so some restrictions are imposed:

  * He must always move while the green light is on because it's difficult to stand when so beautiful girl is waiting for you. Denis can change his position by ± 1 in 1 second. While doing so, he must always stay inside the segment [0, n]. 
  * He can change his direction only on the safety islands (because it is safe). This means that if in the previous second the boy changed his position by +1 and he walked on a safety island, then he can change his position by ± 1. Otherwise, he can change his position only by +1. Similarly, if in the previous second he changed his position by -1, on a safety island he can change position by ± 1, and at any other point by -1. 
  * At the moment when the red light is on, the boy must be on one of the safety islands. He can continue moving in any direction when the green light is on. 



Denis has crossed the road as soon as his coordinate becomes equal to n.

This task was not so simple, because it's possible that it is impossible to cross the road. Since Denis has all thoughts about his love, he couldn't solve this problem and asked us to help him. Find the minimal possible time for which he can cross the road according to these rules, or find that it is impossible to do.

Input

The first line contains two integers n and m (1 ≤ n ≤ 10^6, 2 ≤ m ≤ min(n + 1, 10^4)) — road width and the number of safety islands.

The second line contains m distinct integers d_1, d_2, …, d_m (0 ≤ d_i ≤ n) — the points where the safety islands are located. It is guaranteed that there are 0 and n among them.

The third line contains two integers g, r (1 ≤ g, r ≤ 1000) — the time that the green light stays on and the time that the red light stays on.

Output

Output a single integer — the minimum time for which Denis can cross the road with obeying all the rules.

If it is impossible to cross the road output -1.

Examples

Input


15 5
0 3 7 14 15
11 11


Output


45

Input


13 4
0 3 7 13
9 9


Output


-1

Note

In the first test, the optimal route is: 

  * for the first green light, go to 7 and return to 3. In this case, we will change the direction of movement at the point 7, which is allowed, since there is a safety island at this point. In the end, we will be at the point of 3, where there is also a safety island. The next 11 seconds we have to wait for the red light. 
  * for the second green light reaches 14. Wait for the red light again. 
  * for 1 second go to 15. As a result, Denis is at the end of the road. 



In total, 45 seconds are obtained.

In the second test, it is impossible to cross the road according to all the rules.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e4 + 5;
int n, m, d[N], g, r, dd[N][1005];
long long f[N][1005];
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>
    h;
void add(int i, int j, int val) {
  if (f[i][j] > val) {
    f[i][j] = val;
    if (!dd[i][j]) {
      dd[i][j] = 1;
      h.push(make_pair(i, j));
    }
  }
}
void dijkstra() {
  f[1][0] = 0;
  dd[0][1] = 1;
  h.push(make_pair(1, 0));
  while (h.size()) {
    int u, i;
    tie(u, i) = h.top();
    h.pop();
    long long w = f[u][i];
    dd[u][i] = 0;
    if (i == g) add(u, 0, r + w);
    if (u > 1) {
      int j = i + d[u] - d[u - 1];
      if (j <= g) add(u - 1, j, w + d[u] - d[u - 1]);
    }
    if (u < m) {
      int j = i + d[u + 1] - d[u];
      if (j <= g) add(u + 1, j, w + d[u + 1] - d[u]);
    }
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> m;
  for (int i = 1; i <= m; ++i) cin >> d[i];
  cin >> g >> r;
  sort(d + 1, d + m + 1);
  memset(f, 127, sizeof(f));
  dijkstra();
  long long ans = f[0][0];
  for (int i = 0; i <= 1000; ++i) ans = min(ans, f[m][i]);
  if (ans >= f[0][0]) ans = -1;
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 5
3 100 7 13 0
99 5


(G.2) Fast Input

100 5
2 101 7 13 0
5 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e4 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, d[N], g, r, dd[N][1005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long f[N][1005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    h; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void add(int i, int j, int val) { /* line 8 slow_hit_count: 541, fast_hit_count: 2 */
  if (f[i][j] > val) { /* line 9 slow_hit_count: 541, fast_hit_count: 2 */
    f[i][j] = val; /* line 10 slow_hit_count: 373, fast_hit_count: 2 */
    if (!dd[i][j]) { /* line 11 slow_hit_count: 373, fast_hit_count: 2 */
      dd[i][j] = 1; /* line 12 slow_hit_count: 373, fast_hit_count: 2 */
      h.push(make_pair(i, j)); /* line 13 slow_hit_count: 373, fast_hit_count: 2 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 541, fast_hit_count: 2 */
void dijkstra() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  f[1][0] = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  dd[0][1] = 1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  h.push(make_pair(1, 0)); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  while (h.size()) { /* line 21 slow_hit_count: 375, fast_hit_count: 4 */
    int u, i; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    tie(u, i) = h.top(); /* line 23 slow_hit_count: 374, fast_hit_count: 3 */
    h.pop(); /* line 24 slow_hit_count: 374, fast_hit_count: 3 */
    long long w = f[u][i]; /* line 25 slow_hit_count: 374, fast_hit_count: 3 */
    dd[u][i] = 0; /* line 26 slow_hit_count: 374, fast_hit_count: 3 */
    if (i == g) add(u, 0, r + w); /* line 27 slow_hit_count: 374, fast_hit_count: 3 */
    if (u > 1) { /* line 28 slow_hit_count: 374, fast_hit_count: 3 */
      int j = i + d[u] - d[u - 1]; /* line 29 slow_hit_count: 281, fast_hit_count: 1 */
      if (j <= g) add(u - 1, j, w + d[u] - d[u - 1]); /* line 30 slow_hit_count: 281, fast_hit_count: 1 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    if (u < m) { /* line 32 slow_hit_count: 374, fast_hit_count: 3 */
      int j = i + d[u + 1] - d[u]; /* line 33 slow_hit_count: 369, fast_hit_count: 3 */
      if (j <= g) add(u + 1, j, w + d[u + 1] - d[u]); /* line 34 slow_hit_count: 369, fast_hit_count: 3 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; ++i) cin >> d[i]; /* line 43 slow_hit_count: 6, fast_hit_count: 6 */
  cin >> g >> r; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  sort(d + 1, d + m + 1); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  memset(f, 127, sizeof(f)); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  dijkstra(); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = f[0][0]; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 1000; ++i) ans = min(ans, f[m][i]); /* line 49 slow_hit_count: 1002, fast_hit_count: 1002 */
  if (ans >= f[0][0]) ans = -1; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Let's analyze the given C code and its performance for the slow and fast inputs. We need to understand why the slow input takes significantly longer to run and identify performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The function `add(int i, int j, int val)` is called 541 times for the slow input, compared to only 2 times for the fast input. This suggests that `add` is a critical function contributing to the slowdown.
   - The `while` loop in `dijkstra()` (`line 21`) executes 375 times for the slow input, but only 4 times for the fast input. This indicates a significantly larger number of iterations for the slow input.
   - Lines involving `h.pop()`, `tie(u, i) = h.top()`, and `long long w = f[u][i]` within the `while` loop are hit 374 times for the slow input versus 3 times for the fast input.

2. **Interaction with Data Structures**:
   - The priority queue `h` is used extensively, with operations on it (like `h.push()` and `h.pop()`). The large number of elements or inefficient handling of the queue could contribute to performance issues.
   - The `add` function checks and updates the `f` array, which tracks costs or distances. Frequent updates indicate complex cost propagation or state exploration.
   
3. **Variables of Interest**:
   - The variables `g` (green light duration) and `r` (red light duration) are critical. The line `if (i == g) add(u, 0, r + w);` suggests that the green light cycle length is tied to path decisions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Green Light Alignment**:
   - **Natural Language Description**: "When the green light duration closely matches the distance between safety islands, causing frequent stops at red lights, the program may explore multiple paths and slow down."
   - **Explanation**: If the time `g` aligns with distances such that Denis frequently reaches an island just as the green light ends, it may cause increased exploration to find alternative routes.

2. **Invariant 2: Priority Queue Exploitation**:
   - **Natural Language Description**: "Excessive priority queue operations occur when there are many alternative paths due to evenly distributed safety islands, leading to performance degradation."
   - **Explanation**: A balance between green and red light durations and distances between safety islands can lead to numerous viable paths, filling the priority queue with many nodes to explore.

3. **Invariant 3: Safety Island Distribution**:
   - **Natural Language Description**: "A dense cluster of safety islands or evenly distributed distances may increase state transitions and decision points, slowing down computation."
   - **Explanation**: When islands are too close or uniformly spread, the decision space expands, causing more combinations of paths to be considered.

4. **Invariant 4: Red Light Waits**:
   - **Natural Language Description**: "If the time spent waiting on red lights accumulates due to poor alignment with reachable islands, the overall time can be significantly prolonged."
   - **Explanation**: The inefficiency increases if Denis repeatedly reaches an island just as the green light ends, forcing him to wait.

These invariants help identify conditions that can lead to slow performance and assist in optimizing the code or understanding problem constraints. They also guide testing and fuzzing strategies by highlighting scenarios that stress the code's performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
If the girl doesn't go to Denis, then Denis will go to the girl. Using this rule, the young man left home, bought flowers and went to Nastya. 

On the way from Denis's house to the girl's house is a road of n lines. This road can't be always crossed in one green light. Foreseeing this, the good mayor decided to place safety islands in some parts of the road. Each safety island is located after a line, as well as at the beginning and at the end of the road. Pedestrians can relax on them, gain strength and wait for a green light.

Denis came to the edge of the road exactly at the moment when the green light turned on. The boy knows that the traffic light first lights up g seconds green, and then r seconds red, then again g seconds green and so on.

Formally, the road can be represented as a segment [0, n]. Initially, Denis is at point 0. His task is to get to point n in the shortest possible time.

He knows many different integers d_1, d_2, …, d_m, where 0 ≤ d_i ≤ n — are the coordinates of points, in which the safety islands are located. Only at one of these points, the boy can be at a time when the red light is on.

Unfortunately, Denis isn't always able to control himself because of the excitement, so some restrictions are imposed:

  * He must always move while the green light is on because it's difficult to stand when so beautiful girl is waiting for you. Denis can change his position by ± 1 in 1 second. While doing so, he must always stay inside the segment [0, n]. 
  * He can change his direction only on the safety islands (because it is safe). This means that if in the previous second the boy changed his position by +1 and he walked on a safety island, then he can change his position by ± 1. Otherwise, he can change his position only by +1. Similarly, if in the previous second he changed his position by -1, on a safety island he can change position by ± 1, and at any other point by -1. 
  * At the moment when the red light is on, the boy must be on one of the safety islands. He can continue moving in any direction when the green light is on. 



Denis has crossed the road as soon as his coordinate becomes equal to n.

This task was not so simple, because it's possible that it is impossible to cross the road. Since Denis has all thoughts about his love, he couldn't solve this problem and asked us to help him. Find the minimal possible time for which he can cross the road according to these rules, or find that it is impossible to do.

Input

The first line contains two integers n and m (1 ≤ n ≤ 10^6, 2 ≤ m ≤ min(n + 1, 10^4)) — road width and the number of safety islands.

The second line contains m distinct integers d_1, d_2, …, d_m (0 ≤ d_i ≤ n) — the points where the safety islands are located. It is guaranteed that there are 0 and n among them.

The third line contains two integers g, r (1 ≤ g, r ≤ 1000) — the time that the green light stays on and the time that the red light stays on.

Output

Output a single integer — the minimum time for which Denis can cross the road with obeying all the rules.

If it is impossible to cross the road output -1.

Examples

Input


15 5
0 3 7 14 15
11 11


Output


45

Input


13 4
0 3 7 13
9 9


Output


-1

Note

In the first test, the optimal route is: 

  * for the first green light, go to 7 and return to 3. In this case, we will change the direction of movement at the point 7, which is allowed, since there is a safety island at this point. In the end, we will be at the point of 3, where there is also a safety island. The next 11 seconds we have to wait for the red light. 
  * for the second green light reaches 14. Wait for the red light again. 
  * for 1 second go to 15. As a result, Denis is at the end of the road. 



In total, 45 seconds are obtained.

In the second test, it is impossible to cross the road according to all the rules.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Below are the C++ code snippets to check each performance-characterizing invariant derived from the natural language explanations.

1. **Invariant 1: Green Light Alignment**
   - This invariant checks if the green light duration `g` closely matches the distances between safety islands, causing frequent stops.
   
   ```cpp
   void check_green_light_alignment(int g, const vector<int>& d) {
       for (size_t i = 1; i < d.size(); ++i) {
           if (g == (d[i] - d[i - 1])) {
               cerr << "Warning: Performance bottleneck condition triggered - green light matches island distances!" << endl;
               abort();
           }
       }
   }
   ```

2. **Invariant 2: Priority Queue Exploitation**
   - This invariant checks for excessive operations on the priority queue, which may happen with many alternative paths due to evenly distributed safety islands.
   
   ```cpp
   void check_priority_queue_operations(int qSize, int threshold) {
       if (qSize > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive priority queue operations!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Safety Island Distribution**
   - This invariant checks for dense clusters or evenly distributed safety islands, which may increase state transitions.
   
   ```cpp
   void check_safety_island_distribution(const vector<int>& d, int n) {
       int islandCount = d.size();
       if (islandCount > n / 2) {  // Arbitrary threshold for dense distribution
           cerr << "Warning: Performance bottleneck condition triggered - dense or even distribution of safety islands!" << endl;
           abort();
       }
   }
   ```

4. **Invariant 4: Red Light Waits**
   - This invariant checks for scenarios where the required waiting time at red lights accumulates.
   
   ```cpp
   void check_red_light_waits(int totalRedLightTime, int threshold) {
       if (totalRedLightTime > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive waiting at red lights!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers Into the Original C++ Program

Here's the full C++ program with the integrated checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e4 + 5;
int n, m, d[N], g, r, dd[N][1005];
long long f[N][1005];
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> h;

// Checker functions
void check_green_light_alignment(int g, const vector<int>& d) {
    for (size_t i = 1; i < d.size(); ++i) {
        if (g == (d[i] - d[i - 1])) {
            cerr << "Warning: Performance bottleneck condition triggered - green light matches island distances!" << endl;
            abort();
        }
    }
}

void check_priority_queue_operations(int qSize, int threshold) {
    if (qSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive priority queue operations!" << endl;
        abort();
    }
}

void check_safety_island_distribution(const vector<int>& d, int n) {
    int islandCount = d.size();
    if (islandCount > n / 2) {  // Arbitrary threshold for dense distribution
        cerr << "Warning: Performance bottleneck condition triggered - dense or even distribution of safety islands!" << endl;
        abort();
    }
}

void check_red_light_waits(int totalRedLightTime, int threshold) {
    if (totalRedLightTime > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive waiting at red lights!" << endl;
        abort();
    }
}

void add(int i, int j, int val) {
    if (f[i][j] > val) {
        f[i][j] = val;
        if (!dd[i][j]) {
            dd[i][j] = 1;
            h.push(make_pair(i, j));
        }
    }
}

void dijkstra() {
    f[1][0] = 0;
    dd[0][1] = 1;
    h.push(make_pair(1, 0));
    while (h.size()) {
        int u, i;
        tie(u, i) = h.top();
        h.pop();
        long long w = f[u][i];
        dd[u][i] = 0;
        if (i == g) add(u, 0, r + w);
        if (u > 1) {
            int j = i + d[u] - d[u - 1];
            if (j <= g) add(u - 1, j, w + d[u] - d[u - 1]);
        }
        if (u < m) {
            int j = i + d[u + 1] - d[u];
            if (j <= g) add(u + 1, j, w + d[u + 1] - d[u]);
        }
        check_priority_queue_operations(h.size(), 500);  // Threshold for queue size
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    
    vector<int> safetyIslands(m);
    for (int i = 1; i <= m; ++i) cin >> d[i];
    for (int i = 0; i < m; ++i) safetyIslands[i] = d[i];  // Copy to vector for checker
    
    cin >> g >> r;
    sort(d + 1, d + m + 1);
    memset(f, 127, sizeof(f));
    
    check_green_light_alignment(g, safetyIslands);
    check_safety_island_distribution(safetyIslands, n);
    
    dijkstra();
    
    long long ans = f[0][0];
    for (int i = 0; i <= 1000; ++i) ans = min(ans, f[m][i]);
    if (ans >= f[0][0]) ans = -1;
    cout << ans;
}
```

### Explanation of Inserted Checks:
1. **`check_green_light_alignment`**: Checks if `g` matches the distance between consecutive safety islands to warn about potential slowdowns due to frequent stops.
2. **`check_priority_queue_operations`**: Monitors the size of the priority queue during `dijkstra` to detect excessive operations.
3. **`check_safety_island_distribution`**: Ensures that the number of islands doesn't exceed a threshold, suggesting dense or even distribution.
4. **`check_red_light_waits`**: This specific check was not inserted directly as the total red light time isn't calculated in the provided program snippet, but can be added after each `dijkstra` call if this metric becomes available.

By integrating these checks, the program can now detect potential performance bottlenecks during execution, assisting in debugging and optimization efforts.

