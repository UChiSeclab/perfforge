system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.

Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).

<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.

The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.

Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.

Input

The first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.

The i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.

Output

In the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.

Examples

Input


5 7
2 4
5 1
2 3
3 4
4 1
5 3
3 5


Output


10 9 10 10 9 


Input


2 3
1 2
1 2
1 2


Output


5 6 

Note

Consider the second sample.

If the train started at station 1, the optimal strategy is as follows.

  1. Load the first candy onto the train. 
  2. Proceed to station 2. This step takes 1 second. 
  3. Deliver the first candy. 
  4. Proceed to station 1. This step takes 1 second. 
  5. Load the second candy onto the train. 
  6. Proceed to station 2. This step takes 1 second. 
  7. Deliver the second candy. 
  8. Proceed to station 1. This step takes 1 second. 
  9. Load the third candy onto the train. 
  10. Proceed to station 2. This step takes 1 second. 
  11. Deliver the third candy. 



Hence, the train needs 5 seconds to complete the tasks.

If the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dist(int a, int b, int n) {
  if (a <= b) return b - a;
  return b + n - a;
}
int main() {
  int n, m, i, a, b;
  cin >> n;
  cin >> m;
  int mini[n], nume[n];
  for (i = 0; i < n; i++) {
    mini[i] = n + 3;
    nume[i] = 0;
  }
  for (i = 0; i < m; i++) {
    cin >> a;
    cin >> b;
    a--;
    b--;
    nume[a]++;
    if (dist(a, b, n) < mini[a]) mini[a] = dist(a, b, n);
  }
  for (i = 0; i < n; i++) {
    a = 0;
    for (b = 0; b < n; b++) {
      if ((n * (nume[b] - 1) + mini[b] + dist(i, b, n) > a) && (nume[b] != 0)) {
        a = n * (nume[b] - 1) + mini[b] + dist(i, b, n);
      }
    }
    cout << a << " ";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

110 1
2 75


(G.2) Fast Input

3 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dist(int a, int b, int n) { /* line 3 slow_hit_count: 12212, fast_hit_count: 14 */
  if (a <= b) return b - a; /* line 4 slow_hit_count: 12212, fast_hit_count: 14 */
  return b + n - a; /* line 5 slow_hit_count: 6103, fast_hit_count: 5 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, i, a, b; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> m; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int mini[n], nume[n]; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 12 slow_hit_count: 111, fast_hit_count: 4 */
    mini[i] = n + 3; /* line 13 slow_hit_count: 110, fast_hit_count: 3 */
    nume[i] = 0; /* line 14 slow_hit_count: 110, fast_hit_count: 3 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < m; i++) { /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> a; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> b; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    a--; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    b--; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    nume[a]++; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    if (dist(a, b, n) < mini[a]) mini[a] = dist(a, b, n); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < n; i++) { /* line 24 slow_hit_count: 111, fast_hit_count: 4 */
    a = 0; /* line 25 slow_hit_count: 110, fast_hit_count: 3 */
    for (b = 0; b < n; b++) { /* line 26 slow_hit_count: 12210, fast_hit_count: 12 */
      if ((n * (nume[b] - 1) + mini[b] + dist(i, b, n) > a) && (nume[b] != 0)) { /* line 27 slow_hit_count: 12100, fast_hit_count: 9 */
        a = n * (nume[b] - 1) + mini[b] + dist(i, b, n); /* line 28 slow_hit_count: 110, fast_hit_count: 3 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    cout << a << " "; /* line 31 slow_hit_count: 110, fast_hit_count: 3 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 33 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit counts:

1. **Function `dist(int a, int b, int n)`**:
   - Lines 3, 4, and 5 show significant hit counts during the slow input. This indicates that the function `dist` is being heavily called, which suggests that calculating the distance between stations is a performance bottleneck.

2. **Outer Loop (lines 24-31)**:
   - Lines 24 and 26 are hit many times, indicating that the nested loop over stations is a critical part of the slow execution. The inner loop (line 26) operates `n` times for each station, leading to `n^2` overall hits.

3. **Conditional and Calculation inside Inner Loop (lines 27-28)**:
   - Line 27's heavy hit count suggests that the condition is frequently true, which results in frequent updates to the variable `a` in line 28. This implies that the calculation in line 28 is being executed often, leading to performance issues.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants in natural language:

1. **Frequent Distance Calculations**:
   - **Invariant**: "If the number of candies is large relative to the number of stations, with each candy having a unique source and destination, then calculating distances between stations frequently can slow down the program."
   - **Explanation**: This often results in excessive calls to the `dist` function, especially when the train needs to calculate the circular distance for numerous station pairs.

2. **High Iteration Count in Nested Loops**:
   - **Invariant**: "When `n` is large, especially close to its upper constraint, the combination of two nested loops iterating over stations can lead to significant slowdowns."
   - **Explanation**: Given `n` stations, the outer loop runs `n` times, and the inner loop runs `n` times for each iteration of the outer loop. This results in `n^2` operations, which can be expensive as `n` approaches its upper limit.

3. **Conditional with Frequent True Evaluation**:
   - **Invariant**: "If candies are distributed in such a way that many station pairs have candies needing delivery, the program will frequently evaluate and execute the conditional logic to update delivery times, causing slowdowns."
   - **Explanation**: The condition in line 27 often evaluates to true, implying many calculations and updates, especially with a high number of candies and varied destinations.

These invariants capture broader scenarios that can trigger slow performance without relying on specific values from the slow input, while respecting the problem's constraints (e.g., `n <= 5000`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.

Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).

<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.

The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.

Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.

Input

The first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.

The i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.

Output

In the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.

Examples

Input


5 7
2 4
5 1
2 3
3 4
4 1
5 3
3 5


Output


10 9 10 10 9 


Input


2 3
1 2
1 2
1 2


Output


5 6 

Note

Consider the second sample.

If the train started at station 1, the optimal strategy is as follows.

  1. Load the first candy onto the train. 
  2. Proceed to station 2. This step takes 1 second. 
  3. Deliver the first candy. 
  4. Proceed to station 1. This step takes 1 second. 
  5. Load the second candy onto the train. 
  6. Proceed to station 2. This step takes 1 second. 
  7. Deliver the second candy. 
  8. Proceed to station 1. This step takes 1 second. 
  9. Load the third candy onto the train. 
  10. Proceed to station 2. This step takes 1 second. 
  11. Deliver the third candy. 



Hence, the train needs 5 seconds to complete the tasks.

If the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as C++ Checker Functions

Based on the previously derived invariants, here are the corresponding runtime checks implemented in C++:

1. **Frequent Distance Calculations**:
   ```cpp
   void check_distance_calculations_invariant(int n, int m) {
       if (m > n * 5) { // Arbitrary threshold: many candies relative to stations
           cerr << "Warning: Performance bottleneck condition triggered - Excessive distance calculations!" << endl;
           abort();
       }
   }
   ```

2. **High Iteration Count in Nested Loops**:
   ```cpp
   void check_nested_loop_invariant(int n) {
       if (n > 3000) { // Threshold based on upper bound, considering n^2 operations
           cerr << "Warning: Performance bottleneck condition triggered - High iteration count in nested loops!" << endl;
           abort();
       }
   }
   ```

3. **Conditional with Frequent True Evaluation**:
   ```cpp
   void check_frequent_conditional_invariant(int numOfCandies, int numOfStations) {
       if (numOfCandies > numOfStations * 10) { // Estimating condition frequency
           cerr << "Warning: Performance bottleneck condition triggered - Frequent conditional evaluations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Functions into the Original C++ Program

Here's the updated C++ program with the checker functions integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

int dist(int a, int b, int n) {
    if (a <= b) return b - a;
    return b + n - a;
}

// Checker functions
void check_distance_calculations_invariant(int n, int m) {
    if (m > n * 5) { // Arbitrary threshold: many candies relative to stations
        cerr << "Warning: Performance bottleneck condition triggered - Excessive distance calculations!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int n) {
    if (n > 3000) { // Threshold based on upper bound, considering n^2 operations
        cerr << "Warning: Performance bottleneck condition triggered - High iteration count in nested loops!" << endl;
        abort();
    }
}

void check_frequent_conditional_invariant(int numOfCandies, int numOfStations) {
    if (numOfCandies > numOfStations * 10) { // Estimating condition frequency
        cerr << "Warning: Performance bottleneck condition triggered - Frequent conditional evaluations!" << endl;
        abort();
    }
}

int main() {
    int n, m, i, a, b;
    cin >> n >> m;

    // Insert checkers after input
    check_distance_calculations_invariant(n, m);
    check_nested_loop_invariant(n);
    check_frequent_conditional_invariant(m, n);

    int mini[n], nume[n];
    for (i = 0; i < n; i++) {
        mini[i] = n + 3;
        nume[i] = 0;
    }

    for (i = 0; i < m; i++) {
        cin >> a >> b;
        a--;
        b--;
        nume[a]++;
        if (dist(a, b, n) < mini[a]) mini[a] = dist(a, b, n);
    }

    for (i = 0; i < n; i++) {
        a = 0;
        for (b = 0; b < n; b++) {
            if ((n * (nume[b] - 1) + mini[b] + dist(i, b, n) > a) && (nume[b] != 0)) {
                a = n * (nume[b] - 1) + mini[b] + dist(i, b, n);
            }
        }
        cout << a << " ";
    }
    return 0;
}
```

### Explanation 

- **Checker Function Placement**: The checks are inserted right after reading the inputs to ensure they capture potential performance bottlenecks early without impacting the main computation loops.
- **Thresholds**: The thresholds in the checkers are chosen based on problem constraints and estimated load to prevent unnecessary aborts during normal operation while capturing potential performance issues.
- **Warnings**: Each checker provides a clear warning message to help diagnose which part of the program logic triggered the performance issue.

