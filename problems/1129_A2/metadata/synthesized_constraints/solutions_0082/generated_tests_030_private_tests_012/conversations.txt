system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.

Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).

<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.

The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.

Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.

Input

The first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.

The i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.

Output

In the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.

Examples

Input


5 7
2 4
5 1
2 3
3 4
4 1
5 3
3 5


Output


10 9 10 10 9 


Input


2 3
1 2
1 2
1 2


Output


5 6 

Note

Consider the second sample.

If the train started at station 1, the optimal strategy is as follows.

  1. Load the first candy onto the train. 
  2. Proceed to station 2. This step takes 1 second. 
  3. Deliver the first candy. 
  4. Proceed to station 1. This step takes 1 second. 
  5. Load the second candy onto the train. 
  6. Proceed to station 2. This step takes 1 second. 
  7. Deliver the second candy. 
  8. Proceed to station 1. This step takes 1 second. 
  9. Load the third candy onto the train. 
  10. Proceed to station 2. This step takes 1 second. 
  11. Deliver the third candy. 



Hence, the train needs 5 seconds to complete the tasks.

If the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 5100;
const long long mod = 1e9 + 7;
int n, m;
int dis(int x, int y) {
  if (y < x)
    return n - x + y;
  else
    return y - x;
}
vector<int> f[N];
int now;
int cmp(int a, int b) { return dis(now, a) >= dis(now, b); }
int head[N];
int fa[N];
int find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }
int base, cnt;
int pp[N], cp[N];
int main() {
  scanf("%d %d", &n, &m);
  for (int i = 1; i <= m; i++) {
    int x, y;
    scanf("%d %d", &x, &y);
    f[x].push_back(y);
  }
  int mx = 0;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < f[i].size(); j++) pp[f[i][j]]++;
    int now = i;
    f[i].clear();
    for (int j = 1; j <= n; j++) {
      while (pp[now]) f[i].push_back(now), pp[now]--;
      now = now + 1;
      if (now > n) now = 1;
    }
    reverse(f[i].begin(), f[i].end());
    mx = max(mx, (int)f[i].size());
  }
  mx = max(1, mx - 1);
  base = n * (mx - 1);
  for (int i = 1; i <= n; i++) {
    if (f[i].size() < mx)
      f[i].clear();
    else {
      int x = f[i][f[i].size() - 1];
      int ff = 0, y;
      if (f[i].size() == mx + 1) ff = 1, y = f[i][f[i].size() - 2];
      f[i].clear();
      if (ff) cnt++, f[i].push_back(y);
      f[i].push_back(x);
      cnt++;
    }
  }
  for (int i = 1; i <= n; i++) {
    now = i;
    for (int j = 1; j <= n; j++) pp[j] = cp[j] = 0;
    int ans = base;
    int tmp = cnt;
    while (tmp) {
      if (cp[now] < f[now].size()) pp[f[now][cp[now]]]++;
      cp[now]++;
      if (pp[now]) tmp -= pp[now], pp[now] = 0;
      now = now + 1;
      if (now > n) now = 1;
      ans++;
    }
    printf("%d", ans - 1);
    if (i != n)
      printf(" ");
    else
      printf("\n");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

110 1
2 75


(G.2) Fast Input

3 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dis(int x, int y) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  if (y < x) /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    return n - x + y; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    return y - x; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> f[N]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int now; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int cmp(int a, int b) { return dis(now, a) >= dis(now, b); } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int head[N]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int fa[N]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int base, cnt; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int pp[N], cp[N]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &m); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) { /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
    int x, y; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d", &x, &y); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    f[x].push_back(y); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  int mx = 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 28 slow_hit_count: 111, fast_hit_count: 4 */
    for (int j = 0; j < f[i].size(); j++) pp[f[i][j]]++; /* line 29 slow_hit_count: 111, fast_hit_count: 4 */
    int now = i; /* line 30 slow_hit_count: 110, fast_hit_count: 3 */
    f[i].clear(); /* line 31 slow_hit_count: 110, fast_hit_count: 3 */
    for (int j = 1; j <= n; j++) { /* line 32 slow_hit_count: 12210, fast_hit_count: 12 */
      while (pp[now]) f[i].push_back(now), pp[now]--; /* line 33 slow_hit_count: 12101, fast_hit_count: 10 */
      now = now + 1; /* line 34 slow_hit_count: 12100, fast_hit_count: 9 */
      if (now > n) now = 1; /* line 35 slow_hit_count: 12100, fast_hit_count: 9 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    reverse(f[i].begin(), f[i].end()); /* line 37 slow_hit_count: 110, fast_hit_count: 3 */
    mx = max(mx, (int)f[i].size()); /* line 38 slow_hit_count: 110, fast_hit_count: 3 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  mx = max(1, mx - 1); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  base = n * (mx - 1); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 42 slow_hit_count: 111, fast_hit_count: 4 */
    if (f[i].size() < mx) /* line 43 slow_hit_count: 110, fast_hit_count: 3 */
      f[i].clear(); /* line 44 slow_hit_count: 109, fast_hit_count: 2 */
    else { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      int x = f[i][f[i].size() - 1]; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
      int ff = 0, y; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
      if (f[i].size() == mx + 1) ff = 1, y = f[i][f[i].size() - 2]; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
      f[i].clear(); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
      if (ff) cnt++, f[i].push_back(y); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
      f[i].push_back(x); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
      cnt++; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 55 slow_hit_count: 111, fast_hit_count: 4 */
    now = i; /* line 56 slow_hit_count: 110, fast_hit_count: 3 */
    for (int j = 1; j <= n; j++) pp[j] = cp[j] = 0; /* line 57 slow_hit_count: 12210, fast_hit_count: 12 */
    int ans = base; /* line 58 slow_hit_count: 110, fast_hit_count: 3 */
    int tmp = cnt; /* line 59 slow_hit_count: 110, fast_hit_count: 3 */
    while (tmp) { /* line 60 slow_hit_count: 14245, fast_hit_count: 12 */
      if (cp[now] < f[now].size()) pp[f[now][cp[now]]]++; /* line 61 slow_hit_count: 14135, fast_hit_count: 9 */
      cp[now]++; /* line 62 slow_hit_count: 14135, fast_hit_count: 9 */
      if (pp[now]) tmp -= pp[now], pp[now] = 0; /* line 63 slow_hit_count: 14135, fast_hit_count: 9 */
      now = now + 1; /* line 64 slow_hit_count: 14135, fast_hit_count: 9 */
      if (now > n) now = 1; /* line 65 slow_hit_count: 14135, fast_hit_count: 9 */
      ans++; /* line 66 slow_hit_count: 14135, fast_hit_count: 9 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d", ans - 1); /* line 68 slow_hit_count: 110, fast_hit_count: 3 */
    if (i != n) /* line 69 slow_hit_count: 110, fast_hit_count: 3 */
      printf(" "); /* line 70 slow_hit_count: 109, fast_hit_count: 2 */
    else /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
      printf("\n"); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 75 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks and derive performance-characterizing invariants, let's go through the phases as described:

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided line-level hit counts:

1. **Expensive Code Segments**:
   - **Lines 28-38**: The loop iterating over each station and processing candies (`for (int i = 1; i <= n; i++)` and its body) has significantly higher hit counts in the slow input, especially the nested loop at line 32 (`for (int j = 1; j <= n; j++)`), and line 33 (`while (pp[now])`).
   - **Lines 55-66**: Another loop similar in nature to the previous one, but this one calculates delivery times for each station. The `while (tmp)` loop in line 60 and its body are especially hit more often in the slow input.

2. **Potential Cause of Performance Issues**:
   - The use of nested loops iterating over stations and candies, especially when combined with operations like `f[i].push_back(now)` and `while (pp[now])`, suggests that a significant number of operations are being repeated, causing the slowdown.
   - Operations on vectors and repeated circular iterations (like those in the `while (tmp)` loop) contribute mainly to the increased execution time.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the conditions under which the program is likely to enter a slow path:

1. **Circular Iterations and Data Structure Size**:
   - **Natural Language Invariant**: "If the number of stations `n` is large and there are many candies to process, the nested loops iterating over stations may lead to excessive operations, especially when recalculating paths or clearing/adding elements to vectors. This is exacerbated by the nested circular nature of station iteration."

2. **Repeated Operations on Vectors**:
   - **Natural Language Invariant**: "When the vector operations, especially with `f[i]`, are performed repeatedly across all stations, and there are many candies with destinations far from their starting positions, the program's performance may degrade. This effect is magnified in scenarios with high `m`, the number of candies."

3. **High Contention at Specific Stations**:
   - **Natural Language Invariant**: "If there is a significant imbalance in the distribution of candies across stations (many candies starting from just a few stations), the loops processing these stations will have increased iterations, slowing the execution."

These invariants aim to capture the scenarios causing performance bottlenecks, with thresholds tied to the problem constraints (e.g., large `n` close to 5000 or many candies `m` close to 20000). The focus is on circular iterations, vector operations, and contention at stations, which are key contributors to the observed slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.

Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).

<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.

The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.

Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.

Input

The first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.

The i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.

Output

In the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.

Examples

Input


5 7
2 4
5 1
2 3
3 4
4 1
5 3
3 5


Output


10 9 10 10 9 


Input


2 3
1 2
1 2
1 2


Output


5 6 

Note

Consider the second sample.

If the train started at station 1, the optimal strategy is as follows.

  1. Load the first candy onto the train. 
  2. Proceed to station 2. This step takes 1 second. 
  3. Deliver the first candy. 
  4. Proceed to station 1. This step takes 1 second. 
  5. Load the second candy onto the train. 
  6. Proceed to station 2. This step takes 1 second. 
  7. Deliver the second candy. 
  8. Proceed to station 1. This step takes 1 second. 
  9. Load the third candy onto the train. 
  10. Proceed to station 2. This step takes 1 second. 
  11. Deliver the third candy. 



Hence, the train needs 5 seconds to complete the tasks.

If the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.

Solution (C++ code):
{solution}


assistant: To implement the performance-characterizing invariants into the C++ code, we will follow the described phases. Let's proceed step by step:

### Phase 3: Implementing Natural Language Invariants as Checker Code

Here are the C++ checkers for each of the identified natural language invariants:

1. **Circular Iterations and Data Structure Size Checker**:
   This checker will ensure that when `n` (number of stations) is large, and `m` (number of candies) is also high, we are aware of the potential slowdown due to excessive operations in nested loops.

```cpp
void check_circular_iteration_invariant(int n, int m) {
    if (n > 4000 && m > 15000) { // Example threshold values that can be adjusted
        cerr << "Warning: Performance bottleneck condition triggered due to large n and m!" << endl;
        abort();
    }
}
```

2. **Repeated Operations on Vectors Checker**:
   This checker will be used to monitor vector operations in nested loops. It should be triggered when the operations grow large in size or frequency.

```cpp
void check_vector_operation_invariant(const vector<int>& vec, int threshold) {
    if (vec.size() > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large vector operations!" << endl;
        abort();
    }
}
```

3. **High Contention at Specific Stations Checker**:
   This checker triggers when there is a significant imbalance in candy distribution across stations.

```cpp
void check_station_contention(const vector<int>& pp, int n) {
    int max_pp = *max_element(pp.begin(), pp.begin() + n);
    if (max_pp > n / 2) { // Example threshold where contention is high
        cerr << "Warning: Performance bottleneck condition triggered due to high contention at specific stations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code into the Original Program

Next, let's integrate these checkers into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 5100;
const long long mod = 1e9 + 7;
int n, m;

// Checker functions
void check_circular_iteration_invariant(int n, int m) {
    if (n > 4000 && m > 15000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large n and m!" << endl;
        abort();
    }
}

void check_vector_operation_invariant(const vector<int>& vec, int threshold) {
    if (vec.size() > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large vector operations!" << endl;
        abort();
    }
}

void check_station_contention(const vector<int>& pp, int n) {
    int max_pp = *max_element(pp.begin(), pp.begin() + n);
    if (max_pp > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to high contention at specific stations!" << endl;
        abort();
    }
}

int dis(int x, int y) {
    if (y < x)
        return n - x + y;
    else
        return y - x;
}

vector<int> f[N];
int now;
int cmp(int a, int b) { return dis(now, a) >= dis(now, b); }
int head[N];
int fa[N];
int find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }
int base, cnt;
int pp[N], cp[N];

int main() {
    scanf("%d %d", &n, &m);

    // Invariant checks after input
    check_circular_iteration_invariant(n, m);
  
    for (int i = 1; i <= m; i++) {
        int x, y;
        scanf("%d %d", &x, &y);
        f[x].push_back(y);
    }

    int mx = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < f[i].size(); j++) pp[f[i][j]]++;
        check_station_contention(vector<int>(pp, pp + n + 1), n); // Check for high contention
        int now = i;
        f[i].clear();
        for (int j = 1; j <= n; j++) {
            while (pp[now]) f[i].push_back(now), pp[now]--;
            now = now + 1;
            if (now > n) now = 1;
        }
        check_vector_operation_invariant(f[i], n); // Check vector size after operations
        reverse(f[i].begin(), f[i].end());
        mx = max(mx, (int)f[i].size());
    }
    mx = max(1, mx - 1);
    base = n * (mx - 1);
    for (int i = 1; i <= n; i++) {
        if (f[i].size() < mx)
            f[i].clear();
        else {
            int x = f[i][f[i].size() - 1];
            int ff = 0, y;
            if (f[i].size() == mx + 1) ff = 1, y = f[i][f[i].size() - 2];
            f[i].clear();
            if (ff) cnt++, f[i].push_back(y);
            f[i].push_back(x);
            cnt++;
        }
    }
    for (int i = 1; i <= n; i++) {
        now = i;
        for (int j = 1; j <= n; j++) pp[j] = cp[j] = 0;
        int ans = base;
        int tmp = cnt;
        while (tmp) {
            if (cp[now] < f[now].size()) pp[f[now][cp[now]]]++;
            cp[now]++;
            if (pp[now]) tmp -= pp[now], pp[now] = 0;
            now = now + 1;
            if (now > n) now = 1;
            ans++;
        }
        printf("%d", ans - 1);
        if (i != n)
            printf(" ");
        else
            printf("\n");
    }
    return 0;
}
```

### Explanation

- **Checkers Integration**: The checkers are placed at strategic points in the program:
  - **After Input**: `check_circular_iteration_invariant` is called to ensure that the combination of `n` and `m` does not lead to excessive iterations.
  - **During Processing**: 
    - `check_station_contention` is invoked during the first for-loop after counting candies per station to identify potential hotspots.
    - `check_vector_operation_invariant` ensures that vector operations stay within a reasonable threshold after they are filled.

These checks help detect conditions leading to performance bottlenecks without introducing additional overhead in critical loops.

