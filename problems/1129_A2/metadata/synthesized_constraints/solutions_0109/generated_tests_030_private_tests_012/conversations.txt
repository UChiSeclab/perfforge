system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.

Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).

<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.

The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.

Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.

Input

The first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.

The i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.

Output

In the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.

Examples

Input


5 7
2 4
5 1
2 3
3 4
4 1
5 3
3 5


Output


10 9 10 10 9 


Input


2 3
1 2
1 2
1 2


Output


5 6 

Note

Consider the second sample.

If the train started at station 1, the optimal strategy is as follows.

  1. Load the first candy onto the train. 
  2. Proceed to station 2. This step takes 1 second. 
  3. Deliver the first candy. 
  4. Proceed to station 1. This step takes 1 second. 
  5. Load the second candy onto the train. 
  6. Proceed to station 2. This step takes 1 second. 
  7. Deliver the second candy. 
  8. Proceed to station 1. This step takes 1 second. 
  9. Load the third candy onto the train. 
  10. Proceed to station 2. This step takes 1 second. 
  11. Deliver the third candy. 



Hence, the train needs 5 seconds to complete the tasks.

If the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long INF = 1e18;
const long long M = 1e9 + 7;
template <typename T>
void print(vector<T>& v) {
  cout << "[";
  for (int i = 0; i < v.size(); ++i) {
    cout << v[i];
    if (i != v.size() - 1) cout << ", ";
  }
  cout << "]\n";
}
template <typename T>
void print(set<T>& v) {
  cout << "[";
  for (auto it : v) {
    cout << it;
    if (it != *v.rbegin()) cout << ", ";
  }
  cout << "]\n";
}
template <typename T, typename S>
void print(map<T, S>& v) {
  for (auto it : v) cout << it.first << " : " << it.second << "\n";
}
template <typename T, typename S>
void print(pair<T, S>& v) {
  cout << "( " << v.first << ", " << v.second << " )" << '\n';
}
template <typename T>
void print(T x) {
  cout << x << '\n';
}
int n, m;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> m;
  vector<vector<long long> > station(n, vector<long long>(0));
  for (long long i = 0; i < m; i++) {
    long long a, b;
    cin >> a >> b;
    a--;
    b--;
    if (b > a) {
      station[a].push_back(b - a);
    } else {
      station[a].push_back(n - (a - b));
    }
  }
  long long ms = 0;
  for (long long i = 0; i < n; i++) {
    ms = max((long long)station[i].size(), ms);
    sort(station[i].begin(), station[i].end());
  }
  for (long long i = 0; i < n; i++) {
    long long torem = max(0ll, ms - 2);
    while (station[i].size() && torem > 0) {
      torem--;
      station[i].pop_back();
    }
  }
  for (long long s = 0; s < n; s++) {
    vector<vector<long long> > temp = station;
    long long curdis = 0;
    long long dis = 0;
    for (long long i = s; i < s + 3 * n; i++) {
      if (temp[i % n].size()) {
        dis = max(curdis + temp[i % n].back(), dis);
        temp[i % n].pop_back();
      }
      curdis++;
    }
    cout << dis + max(ms - 2, 0ll) * n << ' ';
  }
  cout << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

110 1
2 75


(G.2) Fast Input

3 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e18; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long M = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void print(vector<T>& v) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "["; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < v.size(); ++i) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    cout << v[i]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    if (i != v.size() - 1) cout << ", "; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "]\n"; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void print(set<T>& v) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "["; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it : v) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    cout << it; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    if (it != *v.rbegin()) cout << ", "; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "]\n"; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename S> /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void print(map<T, S>& v) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it : v) cout << it.first << " : " << it.second << "\n"; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename S> /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
void print(pair<T, S>& v) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "( " << v.first << ", " << v.second << " )" << '\n'; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
void print(T x) { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cout << x << '\n'; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<long long> > station(n, vector<long long>(0)); /* line 40 slow_hit_count: 3, fast_hit_count: 3 */
  for (long long i = 0; i < m; i++) { /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
    long long a, b; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
    a--; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    b--; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    if (b > a) { /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
      station[a].push_back(b - a); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    } else { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      station[a].push_back(n - (a - b)); /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  long long ms = 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 53 slow_hit_count: 111, fast_hit_count: 4 */
    ms = max((long long)station[i].size(), ms); /* line 54 slow_hit_count: 110, fast_hit_count: 3 */
    sort(station[i].begin(), station[i].end()); /* line 55 slow_hit_count: 110, fast_hit_count: 3 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 57 slow_hit_count: 111, fast_hit_count: 4 */
    long long torem = max(0ll, ms - 2); /* line 58 slow_hit_count: 110, fast_hit_count: 3 */
    while (station[i].size() && torem > 0) { /* line 59 slow_hit_count: 110, fast_hit_count: 3 */
      torem--; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      station[i].pop_back(); /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long s = 0; s < n; s++) { /* line 64 slow_hit_count: 111, fast_hit_count: 4 */
    vector<vector<long long> > temp = station; /* line 65 slow_hit_count: 110, fast_hit_count: 3 */
    long long curdis = 0; /* line 66 slow_hit_count: 110, fast_hit_count: 3 */
    long long dis = 0; /* line 67 slow_hit_count: 110, fast_hit_count: 3 */
    for (long long i = s; i < s + 3 * n; i++) { /* line 68 slow_hit_count: 36410, fast_hit_count: 30 */
      if (temp[i % n].size()) { /* line 69 slow_hit_count: 36300, fast_hit_count: 27 */
        dis = max(curdis + temp[i % n].back(), dis); /* line 70 slow_hit_count: 110, fast_hit_count: 3 */
        temp[i % n].pop_back(); /* line 71 slow_hit_count: 110, fast_hit_count: 3 */
      } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      curdis++; /* line 73 slow_hit_count: 36300, fast_hit_count: 27 */
    } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    cout << dis + max(ms - 2, 0ll) * n << ' '; /* line 75 slow_hit_count: 110, fast_hit_count: 3 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  cout << '\n'; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 78 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the C program for performance bottlenecks, I will follow the given tasks:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - Lines 68 and 69 in the for-loop are hit significantly more often in the slow input compared to the fast input. Specifically, line 68 (the loop condition for processing stations and candies) and line 69 (the size check for the current station's candy queue) have extremely high hit counts in the slow input.
   - The inner loop, particularly around lines 68-73, has high hit counts, suggesting an expensive operation, possibly due to the loop iterating `3*n` times involving condition checks and operations.

2. **Pinpoint Lines or Functions:**
   - The lines responsible for the slowdown appear to be those managing the nested loop structure, processing each station and the candies therein. The line with the maximum operation (line 70) and the pop operation (line 71) are executed frequently in the slow case.
   - The loop starting at line 68 appears to be a bottleneck due to its nested nature and repeated operations on the `temp` data structure.

3. **Infer Interaction with Data Structures and Input Constraints:**
   - The nested loop iterates over stations, and within that loop, processes the candies. This complexity is exacerbated when `n` is large (e.g., close to 100) and when the distribution of candies results in larger operations to calculate the distances and pop them from the temporary structure.
   - The algorithm involves repeatedly checking and updating the potential delivery time (`dis`), which seems to accumulate overhead due to repeated checks and updates across the nested loops.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language statements describing conditions that trigger slowdowns:

1. **High Number of Iterations with Nested Loops:**
   - **Invariant:** "If the number of stations `n` is large and each station has to be processed multiple times (up to 3 times for each station), the repeated iteration across the nearly circular path significantly increases execution time."
   - **Threshold:** "When `n` approaches its upper constraint, the complexity of processing in a `3*n` loop iteration causes slow execution."

2. **Complex Conditional Structures within Iterations:**
   - **Invariant:** "If there are many candies distributed such that calculations inside the nested loop are executed repeatedly with complex conditions, it causes delays."
   - **Threshold:** "When there are numerous conditions leading to high-frequency updates (like sorting and distance calculations), performance degrades, especially when these operations multiply with `n`."

3. **Handling of Temporary Structures:**
   - **Invariant:** "Frequent modifications and checks on temporary data structures within a large iteration space lead to inefficiencies."
   - **Threshold:** "The temporary structure used in a loop iterating `3*n` times can cause excessive overhead when elements are frequently added, checked, and removed."

These invariants capture the conditions under which the code might enter a slow path, particularly focusing on the interactions between input size, structural operations, and nested iterations, which are exacerbated when `n` and `m` reach their upper limits.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.

Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).

<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.

The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.

Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.

Input

The first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.

The i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.

Output

In the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.

Examples

Input


5 7
2 4
5 1
2 3
3 4
4 1
5 3
3 5


Output


10 9 10 10 9 


Input


2 3
1 2
1 2
1 2


Output


5 6 

Note

Consider the second sample.

If the train started at station 1, the optimal strategy is as follows.

  1. Load the first candy onto the train. 
  2. Proceed to station 2. This step takes 1 second. 
  3. Deliver the first candy. 
  4. Proceed to station 1. This step takes 1 second. 
  5. Load the second candy onto the train. 
  6. Proceed to station 2. This step takes 1 second. 
  7. Deliver the second candy. 
  8. Proceed to station 1. This step takes 1 second. 
  9. Load the third candy onto the train. 
  10. Proceed to station 2. This step takes 1 second. 
  11. Deliver the third candy. 



Hence, the train needs 5 seconds to complete the tasks.

If the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Below are the C++ checker codes that implement the performance-characteristic invariants identified in Phase 2. These checks are designed to detect when the program is likely to experience performance degradation.

```cpp
// Checker for high number of iterations with nested loops
void check_iteration_invariant(int n) {
    if (n >= 4900) { // Threshold close to the upper constraint for n
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations with large n!" << endl;
        abort();
    }
}

// Checker for complex conditional structures within iterations
void check_conditional_invariant(int m) {
    if (m >= 19000) { // Threshold close to the upper constraint for m
        cerr << "Warning: Performance bottleneck condition triggered - complex conditional structures with large m!" << endl;
        abort();
    }
}

// Checker for handling of temporary structures
void check_temp_structure_invariant(int n, const vector<vector<long long>>& station) {
    for (const auto& st : station) {
        if (st.size() > 1000 && n >= 4900) { // Arbitrary threshold for station size
            cerr << "Warning: Performance bottleneck condition triggered - excessive operations on temporary structures!" << endl;
            abort();
        }
    }
}
```

### Phase 4: Integrate Checker Codes into the C++ Program

The checker functions are integrated into the main program, strategically placed to detect performance bottlenecks without introducing additional overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for high number of iterations with nested loops
void check_iteration_invariant(int n) {
    if (n >= 4900) { // Threshold close to the upper constraint for n
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations with large n!" << endl;
        abort();
    }
}

// Checker for complex conditional structures within iterations
void check_conditional_invariant(int m) {
    if (m >= 19000) { // Threshold close to the upper constraint for m
        cerr << "Warning: Performance bottleneck condition triggered - complex conditional structures with large m!" << endl;
        abort();
    }
}

// Checker for handling of temporary structures
void check_temp_structure_invariant(int n, const vector<vector<long long>>& station) {
    for (const auto& st : station) {
        if (st.size() > 1000 && n >= 4900) { // Arbitrary threshold for station size
            cerr << "Warning: Performance bottleneck condition triggered - excessive operations on temporary structures!" << endl;
            abort();
        }
    }
}

int n, m;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> n >> m;
    
    // Insert performance checkers
    check_iteration_invariant(n);
    check_conditional_invariant(m);

    vector<vector<long long> > station(n, vector<long long>(0));
    for (long long i = 0; i < m; i++) {
        long long a, b;
        cin >> a >> b;
        a--;
        b--;
        if (b > a) {
            station[a].push_back(b - a);
        } else {
            station[a].push_back(n - (a - b));
        }
    }
    
    // Check the size of temporary structures
    check_temp_structure_invariant(n, station);

    long long ms = 0;
    for (long long i = 0; i < n; i++) {
        ms = max((long long)station[i].size(), ms);
        sort(station[i].begin(), station[i].end());
    }
    for (long long i = 0; i < n; i++) {
        long long torem = max(0ll, ms - 2);
        while (station[i].size() && torem > 0) {
            torem--;
            station[i].pop_back();
        }
    }
    for (long long s = 0; s < n; s++) {
        vector<vector<long long> > temp = station;
        long long curdis = 0;
        long long dis = 0;
        for (long long i = s; i < s + 3 * n; i++) {
            if (temp[i % n].size()) {
                dis = max(curdis + temp[i % n].back(), dis);
                temp[i % n].pop_back();
            }
            curdis++;
        }
        cout << dis + max(ms - 2, 0ll) * n << ' ';
    }
    cout << '\n';
}
```

### Explanation:
- **Iteration Invariant:** This checker is placed immediately after reading `n` and `m` to catch any potential bottlenecks due to excessive iterations when `n` approaches its upper limit.
- **Conditional Invariant:** This checker is similarly placed to monitor for complex conditional structures with a high number of candies (`m`).
- **Temporary Structure Invariant:** This checker is placed after the initial setup of the `station` vector to ensure the size and operations on temporary structures do not lead to performance issues. 

These checks are strategically integrated to quickly catch potential performance bottlenecks without introducing unnecessary overhead into the tight loops of the main computation.

