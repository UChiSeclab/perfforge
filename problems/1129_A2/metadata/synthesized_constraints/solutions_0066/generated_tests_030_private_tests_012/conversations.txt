system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.

Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).

<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.

The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.

Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.

Input

The first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.

The i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.

Output

In the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.

Examples

Input


5 7
2 4
5 1
2 3
3 4
4 1
5 3
3 5


Output


10 9 10 10 9 


Input


2 3
1 2
1 2
1 2


Output


5 6 

Note

Consider the second sample.

If the train started at station 1, the optimal strategy is as follows.

  1. Load the first candy onto the train. 
  2. Proceed to station 2. This step takes 1 second. 
  3. Deliver the first candy. 
  4. Proceed to station 1. This step takes 1 second. 
  5. Load the second candy onto the train. 
  6. Proceed to station 2. This step takes 1 second. 
  7. Deliver the second candy. 
  8. Proceed to station 1. This step takes 1 second. 
  9. Load the third candy onto the train. 
  10. Proceed to station 2. This step takes 1 second. 
  11. Deliver the third candy. 



Hence, the train needs 5 seconds to complete the tasks.

If the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int32_t main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  long long n, m;
  cin >> n >> m;
  vector<vector<long long>> v(n);
  for (long long i = 0, x, y; i < m; i++) {
    cin >> x >> y;
    v[x - 1].push_back(y - 1);
  }
  for (long long i = 0; i < n; i++) {
    long long ans = 0;
    vector<long long> pos(5005, 0);
    for (long long j = i, c = 0;; j = (j + 1) % n, c++) {
      pos[j] = c;
      if ((j + 1) % n == i) break;
    }
    for (long long j = i;; j = (j + 1) % n) {
      long long tans = 0;
      if (v[j].size() != 0) {
        long long fin, dist = INT_MAX;
        for (auto x : v[j]) {
          long long tdist;
          if (pos[x] < pos[j])
            tdist = pos[x] + n - pos[j];
          else
            tdist = pos[x] - pos[j];
          if (tdist < dist) dist = tdist, fin = x;
        }
        if (pos[fin] < pos[j])
          tans = pos[fin] + (v[j].size()) * n;
        else
          tans = (v[j].size() - 1) * n + pos[fin];
        ans = max(ans, tans);
      }
      if ((j + 1) % n == i) break;
    }
    cout << ans << " ";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

110 1
2 75


(G.2) Fast Input

3 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<long long>> v(n); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0, x, y; i < m; i++) { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> x >> y; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    v[x - 1].push_back(y - 1); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 12 slow_hit_count: 111, fast_hit_count: 4 */
    long long ans = 0; /* line 13 slow_hit_count: 110, fast_hit_count: 3 */
    vector<long long> pos(5005, 0); /* line 14 slow_hit_count: 220, fast_hit_count: 6 */
    for (long long j = i, c = 0;; j = (j + 1) % n, c++) { /* line 15 slow_hit_count: 12100, fast_hit_count: 9 */
      pos[j] = c; /* line 16 slow_hit_count: 12100, fast_hit_count: 9 */
      if ((j + 1) % n == i) break; /* line 17 slow_hit_count: 12100, fast_hit_count: 9 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long j = i;; j = (j + 1) % n) { /* line 19 slow_hit_count: 110, fast_hit_count: 3 */
      long long tans = 0; /* line 20 slow_hit_count: 12100, fast_hit_count: 9 */
      if (v[j].size() != 0) { /* line 21 slow_hit_count: 12100, fast_hit_count: 9 */
        long long fin, dist = INT_MAX; /* line 22 slow_hit_count: 110, fast_hit_count: 3 */
        for (auto x : v[j]) { /* line 23 slow_hit_count: 220, fast_hit_count: 6 */
          long long tdist; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
          if (pos[x] < pos[j]) /* line 25 slow_hit_count: 110, fast_hit_count: 3 */
            tdist = pos[x] + n - pos[j]; /* line 26 slow_hit_count: 73, fast_hit_count: 1 */
          else /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
            tdist = pos[x] - pos[j]; /* line 28 slow_hit_count: 37, fast_hit_count: 2 */
          if (tdist < dist) dist = tdist, fin = x; /* line 29 slow_hit_count: 110, fast_hit_count: 3 */
        } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
        if (pos[fin] < pos[j]) /* line 31 slow_hit_count: 110, fast_hit_count: 3 */
          tans = pos[fin] + (v[j].size()) * n; /* line 32 slow_hit_count: 73, fast_hit_count: 1 */
        else /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
          tans = (v[j].size() - 1) * n + pos[fin]; /* line 34 slow_hit_count: 37, fast_hit_count: 2 */
        ans = max(ans, tans); /* line 35 slow_hit_count: 110, fast_hit_count: 3 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      if ((j + 1) % n == i) break; /* line 37 slow_hit_count: 12100, fast_hit_count: 9 */
    } /* line 38 slow_hit_count: 11990, fast_hit_count: 6 */
    cout << ans << " "; /* line 39 slow_hit_count: 110, fast_hit_count: 3 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The outer loop on line 12 has a significantly higher hit count for the slow input (111 times) compared to the fast input (4 times).
   - The nested loop on line 15 is executed 12,100 times for the slow input versus only 9 times for the fast input, indicating a potential inefficiency in handling certain input patterns.
   - The condition at line 21 and subsequent loops (lines 23, 25-35) are hit 12,100 times for the slow input, suggesting that the processing of this logic is a major contributor to the slowdown.

2. **Interaction with Data Structures:**
   - For each station (line 12), a position vector `pos` of size 5005 is initialized (line 14), which might be excessive and inefficient given the constraints.
   - The calculations inside the loops (lines 15-29) involve determining circular distances and managing large numbers of positions, contributing to the high computational cost.

3. **Potential Causes of Slowdown:**
   - The slowdown is likely due to the nested loop structure that processes each station multiple times, combined with the operations that calculate distances in a circular manner.
   - When `n` is large, the complexity of setting up and traversing the `pos` vector becomes significant, especially if there are many candies to deliver from stations that have complex or long delivery paths.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**

   - **Invariant 1:** "If the number of stations `n` is large and the candy delivery involves stations that are far apart in the circular network, the code may enter a slow path due to repeated calculations of circular distances."
     - This slow path is triggered by `n` approaching its upper constraint and candies having starting and destination stations with large circular distances.

   - **Invariant 2:** "If the `pos` vector, used for tracking station positions in a circular manner, is repeatedly recalculated for each station, performance may degrade when the number of stations is large."
     - This is especially impactful when the setup of `pos` involves significant computation, as seen when `n` is high.

   - **Invariant 3:** "When there is a high density of candies at some stations, leading to many iterations over potential delivery routes, the program might slow down significantly."
     - This suggests a scenario where numerous candies need to be picked up from a station, leading to increased looping and calculation efforts.

2. **Threshold Suggestions:**
   - Consider optimizing or caching the setup of the `pos` vector, especially when `n` is large.
   - Examine and possibly refactor the logic that determines distances in the circular network to reduce redundant calculations, particularly when candies are distributed unevenly across stations.

These invariants help predict potential slowdowns based on input patterns and program behavior, without relying on specific numeric values from the slow input. They provide guidelines for optimizing the code to handle similar patterns in future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.

Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).

<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.

The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.

Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.

Input

The first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.

The i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.

Output

In the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.

Examples

Input


5 7
2 4
5 1
2 3
3 4
4 1
5 3
3 5


Output


10 9 10 10 9 


Input


2 3
1 2
1 2
1 2


Output


5 6 

Note

Consider the second sample.

If the train started at station 1, the optimal strategy is as follows.

  1. Load the first candy onto the train. 
  2. Proceed to station 2. This step takes 1 second. 
  3. Deliver the first candy. 
  4. Proceed to station 1. This step takes 1 second. 
  5. Load the second candy onto the train. 
  6. Proceed to station 2. This step takes 1 second. 
  7. Deliver the second candy. 
  8. Proceed to station 1. This step takes 1 second. 
  9. Load the third candy onto the train. 
  10. Proceed to station 2. This step takes 1 second. 
  11. Deliver the third candy. 



Hence, the train needs 5 seconds to complete the tasks.

If the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants identified in Phase 2, here's the corresponding C++ checker code for each:

1. **Invariant 1: Large Circular Distance Calculation**
   ```cpp
   void check_large_circular_distance(int n, int distance) {
       if (n > 100 && distance > n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - large circular distance!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Repeated Setup of `pos` Vector**
   ```cpp
   void check_repeated_pos_setup(int n) {
       if (n > 100) {
           cerr << "Warning: Performance bottleneck condition triggered - repeated setup of large pos vector!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: High Density of Candies at Stations**
   ```cpp
   void check_high_candy_density(int stationCandyCount, int n) {
       if (stationCandyCount > n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - high candy density at a station!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original C++ Program

Below is the instrumented C++ code with the invariant checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_circular_distance(int n, int distance) {
    if (n > 100 && distance > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - large circular distance!" << endl;
        abort();
    }
}

void check_repeated_pos_setup(int n) {
    if (n > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated setup of large pos vector!" << endl;
        abort();
    }
}

void check_high_candy_density(int stationCandyCount, int n) {
    if (stationCandyCount > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - high candy density at a station!" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    long long n, m;
    cin >> n >> m;
    vector<vector<long long>> v(n);
    for (long long i = 0, x, y; i < m; i++) {
        cin >> x >> y;
        v[x - 1].push_back(y - 1);
    }

    // Check repeated setup of large pos vector
    check_repeated_pos_setup(n);

    for (long long i = 0; i < n; i++) {
        long long ans = 0;
        vector<long long> pos(5005, 0);
        for (long long j = i, c = 0;; j = (j + 1) % n, c++) {
            pos[j] = c;
            if ((j + 1) % n == i) break;
        }
        for (long long j = i;; j = (j + 1) % n) {
            long long tans = 0;
            if (v[j].size() != 0) {
                long long fin, dist = INT_MAX;
                for (auto x : v[j]) {
                    long long tdist;
                    if (pos[x] < pos[j])
                        tdist = pos[x] + n - pos[j];
                    else
                        tdist = pos[x] - pos[j];
                    
                    // Check large circular distance
                    check_large_circular_distance(n, tdist);

                    if (tdist < dist) dist = tdist, fin = x;
                }
                if (pos[fin] < pos[j])
                    tans = pos[fin] + (v[j].size()) * n;
                else
                    tans = (v[j].size() - 1) * n + pos[fin];
                ans = max(ans, tans);

                // Check high candy density
                check_high_candy_density(v[j].size(), n);
            }
            if ((j + 1) % n == i) break;
        }
        cout << ans << " ";
    }
    return 0;
}
```

### Explanation of Inserted Checks
- **`check_large_circular_distance`:** Called when calculating circular distances to ensure the distance isn't unnecessarily large, which could slow down performance.
- **`check_repeated_pos_setup`:** Called once to ensure `pos` vector setups aren't repeated excessively when `n` is large.
- **`check_high_candy_density`:** Called to detect high candy density at a station which could lead to performance issues when processing multiple candies.

