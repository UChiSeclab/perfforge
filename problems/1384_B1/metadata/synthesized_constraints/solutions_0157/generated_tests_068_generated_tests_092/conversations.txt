system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is on constraints. In this version constraints are lower. You can make hacks only if all versions of the problem are solved.

Koa the Koala is at the beach!

The beach consists (from left to right) of a shore, n+1 meters of sea and an island at n+1 meters from the shore.

She measured the depth of the sea at 1, 2, ..., n meters from the shore and saved them in array d. d_i denotes the depth of the sea at i meters from the shore for 1 ≤ i ≤ n.

Like any beach this one has tide, the intensity of the tide is measured by parameter k and affects all depths from the beginning at time t=0 in the following way:

  * For a total of k seconds, each second, tide increases all depths by 1.

  * Then, for a total of k seconds, each second, tide decreases all depths by 1.

  * This process repeats again and again (ie. depths increase for k seconds then decrease for k seconds and so on ...).

Formally, let's define 0-indexed array p = [0, 1, 2, …, k - 2, k - 1, k, k - 1, k - 2, …, 2, 1] of length 2k. At time t (0 ≤ t) depth at i meters from the shore equals d_i + p[t mod 2k] (t mod 2k denotes the remainder of the division of t by 2k). Note that the changes occur instantaneously after each second, see the notes for better understanding. 




At time t=0 Koa is standing at the shore and wants to get to the island. Suppose that at some time t (0 ≤ t) she is at x (0 ≤ x ≤ n) meters from the shore:

  * In one second Koa can swim 1 meter further from the shore (x changes to x+1) or not swim at all (x stays the same), in both cases t changes to t+1.

  * As Koa is a bad swimmer, the depth of the sea at the point where she is can't exceed l at integer points of time (or she will drown). More formally, if Koa is at x (1 ≤ x ≤ n) meters from the shore at the moment t (for some integer t≥ 0), the depth of the sea at this point — d_x + p[t mod 2k] — can't exceed l. In other words, d_x + p[t mod 2k] ≤ l must hold always.

  * Once Koa reaches the island at n+1 meters from the shore, she stops and can rest.

Note that while Koa swims tide doesn't have effect on her (ie. she can't drown while swimming). Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide (they are solid ground and she won't drown there). 




Koa wants to know whether she can go from the shore to the island. Help her!

Input

The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Description of the test cases follows.

The first line of each test case contains three integers n, k and l (1 ≤ n ≤ 100; 1 ≤ k ≤ 100; 1 ≤ l ≤ 100) — the number of meters of sea Koa measured and parameters k and l.

The second line of each test case contains n integers d_1, d_2, …, d_n (0 ≤ d_i ≤ 100) — the depths of each meter of sea Koa measured.

It is guaranteed that the sum of n over all test cases does not exceed 100.

Output

For each test case:

Print Yes if Koa can get from the shore to the island, and No otherwise.

You may print each letter in any case (upper or lower).

Example

Input


7
2 1 1
1 0
5 2 3
1 2 3 2 2
4 3 4
0 2 4 3
2 3 5
3 0
7 2 3
3 0 2 1 3 0 1
7 1 4
4 4 3 0 2 4 2
5 2 3
1 2 3 2 2


Output


Yes
No
Yes
Yes
Yes
No
No

Note

In the following s denotes the shore, i denotes the island, x denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at 1, 2, ..., n meters from the shore.

In test case 1 we have n = 2, k = 1, l = 1, p = [ 0, 1 ].

Koa wants to go from shore (at x = 0) to the island (at x = 3). Let's describe a possible solution:

  * Initially at t = 0 the beach looks like this: [\underline{s}, 1, 0, i]. 
  * At t = 0 if Koa would decide to swim to x = 1, beach would look like: [s, \underline{2}, 1, i] at t = 1, since 2 > 1 she would drown. So Koa waits 1 second instead and beach looks like [\underline{s}, 2, 1, i] at t = 1. 
  * At t = 1 Koa swims to x = 1, beach looks like [s, \underline{1}, 0, i] at t = 2. Koa doesn't drown because 1 ≤ 1. 
  * At t = 2 Koa swims to x = 2, beach looks like [s, 2, \underline{1}, i] at t = 3. Koa doesn't drown because 1 ≤ 1. 
  * At t = 3 Koa swims to x = 3, beach looks like [s, 1, 0, \underline{i}] at t = 4. 
  * At t = 4 Koa is at x = 3 and she made it! 



We can show that in test case 2 Koa can't get to the island.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k, l;
const int MAX1 = 100;
const int MAX2 = 2000;
int dp[MAX1 + 1][MAX2 + 1];
int solve(int d[], int p[], int pos, int t) {
  if (pos == n) return 1;
  int curr = d[pos] + p[t % (2 * k)];
  if (curr > l) return 0;
  if (dp[pos][t] != -1) return dp[pos][t];
  int good = 0;
  for (int i = 0; i < 2 * k; i++) {
    curr = d[pos] + p[(t + i) % (2 * k)];
    if (curr > l) break;
    good = max(good, solve(d, p, pos + 1, t + i + 1));
  }
  return dp[pos][t] = good;
}
int main() {
  int t;
  cin >> t;
  while (t--) {
    cin >> n >> k >> l;
    int d[n];
    int p[2 * k];
    for (int i = 0; i < n; i++) cin >> d[i];
    memset(dp, -1, sizeof(dp));
    for (int i = 0; i <= k; i++) p[i] = i;
    for (int i = k + 1; i < 2 * k; i++) p[i] = p[i - 1] - 1;
    int good = 0;
    for (int i = 0; i < 2 * k; i++) {
      good = max(good, solve(d, p, 0, i + 1));
    }
    if (good)
      cout << "YES\n";
    else
      cout << "NO\n";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
85 11 26
0 20 17 16 19 17 13 2 25 3 13 7 25 2 17 2 24 21 24 0 20 26 24 20 3 6 25 15 24 12 10 16 9 20 25 26 8 4 26 8 8 4 20 0 5 18 6 13 4 0 14 22 5 15 7 7 18 8 11 18 23 23 4 23 18 19 21 20 4 16 6 14 20 22 23 15 10 4 5 1 8 13 0 11 19


(G.2) Fast Input

1
85 11 19
0 20 17 16 19 17 13 2 25 3 13 7 25 2 17 2 24 21 24 0 20 26 24 20 3 6 25 15 24 12 10 16 9 20 25 26 8 4 26 8 8 4 20 0 5 18 6 13 4 0 14 22 5 15 7 7 18 8 11 18 23 23 4 23 18 19 21 20 4 16 6 14 20 22 23 15 10 4 5 1 8 13 0 11 19


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, l; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX1 = 100; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX2 = 2000; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dp[MAX1 + 1][MAX2 + 1]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int solve(int d[], int p[], int pos, int t) { /* line 7 slow_hit_count: 359118, fast_hit_count: 506 */
  if (pos == n) return 1; /* line 8 slow_hit_count: 359118, fast_hit_count: 506 */
  int curr = d[pos] + p[t % (2 * k)]; /* line 9 slow_hit_count: 354683, fast_hit_count: 506 */
  if (curr > l) return 0; /* line 10 slow_hit_count: 354683, fast_hit_count: 506 */
  if (dp[pos][t] != -1) return dp[pos][t]; /* line 11 slow_hit_count: 302185, fast_hit_count: 22 */
  int good = 0; /* line 12 slow_hit_count: 20195, fast_hit_count: 22 */
  for (int i = 0; i < 2 * k; i++) { /* line 13 slow_hit_count: 379291, fast_hit_count: 506 */
    curr = d[pos] + p[(t + i) % (2 * k)]; /* line 14 slow_hit_count: 364806, fast_hit_count: 484 */
    if (curr > l) break; /* line 15 slow_hit_count: 364806, fast_hit_count: 484 */
    good = max(good, solve(d, p, pos + 1, t + i + 1)); /* line 16 slow_hit_count: 359096, fast_hit_count: 484 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[pos][t] = good; /* line 18 slow_hit_count: 20195, fast_hit_count: 22 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> n >> k >> l; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    int d[n]; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    int p[2 * k]; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) cin >> d[i]; /* line 27 slow_hit_count: 86, fast_hit_count: 86 */
    memset(dp, -1, sizeof(dp)); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i <= k; i++) p[i] = i; /* line 29 slow_hit_count: 13, fast_hit_count: 13 */
    for (int i = k + 1; i < 2 * k; i++) p[i] = p[i - 1] - 1; /* line 30 slow_hit_count: 11, fast_hit_count: 11 */
    int good = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < 2 * k; i++) { /* line 32 slow_hit_count: 23, fast_hit_count: 23 */
      good = max(good, solve(d, p, 0, i + 1)); /* line 33 slow_hit_count: 22, fast_hit_count: 22 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    if (good) /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
      cout << "YES\n"; /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
    else /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "NO\n"; /* line 38 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided:

1. **Function `solve` (line 7) is heavily hit in the slow input**: With 359,118 hits compared to just 506 in the fast input. This suggests that `solve` is being called recursively or handles a large number of iterations in the slow input scenario.

2. **Line 13 (loop inside `solve`) is heavily hit**: The for-loop from line 13 is executed 379,291 times in the slow case versus 506 in the fast case. This indicates that the loop contributes significantly to the slow performance.

3. **Line 16 (recursive call within the loop)**: With 359,096 hits on the slow input and 484 hits on the fast input, this line indicates that recursion within this loop is a major factor in the slowdown.

4. **Line 11 (memoization check) is not frequently hit in the slow case**: The line has 302,185 hits in the slow input versus only 22 in the fast input. This suggests that the memoization (caching) isn't effectively utilized in the slow scenario, possibly leading to redundant calculations.

### Phase 2: Derive Performance-Characterizing Invariants

From the observations, we can derive the following performance-characterizing invariants:

1. **Recursive Depth and Input Constraints**:
   - **Invariant**: "If the recursive depth of the function `solve` frequently reaches high values, especially when `n` is large (close to 100), the program may experience significant slowdowns. This is exacerbated when the depth `d_i` values combined with tide modulation frequently necessitate checking across multiple tidal states."
   - **Explanation**: The recursive depth can become excessive as it tries to find a path, particularly when the tide conditions (`p[t % (2 * k)]`) often exceed the safe depth `l`.

2. **Ineffective Memoization**:
   - **Invariant**: "When the memoization table (`dp`) is not effectively reducing redundant calculations due to varying state combinations (e.g., different `t` modulo cycles leading to recalculations), performance can degrade. This is particularly relevant when the problem size `n` is high and `k` is moderate to large, leading to more state variability."
   - **Explanation**: The memoization seems underutilized, leading to repeated recursive calls without leveraging previously computed results effectively.

3. **Tide Modulation Complexity**:
   - **Invariant**: "When the depth modulation pattern (array `p` of length `2k`) causes frequent changes that need to be accounted for in each state, especially as the depth `d_i` approaches the drowning limit `l`, the computation can become expensive. This is more pronounced when `k` is large (leading to a longer array `p`)."
   - **Explanation**: The complexity of tide modulation introduces additional state checks that slow down the computation, especially as `k` increases.

4. **High Variability in Depths and Recursion**:
   - **Invariant**: "If the depths `d` have high variability and frequently approach the limit `l` across different tidal states, the program may slow down due to the need for extensive recursive exploration. This is particularly true when `k` is large enough to create significant cycles but not large enough to stabilize the tide quickly."
   - **Explanation**: High variability in depths means more conditional checks, increasing computation when combined with frequent state changes due to the tide pattern.

By addressing these scenarios, particularly focusing on improving memoization effectiveness and minimizing unnecessary recursive calls, the program can potentially be optimized to handle such slow cases better.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is on constraints. In this version constraints are lower. You can make hacks only if all versions of the problem are solved.

Koa the Koala is at the beach!

The beach consists (from left to right) of a shore, n+1 meters of sea and an island at n+1 meters from the shore.

She measured the depth of the sea at 1, 2, ..., n meters from the shore and saved them in array d. d_i denotes the depth of the sea at i meters from the shore for 1 ≤ i ≤ n.

Like any beach this one has tide, the intensity of the tide is measured by parameter k and affects all depths from the beginning at time t=0 in the following way:

  * For a total of k seconds, each second, tide increases all depths by 1.

  * Then, for a total of k seconds, each second, tide decreases all depths by 1.

  * This process repeats again and again (ie. depths increase for k seconds then decrease for k seconds and so on ...).

Formally, let's define 0-indexed array p = [0, 1, 2, …, k - 2, k - 1, k, k - 1, k - 2, …, 2, 1] of length 2k. At time t (0 ≤ t) depth at i meters from the shore equals d_i + p[t mod 2k] (t mod 2k denotes the remainder of the division of t by 2k). Note that the changes occur instantaneously after each second, see the notes for better understanding. 




At time t=0 Koa is standing at the shore and wants to get to the island. Suppose that at some time t (0 ≤ t) she is at x (0 ≤ x ≤ n) meters from the shore:

  * In one second Koa can swim 1 meter further from the shore (x changes to x+1) or not swim at all (x stays the same), in both cases t changes to t+1.

  * As Koa is a bad swimmer, the depth of the sea at the point where she is can't exceed l at integer points of time (or she will drown). More formally, if Koa is at x (1 ≤ x ≤ n) meters from the shore at the moment t (for some integer t≥ 0), the depth of the sea at this point — d_x + p[t mod 2k] — can't exceed l. In other words, d_x + p[t mod 2k] ≤ l must hold always.

  * Once Koa reaches the island at n+1 meters from the shore, she stops and can rest.

Note that while Koa swims tide doesn't have effect on her (ie. she can't drown while swimming). Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide (they are solid ground and she won't drown there). 




Koa wants to know whether she can go from the shore to the island. Help her!

Input

The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Description of the test cases follows.

The first line of each test case contains three integers n, k and l (1 ≤ n ≤ 100; 1 ≤ k ≤ 100; 1 ≤ l ≤ 100) — the number of meters of sea Koa measured and parameters k and l.

The second line of each test case contains n integers d_1, d_2, …, d_n (0 ≤ d_i ≤ 100) — the depths of each meter of sea Koa measured.

It is guaranteed that the sum of n over all test cases does not exceed 100.

Output

For each test case:

Print Yes if Koa can get from the shore to the island, and No otherwise.

You may print each letter in any case (upper or lower).

Example

Input


7
2 1 1
1 0
5 2 3
1 2 3 2 2
4 3 4
0 2 4 3
2 3 5
3 0
7 2 3
3 0 2 1 3 0 1
7 1 4
4 4 3 0 2 4 2
5 2 3
1 2 3 2 2


Output


Yes
No
Yes
Yes
Yes
No
No

Note

In the following s denotes the shore, i denotes the island, x denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at 1, 2, ..., n meters from the shore.

In test case 1 we have n = 2, k = 1, l = 1, p = [ 0, 1 ].

Koa wants to go from shore (at x = 0) to the island (at x = 3). Let's describe a possible solution:

  * Initially at t = 0 the beach looks like this: [\underline{s}, 1, 0, i]. 
  * At t = 0 if Koa would decide to swim to x = 1, beach would look like: [s, \underline{2}, 1, i] at t = 1, since 2 > 1 she would drown. So Koa waits 1 second instead and beach looks like [\underline{s}, 2, 1, i] at t = 1. 
  * At t = 1 Koa swims to x = 1, beach looks like [s, \underline{1}, 0, i] at t = 2. Koa doesn't drown because 1 ≤ 1. 
  * At t = 2 Koa swims to x = 2, beach looks like [s, 2, \underline{1}, i] at t = 3. Koa doesn't drown because 1 ≤ 1. 
  * At t = 3 Koa swims to x = 3, beach looks like [s, 1, 0, \underline{i}] at t = 4. 
  * At t = 4 Koa is at x = 3 and she made it! 



We can show that in test case 2 Koa can't get to the island.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets to implement the performance-characterizing invariants inferred in natural language:

1. **Checker for Recursive Depth and Input Constraints**:
   This invariant checks if the recursion depth becomes too high, particularly when `n` is large and depth values frequently require checking across multiple tidal states.

```cpp
void check_recursion_depth(int currentDepth, int maxDepth, int threshold) {
    if (currentDepth > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}
```

2. **Checker for Ineffective Memoization**:
   This invariant checks if the memoization table (`dp`) is not effectively reducing redundant calculations.

```cpp
void check_memoization_effectiveness(int memoizationHits, int recursionCalls, double threshold) {
    if (recursionCalls > 0 && (double)memoizationHits / recursionCalls < threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective memoization!" << endl;
        abort();
    }
}
```

3. **Checker for Tide Modulation Complexity**:
   This invariant checks if the complexity of tide modulation introduces unnecessary state checks.

```cpp
void check_tide_modulation(int k, int modCycle) {
    if (modCycle > k * 2) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive tide modulation complexity!" << endl;
        abort();
    }
}
```

4. **Checker for High Variability in Depths and Recursion**:
   This invariant checks if high variability in depths frequently approaches the limit `l`, leading to extensive recursive exploration.

```cpp
void check_depth_variability(const vector<int>& depths, int l, int variabilityThreshold) {
    int variabilityCount = 0;
    for (int depth : depths) {
        if (depth > l - variabilityThreshold) {
            variabilityCount++;
        }
    }
    if (variabilityCount > variabilityThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high depth variability!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code with the Original Program

Below is the final, instrumented version of the original C++ code with integrated checker functions. These are strategically placed to avoid introducing overhead in performance-critical areas:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k, l;
const int MAX1 = 100;
const int MAX2 = 2000;
int dp[MAX1 + 1][MAX2 + 1];

// Checker functions
void check_recursion_depth(int currentDepth, int maxDepth, int threshold) {
    if (currentDepth > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}

void check_memoization_effectiveness(int memoizationHits, int recursionCalls, double threshold) {
    if (recursionCalls > 0 && (double)memoizationHits / recursionCalls < threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - ineffective memoization!" << endl;
        abort();
    }
}

void check_tide_modulation(int k, int modCycle) {
    if (modCycle > k * 2) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive tide modulation complexity!" << endl;
        abort();
    }
}

void check_depth_variability(const vector<int>& depths, int l, int variabilityThreshold) {
    int variabilityCount = 0;
    for (int depth : depths) {
        if (depth > l - variabilityThreshold) {
            variabilityCount++;
        }
    }
    if (variabilityCount > variabilityThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high depth variability!" << endl;
        abort();
    }
}

int solve(int d[], int p[], int pos, int t, int& recursionDepth) {
    if (pos == n) return 1;

    int curr = d[pos] + p[t % (2 * k)];
    if (curr > l) return 0;

    if (dp[pos][t] != -1) return dp[pos][t];

    int good = 0;
    recursionDepth++;
    check_recursion_depth(recursionDepth, n, 50); // Check excessive recursion depth

    for (int i = 0; i < 2 * k; i++) {
        curr = d[pos] + p[(t + i) % (2 * k)];
        if (curr > l) break;
        good = max(good, solve(d, p, pos + 1, t + i + 1, recursionDepth));
    }

    recursionDepth--;
    return dp[pos][t] = good;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        cin >> n >> k >> l;
        int d[n];
        vector<int> depths(n);
        int p[2 * k];

        for (int i = 0; i < n; i++) {
            cin >> d[i];
            depths[i] = d[i];
        }

        memset(dp, -1, sizeof(dp));

        for (int i = 0; i <= k; i++) p[i] = i;
        for (int i = k + 1; i < 2 * k; i++) p[i] = p[i - 1] - 1;

        int good = 0;
        int recursionDepth = 0;
        int memoizationHits = 0;
        int recursionCalls = 0;

        check_depth_variability(depths, l, 10); // Check high depth variability

        for (int i = 0; i < 2 * k; i++) {
            check_tide_modulation(k, i); // Check tide modulation complexity
            recursionCalls++;
            good = max(good, solve(d, p, 0, i + 1, recursionDepth));
            if (dp[0][i + 1] != -1) memoizationHits++;
        }

        check_memoization_effectiveness(memoizationHits, recursionCalls, 0.5); // Check ineffective memoization

        if (good)
            cout << "YES\n";
        else
            cout << "NO\n";
    }
}
```

### Explanation of the Integration:

- **Recursion Depth Check**: Integrated at the start of each recursive call to `solve`, ensures that the recursion depth does not exceed typical operational thresholds.
  
- **Memoization Effectiveness Check**: Integrated after all recursive calls, checks if the memoization effectively cached results, given the ratio of memoization hits to recursive calls.

- **Tide Modulation Complexity Check**: Integrated just before the loop that iterates over tide state, ensures that the modulation pattern does not become unnecessarily complex.

- **High Depth Variability Check**: Integrated after reading input and before processing, checks for excessive depth variability that may complicate the path. 

These safeguards will help identify potential performance bottlenecks during execution.

