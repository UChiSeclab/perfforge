system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is on constraints. In this version constraints are lower. You can make hacks only if all versions of the problem are solved.

Koa the Koala is at the beach!

The beach consists (from left to right) of a shore, n+1 meters of sea and an island at n+1 meters from the shore.

She measured the depth of the sea at 1, 2, ..., n meters from the shore and saved them in array d. d_i denotes the depth of the sea at i meters from the shore for 1 ≤ i ≤ n.

Like any beach this one has tide, the intensity of the tide is measured by parameter k and affects all depths from the beginning at time t=0 in the following way:

  * For a total of k seconds, each second, tide increases all depths by 1.

  * Then, for a total of k seconds, each second, tide decreases all depths by 1.

  * This process repeats again and again (ie. depths increase for k seconds then decrease for k seconds and so on ...).

Formally, let's define 0-indexed array p = [0, 1, 2, …, k - 2, k - 1, k, k - 1, k - 2, …, 2, 1] of length 2k. At time t (0 ≤ t) depth at i meters from the shore equals d_i + p[t mod 2k] (t mod 2k denotes the remainder of the division of t by 2k). Note that the changes occur instantaneously after each second, see the notes for better understanding. 




At time t=0 Koa is standing at the shore and wants to get to the island. Suppose that at some time t (0 ≤ t) she is at x (0 ≤ x ≤ n) meters from the shore:

  * In one second Koa can swim 1 meter further from the shore (x changes to x+1) or not swim at all (x stays the same), in both cases t changes to t+1.

  * As Koa is a bad swimmer, the depth of the sea at the point where she is can't exceed l at integer points of time (or she will drown). More formally, if Koa is at x (1 ≤ x ≤ n) meters from the shore at the moment t (for some integer t≥ 0), the depth of the sea at this point — d_x + p[t mod 2k] — can't exceed l. In other words, d_x + p[t mod 2k] ≤ l must hold always.

  * Once Koa reaches the island at n+1 meters from the shore, she stops and can rest.

Note that while Koa swims tide doesn't have effect on her (ie. she can't drown while swimming). Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide (they are solid ground and she won't drown there). 




Koa wants to know whether she can go from the shore to the island. Help her!

Input

The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Description of the test cases follows.

The first line of each test case contains three integers n, k and l (1 ≤ n ≤ 100; 1 ≤ k ≤ 100; 1 ≤ l ≤ 100) — the number of meters of sea Koa measured and parameters k and l.

The second line of each test case contains n integers d_1, d_2, …, d_n (0 ≤ d_i ≤ 100) — the depths of each meter of sea Koa measured.

It is guaranteed that the sum of n over all test cases does not exceed 100.

Output

For each test case:

Print Yes if Koa can get from the shore to the island, and No otherwise.

You may print each letter in any case (upper or lower).

Example

Input


7
2 1 1
1 0
5 2 3
1 2 3 2 2
4 3 4
0 2 4 3
2 3 5
3 0
7 2 3
3 0 2 1 3 0 1
7 1 4
4 4 3 0 2 4 2
5 2 3
1 2 3 2 2


Output


Yes
No
Yes
Yes
Yes
No
No

Note

In the following s denotes the shore, i denotes the island, x denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at 1, 2, ..., n meters from the shore.

In test case 1 we have n = 2, k = 1, l = 1, p = [ 0, 1 ].

Koa wants to go from shore (at x = 0) to the island (at x = 3). Let's describe a possible solution:

  * Initially at t = 0 the beach looks like this: [\underline{s}, 1, 0, i]. 
  * At t = 0 if Koa would decide to swim to x = 1, beach would look like: [s, \underline{2}, 1, i] at t = 1, since 2 > 1 she would drown. So Koa waits 1 second instead and beach looks like [\underline{s}, 2, 1, i] at t = 1. 
  * At t = 1 Koa swims to x = 1, beach looks like [s, \underline{1}, 0, i] at t = 2. Koa doesn't drown because 1 ≤ 1. 
  * At t = 2 Koa swims to x = 2, beach looks like [s, 2, \underline{1}, i] at t = 3. Koa doesn't drown because 1 ≤ 1. 
  * At t = 3 Koa swims to x = 3, beach looks like [s, 1, 0, \underline{i}] at t = 4. 
  * At t = 4 Koa is at x = 3 and she made it! 



We can show that in test case 2 Koa can't get to the island.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int power(long long int x, long long int y);
long long int gcd(long long int a, long long int b);
vector<long long int> ft = {1};
long long int modInv(long long int i) { return power(i, 1000000007 - 2); }
long long int ncr(long long int n, long long int r) {
  return (n >= r ? (ft[n] * modInv(ft[r])) % 1000000007 * modInv(ft[n - r]) %
                       1000000007
                 : 0);
}
long long int power(long long int x, long long int y) {
  long long int res = 1;
  x % 1000000007;
  while (y > 0) {
    if (y & 1) res = (res * x) % 1000000007;
    y = y >> 1;
    x = (x * x) % 1000000007;
  }
  return res;
}
long long int gcd(long long int a, long long int b) {
  if (a == 0) return b;
  return gcd(b % a, a);
}
long long int n, k, l;
long long int dp[101][1001];
vector<long long int> p, d;
long long int solve(long long int x, long long int time) {
  if (x == n + 1) return 1;
  if (time > 999) return 0;
  if (d[x] + p[time % (2 * k)] > l and x != 0) return 0;
  if (dp[x][time] != -1) return dp[x][time];
  return dp[x][time] = (solve(x, time + 1) | solve(x + 1, time + 1));
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long int t;
  cin >> t;
  while (t--) {
    cin >> n >> k >> l;
    memset(dp, -1, sizeof(dp));
    p.resize(2 * k + 1);
    d.resize(n + 1, 0);
    for (long long int i = 1; i < n + 1; i++) cin >> d[i];
    for (long long int i = 0; i < k + 1; i++) p[i] = i;
    long long int j = 2;
    for (long long int i = k + 1; i <= 2 * k; i++) p[i] = k - (i - k);
    if (solve(0, 0))
      cout << "YES\n";
    else
      cout << "NO\n";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
85 11 26
0 20 17 16 19 17 13 2 25 3 13 7 25 2 17 2 24 21 24 0 20 26 24 20 3 6 25 15 24 12 10 16 9 20 25 26 8 4 26 8 8 4 20 0 5 18 6 13 4 0 14 22 5 15 7 7 18 8 11 18 23 23 4 23 18 19 21 20 4 16 6 14 20 22 23 15 10 4 5 1 8 13 0 11 19


(G.2) Fast Input

1
85 11 19
0 20 17 16 19 17 13 2 25 3 13 7 25 2 17 2 24 21 24 0 20 26 24 20 3 6 25 15 24 12 10 16 9 20 25 26 8 4 26 8 8 4 20 0 5 18 6 13 4 0 14 22 5 15 7 7 18 8 11 18 23 23 4 23 18 19 21 20 4 16 6 14 20 22 23 15 10 4 5 1 8 13 0 11 19


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int power(long long int x, long long int y); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long int gcd(long long int a, long long int b); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> ft = {1}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long int modInv(long long int i) { return power(i, 1000000007 - 2); } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long int ncr(long long int n, long long int r) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return (n >= r ? (ft[n] * modInv(ft[r])) % 1000000007 * modInv(ft[n - r]) % /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
                       1000000007 /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
                 : 0); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long int power(long long int x, long long int y) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  long long int res = 1; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  x % 1000000007; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  while (y > 0) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (y & 1) res = (res * x) % 1000000007; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    y = y >> 1; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x * x) % 1000000007; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
long long int gcd(long long int a, long long int b) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0) return b; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b % a, a); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
long long int n, k, l; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
long long int dp[101][1001]; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> p, d; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
long long int solve(long long int x, long long int time) { /* line 29 slow_hit_count: 109791, fast_hit_count: 3999 */
  if (x == n + 1) return 1; /* line 30 slow_hit_count: 109791, fast_hit_count: 3999 */
  if (time > 999) return 0; /* line 31 slow_hit_count: 109265, fast_hit_count: 3999 */
  if (d[x] + p[time % (2 * k)] > l and x != 0) return 0; /* line 32 slow_hit_count: 109159, fast_hit_count: 3995 */
  if (dp[x][time] != -1) return dp[x][time]; /* line 33 slow_hit_count: 96824, fast_hit_count: 2997 */
  return dp[x][time] = (solve(x, time + 1) | solve(x + 1, time + 1)); /* line 34 slow_hit_count: 54895, fast_hit_count: 1999 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  long long int t; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> n >> k >> l; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    memset(dp, -1, sizeof(dp)); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
    p.resize(2 * k + 1); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    d.resize(n + 1, 0); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long int i = 1; i < n + 1; i++) cin >> d[i]; /* line 46 slow_hit_count: 86, fast_hit_count: 86 */
    for (long long int i = 0; i < k + 1; i++) p[i] = i; /* line 47 slow_hit_count: 13, fast_hit_count: 13 */
    long long int j = 2; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long int i = k + 1; i <= 2 * k; i++) p[i] = k - (i - k); /* line 49 slow_hit_count: 12, fast_hit_count: 12 */
    if (solve(0, 0)) /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
      cout << "YES\n"; /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
    else /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "NO\n"; /* line 53 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 55 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify why the program runs differently for the slow input compared to the fast input, we need to focus on the line-level hit counts and analyze what's causing the expensive operations.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis**:
   - **Line 29 (Function `solve`)**: This line is the entry point for the recursive function responsible for exploring possible paths. The hit count is significantly higher for the slow input compared to the fast input (109,791 vs. 3,999).
   - **Line 34 (Recursive Calls)**: The return statement in `solve` makes two recursive calls `solve(x, time + 1)` and `solve(x + 1, time + 1)`. For the slow input, this line is hit 54,895 times, while for the fast input, it's hit only 1,999 times.

2. **Analysis of Recursive Function**:
   - The function `solve` is used to determine if Koa can reach the island by trying all possible combinations of staying at the same position or swimming forward. The recursion explores all possible states within given limits.
   - The recursive depth or number of branches explored causes a dramatic increase in hit counts for the slow input, suggesting more complex conditions or constraints are triggering additional paths.

3. **Data Structure and Loop Interaction**:
   - The recursion seems to be deeply nested or branching extensively when particular conditions in the input are met. This likely happens when the constraints on depth (`d[x] + p[time % (2 * k)] > l`) are on the verge of being violated, causing the algorithm to explore many potential solutions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants for the given problem:

1. **High Tide Constraint**:
   - "If the maximum permissible depth (`l`) is close to the fluctuating tide depth maximum (`k`), causing the depth condition `d[x] + p[time % (2 * k)] <= l` to be barely satisfied or often violated, the recursive exploration may become extensive, leading to performance bottlenecks."

2. **Depth and Tide Synchronization**:
   - "When the array of depths (`d[i]`) contains values that synchronize poorly with the tide pattern `p`, especially when the maximum depth `l` is reached at several consecutive points, the recursion depth may increase, resulting in slow execution."

3. **Deep Recursion**:
   - "If the depth at various points in the sea (`d[i]`) plus the tide reach near the limit of the permissible depth (`l`) frequently or across many meters, the recursive solution might explore many overlapping paths to find a feasible solution, which can degrade performance."

These invariants capture the conditions under which the recursion depth or branching becomes extensive, slowing down the program. They highlight the interaction between the sea depths, tide patterns, and constraints that lead to performance challenges.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is on constraints. In this version constraints are lower. You can make hacks only if all versions of the problem are solved.

Koa the Koala is at the beach!

The beach consists (from left to right) of a shore, n+1 meters of sea and an island at n+1 meters from the shore.

She measured the depth of the sea at 1, 2, ..., n meters from the shore and saved them in array d. d_i denotes the depth of the sea at i meters from the shore for 1 ≤ i ≤ n.

Like any beach this one has tide, the intensity of the tide is measured by parameter k and affects all depths from the beginning at time t=0 in the following way:

  * For a total of k seconds, each second, tide increases all depths by 1.

  * Then, for a total of k seconds, each second, tide decreases all depths by 1.

  * This process repeats again and again (ie. depths increase for k seconds then decrease for k seconds and so on ...).

Formally, let's define 0-indexed array p = [0, 1, 2, …, k - 2, k - 1, k, k - 1, k - 2, …, 2, 1] of length 2k. At time t (0 ≤ t) depth at i meters from the shore equals d_i + p[t mod 2k] (t mod 2k denotes the remainder of the division of t by 2k). Note that the changes occur instantaneously after each second, see the notes for better understanding. 




At time t=0 Koa is standing at the shore and wants to get to the island. Suppose that at some time t (0 ≤ t) she is at x (0 ≤ x ≤ n) meters from the shore:

  * In one second Koa can swim 1 meter further from the shore (x changes to x+1) or not swim at all (x stays the same), in both cases t changes to t+1.

  * As Koa is a bad swimmer, the depth of the sea at the point where she is can't exceed l at integer points of time (or she will drown). More formally, if Koa is at x (1 ≤ x ≤ n) meters from the shore at the moment t (for some integer t≥ 0), the depth of the sea at this point — d_x + p[t mod 2k] — can't exceed l. In other words, d_x + p[t mod 2k] ≤ l must hold always.

  * Once Koa reaches the island at n+1 meters from the shore, she stops and can rest.

Note that while Koa swims tide doesn't have effect on her (ie. she can't drown while swimming). Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide (they are solid ground and she won't drown there). 




Koa wants to know whether she can go from the shore to the island. Help her!

Input

The first line of the input contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Description of the test cases follows.

The first line of each test case contains three integers n, k and l (1 ≤ n ≤ 100; 1 ≤ k ≤ 100; 1 ≤ l ≤ 100) — the number of meters of sea Koa measured and parameters k and l.

The second line of each test case contains n integers d_1, d_2, …, d_n (0 ≤ d_i ≤ 100) — the depths of each meter of sea Koa measured.

It is guaranteed that the sum of n over all test cases does not exceed 100.

Output

For each test case:

Print Yes if Koa can get from the shore to the island, and No otherwise.

You may print each letter in any case (upper or lower).

Example

Input


7
2 1 1
1 0
5 2 3
1 2 3 2 2
4 3 4
0 2 4 3
2 3 5
3 0
7 2 3
3 0 2 1 3 0 1
7 1 4
4 4 3 0 2 4 2
5 2 3
1 2 3 2 2


Output


Yes
No
Yes
Yes
Yes
No
No

Note

In the following s denotes the shore, i denotes the island, x denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at 1, 2, ..., n meters from the shore.

In test case 1 we have n = 2, k = 1, l = 1, p = [ 0, 1 ].

Koa wants to go from shore (at x = 0) to the island (at x = 3). Let's describe a possible solution:

  * Initially at t = 0 the beach looks like this: [\underline{s}, 1, 0, i]. 
  * At t = 0 if Koa would decide to swim to x = 1, beach would look like: [s, \underline{2}, 1, i] at t = 1, since 2 > 1 she would drown. So Koa waits 1 second instead and beach looks like [\underline{s}, 2, 1, i] at t = 1. 
  * At t = 1 Koa swims to x = 1, beach looks like [s, \underline{1}, 0, i] at t = 2. Koa doesn't drown because 1 ≤ 1. 
  * At t = 2 Koa swims to x = 2, beach looks like [s, 2, \underline{1}, i] at t = 3. Koa doesn't drown because 1 ≤ 1. 
  * At t = 3 Koa swims to x = 3, beach looks like [s, 1, 0, \underline{i}] at t = 4. 
  * At t = 4 Koa is at x = 3 and she made it! 



We can show that in test case 2 Koa can't get to the island.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

To implement the performance-characterizing invariants, we will write checker functions in C++:

1. **High Tide Constraint Checker**:
   - This checks if `l` is close to the maximum tide height `k`, which might cause the depth condition to be barely met or violated.

```cpp
void check_high_tide_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High tide condition might cause extensive recursive exploration!" << endl;
        abort();
    }
}
```

2. **Depth and Tide Synchronization Checker**:
   - This checks if the configuration of depths in conjunction with the tide pattern might lead to frequent borderline depth conditions.

```cpp
void check_depth_tide_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Depth and tide synchronization might lead to complex recursion!" << endl;
        abort();
    }
}
```

3. **Deep Recursion Checker**:
   - This checks if many consecutive points have depths near the permissible threshold, potentially causing many recursive branches.

```cpp
void check_deep_recursion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Potential for extensive recursion due to near-threshold depths!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Functions into the Original Program

Now, let's integrate these checker functions into the given C++ program. We'll place the checks at points where we can observe the relevant conditions.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long int power(long long int x, long long int y);
long long int gcd(long long int a, long long int b);
vector<long long int> ft = {1};
long long int modInv(long long int i) { return power(i, 1000000007 - 2); }
long long int ncr(long long int n, long long int r) {
    return (n >= r ? (ft[n] * modInv(ft[r])) % 1000000007 * modInv(ft[n - r]) % 1000000007 : 0);
}
long long int power(long long int x, long long int y) {
    long long int res = 1;
    x % 1000000007;
    while (y > 0) {
        if (y & 1) res = (res * x) % 1000000007;
        y = y >> 1;
        x = (x * x) % 1000000007;
    }
    return res;
}
long long int gcd(long long int a, long long int b) {
    if (a == 0) return b;
    return gcd(b % a, a);
}
long long int n, k, l;
long long int dp[101][1001];
vector<long long int> p, d;

void check_high_tide_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High tide condition might cause extensive recursive exploration!" << endl;
        abort();
    }
}

void check_depth_tide_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Depth and tide synchronization might lead to complex recursion!" << endl;
        abort();
    }
}

void check_deep_recursion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Potential for extensive recursion due to near-threshold depths!" << endl;
        abort();
    }
}

long long int solve(long long int x, long long int time) {
    if (x == n + 1) return 1;
    if (time > 999) return 0;
    if (d[x] + p[time % (2 * k)] > l && x != 0) return 0;
    if (dp[x][time] != -1) return dp[x][time];
    return dp[x][time] = (solve(x, time + 1) | solve(x + 1, time + 1));
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long int t;
    cin >> t;
    while (t--) {
        cin >> n >> k >> l;
        memset(dp, -1, sizeof(dp));
        p.resize(2 * k + 1);
        d.resize(n + 1, 0);
        for (long long int i = 1; i < n + 1; i++) cin >> d[i];
        
        for (long long int i = 0; i < k + 1; i++) p[i] = i;
        long long int j = 2;
        for (long long int i = k + 1; i <= 2 * k; i++) p[i] = k - (i - k);
        
        // Insert checks before solving
        check_high_tide_invariant(l <= k + 1);
        check_depth_tide_invariant(any_of(d.begin() + 1, d.end(), [&](long long int depth) {
            return depth + 2 * k > l;
        }));
        check_deep_recursion_invariant(count_if(d.begin() + 1, d.end(), [&](long long int depth) {
            return depth + p[k] > l;
        }) > n / 2);
        
        if (solve(0, 0))
            cout << "YES\n";
        else
            cout << "NO\n";
    }
}
```

### Explanation:

1. **High Tide Constraint Checker** is placed after reading the input values to ensure `l` is not too close to `k`, which might force recursive exploration.

2. **Depth and Tide Synchronization Checker** is inserted to identify if any depth might push the recursion to explore many paths due to tides.

3. **Deep Recursion Checker** is positioned to verify if a significant portion of the depths are near the threshold when combined with the tide, potentially leading to excessive branching.

These checks help identify conditions under which the recursive strategy becomes costly, allowing a fuzzer or debugger to highlight potential performance issues.

