system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There was an electronic store heist last night.

All keyboards which were in the store yesterday were numbered in ascending order from some integer number x. For example, if x = 4 and there were 3 keyboards in the store, then the devices had indices 4, 5 and 6, and if x = 10 and there were 7 of them then the keyboards had indices 10, 11, 12, 13, 14, 15 and 16.

After the heist, only n keyboards remain, and they have indices a_1, a_2, ..., a_n. Calculate the minimum possible number of keyboards that have been stolen. The staff remember neither x nor the number of keyboards in the store before the heist.

Input

The first line contains single integer n (1 ≤ n ≤ 1 000) — the number of keyboards in the store that remained after the heist.

The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{9}) — the indices of the remaining keyboards. The integers a_i are given in arbitrary order and are pairwise distinct.

Output

Print the minimum possible number of keyboards that have been stolen if the staff remember neither x nor the number of keyboards in the store before the heist.

Examples

Input

4
10 13 12 8


Output

2


Input

5
7 5 6 4 8


Output

0

Note

In the first example, if x=8 then minimum number of stolen keyboards is equal to 2. The keyboards with indices 9 and 11 were stolen during the heist.

In the second example, if x=4 then nothing was stolen during the heist.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  cin >> n;
  int arr[n];
  for (int i = 0; i < n; i++) cin >> arr[i];
  sort(arr, arr + n);
  int x = arr[0];
  int last = arr[n - 1];
  int stolen = 0;
  int c = 0;
  for (int i = x; i <= last; i++) {
    if (arr[c] != i)
      stolen++;
    else
      c++;
  }
  cout << stolen;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
000000010 100000001 100000002


(G.2) Fast Input

3
100000000 100000001 100000002


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int arr[n]; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> arr[i]; /* line 7 slow_hit_count: 4, fast_hit_count: 4 */
  sort(arr, arr + n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int x = arr[0]; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int last = arr[n - 1]; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int stolen = 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int c = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = x; i <= last; i++) { /* line 13 slow_hit_count: 99999994, fast_hit_count: 4 */
    if (arr[c] != i) /* line 14 slow_hit_count: 99999993, fast_hit_count: 3 */
      stolen++; /* line 15 slow_hit_count: 99999990, fast_hit_count: 0 */
    else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      c++; /* line 17 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cout << stolen; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, we'll analyze the line-level hit counts and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Hit Count Analysis

1. **Line 13 (For Loop):** 
   - **Slow Input:** Hit count is 99,999,994.
   - **Fast Input:** Hit count is 4.
   - **Analysis:** The loop iterates from `x` to `last`, and the slow input has a much larger range (nearly 100 million iterations), which is a significant factor in the slowdown.

2. **Line 14 (Conditional Check):**
   - **Slow Input:** Hit count is 99,999,993.
   - **Fast Input:** Hit count is 3.
   - **Analysis:** This if-condition checks whether the current index `i` is in the array. Most of these checks fail in the slow input, leading to many unnecessary iterations.

3. **Line 15 (Stolen Counter Increment):**
   - **Slow Input:** Hit count is 99,999,990.
   - **Fast Input:** Hit count is 0.
   - **Analysis:** The `stolen` counter increments frequently for the slow input, indicating many assumed missing elements.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance invariants:

1. **Invariant on Large Gaps and Sparse Arrays:**

   **Natural Language Description:**
   - "If the range between the smallest and largest indices of the remaining keyboards is very large compared to the number of keyboards `n`, the program may become slow as it iterates over many assumed missing indices."

   **Explanation:**
   - The program's performance deteriorates when the difference `last - x` is large while `n` remains small, leading to extensive iteration in the loop.

2. **Invariant on Sparse Distribution:**

   **Natural Language Description:**
   - "If the indices of remaining keyboards are sparsely distributed, such that the average gap between consecutive indices is much larger than 1, performance may degrade due to repeated unsuccessful checks for missing indices."

   **Explanation:**
   - When indices are not densely packed, the loop performs numerous failed checks for expected indices that are not present, significantly increasing runtime.

3. **Invariant on High Iteration Costs:**

   **Natural Language Description:**
   - "If iterating from the smallest to the largest expected index results in a loop that executes many times more than the number of remaining keyboards `n`, this suggests an inefficiency due to the sheer number of iterations required."

   **Explanation:**
   - A large iteration count relative to `n` implies the function spends excessive time checking indices that do not exist in the input, which is inefficient.

### Suggestions for Future Inputs

- For future inputs, ensure the indices of remaining keyboards are as densely packed as possible to avoid large iteration ranges.
- Consider implementing early exit conditions or optimizing the loop to handle sparse distributions more efficiently.

By understanding these performance characteristics, we can aim to optimize the program or adjust inputs to prevent similar bottlenecks in future cases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There was an electronic store heist last night.

All keyboards which were in the store yesterday were numbered in ascending order from some integer number x. For example, if x = 4 and there were 3 keyboards in the store, then the devices had indices 4, 5 and 6, and if x = 10 and there were 7 of them then the keyboards had indices 10, 11, 12, 13, 14, 15 and 16.

After the heist, only n keyboards remain, and they have indices a_1, a_2, ..., a_n. Calculate the minimum possible number of keyboards that have been stolen. The staff remember neither x nor the number of keyboards in the store before the heist.

Input

The first line contains single integer n (1 ≤ n ≤ 1 000) — the number of keyboards in the store that remained after the heist.

The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^{9}) — the indices of the remaining keyboards. The integers a_i are given in arbitrary order and are pairwise distinct.

Output

Print the minimum possible number of keyboards that have been stolen if the staff remember neither x nor the number of keyboards in the store before the heist.

Examples

Input

4
10 13 12 8


Output

2


Input

5
7 5 6 4 8


Output

0

Note

In the first example, if x=8 then minimum number of stolen keyboards is equal to 2. The keyboards with indices 9 and 11 were stolen during the heist.

In the second example, if x=4 then nothing was stolen during the heist.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Here's the checker code for each performance-characterizing invariant derived earlier. These checks will determine when the program might experience a performance bottleneck due to large iteration ranges or sparse distributions of indices.

1. **Invariant on Large Gaps and Sparse Arrays:**

```cpp
void check_large_gap_invariant(int x, int last, int n) {
    if ((last - x) > 10 * n) { // Condition: Large range compared to the number of keyboards
        cerr << "Warning: Performance bottleneck condition triggered due to large index range!" << endl;
        abort();
    }
}
```

2. **Invariant on Sparse Distribution:**

```cpp
void check_sparse_distribution_invariant(int x, int last, int n) {
    if ((last - x) > 2 * n) { // Condition: Sparse distribution
        cerr << "Warning: Performance bottleneck condition triggered due to sparse distribution!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate the above checker functions into the original C++ program. We'll place these checks right after sorting and before entering the loop to ensure they don't add overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for large gap invariant
void check_large_gap_invariant(int x, int last, int n) {
    if ((last - x) > 10 * n) { // Condition: Large range compared to the number of keyboards
        cerr << "Warning: Performance bottleneck condition triggered due to large index range!" << endl;
        abort();
    }
}

// Checker for sparse distribution invariant
void check_sparse_distribution_invariant(int x, int last, int n) {
    if ((last - x) > 2 * n) { // Condition: Sparse distribution
        cerr << "Warning: Performance bottleneck condition triggered due to sparse distribution!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++) cin >> arr[i];
    sort(arr, arr + n);
    int x = arr[0];
    int last = arr[n - 1];

    // Perform checks after sorting and identifying the range
    check_large_gap_invariant(x, last, n);
    check_sparse_distribution_invariant(x, last, n);

    int stolen = 0;
    int c = 0;
    for (int i = x; i <= last; i++) {
        if (arr[c] != i)
            stolen++;
        else
            c++;
    }
    cout << stolen;
    return 0;
}
```

### Explanation

- **Placement of Checks:** The checks are placed after sorting and before the loop to avoid adding runtime overhead during the iteration.
- **Check Conditions:** The conditions are based on the difference between `x` and `last` relative to `n`, as determined by our natural language invariants.
- **Utility:** These checks will help identify potential performance bottlenecks when the input distribution leads to large iteration ranges or sparse indices.

This instrumented code ensures that any future inputs triggering known performance bottlenecks will raise warnings, allowing for easy identification and debugging of slow scenarios.

