system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Anadi has a set of dominoes. Every domino has two parts, and each part contains some dots. For every a and b such that 1 ≤ a ≤ b ≤ 6, there is exactly one domino with a dots on one half and b dots on the other half. The set contains exactly 21 dominoes. Here is an exact illustration of his set:

<image>

Also, Anadi has an undirected graph without self-loops and multiple edges. He wants to choose some dominoes and place them on the edges of this graph. He can use at most one domino of each type. Each edge can fit at most one domino. It's not necessary to place a domino on each edge of the graph.

When placing a domino on an edge, he also chooses its direction. In other words, one half of any placed domino must be directed toward one of the endpoints of the edge and the other half must be directed toward the other endpoint. There's a catch: if there are multiple halves of dominoes directed toward the same vertex, each of these halves must contain the same number of dots.

How many dominoes at most can Anadi place on the edges of his graph?

Input

The first line contains two integers n and m (1 ≤ n ≤ 7, 0 ≤ m ≤ (n⋅(n-1))/(2)) — the number of vertices and the number of edges in the graph.

The next m lines contain two integers each. Integers in the i-th line are a_i and b_i (1 ≤ a, b ≤ n, a ≠ b) and denote that there is an edge which connects vertices a_i and b_i.

The graph might be disconnected. It's however guaranteed that the graph doesn't contain any self-loops, and that there is at most one edge between any pair of vertices.

Output

Output one integer which denotes the maximum number of dominoes which Anadi can place on the edges of the graph.

Examples

Input


4 4
1 2
2 3
3 4
4 1


Output


4


Input


7 0


Output


0


Input


3 1
1 3


Output


1


Input


7 21
1 2
1 3
1 4
1 5
1 6
1 7
2 3
2 4
2 5
2 6
2 7
3 4
3 5
3 6
3 7
4 5
4 6
4 7
5 6
5 7
6 7


Output


16

Note

Here is an illustration of Anadi's graph from the first sample test:

<image>

And here is one of the ways to place a domino on each of its edges:

<image>

Note that each vertex is faced by the halves of dominoes with the same number of dots. For instance, all halves directed toward vertex 1 have three dots.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long INF = 1e9 + 7;
const long long sz = 1e5 + 20;
const long long N = 7;
vector<pair<long long, long long> > edges;
long long c[N];
long long rec() {
  set<pair<long long, long long> > s;
  for (auto edge : edges) {
    long long u = edge.first, v = edge.second, cu = c[u - 1], cv = c[v - 1];
    if (cu > cv) swap(cu, cv);
    s.insert(make_pair(cu, cv));
  }
  return s.size();
}
void solve() {
  long long n, m;
  cin >> n >> m;
  long long u, v;
  for (long long i = 0; i < m; i++) {
    cin >> u >> v;
    if (u > v) swap(u, v);
    edges.push_back(make_pair(u, v));
  }
  if (n <= 6)
    cout << m << endl;
  else {
    long long ans = 0;
    for (long long extra = 0; extra < N - 1; extra++) {
      for (long long i = 0; i < N - 1; i++) c[i] = i;
      c[6] = extra;
      do {
        ans = max(rec(), ans);
      } while (next_permutation(c, c + N));
    }
    cout << ans << endl;
  }
  return;
}
int32_t main() {
  clock_t st = clock();
  ios_base ::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  long long t = 1;
  while (t--) {
    solve();
  }
  clog << (long double)((clock() - st) / CLOCKS_PER_SEC) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7 11
2 4
1 3
5 1
2 7
1 4
4 3
2 1
7 6
3 2
7 4
4 5


(G.2) Fast Input

7 2
2 4
1 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long sz = 1e5 + 20; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<long long, long long> > edges; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long c[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long rec() { /* line 8 slow_hit_count: 14921, fast_hit_count: 14921 */
  set<pair<long long, long long> > s; /* line 9 slow_hit_count: 14921, fast_hit_count: 14921 */
  for (auto edge : edges) { /* line 10 slow_hit_count: 179052, fast_hit_count: 44763 */
    long long u = edge.first, v = edge.second, cu = c[u - 1], cv = c[v - 1]; /* line 11 slow_hit_count: 164131, fast_hit_count: 29842 */
    if (cu > cv) swap(cu, cv); /* line 12 slow_hit_count: 164131, fast_hit_count: 29842 */
    s.insert(make_pair(cu, cv)); /* line 13 slow_hit_count: 164131, fast_hit_count: 29842 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return s.size(); /* line 15 slow_hit_count: 29842, fast_hit_count: 29842 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  long long u, v; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < m; i++) { /* line 21 slow_hit_count: 12, fast_hit_count: 3 */
    cin >> u >> v; /* line 22 slow_hit_count: 11, fast_hit_count: 2 */
    if (u > v) swap(u, v); /* line 23 slow_hit_count: 11, fast_hit_count: 2 */
    edges.push_back(make_pair(u, v)); /* line 24 slow_hit_count: 11, fast_hit_count: 2 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if (n <= 6) /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    cout << m << endl; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    long long ans = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long extra = 0; extra < N - 1; extra++) { /* line 30 slow_hit_count: 7, fast_hit_count: 7 */
      for (long long i = 0; i < N - 1; i++) c[i] = i; /* line 31 slow_hit_count: 42, fast_hit_count: 42 */
      c[6] = extra; /* line 32 slow_hit_count: 6, fast_hit_count: 6 */
      do { /* line 33 slow_hit_count: 14915, fast_hit_count: 14915 */
        ans = max(rec(), ans); /* line 34 slow_hit_count: 14921, fast_hit_count: 14921 */
      } while (next_permutation(c, c + N)); /* line 35 slow_hit_count: 14921, fast_hit_count: 14921 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return; /* line 39 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  clock_t st = clock(); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base ::sync_with_stdio(false); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  long long t = 1; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 48 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  clog << (long double)((clock() - st) / CLOCKS_PER_SEC) << endl; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

From the hit count analysis, the following lines and segments are critical:

1. **Loop in `rec()` function (Line 10):** 
   - The hit count for the loop over `edges` (Line 10) is significantly higher for the slow input (179,052 vs. 44,763). This indicates that the number of iterations this loop executes is much larger for the slow input.

2. **Permutation loop in `solve()` (Line 33):**
   - The `do...while` loop which repeatedly calls `rec()` function (Line 33 - 35) has a high hit count both in fast and slow runs (14,921). However, the impact on performance becomes apparent due to interactions with `rec()` function, suggesting that permutations are processed numerous times, leading to inefficient recursion depth or repeated state checks.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance characterizing invariants:

1. **Permutation Exhaustion Invariant:**
   - **Natural Language Description:** When the number of vertices `n` is at the maximum constraint `n = 7`, the program enters a slow path due to the exhaustive generation and evaluation of permutations of vertex labels. The high number of permutations leads to excessive computations in the recursive function.
   - **Rationale:** The number of permutations grows factorially with the increase in vertex number `n`. For `n = 7`, this becomes significant, as each permutation results in multiple calls to `rec()`.

2. **Recursive Edge Processing Invariant:**
   - **Natural Language Description:** If the graph's edge count `m` is large relative to `n`, particularly close to the upper bound of `m = 21`, the recursive function `rec()` may be called excessively due to larger sets of edges being processed repeatedly. This increases linearly with edge count but permutation effects multiply the load.
   - **Rationale:** More edges mean more potential domino placements to consider, increasing the number of recursive and permutation checks needed.

3. **Repeated State Transition Invariant:**
   - **Natural Language Description:** When the input graph is dense or has a substantial number of connections, the number of transitions or swaps in the `rec()` function increases. The requirement to check valid domino placements in such states leads to potential bottlenecks.
   - **Rationale:** The `rec()` function involves a set insertion for each edge, and with a large number of edges and permutations, this results in increased computational overhead.

By abstracting these observations, the focus is on how input patterns (like the number of vertices close to the maximum, or a dense graph) affect permutations and recursive calculations, leading to inefficient processing and slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Anadi has a set of dominoes. Every domino has two parts, and each part contains some dots. For every a and b such that 1 ≤ a ≤ b ≤ 6, there is exactly one domino with a dots on one half and b dots on the other half. The set contains exactly 21 dominoes. Here is an exact illustration of his set:

<image>

Also, Anadi has an undirected graph without self-loops and multiple edges. He wants to choose some dominoes and place them on the edges of this graph. He can use at most one domino of each type. Each edge can fit at most one domino. It's not necessary to place a domino on each edge of the graph.

When placing a domino on an edge, he also chooses its direction. In other words, one half of any placed domino must be directed toward one of the endpoints of the edge and the other half must be directed toward the other endpoint. There's a catch: if there are multiple halves of dominoes directed toward the same vertex, each of these halves must contain the same number of dots.

How many dominoes at most can Anadi place on the edges of his graph?

Input

The first line contains two integers n and m (1 ≤ n ≤ 7, 0 ≤ m ≤ (n⋅(n-1))/(2)) — the number of vertices and the number of edges in the graph.

The next m lines contain two integers each. Integers in the i-th line are a_i and b_i (1 ≤ a, b ≤ n, a ≠ b) and denote that there is an edge which connects vertices a_i and b_i.

The graph might be disconnected. It's however guaranteed that the graph doesn't contain any self-loops, and that there is at most one edge between any pair of vertices.

Output

Output one integer which denotes the maximum number of dominoes which Anadi can place on the edges of the graph.

Examples

Input


4 4
1 2
2 3
3 4
4 1


Output


4


Input


7 0


Output


0


Input


3 1
1 3


Output


1


Input


7 21
1 2
1 3
1 4
1 5
1 6
1 7
2 3
2 4
2 5
2 6
2 7
3 4
3 5
3 6
3 7
4 5
4 6
4 7
5 6
5 7
6 7


Output


16

Note

Here is an illustration of Anadi's graph from the first sample test:

<image>

And here is one of the ways to place a domino on each of its edges:

<image>

Note that each vertex is faced by the halves of dominoes with the same number of dots. For instance, all halves directed toward vertex 1 have three dots.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Functions

Based on the performance-characterizing invariants derived earlier, here are the C++ checker functions:

```cpp
void check_permutation_exhaustion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to permutation exhaustion!" << endl;
        abort();
    }
}

void check_recursive_edge_processing_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to excessive recursive edge processing!" << endl;
        abort();
    }
}

void check_repeated_state_transition_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to repeated state transitions in recursion!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Now we will integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long INF = 1e9 + 7;
const long long sz = 1e5 + 20;
const long long N = 7;
vector<pair<long long, long long> > edges;
long long c[N];

// Checker functions
void check_permutation_exhaustion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to permutation exhaustion!" << endl;
        abort();
    }
}

void check_recursive_edge_processing_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to excessive recursive edge processing!" << endl;
        abort();
    }
}

void check_repeated_state_transition_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to repeated state transitions in recursion!" << endl;
        abort();
    }
}

long long rec() {
    set<pair<long long, long long> > s;
    for (auto edge : edges) {
        long long u = edge.first, v = edge.second, cu = c[u - 1], cv = c[v - 1];
        if (cu > cv) swap(cu, cv);
        s.insert(make_pair(cu, cv));
    }
    return s.size();
}

void solve() {
    long long n, m;
    cin >> n >> m;

    // Check for potential permutation exhaustion
    check_permutation_exhaustion_invariant(n == 7);

    long long u, v;
    for (long long i = 0; i < m; i++) {
        cin >> u >> v;
        if (u > v) swap(u, v);
        edges.push_back(make_pair(u, v));
    }

    if (n <= 6) {
        cout << m << endl;
    } else {
        long long ans = 0;

        // Check for excessive recursive edge processing and state transitions
        check_recursive_edge_processing_invariant(m > 15);
        check_repeated_state_transition_invariant(edges.size() > 15);

        for (long long extra = 0; extra < N - 1; extra++) {
            for (long long i = 0; i < N - 1; i++) c[i] = i;
            c[6] = extra;
            do {
                ans = max(rec(), ans);
            } while (next_permutation(c, c + N));
        }
        cout << ans << endl;
    }
    return;
}

int32_t main() {
    clock_t st = clock();
    ios_base ::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    long long t = 1;
    while (t--) {
        solve();
    }
    clog << (long double)((clock() - st) / CLOCKS_PER_SEC) << endl;
    return 0;
}
```

### Explanation of Integration

1. **Permutation Exhaustion Check:** Placed after reading inputs for `n` and `m`, this check verifies if `n` is at the maximum constraint (`n == 7`) where the permutation workload becomes significant.

2. **Recursive Edge Processing Check:** Placed before entering the main logic for `n > 6`, this check verifies if `m` is large, indicating excessive recursive edge processing.

3. **Repeated State Transition Check:** Similar placement as the Recursive Edge Processing Check, ensuring the graph is dense enough to cause repeated state transitions.

These checks are intended to abort execution when a bottleneck condition is detected, assisting in identifying potential performance issues during testing and fuzzing.

