system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A renowned abstract artist Sasha, drawing inspiration from nowhere, decided to paint a picture entitled "Special Olympics". He justly thought that, if the regular Olympic games have five rings, then the Special ones will do with exactly two rings just fine.

Let us remind you that a ring is a region located between two concentric circles with radii r and R (r < R). These radii are called internal and external, respectively. Concentric circles are circles with centers located at the same point.

Soon a white canvas, which can be considered as an infinite Cartesian plane, had two perfect rings, painted with solid black paint. As Sasha is very impulsive, the rings could have different radii and sizes, they intersect and overlap with each other in any way. We know only one thing for sure: the centers of the pair of rings are not the same.

When Sasha got tired and fell into a deep sleep, a girl called Ilona came into the room and wanted to cut a circle for the sake of good memories. To make the circle beautiful, she decided to cut along the contour.

We'll consider a contour to be a continuous closed line through which there is transition from one color to another (see notes for clarification). If the contour takes the form of a circle, then the result will be cutting out a circle, which Iona wants.

But the girl's inquisitive mathematical mind does not rest: how many ways are there to cut a circle out of the canvas?

Input

The input contains two lines. 

Each line has four space-separated integers xi, yi, ri, Ri, that describe the i-th ring; xi and yi are coordinates of the ring's center, ri and Ri are the internal and external radii of the ring correspondingly ( - 100 ≤ xi, yi ≤ 100; 1 ≤ ri < Ri ≤ 100). 

It is guaranteed that the centers of the rings do not coinside.

Output

A single integer — the number of ways to cut out a circle from the canvas.

Examples

Input

60 60 45 55
80 80 8 32


Output

1

Input

60 60 45 55
80 60 15 25


Output

4

Input

50 50 35 45
90 50 35 45


Output

0

Note

Figures for test samples are given below. The possible cuts are marked with red dotted line. 

<image> <image> <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long int x1, y1, x2, y2, r1, R1, r2, R2;
  cin >> x1 >> y1 >> r1 >> R1;
  cin >> x2 >> y2 >> r2 >> R2;
  x1 *= 10000;
  x2 *= 10000;
  y1 *= 10000;
  y2 *= 10000;
  r1 *= 10000;
  r2 *= 10000;
  R1 *= 10000;
  R2 *= 10000;
  vector<bool> good(4, true);
  long long dis = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
  for (long long int rad = r1; rad <= R1; ++rad) {
    if ((dis < (rad + r2) * (rad + r2)) && (dis > (rad - r2) * (rad - r2))) {
      good[2] = false;
    }
    if ((dis < (rad + R2) * (rad + R2)) && (dis > (rad - R2) * (rad - R2))) {
      good[3] = false;
    }
  }
  for (long long int rad = r2; rad <= R2; ++rad) {
    if ((dis < (rad + r1) * (rad + r1)) && (dis > (rad - r1) * (rad - r1))) {
      good[1] = false;
    }
    if ((dis < (rad + R1) * (rad + R1)) && (dis > (rad - R1) * (rad - R1))) {
      good[0] = false;
    }
  }
  int ans = 0;
  for (int i = 0; i < 4; ++i) {
    if (good[i]) {
      ++ans;
    }
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

61 2 20 40
67 10 10 59


(G.2) Fast Input

61 2 20 40
67 10 10 30


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long int x1, y1, x2, y2, r1, R1, r2, R2; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x1 >> y1 >> r1 >> R1; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> x2 >> y2 >> r2 >> R2; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  x1 *= 10000; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  x2 *= 10000; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  y1 *= 10000; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  y2 *= 10000; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  r1 *= 10000; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  r2 *= 10000; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  R1 *= 10000; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  R2 *= 10000; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  vector<bool> good(4, true); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  long long dis = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int rad = r1; rad <= R1; ++rad) { /* line 17 slow_hit_count: 200002, fast_hit_count: 200002 */
    if ((dis < (rad + r2) * (rad + r2)) && (dis > (rad - r2) * (rad - r2))) { /* line 18 slow_hit_count: 200001, fast_hit_count: 200001 */
      good[2] = false; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    if ((dis < (rad + R2) * (rad + R2)) && (dis > (rad - R2) * (rad - R2))) { /* line 21 slow_hit_count: 200001, fast_hit_count: 200001 */
      good[3] = false; /* line 22 slow_hit_count: 0, fast_hit_count: 199999 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long int rad = r2; rad <= R2; ++rad) { /* line 25 slow_hit_count: 490002, fast_hit_count: 200002 */
    if ((dis < (rad + r1) * (rad + r1)) && (dis > (rad - r1) * (rad - r1))) { /* line 26 slow_hit_count: 490001, fast_hit_count: 200001 */
      good[1] = false; /* line 27 slow_hit_count: 199999, fast_hit_count: 199999 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    if ((dis < (rad + R1) * (rad + R1)) && (dis > (rad - R1) * (rad - R1))) { /* line 29 slow_hit_count: 490001, fast_hit_count: 200001 */
      good[0] = false; /* line 30 slow_hit_count: 199999, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 4; ++i) { /* line 34 slow_hit_count: 5, fast_hit_count: 5 */
    if (good[i]) { /* line 35 slow_hit_count: 4, fast_hit_count: 4 */
      ++ans; /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the provided C program, I will analyze the line-level hit counts for both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The outer loop on line 17 and the inner conditions on lines 18 and 21 run 200,002 times for both inputs.
   - The second loop on line 25, along with its conditions on lines 26 and 29, runs significantly more for the slow input (490,002 times) compared to the fast input (200,002 times).

2. **Pinpoint Lines with More Hits:**
   - Lines 25-31 are critical since they have significantly more hits during the slow input run.
   - Particularly, lines 26 and 29 are hit 490,001 times for the slow input, indicating they are evaluated far more frequently.

3. **Interaction with Data Structures and Loops:**
   - The loops iterate over the range of radii for both rings. The nested conditions check distances between radii and centers.
   - The slowdown seems to be related to the upper range of the radii in the second loop (lines 25-32).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Conditions Triggering Slow Paths:**
   - Slow performance is primarily caused by the high iteration count in the second loop (lines 25-32). This is influenced by the range from `r2` to `R2`.
   - If `R2 - r2` is large compared to `R1 - r1`, it may lead to excessive iterations in the second loop.

2. **Natural Language Description of Invariants:**

   - **Invariant 1:** "If the distance between the centers of the rings is such that it allows the second ring to have a large range of valid radii (from `r2` to `R2`), the program may exhibit slow performance due to excessive loop iterations."
   
   - **Invariant 2:** "When the outer radius of the second ring `R2` is significantly larger than its inner radius `r2`, and the distance between ring centers is conducive to many overlapping checks, slow execution is likely."

3. **Thresholds and Input Patterns:**
   - These invariants suggest that a wider range of possible radii within a ring (especially the second ring) and specific distance relationships between centers can lead to performance issues.

### Conclusion

By understanding these invariants, future inputs that match the described conditions can be flagged as potentially slow-running scenarios. This characterization helps in adjusting input validation or algorithm optimization to handle such cases more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A renowned abstract artist Sasha, drawing inspiration from nowhere, decided to paint a picture entitled "Special Olympics". He justly thought that, if the regular Olympic games have five rings, then the Special ones will do with exactly two rings just fine.

Let us remind you that a ring is a region located between two concentric circles with radii r and R (r < R). These radii are called internal and external, respectively. Concentric circles are circles with centers located at the same point.

Soon a white canvas, which can be considered as an infinite Cartesian plane, had two perfect rings, painted with solid black paint. As Sasha is very impulsive, the rings could have different radii and sizes, they intersect and overlap with each other in any way. We know only one thing for sure: the centers of the pair of rings are not the same.

When Sasha got tired and fell into a deep sleep, a girl called Ilona came into the room and wanted to cut a circle for the sake of good memories. To make the circle beautiful, she decided to cut along the contour.

We'll consider a contour to be a continuous closed line through which there is transition from one color to another (see notes for clarification). If the contour takes the form of a circle, then the result will be cutting out a circle, which Iona wants.

But the girl's inquisitive mathematical mind does not rest: how many ways are there to cut a circle out of the canvas?

Input

The input contains two lines. 

Each line has four space-separated integers xi, yi, ri, Ri, that describe the i-th ring; xi and yi are coordinates of the ring's center, ri and Ri are the internal and external radii of the ring correspondingly ( - 100 ≤ xi, yi ≤ 100; 1 ≤ ri < Ri ≤ 100). 

It is guaranteed that the centers of the rings do not coinside.

Output

A single integer — the number of ways to cut out a circle from the canvas.

Examples

Input

60 60 45 55
80 80 8 32


Output

1

Input

60 60 45 55
80 60 15 25


Output

4

Input

50 50 35 45
90 50 35 45


Output

0

Note

Figures for test samples are given below. The possible cuts are marked with red dotted line. 

<image> <image> <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers for Performance-Characterizing Invariants in C++

Based on the identified performance bottlenecks, here are the C++ checkers:

#### Invariant 1: Large Range in Second Ring
"If the distance between the centers of the rings is such that it allows the second ring to have a large range of valid radii (from `r2` to `R2`), the program may exhibit slow performance due to excessive loop iterations."

```cpp
void check_large_range_invariant(long long r2, long long R2) {
    if ((R2 - r2) > 50000) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - Large range in second ring." << endl;
        abort();
    }
}
```

#### Invariant 2: Overlapping Radii Causing Many Iterations
"When the outer radius of the second ring `R2` is significantly larger than its inner radius `r2`, and the distance between ring centers is conducive to many overlapping checks, slow execution is likely."

```cpp
void check_overlap_invariant(long long dis, long long r1, long long R1, long long r2, long long R2) {
    if ((R2 - r2) > 50000 && dis < (R2 + R1) * (R2 + R1) && dis > (R2 - r1) * (R2 - r1)) {
        cerr << "Warning: Performance bottleneck condition triggered - Overlapping radii causing many iterations." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Here's the instrumented C++ program with integrated checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_range_invariant(long long r2, long long R2) {
    if ((R2 - r2) > 50000) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - Large range in second ring." << endl;
        abort();
    }
}

void check_overlap_invariant(long long dis, long long r1, long long R1, long long r2, long long R2) {
    if ((R2 - r2) > 50000 && dis < (R2 + R1) * (R2 + R1) && dis > (R2 - r1) * (R2 - r1)) {
        cerr << "Warning: Performance bottleneck condition triggered - Overlapping radii causing many iterations." << endl;
        abort();
    }
}

int main() {
    long long int x1, y1, x2, y2, r1, R1, r2, R2;
    cin >> x1 >> y1 >> r1 >> R1;
    cin >> x2 >> y2 >> r2 >> R2;
    x1 *= 10000;
    x2 *= 10000;
    y1 *= 10000;
    y2 *= 10000;
    r1 *= 10000;
    r2 *= 10000;
    R1 *= 10000;
    R2 *= 10000;
    
    // Check for performance bottlenecks
    check_large_range_invariant(r2, R2);
    long long dis = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
    check_overlap_invariant(dis, r1, R1, r2, R2);

    vector<bool> good(4, true);
    for (long long int rad = r1; rad <= R1; ++rad) {
        if ((dis < (rad + r2) * (rad + r2)) && (dis > (rad - r2) * (rad - r2))) {
            good[2] = false;
        }
        if ((dis < (rad + R2) * (rad + R2)) && (dis > (rad - R2) * (rad - R2))) {
            good[3] = false;
        }
    }
    for (long long int rad = r2; rad <= R2; ++rad) {
        if ((dis < (rad + r1) * (rad + r1)) && (dis > (rad - r1) * (rad - r1))) {
            good[1] = false;
        }
        if ((dis < (rad + R1) * (rad + R1)) && (dis > (rad - R1) * (rad - R1))) {
            good[0] = false;
        }
    }
    int ans = 0;
    for (int i = 0; i < 4; ++i) {
        if (good[i]) {
            ++ans;
        }
    }
    cout << ans;
    return 0;
}
```

### Comments:
- **Checker for Large Range in Second Ring:** This check is placed after scaling the radii since it depends on the difference between `R2` and `r2`.
- **Checker for Overlapping Radii:** Similarly, this check is placed after computing the distance `dis`, providing early detection of potential bottleneck scenarios.
- **Thresholds:** The thresholds used here are illustrative. They should be adjusted based on real performance profiling data or domain-specific knowledge.

