system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A renowned abstract artist Sasha, drawing inspiration from nowhere, decided to paint a picture entitled "Special Olympics". He justly thought that, if the regular Olympic games have five rings, then the Special ones will do with exactly two rings just fine.

Let us remind you that a ring is a region located between two concentric circles with radii r and R (r < R). These radii are called internal and external, respectively. Concentric circles are circles with centers located at the same point.

Soon a white canvas, which can be considered as an infinite Cartesian plane, had two perfect rings, painted with solid black paint. As Sasha is very impulsive, the rings could have different radii and sizes, they intersect and overlap with each other in any way. We know only one thing for sure: the centers of the pair of rings are not the same.

When Sasha got tired and fell into a deep sleep, a girl called Ilona came into the room and wanted to cut a circle for the sake of good memories. To make the circle beautiful, she decided to cut along the contour.

We'll consider a contour to be a continuous closed line through which there is transition from one color to another (see notes for clarification). If the contour takes the form of a circle, then the result will be cutting out a circle, which Iona wants.

But the girl's inquisitive mathematical mind does not rest: how many ways are there to cut a circle out of the canvas?

Input

The input contains two lines. 

Each line has four space-separated integers xi, yi, ri, Ri, that describe the i-th ring; xi and yi are coordinates of the ring's center, ri and Ri are the internal and external radii of the ring correspondingly ( - 100 ≤ xi, yi ≤ 100; 1 ≤ ri < Ri ≤ 100). 

It is guaranteed that the centers of the rings do not coinside.

Output

A single integer — the number of ways to cut out a circle from the canvas.

Examples

Input

60 60 45 55
80 80 8 32


Output

1

Input

60 60 45 55
80 60 15 25


Output

4

Input

50 50 35 45
90 50 35 45


Output

0

Note

Figures for test samples are given below. The possible cuts are marked with red dotted line. 

<image> <image> <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const double pi = acos(-1.0);
double GetDis(double x1, double y1, double x2, double y2) {
  return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}
int main() {
  double xx, yy, dis, EPS;
  double x[2], y[2], r[2], R[2];
  scanf("%lf%lf%lf%lf", &x[0], &y[0], &r[0], &R[0]);
  scanf("%lf%lf%lf%lf", &x[1], &y[1], &r[1], &R[1]);
  int ans;
  bool flag;
  flag = true;
  ans = 0;
  for (int i = 0; i <= 360000; i++) {
    EPS = i / 180000.0 * pi;
    xx = x[1] + cos(EPS) * r[1];
    yy = y[1] + sin(EPS) * r[1];
    dis = GetDis(xx, yy, x[0], y[0]);
    if (dis > r[0] && dis < R[0]) {
      flag = false;
      break;
    }
  }
  if (flag) ans++;
  flag = true;
  for (int i = 0; i <= 360000; i++) {
    EPS = i / 180000.0 * pi;
    xx = x[1] + cos(EPS) * R[1];
    yy = y[1] + sin(EPS) * R[1];
    dis = GetDis(xx, yy, x[0], y[0]);
    if (dis > r[0] && dis < R[0]) {
      flag = false;
      break;
    }
  }
  if (flag) ans++;
  flag = true;
  for (int i = 0; i <= 360000; i++) {
    EPS = i / 180000.0 * pi;
    xx = x[0] + cos(EPS) * r[0];
    yy = y[0] + sin(EPS) * r[0];
    dis = GetDis(xx, yy, x[1], y[1]);
    if (dis > r[1] && dis < R[1]) {
      flag = false;
      break;
    }
  }
  if (flag) ans++;
  flag = true;
  for (int i = 0; i <= 360000; i++) {
    EPS = i / 180000.0 * pi;
    xx = x[0] + cos(EPS) * R[0];
    yy = y[0] + sin(EPS) * R[0];
    dis = GetDis(xx, yy, x[1], y[1]);
    if (dis > r[1] && dis < R[1]) {
      flag = false;
      break;
    }
  }
  if (flag) ans++;
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

-16 -18 20 40
3 -18 1 59


(G.2) Fast Input

-16 -18 20 40
3 -34 1 59


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = acos(-1.0); /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
double GetDis(double x1, double y1, double x2, double y2) { /* line 3 slow_hit_count: 720005, fast_hit_count: 108361 */
  return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)); /* line 4 slow_hit_count: 720005, fast_hit_count: 108361 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  double xx, yy, dis, EPS; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  double x[2], y[2], r[2], R[2]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%lf%lf%lf%lf", &x[0], &y[0], &r[0], &R[0]); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lf%lf%lf%lf", &x[1], &y[1], &r[1], &R[1]); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int ans; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  bool flag; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  flag = true; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  ans = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 360000; i++) { /* line 15 slow_hit_count: 360002, fast_hit_count: 1 */
    EPS = i / 180000.0 * pi; /* line 16 slow_hit_count: 360001, fast_hit_count: 1 */
    xx = x[1] + cos(EPS) * r[1]; /* line 17 slow_hit_count: 360001, fast_hit_count: 1 */
    yy = y[1] + sin(EPS) * r[1]; /* line 18 slow_hit_count: 360001, fast_hit_count: 1 */
    dis = GetDis(xx, yy, x[0], y[0]); /* line 19 slow_hit_count: 360001, fast_hit_count: 1 */
    if (dis > r[0] && dis < R[0]) { /* line 20 slow_hit_count: 360001, fast_hit_count: 1 */
      flag = false; /* line 21 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag) ans++; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  flag = true; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 360000; i++) { /* line 27 slow_hit_count: 360002, fast_hit_count: 108358 */
    EPS = i / 180000.0 * pi; /* line 28 slow_hit_count: 360001, fast_hit_count: 108358 */
    xx = x[1] + cos(EPS) * R[1]; /* line 29 slow_hit_count: 360001, fast_hit_count: 108358 */
    yy = y[1] + sin(EPS) * R[1]; /* line 30 slow_hit_count: 360001, fast_hit_count: 108358 */
    dis = GetDis(xx, yy, x[0], y[0]); /* line 31 slow_hit_count: 360001, fast_hit_count: 108358 */
    if (dis > r[0] && dis < R[0]) { /* line 32 slow_hit_count: 360001, fast_hit_count: 108358 */
      flag = false; /* line 33 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag) ans++; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  flag = true; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 360000; i++) { /* line 39 slow_hit_count: 2, fast_hit_count: 1 */
    EPS = i / 180000.0 * pi; /* line 40 slow_hit_count: 2, fast_hit_count: 1 */
    xx = x[0] + cos(EPS) * r[0]; /* line 41 slow_hit_count: 2, fast_hit_count: 1 */
    yy = y[0] + sin(EPS) * r[0]; /* line 42 slow_hit_count: 2, fast_hit_count: 1 */
    dis = GetDis(xx, yy, x[1], y[1]); /* line 43 slow_hit_count: 2, fast_hit_count: 1 */
    if (dis > r[1] && dis < R[1]) { /* line 44 slow_hit_count: 2, fast_hit_count: 1 */
      flag = false; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag) ans++; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  flag = true; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 360000; i++) { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
    EPS = i / 180000.0 * pi; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
    xx = x[0] + cos(EPS) * R[0]; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
    yy = y[0] + sin(EPS) * R[0]; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    dis = GetDis(xx, yy, x[1], y[1]); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    if (dis > r[1] && dis < R[1]) { /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
      flag = false; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag) ans++; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", ans); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C code and identify the conditions that lead to slow execution, we need to analyze the line-level hit counts and understand the logic behind the code.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - The function `GetDis` (line 3-4) is called 720,005 times in the slow input compared to 108,361 times in the fast input.
   - The most significant differences occur in the first two loops that iterate over a large number of angles (lines 15-36):
     - **First Loop (lines 15-25):** The loop completes its full 360,000 iterations for the slow input without breaking early, which suggests that the condition `dis > r[0] && dis < R[0]` is never met, thus it exhausts all iterations.
     - **Second Loop (lines 27-37):** A similar pattern emerges where the slow input takes significantly longer to terminate the loop.

2. **Pinpointing Problematic Segments:**
   - The loops from line 15 to line 36 are executed more extensively for the slow input, indicating these loops are central to the performance issues.
   - The condition checks within these loops, particularly the distance calculations and subsequent checks (`dis > r[0] && dis < R[0]`), suggest that specific geometric configurations cause the loops to execute more iterations.

3. **Data Structure and Loop Interactions:**
   - The loops perform dense checks around the ring perimeters using trigonometric functions and distance calculations, which are computationally expensive, especially when not short-circuited by satisfying the `if` condition.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, let's derive invariants that capture the performance characteristics:

1. **Invariant #1: Extensive Angle Checking**
   - **Natural Language Description:** "If the range between the internal and external radii of one ring encompasses the entire range of points on the perimeter of the other ring, the program may enter a computationally expensive path due to exhaustive checking over all angles."
   - **Explanation:** The code's slow path is likely triggered when the geometric configuration of the rings leads to all angles being checked without early termination due to the condition never being met, resulting in running the complete loop for 360,000 iterations.

2. **Invariant #2: Trigonometric Calculations in Dense Iterations**
   - **Natural Language Description:** "When two rings are configured such that the entirety of one ring's perimeter is checked against the interior band of another ring due to their position and size, the loops will execute a large number of trigonometric calculations, slowing down the program."
   - **Explanation:** The inefficiency arises from repeatedly calculating trigonometric functions and distances for each angle when the rings' configuration does not allow the condition to fail rapidly, leading to full loop execution.

3. **Invariant #3: Radius Span Impact on Loop Break Condition**
   - **Natural Language Description:** "If the span of radii or the center-to-center distance between rings results in non-intersecting bands for the majority of checked angles, the code will demonstrate poor performance by failing to break early from the loops."
   - **Explanation:** Performance issues correlate with scenarios where the checks don't quickly exclude angles due to the spatial relationship between ring bands, causing maximum iterations.

These invariants focus on geometric and spatial configuration conditions leading to performance bottlenecks. They abstract away from specific input values and focus on categories of configurations that result in exhaustive computation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A renowned abstract artist Sasha, drawing inspiration from nowhere, decided to paint a picture entitled "Special Olympics". He justly thought that, if the regular Olympic games have five rings, then the Special ones will do with exactly two rings just fine.

Let us remind you that a ring is a region located between two concentric circles with radii r and R (r < R). These radii are called internal and external, respectively. Concentric circles are circles with centers located at the same point.

Soon a white canvas, which can be considered as an infinite Cartesian plane, had two perfect rings, painted with solid black paint. As Sasha is very impulsive, the rings could have different radii and sizes, they intersect and overlap with each other in any way. We know only one thing for sure: the centers of the pair of rings are not the same.

When Sasha got tired and fell into a deep sleep, a girl called Ilona came into the room and wanted to cut a circle for the sake of good memories. To make the circle beautiful, she decided to cut along the contour.

We'll consider a contour to be a continuous closed line through which there is transition from one color to another (see notes for clarification). If the contour takes the form of a circle, then the result will be cutting out a circle, which Iona wants.

But the girl's inquisitive mathematical mind does not rest: how many ways are there to cut a circle out of the canvas?

Input

The input contains two lines. 

Each line has four space-separated integers xi, yi, ri, Ri, that describe the i-th ring; xi and yi are coordinates of the ring's center, ri and Ri are the internal and external radii of the ring correspondingly ( - 100 ≤ xi, yi ≤ 100; 1 ≤ ri < Ri ≤ 100). 

It is guaranteed that the centers of the rings do not coinside.

Output

A single integer — the number of ways to cut out a circle from the canvas.

Examples

Input

60 60 45 55
80 80 8 32


Output

1

Input

60 60 45 55
80 60 15 25


Output

4

Input

50 50 35 45
90 50 35 45


Output

0

Note

Figures for test samples are given below. The possible cuts are marked with red dotted line. 

<image> <image> <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here we will translate the previously derived natural language performance invariants into runtime checks using C++. The checks will be implemented as standalone functions that can be integrated with the existing program.

#### Invariant 1 Check

**Natural Language Description:** "If the range between the internal and external radii of one ring encompasses the entire range of points on the perimeter of the other ring, the program may enter a computationally expensive path due to exhaustive checking over all angles."

**C++ Code:**

```cpp
void check_encompassing_radii(double innerR, double outerR, double otherInnerR, double otherOuterR, double centerDistance) {
    // Condition checks if one ring's radius fully falls within the gap of another ring
    if (centerDistance + otherOuterR <= outerR && centerDistance + otherInnerR >= innerR) {
        cerr << "Warning: Performance bottleneck condition triggered - encompassing radii!" << endl;
        abort();
    }
}
```

#### Invariant 2 Check

**Natural Language Description:** "When two rings are configured such that the entirety of one ring's perimeter is checked against the interior band of another ring, the loops will execute a large number of trigonometric calculations, slowing down the program."

**C++ Code:**

```cpp
void check_trigonometric_load(double centerDistance, double r1, double R1, double r2, double R2) {
    // Condition based on the rings' configuration leading to excessive trigonometric calculations
    if (centerDistance < std::abs(R1 - R2) || centerDistance > r1 + R2) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive trigonometric load!" << endl;
        abort();
    }
}
```

#### Invariant 3 Check

**Natural Language Description:** "If the span of radii or the center-to-center distance between rings results in non-intersecting bands for the majority of checked angles, the code will demonstrate poor performance by failing to break early from the loops."

**C++ Code:**

```cpp
void check_non_intersecting_bands(double centerDistance, double r1, double R1, double r2, double R2) {
    // Check if the configuration makes it unlikely for the rings to intersect
    if (centerDistance >= R1 + r2) {
        cerr << "Warning: Performance bottleneck condition triggered - non-intersecting bands!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, let's integrate these checkers into the original C++ program. We'll place the checks in appropriate locations to avoid overhead in tight loops and ensure they trigger before performance-critical sections.

```cpp
#include <bits/stdc++.h>
const double pi = acos(-1.0);
double GetDis(double x1, double y1, double x2, double y2) {
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}

// Checker functions
void check_encompassing_radii(double innerR, double outerR, double otherInnerR, double otherOuterR, double centerDistance) {
    if (centerDistance + otherOuterR <= outerR && centerDistance + otherInnerR >= innerR) {
        cerr << "Warning: Performance bottleneck condition triggered - encompassing radii!" << endl;
        abort();
    }
}

void check_trigonometric_load(double centerDistance, double r1, double R1, double r2, double R2) {
    if (centerDistance < std::abs(R1 - R2) || centerDistance > r1 + R2) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive trigonometric load!" << endl;
        abort();
    }
}

void check_non_intersecting_bands(double centerDistance, double r1, double R1, double r2, double R2) {
    if (centerDistance >= R1 + r2) {
        cerr << "Warning: Performance bottleneck condition triggered - non-intersecting bands!" << endl;
        abort();
    }
}

int main() {
    double xx, yy, dis, EPS;
    double x[2], y[2], r[2], R[2];
    scanf("%lf%lf%lf%lf", &x[0], &y[0], &r[0], &R[0]);
    scanf("%lf%lf%lf%lf", &x[1], &y[1], &r[1], &R[1]);
    
    double centerDistance = GetDis(x[0], y[0], x[1], y[1]);
    
    // Insert the checks at the beginning
    check_encompassing_radii(r[0], R[0], r[1], R[1], centerDistance);
    check_encompassing_radii(r[1], R[1], r[0], R[0], centerDistance);
    
    check_trigonometric_load(centerDistance, r[0], R[0], r[1], R[1]);
    check_trigonometric_load(centerDistance, r[1], R[1], r[0], R[0]);
    
    check_non_intersecting_bands(centerDistance, r[0], R[0], r[1], R[1]);
    check_non_intersecting_bands(centerDistance, r[1], R[1], r[0], R[0]);
    
    int ans = 0;
    bool flag = true;
    
    for (int i = 0; i <= 360000; i++) {
        EPS = i / 180000.0 * pi;
        xx = x[1] + cos(EPS) * r[1];
        yy = y[1] + sin(EPS) * r[1];
        dis = GetDis(xx, yy, x[0], y[0]);
        if (dis > r[0] && dis < R[0]) {
            flag = false;
            break;
        }
    }
    if (flag) ans++;
    
    flag = true;
    for (int i = 0; i <= 360000; i++) {
        EPS = i / 180000.0 * pi;
        xx = x[1] + cos(EPS) * R[1];
        yy = y[1] + sin(EPS) * R[1];
        dis = GetDis(xx, yy, x[0], y[0]);
        if (dis > r[0] && dis < R[0]) {
            flag = false;
            break;
        }
    }
    if (flag) ans++;
    
    flag = true;
    for (int i = 0; i <= 360000; i++) {
        EPS = i / 180000.0 * pi;
        xx = x[0] + cos(EPS) * r[0];
        yy = y[0] + sin(EPS) * r[0];
        dis = GetDis(xx, yy, x[1], y[1]);
        if (dis > r[1] && dis < R[1]) {
            flag = false;
            break;
        }
    }
    if (flag) ans++;
    
    flag = true;
    for (int i = 0; i <= 360000; i++) {
        EPS = i / 180000.0 * pi;
        xx = x[0] + cos(EPS) * R[0];
        yy = y[0] + sin(EPS) * R[0];
        dis = GetDis(xx, yy, x[1], y[1]);
        if (dis > r[1] && dis < R[1]) {
            flag = false;
            break;
        }
    }
    if (flag) ans++;
    
    printf("%d\n", ans);
    return 0;
}
```

**Explanation:**
- The performance checkers have been placed after reading the inputs and before the loops begin to ensure we detect configurations that would cause performance issues. 
- These checks do not execute inside the loops, preventing additional overhead during loop execution.

