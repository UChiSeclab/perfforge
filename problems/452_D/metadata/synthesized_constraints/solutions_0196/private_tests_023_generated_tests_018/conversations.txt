system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have k pieces of laundry, each of which you want to wash, dry and fold. You are at a laundromat that has n1 washing machines, n2 drying machines and n3 folding machines. Each machine can process only one piece of laundry at a time. You can't dry a piece of laundry before it is washed, and you can't fold it before it is dried. Moreover, after a piece of laundry is washed, it needs to be immediately moved into a drying machine, and after it is dried, it needs to be immediately moved into a folding machine.

It takes t1 minutes to wash one piece of laundry in a washing machine, t2 minutes to dry it in a drying machine, and t3 minutes to fold it in a folding machine. Find the smallest number of minutes that is enough to wash, dry and fold all the laundry you have.

Input

The only line of the input contains seven integers: k, n1, n2, n3, t1, t2, t3 (1 ≤ k ≤ 104; 1 ≤ n1, n2, n3, t1, t2, t3 ≤ 1000).

Output

Print one integer — smallest number of minutes to do all your laundry.

Examples

Input

1 1 1 1 5 5 5


Output

15


Input

8 4 3 2 10 5 2


Output

32

Note

In the first example there's one instance of each machine, each taking 5 minutes to complete. You have only one piece of laundry, so it takes 15 minutes to process it.

In the second example you start washing first two pieces at moment 0. If you start the third piece of laundry immediately, then by the time it is dried, there will be no folding machine available, so you have to wait, and start washing third piece at moment 2. Similarly, you can't start washing next piece until moment 5, since otherwise there will be no dryer available, when it is washed. Start time for each of the eight pieces of laundry is 0, 0, 2, 5, 10, 10, 12 and 15 minutes respectively. The last piece of laundry will be ready after 15 + 10 + 5 + 2 = 32 minutes.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int k, n1, n2, n3, t1, t2, t3;
int t = 0;
vector<int> f;
bool can(int x) {
  int c1 = f.end() - upper_bound(f.begin(), f.end(), t + x - t1);
  int c2 = f.end() - upper_bound(f.begin(), f.end(), t + x - t2);
  int c3 = f.end() - upper_bound(f.begin(), f.end(), t + x - t3);
  if (c1 >= n1) return false;
  if (c2 >= n2) return false;
  if (c3 >= n3) return false;
  return true;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin >> k >> n1 >> n2 >> n3 >> t1 >> t2 >> t3;
  for (int p = 1; p <= k; p++) {
    int l = 0;
    int r = 1000 * 1000;
    while (l < r) {
      int m = (l + r) / 2;
      if (can(m))
        r = m;
      else
        l = m + 1;
    }
    t += l;
    f.push_back(t);
  }
  cout << t + t1 + t2 + t3;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4977 559 426 363 225 692 935


(G.2) Fast Input

1576 559 426 363 225 692 935


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int k, n1, n2, n3, t1, t2, t3; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int t = 0; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> f; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool can(int x) { /* line 6 slow_hit_count: 99540, fast_hit_count: 31520 */
  int c1 = f.end() - upper_bound(f.begin(), f.end(), t + x - t1); /* line 7 slow_hit_count: 99540, fast_hit_count: 31520 */
  int c2 = f.end() - upper_bound(f.begin(), f.end(), t + x - t2); /* line 8 slow_hit_count: 99540, fast_hit_count: 31520 */
  int c3 = f.end() - upper_bound(f.begin(), f.end(), t + x - t3); /* line 9 slow_hit_count: 99540, fast_hit_count: 31520 */
  if (c1 >= n1) return false; /* line 10 slow_hit_count: 99540, fast_hit_count: 31520 */
  if (c2 >= n2) return false; /* line 11 slow_hit_count: 99540, fast_hit_count: 31520 */
  if (c3 >= n3) return false; /* line 12 slow_hit_count: 99540, fast_hit_count: 31520 */
  return true; /* line 13 slow_hit_count: 99449, fast_hit_count: 31492 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k >> n1 >> n2 >> n3 >> t1 >> t2 >> t3; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int p = 1; p <= k; p++) { /* line 18 slow_hit_count: 4978, fast_hit_count: 1577 */
    int l = 0; /* line 19 slow_hit_count: 4977, fast_hit_count: 1576 */
    int r = 1000 * 1000; /* line 20 slow_hit_count: 4977, fast_hit_count: 1576 */
    while (l < r) { /* line 21 slow_hit_count: 104517, fast_hit_count: 33096 */
      int m = (l + r) / 2; /* line 22 slow_hit_count: 99540, fast_hit_count: 31520 */
      if (can(m)) /* line 23 slow_hit_count: 99540, fast_hit_count: 31520 */
        r = m; /* line 24 slow_hit_count: 99449, fast_hit_count: 31492 */
      else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        l = m + 1; /* line 26 slow_hit_count: 91, fast_hit_count: 28 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    t += l; /* line 28 slow_hit_count: 4977, fast_hit_count: 1576 */
    f.push_back(t); /* line 29 slow_hit_count: 4977, fast_hit_count: 1576 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << t + t1 + t2 + t3; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, we need to analyze the difference in line-level hit counts between the slow and fast runs, and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Analysis:**
   - The function `can(int x)` is called significantly more often in the slow input (99,540 times) compared to the fast input (31,520 times). This indicates that the binary search loop in the `main` function is the core of the performance issue.
   - Specifically, lines inside the `while (l < r)` loop (lines 21 to 26) have a disproportionately high hit count in the slow input. The binary search likely performs more iterations in the slow case.
   - The condition checks in `can` function (lines 7-12) are executed many times, indicating potential inefficiencies in how constraints are checked.

2. **Interaction with Data Structures:**
   - The vector `f` is used to store completion times and is accessed using `upper_bound`. The performance of `upper_bound` is logarithmic, but repeated calls within the loop can accumulate significant overhead.

3. **Loop and Conditional Analysis:**
   - The loop structure of the binary search (lines 21-27) indicates that the performance depends on how quickly the `can` function converges to a solution.
   - The logic inside `can` involves repeatedly searching `f` with `upper_bound` for each attempt to place a piece of laundry, which could be causing the slowdown due to the repetitive nature of the calls.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language performance invariants describe under what conditions the code slows down:

1. **Invariant 1: High Laundry to Machine Ratio**
   - **Description:** "When the number of pieces of laundry `k` is significantly larger than the number of available machines (`n1`, `n2`, or `n3`), the program may slow down due to frequent re-evaluation of machine availability."
   - This occurs because more iterations are needed to find a valid configuration in the binary search, as indicated by increased calls to `can`.

2. **Invariant 2: Workload Imbalance**
   - **Description:** "If the time to complete one stage (washing, drying, or folding) significantly exceeds the others, the program may become slow as it waits for the bottleneck stage to free up available machines."
   - This condition can cause the algorithm to iterate more times, waiting for the slowest stage to catch up, leading to increased hit counts in the `can` function.

3. **Invariant 3: Frequent Vector Access**
   - **Description:** "If the vector `f` representing completion times grows large, performance may degrade due to frequent accesses and searches through this vector."
   - The repeated use of `upper_bound` could be causing increased computational overhead, especially when `k` is large.

These invariants help identify the key factors leading to performance slowdowns in this C program. By recognizing these conditions, one can focus on optimizing or redesigning the algorithm to handle these scenarios more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have k pieces of laundry, each of which you want to wash, dry and fold. You are at a laundromat that has n1 washing machines, n2 drying machines and n3 folding machines. Each machine can process only one piece of laundry at a time. You can't dry a piece of laundry before it is washed, and you can't fold it before it is dried. Moreover, after a piece of laundry is washed, it needs to be immediately moved into a drying machine, and after it is dried, it needs to be immediately moved into a folding machine.

It takes t1 minutes to wash one piece of laundry in a washing machine, t2 minutes to dry it in a drying machine, and t3 minutes to fold it in a folding machine. Find the smallest number of minutes that is enough to wash, dry and fold all the laundry you have.

Input

The only line of the input contains seven integers: k, n1, n2, n3, t1, t2, t3 (1 ≤ k ≤ 104; 1 ≤ n1, n2, n3, t1, t2, t3 ≤ 1000).

Output

Print one integer — smallest number of minutes to do all your laundry.

Examples

Input

1 1 1 1 5 5 5


Output

15


Input

8 4 3 2 10 5 2


Output

32

Note

In the first example there's one instance of each machine, each taking 5 minutes to complete. You have only one piece of laundry, so it takes 15 minutes to process it.

In the second example you start washing first two pieces at moment 0. If you start the third piece of laundry immediately, then by the time it is dried, there will be no folding machine available, so you have to wait, and start washing third piece at moment 2. Similarly, you can't start washing next piece until moment 5, since otherwise there will be no dryer available, when it is washed. Start time for each of the eight pieces of laundry is 0, 0, 2, 5, 10, 10, 12 and 15 minutes respectively. The last piece of laundry will be ready after 15 + 10 + 5 + 2 = 32 minutes.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here, we will implement runtime checks for the performance-characterizing invariants derived earlier. Each check will be a standalone code snippet that corresponds to one of the invariants identified.

#### Invariant 1: High Laundry to Machine Ratio

```cpp
void check_high_laundry_machine_ratio(int k, int n1, int n2, int n3) {
    if (k > 10 * std::min({n1, n2, n3})) {  // Arbitrary threshold to detect high ratio
        cerr << "Warning: Performance bottleneck - High laundry to machine ratio!" << endl;
        abort();
    }
}
```

#### Invariant 2: Workload Imbalance

```cpp
void check_workload_imbalance(int t1, int t2, int t3) {
    if ((t1 > 10 * t2) || (t1 > 10 * t3) || (t2 > 10 * t1) || (t2 > 10 * t3) || (t3 > 10 * t1) || (t3 > 10 * t2)) {
        cerr << "Warning: Performance bottleneck - Workload imbalance between stages!" << endl;
        abort();
    }
}
```

#### Invariant 3: Frequent Vector Access

```cpp
void check_frequent_vector_access(const vector<int>& f) {
    if (f.size() > 1000) {  // Threshold for detecting potentially problematic vector size
        cerr << "Warning: Performance bottleneck - Frequent access to large vector!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Now, we will integrate these checks into the original C++ program. We'll place the checks after reading inputs and before entering the heavy loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_high_laundry_machine_ratio(int k, int n1, int n2, int n3) {
    if (k > 10 * std::min({n1, n2, n3})) {  // Arbitrary threshold
        cerr << "Warning: Performance bottleneck - High laundry to machine ratio!" << endl;
        abort();
    }
}

void check_workload_imbalance(int t1, int t2, int t3) {
    if ((t1 > 10 * t2) || (t1 > 10 * t3) || (t2 > 10 * t1) || (t2 > 10 * t3) || (t3 > 10 * t1) || (t3 > 10 * t2)) {
        cerr << "Warning: Performance bottleneck - Workload imbalance between stages!" << endl;
        abort();
    }
}

void check_frequent_vector_access(const vector<int>& f) {
    if (f.size() > 1000) {  // Threshold for detecting large size
        cerr << "Warning: Performance bottleneck - Frequent access to large vector!" << endl;
        abort();
    }
}

int k, n1, n2, n3, t1, t2, t3;
int t = 0;
vector<int> f;

bool can(int x) {
    int c1 = f.end() - upper_bound(f.begin(), f.end(), t + x - t1);
    int c2 = f.end() - upper_bound(f.begin(), f.end(), t + x - t2);
    int c3 = f.end() - upper_bound(f.begin(), f.end(), t + x - t3);
    if (c1 >= n1) return false;
    if (c2 >= n2) return false;
    if (c3 >= n3) return false;
    return true;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin >> k >> n1 >> n2 >> n3 >> t1 >> t2 >> t3;
    
    // Insert checkers after reading inputs
    check_high_laundry_machine_ratio(k, n1, n2, n3);
    check_workload_imbalance(t1, t2, t3);

    for (int p = 1; p <= k; p++) {
        int l = 0;
        int r = 1000 * 1000;
        while (l < r) {
            int m = (l + r) / 2;
            if (can(m))
                r = m;
            else
                l = m + 1;
        }
        t += l;
        f.push_back(t);

        // Check vector after each addition
        check_frequent_vector_access(f);
    }

    cout << t + t1 + t2 + t3;
    return 0;
}
```

### Explanation:

- **Invariant 1** is checked right after reading the input, ensuring that the program doesn't proceed if a high laundry-to-machine ratio suggests potential slowdown.
- **Invariant 2** is similarly checked after reading input to catch workload imbalances early.
- **Invariant 3** is checked after every addition to the vector `f` to ensure that its size does not grow excessively, which might indicate frequent access issues.


