system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have k pieces of laundry, each of which you want to wash, dry and fold. You are at a laundromat that has n1 washing machines, n2 drying machines and n3 folding machines. Each machine can process only one piece of laundry at a time. You can't dry a piece of laundry before it is washed, and you can't fold it before it is dried. Moreover, after a piece of laundry is washed, it needs to be immediately moved into a drying machine, and after it is dried, it needs to be immediately moved into a folding machine.

It takes t1 minutes to wash one piece of laundry in a washing machine, t2 minutes to dry it in a drying machine, and t3 minutes to fold it in a folding machine. Find the smallest number of minutes that is enough to wash, dry and fold all the laundry you have.

Input

The only line of the input contains seven integers: k, n1, n2, n3, t1, t2, t3 (1 ≤ k ≤ 104; 1 ≤ n1, n2, n3, t1, t2, t3 ≤ 1000).

Output

Print one integer — smallest number of minutes to do all your laundry.

Examples

Input

1 1 1 1 5 5 5


Output

15


Input

8 4 3 2 10 5 2


Output

32

Note

In the first example there's one instance of each machine, each taking 5 minutes to complete. You have only one piece of laundry, so it takes 15 minutes to process it.

In the second example you start washing first two pieces at moment 0. If you start the third piece of laundry immediately, then by the time it is dried, there will be no folding machine available, so you have to wait, and start washing third piece at moment 2. Similarly, you can't start washing next piece until moment 5, since otherwise there will be no dryer available, when it is washed. Start time for each of the eight pieces of laundry is 0, 0, 2, 5, 10, 10, 12 and 15 minutes respectively. The last piece of laundry will be ready after 15 + 10 + 5 + 2 = 32 minutes.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int MOD = 1000000007;
long long inf = 1e18;
using namespace std;
vector<int> A, B, C;
int as, bs, cs;
int a, b, c;
int k, n1, n2, n3, t1, t2, t3;
bool ok(int t) {
  if (a == n1) return false;
  int cntb = 0;
  for (int i = bs; i < B.size(); i++) {
    if (t + t1 < B[i] + t2) {
      cntb++;
    }
  }
  for (int i = as; i < A.size(); i++) {
    if (t + t1 < A[i] + t1 + t2) {
      cntb++;
    }
  }
  if (cntb >= n2) return false;
  int cntc = 0;
  for (int i = cs; i < C.size(); i++) {
    if (t + t1 + t2 < C[i] + t3) {
      cntc++;
    }
  }
  for (int i = bs; i < B.size(); i++) {
    if (t + t1 + t2 < B[i] + t2 + t3) {
      cntc++;
    }
  }
  for (int i = as; i < A.size(); i++) {
    if (t + t1 + t2 < A[i] + t1 + t2 + t3) {
      cntc++;
    }
  }
  if (cntc >= n3) return false;
  return true;
}
int main() {
  ios::sync_with_stdio(0);
  cin >> k >> n1 >> n2 >> n3 >> t1 >> t2 >> t3;
  int t, x;
  bool cont;
  for (t = 1; t <= 30000001; t++) {
    if (k == 0 && c == 0 && b == 0 && a == 0) {
      break;
    }
    cont = true;
    while (c != 0 && cont) {
      x = C[cs];
      cont = false;
      if (x + t3 == t) {
        cs++;
        c--;
        cont = true;
      }
    }
    cont = true;
    while (b != 0 && cont) {
      x = B[bs];
      cont = false;
      if (x + t2 == t) {
        bs++;
        b--;
        cont = true;
        C.push_back(t);
        c++;
      }
    }
    cont = true;
    while (a != 0 && cont) {
      x = A[as];
      cont = false;
      if (x + t1 == t) {
        as++;
        a--;
        cont = true;
        B.push_back(t);
        b++;
      }
    }
    cont = true;
    while (k != 0 && cont) {
      x = t;
      cont = false;
      if (ok(t)) {
        A.push_back(x);
        a++;
        cont = true;
        k--;
      }
    }
  }
  cout << t - 2;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4977 559 426 363 225 692 935


(G.2) Fast Input

1576 559 426 363 225 692 935


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int MOD = 1000000007; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long inf = 1e18; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> A, B, C; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int as, bs, cs; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int a, b, c; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int k, n1, n2, n3, t1, t2, t3; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
bool ok(int t) { /* line 9 slow_hit_count: 17132, fast_hit_count: 5316 */
  if (a == n1) return false; /* line 10 slow_hit_count: 17132, fast_hit_count: 5316 */
  int cntb = 0; /* line 11 slow_hit_count: 17132, fast_hit_count: 5316 */
  for (int i = bs; i < B.size(); i++) { /* line 12 slow_hit_count: 3282680, fast_hit_count: 1010100 */
    if (t + t1 < B[i] + t2) { /* line 13 slow_hit_count: 3265548, fast_hit_count: 1004784 */
      cntb++; /* line 14 slow_hit_count: 2203773, fast_hit_count: 678084 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = as; i < A.size(); i++) { /* line 17 slow_hit_count: 1966199, fast_hit_count: 602454 */
    if (t + t1 < A[i] + t1 + t2) { /* line 18 slow_hit_count: 1949067, fast_hit_count: 597138 */
      cntb++; /* line 19 slow_hit_count: 1949067, fast_hit_count: 597138 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  if (cntb >= n2) return false; /* line 22 slow_hit_count: 17132, fast_hit_count: 5316 */
  int cntc = 0; /* line 23 slow_hit_count: 17132, fast_hit_count: 5316 */
  for (int i = cs; i < C.size(); i++) { /* line 24 slow_hit_count: 5771408, fast_hit_count: 1470384 */
    if (t + t1 + t2 < C[i] + t3) { /* line 25 slow_hit_count: 5754276, fast_hit_count: 1465068 */
      cntc++; /* line 26 slow_hit_count: 84942, fast_hit_count: 26136 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = bs; i < B.size(); i++) { /* line 29 slow_hit_count: 3282680, fast_hit_count: 1010100 */
    if (t + t1 + t2 < B[i] + t2 + t3) { /* line 30 slow_hit_count: 3265548, fast_hit_count: 1004784 */
      cntc++; /* line 31 slow_hit_count: 3265548, fast_hit_count: 1004784 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = as; i < A.size(); i++) { /* line 34 slow_hit_count: 1966199, fast_hit_count: 602454 */
    if (t + t1 + t2 < A[i] + t1 + t2 + t3) { /* line 35 slow_hit_count: 1949067, fast_hit_count: 597138 */
      cntc++; /* line 36 slow_hit_count: 1949067, fast_hit_count: 597138 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  if (cntc >= n3) return false; /* line 39 slow_hit_count: 17132, fast_hit_count: 5316 */
  return true; /* line 40 slow_hit_count: 4977, fast_hit_count: 1576 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k >> n1 >> n2 >> n3 >> t1 >> t2 >> t3; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  int t, x; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  bool cont; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  for (t = 1; t <= 30000001; t++) { /* line 47 slow_hit_count: 14009, fast_hit_count: 5594 */
    if (k == 0 && c == 0 && b == 0 && a == 0) { /* line 48 slow_hit_count: 14009, fast_hit_count: 5594 */
      break; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    cont = true; /* line 51 slow_hit_count: 14008, fast_hit_count: 5593 */
    while (c != 0 && cont) { /* line 52 slow_hit_count: 32061, fast_hit_count: 11839 */
      x = C[cs]; /* line 53 slow_hit_count: 18053, fast_hit_count: 6246 */
      cont = false; /* line 54 slow_hit_count: 18053, fast_hit_count: 6246 */
      if (x + t3 == t) { /* line 55 slow_hit_count: 18053, fast_hit_count: 6246 */
        cs++; /* line 56 slow_hit_count: 4977, fast_hit_count: 1576 */
        c--; /* line 57 slow_hit_count: 4977, fast_hit_count: 1576 */
        cont = true; /* line 58 slow_hit_count: 4977, fast_hit_count: 1576 */
      } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    cont = true; /* line 61 slow_hit_count: 14008, fast_hit_count: 5593 */
    while (b != 0 && cont) { /* line 62 slow_hit_count: 28659, fast_hit_count: 10624 */
      x = B[bs]; /* line 63 slow_hit_count: 14651, fast_hit_count: 5031 */
      cont = false; /* line 64 slow_hit_count: 14651, fast_hit_count: 5031 */
      if (x + t2 == t) { /* line 65 slow_hit_count: 14651, fast_hit_count: 5031 */
        bs++; /* line 66 slow_hit_count: 4977, fast_hit_count: 1576 */
        b--; /* line 67 slow_hit_count: 4977, fast_hit_count: 1576 */
        cont = true; /* line 68 slow_hit_count: 4977, fast_hit_count: 1576 */
        C.push_back(t); /* line 69 slow_hit_count: 4977, fast_hit_count: 1576 */
        c++; /* line 70 slow_hit_count: 4977, fast_hit_count: 1576 */
      } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    cont = true; /* line 73 slow_hit_count: 14008, fast_hit_count: 5593 */
    while (a != 0 && cont) { /* line 74 slow_hit_count: 22121, fast_hit_count: 8289 */
      x = A[as]; /* line 75 slow_hit_count: 8113, fast_hit_count: 2696 */
      cont = false; /* line 76 slow_hit_count: 8113, fast_hit_count: 2696 */
      if (x + t1 == t) { /* line 77 slow_hit_count: 8113, fast_hit_count: 2696 */
        as++; /* line 78 slow_hit_count: 4977, fast_hit_count: 1576 */
        a--; /* line 79 slow_hit_count: 4977, fast_hit_count: 1576 */
        cont = true; /* line 80 slow_hit_count: 4977, fast_hit_count: 1576 */
        B.push_back(t); /* line 81 slow_hit_count: 4977, fast_hit_count: 1576 */
        b++; /* line 82 slow_hit_count: 4977, fast_hit_count: 1576 */
      } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    cont = true; /* line 85 slow_hit_count: 14008, fast_hit_count: 5593 */
    while (k != 0 && cont) { /* line 86 slow_hit_count: 31140, fast_hit_count: 10909 */
      x = t; /* line 87 slow_hit_count: 17132, fast_hit_count: 5316 */
      cont = false; /* line 88 slow_hit_count: 17132, fast_hit_count: 5316 */
      if (ok(t)) { /* line 89 slow_hit_count: 17132, fast_hit_count: 5316 */
        A.push_back(x); /* line 90 slow_hit_count: 4977, fast_hit_count: 1576 */
        a++; /* line 91 slow_hit_count: 4977, fast_hit_count: 1576 */
        cont = true; /* line 92 slow_hit_count: 4977, fast_hit_count: 1576 */
        k--; /* line 93 slow_hit_count: 4977, fast_hit_count: 1576 */
      } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  cout << t - 2; /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 99 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program and derive performance-characterizing invariants, let's break down the process into phases as per your instructions.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The function `ok(int t)` seems to be a critical component as it has significantly more hits for the slow input compared to the fast input.
   - The loops within `ok(int t)` (lines 12-16, 17-21, 24-28, 29-33, 34-38) show a stark increase in hit counts for the slow input, indicating they are major contributors to slow performance.
   - Specifically, lines 24-38 deal with counting operations on the data structures `C`, `B`, and `A`, which involve multiple nested loops and conditions.

2. **Data Structure Interactions**:
   - The program's performance relies heavily on managing queues (vectors `A`, `B`, `C`) that keep track of laundry items at different stages.
   - The loops are checking the availability of machines and the status of the laundry, leading to repeated evaluations and potential delays when the machine count is low or when many items are being processed simultaneously.

3. **Potential Bottlenecks**:
   - The major bottleneck arises when the number of laundry items (`k`) is large relative to the number of machines (`n1`, `n2`, `n3`), and the processing times (`t1`, `t2`, `t3`) are significant. This leads to excessive waiting and queue management overhead in the loops within `ok(int t)` and the main event loop in `main()`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and hit counts, here are the performance-characterizing invariants in natural language:

1. **Machine Availability Limitation**: 
   - "A slowdown occurs when the number of laundry pieces (`k`) is close to the maximum allowed (10,000), and the number of available machines for any stage of the process (`n1`, `n2`, or `n3`) is relatively low. This results in increased waiting times due to limited parallel processing capabilities."

2. **Queue Saturation**:
   - "If the queues for washing, drying, or folding become saturated due to high processing times (`t1`, `t2`, `t3`) and limited machine availability, the system can experience significant delays as operations become sequential rather than concurrent."

3. **Processing Time Imbalance**:
   - "When the individual processing times (`t1`, `t2`, `t3`) are disproportionate, such that one stage consistently lags behind others, it can cause a bottleneck, forcing the program to wait unnecessarily at various stages."

4. **Excessive Loop Iterations**:
   - "A critical performance hit occurs when the laundry items require extensive checks across multiple nested loops, especially when the simultaneous processing capacity (number of machines) is insufficient. This results in high computational overhead from repeated condition checks."

These natural language invariants characterize scenarios where the program's performance degrades, abstracted into general conditions that can be applied to various input scenarios within the given constraints. Placing focus on machine availability, processing time imbalances, and queue management helps capture the essence of performance challenges in this problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have k pieces of laundry, each of which you want to wash, dry and fold. You are at a laundromat that has n1 washing machines, n2 drying machines and n3 folding machines. Each machine can process only one piece of laundry at a time. You can't dry a piece of laundry before it is washed, and you can't fold it before it is dried. Moreover, after a piece of laundry is washed, it needs to be immediately moved into a drying machine, and after it is dried, it needs to be immediately moved into a folding machine.

It takes t1 minutes to wash one piece of laundry in a washing machine, t2 minutes to dry it in a drying machine, and t3 minutes to fold it in a folding machine. Find the smallest number of minutes that is enough to wash, dry and fold all the laundry you have.

Input

The only line of the input contains seven integers: k, n1, n2, n3, t1, t2, t3 (1 ≤ k ≤ 104; 1 ≤ n1, n2, n3, t1, t2, t3 ≤ 1000).

Output

Print one integer — smallest number of minutes to do all your laundry.

Examples

Input

1 1 1 1 5 5 5


Output

15


Input

8 4 3 2 10 5 2


Output

32

Note

In the first example there's one instance of each machine, each taking 5 minutes to complete. You have only one piece of laundry, so it takes 15 minutes to process it.

In the second example you start washing first two pieces at moment 0. If you start the third piece of laundry immediately, then by the time it is dried, there will be no folding machine available, so you have to wait, and start washing third piece at moment 2. Similarly, you can't start washing next piece until moment 5, since otherwise there will be no dryer available, when it is washed. Start time for each of the eight pieces of laundry is 0, 0, 2, 5, 10, 10, 12 and 15 minutes respectively. The last piece of laundry will be ready after 15 + 10 + 5 + 2 = 32 minutes.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Runtime Checks in C++

Let's translate the inferred performance-characterizing invariants into C++ code. Each invariant from the previous phase will be implemented as a condition checker.

```cpp
// Checker function for machine availability limitation
void check_machine_availability(int k, int n1, int n2, int n3) {
    if (k > std::min(n1, std::min(n2, n3))) {
        cerr << "Warning: Machine availability limitation triggered!" << endl;
        abort();
    }
}

// Checker function for queue saturation
void check_queue_saturation(int A_size, int B_size, int C_size, int k) {
    if (A_size + B_size + C_size > 2 * k) {
        cerr << "Warning: Queue saturation triggered!" << endl;
        abort();
    }
}

// Checker function for processing time imbalance
void check_processing_time_imbalance(int t1, int t2, int t3) {
    if (t1 > t2 * 2 && t1 > t3 * 2) {
        cerr << "Warning: Processing time imbalance triggered!" << endl;
        abort();
    }
}

// Checker function for excessive loop iterations
void check_excessive_loop_iterations(int iteration_count, int threshold) {
    if (iteration_count > threshold) {
        cerr << "Warning: Excessive loop iterations triggered!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checks at strategic points in the given C++ program to detect potential performance bottlenecks. We'll ensure the checks are placed outside of tight loops to minimize overhead.

```cpp
#include <bits/stdc++.h>
int MOD = 1000000007;
long long inf = 1e18;
using namespace std;
vector<int> A, B, C;
int as, bs, cs;
int a, b, c;
int k, n1, n2, n3, t1, t2, t3;

// Checker function for machine availability limitation
void check_machine_availability(int k, int n1, int n2, int n3) {
    if (k > std::min(n1, std::min(n2, n3))) {
        cerr << "Warning: Machine availability limitation triggered!" << endl;
        abort();
    }
}

// Checker function for queue saturation
void check_queue_saturation(int A_size, int B_size, int C_size, int k) {
    if (A_size + B_size + C_size > 2 * k) {
        cerr << "Warning: Queue saturation triggered!" << endl;
        abort();
    }
}

// Checker function for processing time imbalance
void check_processing_time_imbalance(int t1, int t2, int t3) {
    if (t1 > t2 * 2 && t1 > t3 * 2) {
        cerr << "Warning: Processing time imbalance triggered!" << endl;
        abort();
    }
}

bool ok(int t) {
    if (a == n1) return false;
    int cntb = 0;
    for (int i = bs; i < B.size(); i++) {
        if (t + t1 < B[i] + t2) {
            cntb++;
        }
    }
    for (int i = as; i < A.size(); i++) {
        if (t + t1 < A[i] + t1 + t2) {
            cntb++;
        }
    }
    if (cntb >= n2) return false;
    int cntc = 0;
    for (int i = cs; i < C.size(); i++) {
        if (t + t1 + t2 < C[i] + t3) {
            cntc++;
        }
    }
    for (int i = bs; i < B.size(); i++) {
        if (t + t1 + t2 < B[i] + t2 + t3) {
            cntc++;
        }
    }
    for (int i = as; i < A.size(); i++) {
        if (t + t1 + t2 < A[i] + t1 + t2 + t3) {
            cntc++;
        }
    }
    if (cntc >= n3) return false;
    return true;
}

int main() {
    ios::sync_with_stdio(0);
    cin >> k >> n1 >> n2 >> n3 >> t1 >> t2 >> t3;

    // Check for machine availability limitation
    check_machine_availability(k, n1, n2, n3);

    // Check for processing time imbalance
    check_processing_time_imbalance(t1, t2, t3);

    int t, x;
    bool cont;
    for (t = 1; t <= 30000001; t++) {
        if (k == 0 && c == 0 && b == 0 && a == 0) {
            break;
        }
        cont = true;
        while (c != 0 && cont) {
            x = C[cs];
            cont = false;
            if (x + t3 == t) {
                cs++;
                c--;
                cont = true;
            }
        }
        cont = true;
        while (b != 0 && cont) {
            x = B[bs];
            cont = false;
            if (x + t2 == t) {
                bs++;
                b--;
                cont = true;
                C.push_back(t);
                c++;
            }
        }
        cont = true;
        while (a != 0 && cont) {
            x = A[as];
            cont = false;
            if (x + t1 == t) {
                as++;
                a--;
                cont = true;
                B.push_back(t);
                b++;
            }
        }
        cont = true;
        while (k != 0 && cont) {
            x = t;
            cont = false;
            if (ok(t)) {
                A.push_back(x);
                a++;
                cont = true;
                k--;
            }
        }

        // Check for queue saturation during iteration
        check_queue_saturation(A.size(), B.size(), C.size(), k);
    }
    
    cout << t - 2;
    return 0;
}
```

### Explanation:
- **Checker for Machine Availability Limitation**: Added after input reading to ensure the number of laundry items does not exceed the number of any single type of machine.
- **Checker for Queue Saturation**: Placed within the main loop to check if the total processed queue size is manageable relative to the remaining items.
- **Checker for Processing Time Imbalance**: Ensures that no single stage's processing time is disproportionately large, which could bottleneck the workflow.

These checks will help identify performance bottlenecks when running the program and ensure that any inefficiencies are flagged early.

