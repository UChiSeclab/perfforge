system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int const inf = 1000 * 1000 * 1000;
long long const inf64 = 1ll * inf * inf;
int const N = 1e5 + 5;
int const M = 3e5 + 5;
int n, m;
int w[N];
int c[N];
vector<int> perm;
int mn[N];
int mn2[N];
int mx[N];
long long pc[N];
long long pw[N];
int sz;
long long value[M];
int main() {
  scanf("%d %d", &n, &m);
  for (int i = 1; i <= n; i++) {
    scanf("%d %d", &w[i], &c[i]);
    if (w[i] <= 2) {
      perm.push_back(i);
    }
  }
  sort((perm).begin(), (perm).end(),
       [&](int i, int j) { return 2 * c[i] / w[i] > 2 * c[j] / w[j]; });
  sz = (int)perm.size();
  for (int i = sz - 1; i >= 0; i--) {
    if (i == sz - 1) {
      mx[i] = -inf;
    } else
      mx[i] = mx[i + 1];
    if (w[perm[i]] == 1) mx[i] = max(mx[i], c[perm[i]]);
  }
  for (int i = 0; i < sz; i++) {
    pc[i] = (i > 0 ? pc[i - 1] : 0ll) + c[perm[i]];
    pw[i] = (i > 0 ? pw[i - 1] : 0ll) + w[perm[i]];
    if (i == 0)
      mn[i] = mn2[i] = inf;
    else
      mn[i] = mn[i - 1], mn2[i] = mn2[i - 1];
    if (w[perm[i]] == 1) {
      mn[i] = min(mn[i], c[perm[i]]);
    } else {
      mn2[i] = min(mn2[i], c[perm[i]]);
    }
  }
  for (int j = 0; j < M; j++) {
    int idx = lower_bound(pw, pw + sz, j) - pw;
    int ql = max(0, idx - 3);
    int qr = min(sz - 1, idx + 3);
    for (int i = ql; i <= qr; i++) {
      if (pw[i] <= j) {
        value[j] = max(value[j], pc[i]);
      } else if (pw[i] == j + 1) {
        value[j] = max(value[j], pc[i] - mn[i]);
        value[j] = max(value[j], pc[i] - mn2[i] + (i + 1 < sz ? mx[i] : -inf));
      }
    }
  }
  long long res = 0;
  for (int j = 0; j <= m; j++) {
    res = max(res, value[j]);
    if (j > 0) {
      value[j] = max(value[j], value[j - 1]);
    }
  }
  vector<long long> arr;
  for (int i = 1; i <= n; i++) {
    if (w[i] == 3) {
      arr.push_back(c[i]);
    }
  }
  sort((arr).begin(), (arr).end());
  reverse((arr).begin(), (arr).end());
  for (int i = 0; i < (int)arr.size(); i++) {
    if (i > 0) arr[i] += arr[i - 1];
    if (3 * (i + 1) > m) break;
    res = max(res, value[m - 3 * (i + 1)] + arr[i]);
  }
  cout << res << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 5
1 9
1 8
2 10
3 4
3 1
2 2
3 6
1 1
3 8
2 2


(G.2) Fast Input

8 5
3 9
3 3
1 4
3 1
2 5
3 1
3 6
3 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int const inf = 1000 * 1000 * 1000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long const inf64 = 1ll * inf * inf; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int const N = 1e5 + 5; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int const M = 3e5 + 5; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int w[N]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int c[N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> perm; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int mn[N]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int mn2[N]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int mx[N]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long pc[N]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long pw[N]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int sz; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long value[M]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &m); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 20 slow_hit_count: 11, fast_hit_count: 9 */
    scanf("%d %d", &w[i], &c[i]); /* line 21 slow_hit_count: 10, fast_hit_count: 8 */
    if (w[i] <= 2) { /* line 22 slow_hit_count: 10, fast_hit_count: 8 */
      perm.push_back(i); /* line 23 slow_hit_count: 6, fast_hit_count: 2 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  sort((perm).begin(), (perm).end(), /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
       [&](int i, int j) { return 2 * c[i] / w[i] > 2 * c[j] / w[j]; }); /* line 27 slow_hit_count: 10, fast_hit_count: 2 */
  sz = (int)perm.size(); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = sz - 1; i >= 0; i--) { /* line 29 slow_hit_count: 7, fast_hit_count: 3 */
    if (i == sz - 1) { /* line 30 slow_hit_count: 6, fast_hit_count: 2 */
      mx[i] = -inf; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    } else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      mx[i] = mx[i + 1]; /* line 33 slow_hit_count: 5, fast_hit_count: 1 */
    if (w[perm[i]] == 1) mx[i] = max(mx[i], c[perm[i]]); /* line 34 slow_hit_count: 6, fast_hit_count: 2 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < sz; i++) { /* line 36 slow_hit_count: 7, fast_hit_count: 3 */
    pc[i] = (i > 0 ? pc[i - 1] : 0ll) + c[perm[i]]; /* line 37 slow_hit_count: 6, fast_hit_count: 2 */
    pw[i] = (i > 0 ? pw[i - 1] : 0ll) + w[perm[i]]; /* line 38 slow_hit_count: 6, fast_hit_count: 2 */
    if (i == 0) /* line 39 slow_hit_count: 6, fast_hit_count: 2 */
      mn[i] = mn2[i] = inf; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
    else /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      mn[i] = mn[i - 1], mn2[i] = mn2[i - 1]; /* line 42 slow_hit_count: 5, fast_hit_count: 1 */
    if (w[perm[i]] == 1) { /* line 43 slow_hit_count: 6, fast_hit_count: 2 */
      mn[i] = min(mn[i], c[perm[i]]); /* line 44 slow_hit_count: 3, fast_hit_count: 1 */
    } else { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      mn2[i] = min(mn2[i], c[perm[i]]); /* line 46 slow_hit_count: 3, fast_hit_count: 1 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 0; j < M; j++) { /* line 49 slow_hit_count: 300006, fast_hit_count: 300006 */
    int idx = lower_bound(pw, pw + sz, j) - pw; /* line 50 slow_hit_count: 300005, fast_hit_count: 300005 */
    int ql = max(0, idx - 3); /* line 51 slow_hit_count: 300005, fast_hit_count: 300005 */
    int qr = min(sz - 1, idx + 3); /* line 52 slow_hit_count: 300005, fast_hit_count: 300005 */
    for (int i = ql; i <= qr; i++) { /* line 53 slow_hit_count: 1200040, fast_hit_count: 900015 */
      if (pw[i] <= j) { /* line 54 slow_hit_count: 900035, fast_hit_count: 600010 */
        value[j] = max(value[j], pc[i]); /* line 55 slow_hit_count: 900011, fast_hit_count: 600006 */
      } else if (pw[i] == j + 1) { /* line 56 slow_hit_count: 24, fast_hit_count: 4 */
        value[j] = max(value[j], pc[i] - mn[i]); /* line 57 slow_hit_count: 6, fast_hit_count: 2 */
        value[j] = max(value[j], pc[i] - mn2[i] + (i + 1 < sz ? mx[i] : -inf)); /* line 58 slow_hit_count: 6, fast_hit_count: 2 */
      } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 0; j <= m; j++) { /* line 63 slow_hit_count: 7, fast_hit_count: 7 */
    res = max(res, value[j]); /* line 64 slow_hit_count: 6, fast_hit_count: 6 */
    if (j > 0) { /* line 65 slow_hit_count: 6, fast_hit_count: 6 */
      value[j] = max(value[j], value[j - 1]); /* line 66 slow_hit_count: 5, fast_hit_count: 5 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> arr; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 70 slow_hit_count: 11, fast_hit_count: 9 */
    if (w[i] == 3) { /* line 71 slow_hit_count: 10, fast_hit_count: 8 */
      arr.push_back(c[i]); /* line 72 slow_hit_count: 4, fast_hit_count: 6 */
    } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  sort((arr).begin(), (arr).end()); /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  reverse((arr).begin(), (arr).end()); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)arr.size(); i++) { /* line 77 slow_hit_count: 2, fast_hit_count: 2 */
    if (i > 0) arr[i] += arr[i - 1]; /* line 78 slow_hit_count: 2, fast_hit_count: 2 */
    if (3 * (i + 1) > m) break; /* line 79 slow_hit_count: 2, fast_hit_count: 2 */
    res = max(res, value[m - 3 * (i + 1)] + arr[i]); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << "\n"; /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 84 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided information, we can analyze the code to understand why the "slow" input might result in significantly slower execution compared to the "fast" input. Here is a breakdown of the analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Critical Lines with High Hit Counts:**
   - Line 49: `for (int j = 0; j < M; j++)` has a very high hit count for both slow and fast inputs, suggesting a performance bottleneck.
   - Lines 53-58: This nested loop and subsequent conditionals are executed a large number of times, indicating potential inefficiency.

2. **Potential Inefficiencies:**
   - The loop from lines 49 to 61 iterates over a very large range (`M = 300,005`), which can be excessive given the constraints. 
   - The `lower_bound` function on line 50 is executed repeatedly for each value of `j`, which can be expensive if the size of `pw` is large.
   - The inner loop from lines 53 to 60 iterates over a small range, but the conditionals on lines 54 and 56 add complexity and multiple calculations for each iteration.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

Here are the natural language performance invariants that describe the conditions under which the code becomes slow:

1. **High Iteration Overhead:**
   - "When the capacity `m` is large, the algorithm iterates through a vast number of potential weight values, leading to increased computation time in proportion to `M`. Consider reducing the range or optimizing conditions to cut down unnecessary checks."

2. **Repeated Binary Searches:**
   - "If the prefix sum array `pw` becomes large due to a high number of items (`n`), the repeated binary searches (`lower_bound`) within a loop over `M` can significantly degrade performance. Optimizing this search or reducing the number of iterations could mitigate the slow path."

3. **Inefficient Nested Calculations:**
   - "When the souvenir weights and costs are not distributed in a manner that allows for quick exclusion of many possibilities, the nested loops and conditionals can lead to excessive recalculations. This can occur especially if many items have similar weights and require checking multiple combinations."

4. **Input Distribution Impact:**
   - "If the input contains many items with weights of 1 or 2, the sorting and subsequent operations on these can become costly, as they are processed in the nested loop searching for the optimal combination."

These invariants highlight conditions under which the program is likely to slow down, particularly focusing on input size, input distribution, and algorithmic complexity. The suggested threshold considerations (like `m` or the size of `pw`) align with the problem constraints and offer actionable insights for optimizing the code for similar inputs in the future.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the checker functions based on the performance-characterizing invariants identified earlier:

```cpp
void check_iteration_overhead(int m) {
    if (m > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration overhead due to large m!" << endl;
        abort();
    }
}

void check_large_prefix_sum_search(int n, int* pw) {
    if (n > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered - large prefix sum array causing repeated binary searches!" << endl;
        abort();
    }
}

void check_inefficient_nested_calculations(int sz) {
    if (sz > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient nested calculations due to large sz!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Here is the instrumented C++ code with the runtime checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;
int const inf = 1000 * 1000 * 1000;
long long const inf64 = 1ll * inf * inf;
int const N = 1e5 + 5;
int const M = 3e5 + 5;
int n, m;
int w[N];
int c[N];
vector<int> perm;
int mn[N];
int mn2[N];
int mx[N];
long long pc[N];
long long pw[N];
int sz;
long long value[M];

void check_iteration_overhead(int m) {
    if (m > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration overhead due to large m!" << endl;
        abort();
    }
}

void check_large_prefix_sum_search(int n, int* pw) {
    if (n > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered - large prefix sum array causing repeated binary searches!" << endl;
        abort();
    }
}

void check_inefficient_nested_calculations(int sz) {
    if (sz > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient nested calculations due to large sz!" << endl;
        abort();
    }
}

int main() {
    scanf("%d %d", &n, &m);

    // Check for high iteration overhead based on the value of m
    check_iteration_overhead(m);

    for (int i = 1; i <= n; i++) {
        scanf("%d %d", &w[i], &c[i]);
        if (w[i] <= 2) {
            perm.push_back(i);
        }
    }
    sort((perm).begin(), (perm).end(),
         [&](int i, int j) { return 2 * c[i] / w[i] > 2 * c[j] / w[j]; });
    sz = (int)perm.size();

    // Check for inefficient nested calculations based on the value of sz
    check_inefficient_nested_calculations(sz);

    for (int i = sz - 1; i >= 0; i--) {
        if (i == sz - 1) {
            mx[i] = -inf;
        } else
            mx[i] = mx[i + 1];
        if (w[perm[i]] == 1) mx[i] = max(mx[i], c[perm[i]]);
    }
    for (int i = 0; i < sz; i++) {
        pc[i] = (i > 0 ? pc[i - 1] : 0ll) + c[perm[i]];
        pw[i] = (i > 0 ? pw[i - 1] : 0ll) + w[perm[i]];
        if (i == 0)
            mn[i] = mn2[i] = inf;
        else
            mn[i] = mn[i - 1], mn2[i] = mn2[i - 1];
        if (w[perm[i]] == 1) {
            mn[i] = min(mn[i], c[perm[i]]);
        } else {
            mn2[i] = min(mn2[i], c[perm[i]]);
        }
    }

    // Check for large prefix sum searches affecting performance
    check_large_prefix_sum_search(n, pw);

    for (int j = 0; j < M; j++) {
        int idx = lower_bound(pw, pw + sz, j) - pw;
        int ql = max(0, idx - 3);
        int qr = min(sz - 1, idx + 3);
        for (int i = ql; i <= qr; i++) {
            if (pw[i] <= j) {
                value[j] = max(value[j], pc[i]);
            } else if (pw[i] == j + 1) {
                value[j] = max(value[j], pc[i] - mn[i]);
                value[j] = max(value[j], pc[i] - mn2[i] + (i + 1 < sz ? mx[i] : -inf));
            }
        }
    }
    long long res = 0;
    for (int j = 0; j <= m; j++) {
        res = max(res, value[j]);
        if (j > 0) {
            value[j] = max(value[j], value[j - 1]);
        }
    }
    vector<long long> arr;
    for (int i = 1; i <= n; i++) {
        if (w[i] == 3) {
            arr.push_back(c[i]);
        }
    }
    sort((arr).begin(), (arr).end());
    reverse((arr).begin(), (arr).end());
    for (int i = 0; i < (int)arr.size(); i++) {
        if (i > 0) arr[i] += arr[i - 1];
        if (3 * (i + 1) > m) break;
        res = max(res, value[m - 3 * (i + 1)] + arr[i]);
    }
    cout << res << "\n";
    return 0;
}
```

### Explanation

- **Iteration Overhead Check:** Placed immediately after reading `m` to ensure that if `m` is excessively large, we flag a warning before entering the costly loop.
- **Prefix Sum Search Check:** Positioned after the prefix sum `pw` is populated to catch if the number of operations due to a large `pw` is excessive.
- **Nested Calculations Check:** Added after determining `sz` to prevent inefficient nested operations based on the number of items to be processed. 

These checks are strategically placed to catch the performance bottlenecks identified earlier without adding significant overhead to tight loops.

