system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
class input {
 private:
  bool fail;
  istream* stream;

 public:
  input(istream& stream_ = cin) { stream = &stream_; }
  istream& getStream() { return *stream; }
  template <typename T = int>
  T read() {
    T value;
    if (*stream >> value) {
      fail = false;
    } else {
      fail = true;
    }
    return value;
  }
  template <typename T = int>
  vector<T> readArray() {
    size_t size = read<size_t>();
    return readArray<T>(size);
  }
  template <typename T = int>
  vector<T> readArray(size_t size) {
    vector<T> v(size);
    for (size_t i = 0; i < size; i++) {
      if (*stream >> v[i]) {
        fail = false;
      } else {
        fail = true;
      }
    }
    return v;
  }
  bool isFailed() { return fail; }
  static input& getStdin() {
    static input in(cin);
    return in;
  }
};
class output {
 private:
  ostream* stream;

 public:
  output(ostream& stream_ = cout) { stream = &stream_; }
  ostream& getStream() { return *stream; }
  template <typename T>
  output& put(T& value) {
    *stream << value;
    return *this;
  }
  template <typename T>
  output& put(T& value, int precision) {
    *stream << setprecision(precision) << value;
    return *this;
  }
  template <typename T>
  output& write(const T& value) {
    *stream << value << endl;
    return *this;
  }
  template <typename T>
  output& write(T& value, int precision) {
    *stream << setprecision(precision) << fixed << value << endl;
    return *this;
  }
  template <typename T>
  output& writeArray(const vector<T>& v, bool appendSize = true) {
    if (appendSize) {
      write(v.size());
    }
    for (auto& x : v) {
      *stream << x << " ";
    }
    *stream << endl;
    return *this;
  }
  output& writeLine() {
    *stream << endl;
    return *this;
  }
  output& getStdout() {
    output out(cout);
    return out;
  }
  output getStderr() {
    output err(cerr);
    return err;
  }
};
input in(cin);
output out(cout);
output err(cerr);
void solve() {
  auto n = in.read();
  auto m = in.read();
  vector<pair<long long, long long>> items;
  for (auto i = 0; i < n; i++) {
    auto w = in.read<long long>();
    auto c = in.read<long long>();
    items.push_back(make_pair((c * 6) / w, w));
  }
  sort(items.begin(), items.end());
  reverse(items.begin(), items.end());
  vector<int> topCnt(3);
  vector<int> allCnt(3);
  int ws = 0;
  for (auto p : items) {
    if (p.second <= m - ws) {
      topCnt[p.second - 1]++;
      ws += p.second;
    }
    allCnt[p.second - 1]++;
  }
  auto t1 = topCnt[0];
  auto t2 = topCnt[1];
  auto t3 = topCnt[2];
  auto tt = 3;
  long long ans = 0;
  vector<int> rtmp(3);
  for (auto i1 = t1 - 3; i1 <= t1 + 3; i1++) {
    for (auto i2 = t2 - 3; i2 <= t2 + 3; i2++) {
      for (auto i3 = t3 - 3; i3 <= t3 + 3; i3++) {
        rtmp[0] = i1;
        rtmp[1] = i2;
        rtmp[2] = i3;
        auto w = m;
        long long nans = 0;
        for (auto& x : items) {
          if (rtmp[x.second - 1] > 0 && x.second <= w) {
            rtmp[x.second - 1]--;
            w -= x.second;
            nans += (x.first * x.second) / 6;
          }
        }
        if (nans > ans) ans = nans;
      }
    }
  }
  out.write(ans);
}
int main() {
  while (true) {
    auto startT = clock();
    solve();
    auto endT = clock();
    cerr << endl;
    cerr << "Working time: " << (endT - startT) << " ms" << endl;
    cerr << "-------------------------" << endl;
    bool ok = false;
    while (!in.isFailed() && !ok) {
      ok = in.read<char>() == '$';
    }
    if (!ok) {
      break;
    }
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 25
2 13
3 2
1 32
1 43
3 85
1 14
2 57
1 54
1 38
2 96
2 89
3 64
1 79
2 73
1 73
2 34
1 52
1 79
1 42
3 34


(G.2) Fast Input

1 25
2 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
class input { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  bool fail; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  istream* stream; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  input(istream& stream_ = cin) { stream = &stream_; } /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  istream& getStream() { return *stream; } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T = int> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  T read() { /* line 12 slow_hit_count: 86, fast_hit_count: 10 */
    T value; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    if (*stream >> value) { /* line 14 slow_hit_count: 86, fast_hit_count: 10 */
      fail = false; /* line 15 slow_hit_count: 84, fast_hit_count: 8 */
    } else { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      fail = true; /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return value; /* line 19 slow_hit_count: 86, fast_hit_count: 10 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T = int> /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  vector<T> readArray() { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    size_t size = read<size_t>(); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    return readArray<T>(size); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T = int> /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  vector<T> readArray(size_t size) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    vector<T> v(size); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    for (size_t i = 0; i < size; i++) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      if (*stream >> v[i]) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
        fail = false; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
        fail = true; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    return v; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  bool isFailed() { return fail; } /* line 38 slow_hit_count: 2, fast_hit_count: 2 */
  static input& getStdin() { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    static input in(cin); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    return in; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
class output { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  ostream* stream; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  output(ostream& stream_ = cout) { stream = &stream_; } /* line 49 slow_hit_count: 2, fast_hit_count: 2 */
  ostream& getStream() { return *stream; } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T> /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  output& put(T& value) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    *stream << value; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T> /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  output& put(T& value, int precision) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    *stream << setprecision(precision) << value; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T> /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  output& write(const T& value) { /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
    *stream << value << endl; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
    return *this; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T> /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  output& write(T& value, int precision) { /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    *stream << setprecision(precision) << fixed << value << endl; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T> /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  output& writeArray(const vector<T>& v, bool appendSize = true) { /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    if (appendSize) { /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      write(v.size()); /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto& x : v) { /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
      *stream << x << " "; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    *stream << endl; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  output& writeLine() { /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
    *stream << endl; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  output& getStdout() { /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    output out(cout); /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    return out; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  output getStderr() { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    output err(cerr); /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    return err; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
input in(cin); /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
output out(cout); /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
output err(cerr); /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  auto n = in.read(); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  auto m = in.read(); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<long long, long long>> items; /* line 101 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto i = 0; i < n; i++) { /* line 102 slow_hit_count: 21, fast_hit_count: 2 */
    auto w = in.read<long long>(); /* line 103 slow_hit_count: 20, fast_hit_count: 1 */
    auto c = in.read<long long>(); /* line 104 slow_hit_count: 20, fast_hit_count: 1 */
    items.push_back(make_pair((c * 6) / w, w)); /* line 105 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  sort(items.begin(), items.end()); /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(items.begin(), items.end()); /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> topCnt(3); /* line 109 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> allCnt(3); /* line 110 slow_hit_count: 2, fast_hit_count: 2 */
  int ws = 0; /* line 111 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto p : items) { /* line 112 slow_hit_count: 21, fast_hit_count: 2 */
    if (p.second <= m - ws) { /* line 113 slow_hit_count: 20, fast_hit_count: 1 */
      topCnt[p.second - 1]++; /* line 114 slow_hit_count: 16, fast_hit_count: 1 */
      ws += p.second; /* line 115 slow_hit_count: 16, fast_hit_count: 1 */
    } /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
    allCnt[p.second - 1]++; /* line 117 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
  auto t1 = topCnt[0]; /* line 119 slow_hit_count: 1, fast_hit_count: 1 */
  auto t2 = topCnt[1]; /* line 120 slow_hit_count: 1, fast_hit_count: 1 */
  auto t3 = topCnt[2]; /* line 121 slow_hit_count: 1, fast_hit_count: 1 */
  auto tt = 3; /* line 122 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 123 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> rtmp(3); /* line 124 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto i1 = t1 - 3; i1 <= t1 + 3; i1++) { /* line 125 slow_hit_count: 8, fast_hit_count: 8 */
    for (auto i2 = t2 - 3; i2 <= t2 + 3; i2++) { /* line 126 slow_hit_count: 56, fast_hit_count: 56 */
      for (auto i3 = t3 - 3; i3 <= t3 + 3; i3++) { /* line 127 slow_hit_count: 392, fast_hit_count: 392 */
        rtmp[0] = i1; /* line 128 slow_hit_count: 343, fast_hit_count: 343 */
        rtmp[1] = i2; /* line 129 slow_hit_count: 343, fast_hit_count: 343 */
        rtmp[2] = i3; /* line 130 slow_hit_count: 343, fast_hit_count: 343 */
        auto w = m; /* line 131 slow_hit_count: 343, fast_hit_count: 343 */
        long long nans = 0; /* line 132 slow_hit_count: 343, fast_hit_count: 343 */
        for (auto& x : items) { /* line 133 slow_hit_count: 7203, fast_hit_count: 686 */
          if (rtmp[x.second - 1] > 0 && x.second <= w) { /* line 134 slow_hit_count: 6860, fast_hit_count: 343 */
            rtmp[x.second - 1]--; /* line 135 slow_hit_count: 4907, fast_hit_count: 196 */
            w -= x.second; /* line 136 slow_hit_count: 4907, fast_hit_count: 196 */
            nans += (x.first * x.second) / 6; /* line 137 slow_hit_count: 4907, fast_hit_count: 196 */
          } /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
        if (nans > ans) ans = nans; /* line 140 slow_hit_count: 343, fast_hit_count: 343 */
      } /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
  out.write(ans); /* line 144 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 145 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 146 slow_hit_count: 1, fast_hit_count: 1 */
  while (true) { /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
    auto startT = clock(); /* line 148 slow_hit_count: 1, fast_hit_count: 1 */
    solve(); /* line 149 slow_hit_count: 1, fast_hit_count: 1 */
    auto endT = clock(); /* line 150 slow_hit_count: 1, fast_hit_count: 1 */
    cerr << endl; /* line 151 slow_hit_count: 1, fast_hit_count: 1 */
    cerr << "Working time: " << (endT - startT) << " ms" << endl; /* line 152 slow_hit_count: 1, fast_hit_count: 1 */
    cerr << "-------------------------" << endl; /* line 153 slow_hit_count: 1, fast_hit_count: 1 */
    bool ok = false; /* line 154 slow_hit_count: 1, fast_hit_count: 1 */
    while (!in.isFailed() && !ok) { /* line 155 slow_hit_count: 2, fast_hit_count: 2 */
      ok = in.read<char>() == '$'; /* line 156 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 157 slow_hit_count: 0, fast_hit_count: 0 */
    if (!ok) { /* line 158 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 159 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 160 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 162 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance issue with the provided C++ program, we'll first analyze the slow and fast input scenarios, identify the parts of the code that cause slowdowns, and then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The `solve` function is repeatedly called, but notably, the nested loops on lines 125 to 127 iterate significantly more under the slow input than the fast input.
   - The innermost loop (lines 133-139) processes items, with the condition on line 134 being the primary point of execution. This loop is particularly hit 7203 times for the slow input versus only 686 times for the fast input.
   - Lines 135 to 137, which update values within the loop, are also executed excessively in the slow run.

2. **Potential Issues:**
   - The code involves a triple nested loop where each loop iterates over a range centered around `t1`, `t2`, and `t3`, which are derived from the `topCnt` vector.
   - Given that `t1`, `t2`, and `t3` can vary, the loops can lead to a combinatorial increase in the number of iterations.
   - The permutation of `rtmp` values and their subsequent use in the innermost loop suggests an inefficient exploration of potential combinations of items to maximize cost under weight constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we derive the following performance-characterizing invariants:

1. **Combinatorial Explosion Invariant:**
   - **Natural Language Description:** "When the number of potential combinations of souvenir weights and counts is high, the program may slow down significantly. Specifically, if the count of souvenirs with weight 1, 2, or 3 leads to iterative recalculations, performance can degrade."
   - **Rationale:** The nesting of loops is directly related to possible combinations that `t1`, `t2`, and `t3` represent, leading to a high computational burden.

2. **Loop Intensity Invariant:**
   - **Natural Language Description:** "If the ranges of `topCnt` values significantly deviate from their initial values, the program may explore many unnecessary combinations, thus slowing down."
   - **Rationale:** The loops iterate over a range from `t1-3` to `t1+3`, and similarly for `t2` and `t3`, potentially exploring many unnecessary configurations, especially when `topCnt` values aren't optimal.

3. **Weight Utilization Invariant:**
   - **Natural Language Description:** "If the cumulative weight used in combinations frequently approaches the maximum capacity `m`, there could be many repeated checks and recalculations, leading to slower execution."
   - **Rationale:** Frequent checks against the weight limit and updating the weight can lead to high processing time if `m` is nearly reached often.

These invariants help in identifying bottlenecks that may not only affect the current input but also future inputs, based on the structural complexities of the input data. These could guide performance optimization by reducing unnecessary calculations or adopting dynamic programming techniques to cache solutions to subproblems.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we translate the natural language invariants into C++ checker code.

### Phase 3: Implementing Checkers for Performance-Characterizing Invariants

**Invariant 1: Combinatorial Explosion Invariant**

- **Checker Code:**
```cpp
void check_combination_invariant(int t1, int t2, int t3) {
    int range = 3; // We iterate from t1-3 to t1+3, similarly for t2 and t3
    int combination_limit = 1000; // arbitrary threshold to detect too many combinations
    if ((2 * range + 1) * (2 * range + 1) * (2 * range + 1) > combination_limit) {
        cerr << "Warning: combination_invariant triggered - too many combinations being explored!" << endl;
        abort();
    }
}
```

**Invariant 2: Loop Intensity Invariant**

- **Checker Code:**
```cpp
void check_loop_intensity_invariant(int t1, int t2, int t3) {
    int deviation_threshold = 5; // threshold for deviation from initial topCnt values
    if (abs(t1) > deviation_threshold || abs(t2) > deviation_threshold || abs(t3) > deviation_threshold) {
        cerr << "Warning: loop_intensity_invariant triggered - excessive deviation in loops!" << endl;
        abort();
    }
}
```

**Invariant 3: Weight Utilization Invariant**

- **Checker Code:**
```cpp
void check_weight_utilization_invariant(int current_weight, int max_weight) {
    if (current_weight > 0.9 * max_weight) { // arbitrary threshold of 90% capacity
        cerr << "Warning: weight_utilization_invariant triggered - weight limit near capacity!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Now we need to integrate these checker functions into the original C++ code, strategically placing them at points where they can effectively monitor the performance bottlenecks without adding overhead in tight loops.

**Instrumented C++ Code:**

```cpp
#include <bits/stdc++.h>
using namespace std;

class input {
 private:
  bool fail;
  istream* stream;

 public:
  input(istream& stream_ = cin) { stream = &stream_; }
  istream& getStream() { return *stream; }
  template <typename T = int>
  T read() {
    T value;
    if (*stream >> value) {
      fail = false;
    } else {
      fail = true;
    }
    return value;
  }
  template <typename T = int>
  vector<T> readArray() {
    size_t size = read<size_t>();
    return readArray<T>(size);
  }
  template <typename T = int>
  vector<T> readArray(size_t size) {
    vector<T> v(size);
    for (size_t i = 0; i < size; i++) {
      if (*stream >> v[i]) {
        fail = false;
      } else {
        fail = true;
      }
    }
    return v;
  }
  bool isFailed() { return fail; }
  static input& getStdin() {
    static input in(cin);
    return in;
  }
};

class output {
 private:
  ostream* stream;

 public:
  output(ostream& stream_ = cout) { stream = &stream_; }
  ostream& getStream() { return *stream; }
  template <typename T>
  output& put(T& value) {
    *stream << value;
    return *this;
  }
  template <typename T>
  output& put(T& value, int precision) {
    *stream << setprecision(precision) << value;
    return *this;
  }
  template <typename T>
  output& write(const T& value) {
    *stream << value << endl;
    return *this;
  }
  template <typename T>
  output& write(T& value, int precision) {
    *stream << setprecision(precision) << fixed << value << endl;
    return *this;
  }
  template <typename T>
  output& writeArray(const vector<T>& v, bool appendSize = true) {
    if (appendSize) {
      write(v.size());
    }
    for (auto& x : v) {
      *stream << x << " ";
    }
    *stream << endl;
    return *this;
  }
  output& writeLine() {
    *stream << endl;
    return *this;
  }
  output& getStdout() {
    output out(cout);
    return out;
  }
  output getStderr() {
    output err(cerr);
    return err;
  }
};

input in(cin);
output out(cout);
output err(cerr);

// Checker functions to detect performance bottlenecks
void check_combination_invariant(int t1, int t2, int t3) {
    int range = 3; // We iterate from t1-3 to t1+3, similarly for t2 and t3
    int combination_limit = 1000; // arbitrary threshold to detect too many combinations
    if ((2 * range + 1) * (2 * range + 1) * (2 * range + 1) > combination_limit) {
        cerr << "Warning: combination_invariant triggered - too many combinations being explored!" << endl;
        abort();
    }
}

void check_loop_intensity_invariant(int t1, int t2, int t3) {
    int deviation_threshold = 5; // threshold for deviation from initial topCnt values
    if (abs(t1) > deviation_threshold || abs(t2) > deviation_threshold || abs(t3) > deviation_threshold) {
        cerr << "Warning: loop_intensity_invariant triggered - excessive deviation in loops!" << endl;
        abort();
    }
}

void check_weight_utilization_invariant(int current_weight, int max_weight) {
    if (current_weight > 0.9 * max_weight) { // arbitrary threshold of 90% capacity
        cerr << "Warning: weight_utilization_invariant triggered - weight limit near capacity!" << endl;
        abort();
    }
}

void solve() {
  auto n = in.read();
  auto m = in.read();
  vector<pair<long long, long long>> items;
  for (auto i = 0; i < n; i++) {
    auto w = in.read<long long>();
    auto c = in.read<long long>();
    items.push_back(make_pair((c * 6) / w, w));
  }
  sort(items.begin(), items.end());
  reverse(items.begin(), items.end());
  vector<int> topCnt(3);
  vector<int> allCnt(3);
  int ws = 0;
  for (auto p : items) {
    if (p.second <= m - ws) {
      topCnt[p.second - 1]++;
      ws += p.second;
    }
    allCnt[p.second - 1]++;
  }
  auto t1 = topCnt[0];
  auto t2 = topCnt[1];
  auto t3 = topCnt[2];
  
  // Check combination invariant before entering nested loops
  check_combination_invariant(t1, t2, t3);

  auto tt = 3;
  long long ans = 0;
  vector<int> rtmp(3);

  for (auto i1 = t1 - 3; i1 <= t1 + 3; i1++) {
    for (auto i2 = t2 - 3; i2 <= t2 + 3; i2++) {
      for (auto i3 = t3 - 3; i3 <= t3 + 3; i3++) {
        rtmp[0] = i1;
        rtmp[1] = i2;
        rtmp[2] = i3;

        // Check loop intensity invariant
        check_loop_intensity_invariant(i1, i2, i3);

        auto w = m;
        long long nans = 0;
        for (auto& x : items) {
          if (rtmp[x.second - 1] > 0 && x.second <= w) {
            rtmp[x.second - 1]--;
            w -= x.second;
            nans += (x.first * x.second) / 6;

            // Check weight utilization invariant
            check_weight_utilization_invariant(w, m);
          }
        }
        if (nans > ans) ans = nans;
      }
    }
  }
  out.write(ans);
}

int main() {
  while (true) {
    auto startT = clock();
    solve();
    auto endT = clock();
    cerr << endl;
    cerr << "Working time: " << (endT - startT) << " ms" << endl;
    cerr << "-------------------------" << endl;
    bool ok = false;
    while (!in.isFailed() && !ok) {
      ok = in.read<char>() == '$';
    }
    if (!ok) {
      break;
    }
  }
}
```

**Comments:**

- **Combination Checker**: Added before entering the nested loops to detect potentially excessive combinations.
- **Loop Intensity Checker**: Placed within the loops to monitor excessive deviation of loop indices.
- **Weight Utilization Checker**: Placed inside the loop where weights are updated to check for utilization nearing the limit. 

This instrumented code can help detect scenarios that lead to performance issues, allowing developers to adjust the implementation or optimize for specific input patterns.

