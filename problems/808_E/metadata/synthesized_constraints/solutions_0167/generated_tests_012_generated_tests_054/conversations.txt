system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 300010;
struct {
  ll v;
  ll c1, c2;
} dp[N];
int num[4], n, m;
ll a[4][N], s[4][N];
int main() {
  scanf("%d%d", &n, &m);
  memset(num, 0, sizeof num);
  memset(dp, 0, sizeof dp);
  for (int i = 1; i <= n; ++i) {
    ll w, c;
    scanf("%I64d%I64d", &w, &c);
    a[w][++num[w]] = c;
  }
  for (int i = 1; i <= 3; ++i) {
    s[i][0] = 0;
    sort(a[i] + 1, a[i] + num[i] + 1,
         [](const int &a, const int &b) { return a > b; });
    for (int j = 1; j <= num[i]; ++j) s[i][j] = s[i][j - 1] + a[i][j];
  }
  dp[0].v = dp[0].c1 = dp[0].c2 = 0;
  for (int i = 1; i <= m; ++i) {
    if (dp[i - 1].v + a[1][dp[i - 1].c1 + 1] > dp[i].v) {
      dp[i].v = dp[i - 1].v + a[1][dp[i - 1].c1 + 1];
      dp[i].c1 = dp[i - 1].c1 + 1;
      dp[i].c2 = dp[i - 1].c2;
    }
    if (i > 1 && dp[i - 2].v + a[2][dp[i - 2].c2 + 1] > dp[i].v) {
      dp[i].v = dp[i - 2].v + a[2][dp[i - 2].c2 + 1];
      dp[i].c1 = dp[i - 2].c1;
      dp[i].c2 = dp[i - 2].c2 + 1;
    }
  }
  ll ans = 0;
  for (int i = 0; i <= num[3]; ++i) {
    if (m >= i * 3) ans = max(ans, s[3][i] + dp[m - i * 3].v);
  }
  printf("%I64d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

61 120
3 5
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 2
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3


(G.2) Fast Input

1 2
3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 300010; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  ll v; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  ll c1, c2; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} dp[N]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int num[4], n, m; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
ll a[4][N], s[4][N]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &m); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  memset(num, 0, sizeof num); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, 0, sizeof dp); /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    ll w, c; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%I64d%I64d", &w, &c); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    a[w][++num[w]] = c; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 3; ++i) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    s[i][0] = 0; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    sort(a[i] + 1, a[i] + num[i] + 1, /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
         [](const int &a, const int &b) { return a > b; }); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 1; j <= num[i]; ++j) s[i][j] = s[i][j - 1] + a[i][j]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0].v = dp[0].c1 = dp[0].c2 = 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= m; ++i) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (dp[i - 1].v + a[1][dp[i - 1].c1 + 1] > dp[i].v) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i].v = dp[i - 1].v + a[1][dp[i - 1].c1 + 1]; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i].c1 = dp[i - 1].c1 + 1; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i].c2 = dp[i - 1].c2; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    if (i > 1 && dp[i - 2].v + a[2][dp[i - 2].c2 + 1] > dp[i].v) { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i].v = dp[i - 2].v + a[2][dp[i - 2].c2 + 1]; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i].c1 = dp[i - 2].c1; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i].c2 = dp[i - 2].c2 + 1; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  ll ans = 0; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= num[3]; ++i) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    if (m >= i * 3) ans = max(ans, s[3][i] + dp[m - i * 3].v); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%I64d\n", ans); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, we need to compare the line-level hit counts between the fast and slow runs and identify the potential causes for the slowdown. This analysis will be followed by deriving performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts (though the specific counts are all zero here, let's assume some assumptions for analysis):

1. **Functionality Review**:
   - The program is an implementation of a variant of the knapsack problem, adapted to handle three types of weights with specific capacities.
   - The function uses dynamic programming to calculate the maximum possible cost of souvenirs that Petya can carry.

2. **Potential Bottlenecks**:
   - **Dynamic Programming Array Initialization (dp array)**: The loop that initializes and updates the `dp` array can become costly due to its size and complexity. In particular, understanding how often elements of the `dp` array are accessed and updated is crucial.
   - **Sorting of Costs**: The sorting operation on the array of costs for each weight category (`a[i]`) might lead to inefficiency if repeated unnecessarily or if the size of `a[i]` becomes large.
   - **Iterative Updates**: The nested loops checking and updating potential maximum values (`dp[]` updates) can become a hot spot, especially if `m` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on our assessment of potential bottlenecks, here are some natural language invariants that characterize performance issues:

1. **Dynamic Programming Array Usage**:
   - **Invariant**: "If the number of updates to the dynamic programming array (`dp`) approaches the limit set by the total weight capacity `m`, and multiple checks or updates per element are performed, the program may experience significant slowdowns."
   - **Rationale**: As `m` grows or approaches its upper bound (300,000), the dynamic programming approach may involve excessive iterations and checks, particularly when `dp[i]` for each `i` needs to be recalculated or checked against multiple conditions.

2. **Sorting Efficiency**:
   - **Invariant**: "If one or more cost arrays for souvenirs (`a[i]`) contain a large number of elements and require sorting, repeated or unnecessary sorting operations may degrade performance."
   - **Rationale**: Sorting is `O(n log n)` in complexity and can become a bottleneck if the number of elements in `a[i]` grows large, particularly when sorting is invoked without need or could be optimized.

3. **Weight Categories and Updates**:
   - **Invariant**: "When the weight capacity `m` is large relative to the size of weight categories, the iterative updates to find maximum cost can become inefficient, especially if they involve multiple conditions."
   - **Rationale**: The loops that check and update maximum costs (`dp[i]` calculations) can be inefficient when higher weight capacities lead to complex condition evaluations or redundant updates.

By considering these invariants, future inputs that match these patterns could be flagged for potential performance issues. The focus is on the overall structure and logic rather than specific numeric values, aligning with the constraints like `n <= 100000` and `m <= 300000`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

From the previously derived performance-characterizing invariants, we can write runtime checks in C++ to detect when the program might hit a performance bottleneck.

#### Invariant 1: Dynamic Programming Array Usage

```cpp
void check_dp_invariant(int m, int dp_updates) {
    if (dp_updates > m * 2) {  // Example threshold: twice the capacity, considering multiple checks per element
        cerr << "Warning: Performance bottleneck condition triggered - excessive DP array updates!" << endl;
        abort();
    }
}
```

#### Invariant 2: Sorting Efficiency

```cpp
void check_sort_invariant(int n, int num_elements_sorted) {
    if (num_elements_sorted > n * 0.8) {  // Example threshold: sorting more than 80% of elements
        cerr << "Warning: Performance bottleneck condition triggered - large array sorted frequently!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code into the Original Program

Now, we will integrate these checkers into the original C++ program. We will place the checks at strategic points to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 300010;
struct {
    ll v;
    ll c1, c2;
} dp[N];
int num[4], n, m;
ll a[4][N], s[4][N];

// Checker function for dynamic programming array usage
void check_dp_invariant(int m, int dp_updates) {
    if (dp_updates > m * 2) {  // Example threshold: twice the capacity, considering multiple checks per element
        cerr << "Warning: Performance bottleneck condition triggered - excessive DP array updates!" << endl;
        abort();
    }
}

// Checker function for sorting efficiency
void check_sort_invariant(int n, int num_elements_sorted) {
    if (num_elements_sorted > n * 0.8) {  // Example threshold: sorting more than 80% of elements
        cerr << "Warning: Performance bottleneck condition triggered - large array sorted frequently!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d", &n, &m);
    memset(num, 0, sizeof num);
    memset(dp, 0, sizeof dp);
    for (int i = 1; i <= n; ++i) {
        ll w, c;
        scanf("%lld%lld", &w, &c);
        a[w][++num[w]] = c;
    }

    // Check if sorting operation could trigger performance issues
    int total_elements_sorted = 0;
    for (int i = 1; i <= 3; ++i) {
        s[i][0] = 0;
        sort(a[i] + 1, a[i] + num[i] + 1,
             [](const int &a, const int &b) { return a > b; });
        total_elements_sorted += num[i];
        for (int j = 1; j <= num[i]; ++j) s[i][j] = s[i][j - 1] + a[i][j];
    }
    check_sort_invariant(n, total_elements_sorted);

    dp[0].v = dp[0].c1 = dp[0].c2 = 0;
    int dp_updates = 0;  // Counter for DP updates to check against bottleneck

    for (int i = 1; i <= m; ++i) {
        if (dp[i - 1].v + a[1][dp[i - 1].c1 + 1] > dp[i].v) {
            dp[i].v = dp[i - 1].v + a[1][dp[i - 1].c1 + 1];
            dp[i].c1 = dp[i - 1].c1 + 1;
            dp[i].c2 = dp[i - 1].c2;
            dp_updates++;
        }
        if (i > 1 && dp[i - 2].v + a[2][dp[i - 2].c2 + 1] > dp[i].v) {
            dp[i].v = dp[i - 2].v + a[2][dp[i - 2].c2 + 1];
            dp[i].c1 = dp[i - 2].c1;
            dp[i].c2 = dp[i - 2].c2 + 1;
            dp_updates++;
        }
    }

    // Perform check for excessive DP updates
    check_dp_invariant(m, dp_updates);

    ll ans = 0;
    for (int i = 0; i <= num[3]; ++i) {
        if (m >= i * 3) ans = max(ans, s[3][i] + dp[m - i * 3].v);
    }
    printf("%lld\n", ans);

    return 0;
}
```

### Explanation

1. **Dynamic Programming Updates Check**: We track the number of updates made to the `dp` array and check if it exceeds a threshold (in this case, twice the total capacity `m`). This helps in identifying when excessive updates may lead to a performance bottleneck.

2. **Sorting Efficiency Check**: We keep track of the total number of elements that are sorted across all weight categories and check if it exceeds a percentage of the total number of souvenirs (`n`). This helps in identifying when sorting operations might become a bottleneck.

These checks are strategically placed to monitor performance without introducing significant overhead in the computation process.

