system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m, ai, bi;
vector<long long> one, two, three;
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin >> n >> m;
  for (long long i = 0; i < n; i++) {
    cin >> ai >> bi;
    if (ai == 3)
      three.push_back(bi);
    else if (ai == 2)
      two.push_back(bi);
    else
      one.push_back(bi);
  }
  sort(one.begin(), one.end(), greater<long long>());
  sort(two.begin(), two.end(), greater<long long>());
  sort(three.begin(), three.end(), greater<long long>());
  vector<vector<long long> > answer;
  for (long long i = 0; i <= m; i++) {
    vector<long long> help;
    help.push_back(-100000000000000000);
    help.push_back(-1);
    help.push_back(-1);
    answer.push_back(help);
  }
  answer[0][0] = 0;
  answer[0][1] = 0;
  answer[0][2] = 0;
  for (long long i = 0; i <= m; i++) {
    if (answer[i][1] == -1) continue;
    if (answer[i][1] < one.size()) {
      long long v = answer[i][0] + one[answer[i][1]];
      if (i + 1 <= m && answer[i + 1][0] < v) {
        answer[i + 1][0] = v;
        answer[i + 1][1] = answer[i][1] + 1;
        answer[i + 1][2] = answer[i][2];
      }
    }
    if (answer[i][2] < two.size()) {
      long long v = answer[i][0] + two[answer[i][2]];
      if (i + 2 <= m && answer[i + 2][0] < v) {
        answer[i + 2][0] = v;
        answer[i + 2][1] = answer[i][1];
        answer[i + 2][2] = answer[i][2] + 1;
      }
    }
  }
  long long ans = 0;
  long long summ = 0;
  long long maximum = 0;
  for (long long i = 0; i <= m; i++) {
    maximum = max(maximum, answer[i][0]);
    answer[i][0] = maximum;
  }
  for (long long i = 0; i <= three.size(); i++) {
    if (3 * i > m) break;
    if (i > 0) summ += three[i - 1];
    if (summ + answer[m - 3 * i][0] > ans) {
      ans = summ + answer[m - 3 * i][0];
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

61 120
3 5
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3


(G.2) Fast Input

2 1
1 5
3 11


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, ai, bi; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> one, two, three; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 8 slow_hit_count: 62, fast_hit_count: 3 */
    cin >> ai >> bi; /* line 9 slow_hit_count: 61, fast_hit_count: 2 */
    if (ai == 3) /* line 10 slow_hit_count: 61, fast_hit_count: 2 */
      three.push_back(bi); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    else if (ai == 2) /* line 12 slow_hit_count: 60, fast_hit_count: 1 */
      two.push_back(bi); /* line 13 slow_hit_count: 60, fast_hit_count: 0 */
    else /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      one.push_back(bi); /* line 15 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  sort(one.begin(), one.end(), greater<long long>()); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  sort(two.begin(), two.end(), greater<long long>()); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  sort(three.begin(), three.end(), greater<long long>()); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<long long> > answer; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i <= m; i++) { /* line 21 slow_hit_count: 122, fast_hit_count: 3 */
    vector<long long> help; /* line 22 slow_hit_count: 242, fast_hit_count: 4 */
    help.push_back(-100000000000000000); /* line 23 slow_hit_count: 121, fast_hit_count: 2 */
    help.push_back(-1); /* line 24 slow_hit_count: 121, fast_hit_count: 2 */
    help.push_back(-1); /* line 25 slow_hit_count: 121, fast_hit_count: 2 */
    answer.push_back(help); /* line 26 slow_hit_count: 121, fast_hit_count: 2 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  answer[0][0] = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  answer[0][1] = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  answer[0][2] = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i <= m; i++) { /* line 31 slow_hit_count: 122, fast_hit_count: 3 */
    if (answer[i][1] == -1) continue; /* line 32 slow_hit_count: 121, fast_hit_count: 2 */
    if (answer[i][1] < one.size()) { /* line 33 slow_hit_count: 61, fast_hit_count: 2 */
      long long v = answer[i][0] + one[answer[i][1]]; /* line 34 slow_hit_count: 0, fast_hit_count: 1 */
      if (i + 1 <= m && answer[i + 1][0] < v) { /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
        answer[i + 1][0] = v; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
        answer[i + 1][1] = answer[i][1] + 1; /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
        answer[i + 1][2] = answer[i][2]; /* line 38 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    if (answer[i][2] < two.size()) { /* line 41 slow_hit_count: 61, fast_hit_count: 2 */
      long long v = answer[i][0] + two[answer[i][2]]; /* line 42 slow_hit_count: 60, fast_hit_count: 0 */
      if (i + 2 <= m && answer[i + 2][0] < v) { /* line 43 slow_hit_count: 60, fast_hit_count: 0 */
        answer[i + 2][0] = v; /* line 44 slow_hit_count: 60, fast_hit_count: 0 */
        answer[i + 2][1] = answer[i][1]; /* line 45 slow_hit_count: 60, fast_hit_count: 0 */
        answer[i + 2][2] = answer[i][2] + 1; /* line 46 slow_hit_count: 60, fast_hit_count: 0 */
      } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  long long summ = 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  long long maximum = 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i <= m; i++) { /* line 53 slow_hit_count: 122, fast_hit_count: 3 */
    maximum = max(maximum, answer[i][0]); /* line 54 slow_hit_count: 121, fast_hit_count: 2 */
    answer[i][0] = maximum; /* line 55 slow_hit_count: 121, fast_hit_count: 2 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i <= three.size(); i++) { /* line 57 slow_hit_count: 3, fast_hit_count: 2 */
    if (3 * i > m) break; /* line 58 slow_hit_count: 2, fast_hit_count: 2 */
    if (i > 0) summ += three[i - 1]; /* line 59 slow_hit_count: 2, fast_hit_count: 1 */
    if (summ + answer[m - 3 * i][0] > ans) { /* line 60 slow_hit_count: 2, fast_hit_count: 1 */
      ans = summ + answer[m - 3 * i][0]; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts, the following observations can be made:

1. **Initialization and Loop Execution**:
   - The `vector<vector<long long>> answer` initialization and its resizing (lines 21-26) are being executed a significantly greater number of times for the slow input compared to the fast input. This is because the loop is iterating over `m` (up to 120 in the slow input) times.

2. **Main Dynamic Programming Loop**:
   - The nested loops and conditionals (lines 31-49) get significantly more hits in the slow input. This is due to the fact the number of potential states grows with `m`, which is high in the slow case.

3. **Weight and Cost Processing**:
   - The code segments (lines 33-46) dealing with adding costs to the `answer` vector are hit frequently during the slow input run, indicating that processing `two` and `three` souvenirs takes substantial time.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and the slow input characteristics, here are some performance-characterizing invariants:

1. **Capacity-Driven State Expansion**:
   - Natural Language Description: "The program may enter a slow execution path when the total weight capacity `m` increases, necessitating a larger state space in dynamic programming arrays. This is particularly impactful when `m` is large, close to the maximum allowed by constraints."
   - Reasoning: The loop over `m` (line 21 and 31) and the associated dynamic programming updates cause more iterations and memory usage with larger `m`.

2. **Handling of Repeated Elements**:
   - Natural Language Description: "When there are many souvenirs with the same weight and cost, the computation may slow as redundant states are repeatedly processed in dynamic programming, especially for weights appearing frequently."
   - Reasoning: The repeated `if` conditions (lines 33-48) are evaluated extensively when there are many duplicates, leading to excessive updates.

3. **Memory Usage Due to Large `m` and Small Weights**:
   - Natural Language Description: "If the weight capacity `m` is large relative to the souvenir weights (which are relatively small), the dynamic programming approach may use excessive memory and computation time due to the large number of possible combinations."
   - Reasoning: Since weights are small (1, 2, or 3), large `m` means many possible combinations, leading to extensive memory allocation and updates in the `answer` array (lines 20-26).

These invariants help identify situations where the code is likely to experience slow execution, especially focusing on the interplay between input constraints and algorithmic decisions such as dynamic programming table size and processing of repetitive input patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each invariant identified in Phase 2, I'll write a C++ snippet to check these conditions at runtime:

1. **Checker for Capacity-Driven State Expansion**

```cpp
void check_capacity_invariant(long long m) {
    if (m > 250000) {  // Assuming a threshold for high capacity
        cerr << "Warning: Performance bottleneck due to high weight capacity!" << endl;
        abort();
    }
}
```

2. **Checker for Handling of Repeated Elements**

```cpp
void check_repeated_elements_invariant(const vector<long long>& weights) {
    map<long long, long long> frequency;
    for (const auto& weight : weights) {
        frequency[weight]++;
        if (frequency[weight] > 50) {  // Assuming 50 as a threshold for repetition
            cerr << "Warning: Performance bottleneck due to repeated element weights!" << endl;
            abort();
        }
    }
}
```

3. **Checker for Memory Usage Due to Large Capacity and Small Weights**

```cpp
void check_memory_usage_invariant(long long m, const vector<long long>& weights) {
    long long total_weight = 0;
    for (const auto& weight : weights) {
        total_weight += weight;
    }
    if (m > 250000 && total_weight > 1000000) {  // Arbitrary thresholds
        cerr << "Warning: Performance bottleneck due to large potential memory usage!" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks

Below is the modified version of the C++ code with integrated performance checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, m, ai, bi;
vector<long long> one, two, three;

// Checkers for performance invariants
void check_capacity_invariant(long long m) {
    if (m > 250000) {  // Assuming a threshold for high capacity
        cerr << "Warning: Performance bottleneck due to high weight capacity!" << endl;
        abort();
    }
}

void check_repeated_elements_invariant(const vector<long long>& weights) {
    map<long long, long long> frequency;
    for (const auto& weight : weights) {
        frequency[weight]++;
        if (frequency[weight] > 50) {  // Assuming 50 as a threshold for repetition
            cerr << "Warning: Performance bottleneck due to repeated element weights!" << endl;
            abort();
        }
    }
}

void check_memory_usage_invariant(long long m, const vector<long long>& weights) {
    long long total_weight = 0;
    for (const auto& weight : weights) {
        total_weight += weight;
    }
    if (m > 250000 && total_weight > 1000000) {  // Arbitrary thresholds
        cerr << "Warning: Performance bottleneck due to large potential memory usage!" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin >> n >> m;

    check_capacity_invariant(m); // Check large capacity

    vector<long long> all_weights; // To check invariants related to weights
    for (long long i = 0; i < n; i++) {
        cin >> ai >> bi;
        all_weights.push_back(ai);
        if (ai == 3)
            three.push_back(bi);
        else if (ai == 2)
            two.push_back(bi);
        else
            one.push_back(bi);
    }

    check_repeated_elements_invariant(all_weights); // Check for repeated elements
    check_memory_usage_invariant(m, all_weights); // Check potential memory usage

    sort(one.begin(), one.end(), greater<long long>());
    sort(two.begin(), two.end(), greater<long long>());
    sort(three.begin(), three.end(), greater<long long>());

    vector<vector<long long> > answer;
    for (long long i = 0; i <= m; i++) {
        vector<long long> help;
        help.push_back(-100000000000000000);
        help.push_back(-1);
        help.push_back(-1);
        answer.push_back(help);
    }
    answer[0][0] = 0;
    answer[0][1] = 0;
    answer[0][2] = 0;
    for (long long i = 0; i <= m; i++) {
        if (answer[i][1] == -1) continue;
        if (answer[i][1] < one.size()) {
            long long v = answer[i][0] + one[answer[i][1]];
            if (i + 1 <= m && answer[i + 1][0] < v) {
                answer[i + 1][0] = v;
                answer[i + 1][1] = answer[i][1] + 1;
                answer[i + 1][2] = answer[i][2];
            }
        }
        if (answer[i][2] < two.size()) {
            long long v = answer[i][0] + two[answer[i][2]];
            if (i + 2 <= m && answer[i + 2][0] < v) {
                answer[i + 2][0] = v;
                answer[i + 2][1] = answer[i][1];
                answer[i + 2][2] = answer[i][2] + 1;
            }
        }
    }

    long long ans = 0;
    long long summ = 0;
    long long maximum = 0;
    for (long long i = 0; i <= m; i++) {
        maximum = max(maximum, answer[i][0]);
        answer[i][0] = maximum;
    }
    for (long long i = 0; i <= three.size(); i++) {
        if (3 * i > m) break;
        if (i > 0) summ += three[i - 1];
        if (summ + answer[m - 3 * i][0] > ans) {
            ans = summ + answer[m - 3 * i][0];
        }
    }
    cout << ans << endl;
    return 0;
}
```

**Comments**:
- **Capacity Check**: Triggered if the total `m` is suspiciously large, potentially leading to excessive state expansion.
- **Repeated Elements Check**: Warns if any weight type is excessively repeated, which may lead to redundant calculations.
- **Memory Usage Check**: Ensures that the combined potential memory usage doesn't exceed an arbitrary large threshold. 

These checks help ensure that the program is running efficiently and can be useful for detecting potential performance bottlenecks during execution.

