system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool cmp(pair<int, long long> a, pair<int, long long> b) {
  return a.second / a.first > b.second / b.first;
}
int main() {
  int n, m, w, l, r;
  long long c, dp[300500], mx;
  cin >> n >> m;
  vector<pair<int, long long>> t(n);
  for (int i = 0; i < n; ++i) {
    scanf("%d%I64d", &w, &c);
    t[i] = make_pair(w, c);
  }
  sort(t.begin(), t.end(), cmp);
  memset(dp, 0, sizeof(dp));
  r = 0;
  for (int i = 0; i < n; ++i) {
    r = min(r + t[i].first, m);
    l = max(t[i].first, r - 6);
    for (int j = r; j >= l; --j) {
      dp[j] = max(dp[j], dp[j - t[i].first] + t[i].second);
    }
  }
  mx = 0;
  for (int i = 0; i <= m; ++i) {
    mx = max(mx, dp[i]);
  }
  cout << mx << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

61 120
3 5
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3


(G.2) Fast Input

1 2
3 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(pair<int, long long> a, pair<int, long long> b) { /* line 3 slow_hit_count: 208, fast_hit_count: 0 */
  return a.second / a.first > b.second / b.first; /* line 4 slow_hit_count: 208, fast_hit_count: 0 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, w, l, r; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  long long c, dp[300500], mx; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, long long>> t(n); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 11 slow_hit_count: 62, fast_hit_count: 2 */
    scanf("%d%I64d", &w, &c); /* line 12 slow_hit_count: 61, fast_hit_count: 1 */
    t[i] = make_pair(w, c); /* line 13 slow_hit_count: 61, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  sort(t.begin(), t.end(), cmp); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, 0, sizeof(dp)); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  r = 0; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 18 slow_hit_count: 62, fast_hit_count: 2 */
    r = min(r + t[i].first, m); /* line 19 slow_hit_count: 61, fast_hit_count: 1 */
    l = max(t[i].first, r - 6); /* line 20 slow_hit_count: 61, fast_hit_count: 1 */
    for (int j = r; j >= l; --j) { /* line 21 slow_hit_count: 476, fast_hit_count: 1 */
      dp[j] = max(dp[j], dp[j - t[i].first] + t[i].second); /* line 22 slow_hit_count: 415, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  mx = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= m; ++i) { /* line 26 slow_hit_count: 122, fast_hit_count: 4 */
    mx = max(mx, dp[i]); /* line 27 slow_hit_count: 121, fast_hit_count: 3 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mx << endl; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C code, let's analyze the hit count information and identify why the slow input causes significantly more execution time than the fast input. 

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Line 3-4 (Comparator Function `cmp`)**: This function is called 208 times in the slow run versus never in the fast run. This is because it's used in the `sort` function to order the souvenirs based on cost-to-weight ratio, which doesn't need to be invoked with just one item in the fast input, but is repeatedly called for the 61 items in the slow input.

2. **Lines 21-22 (Nested Loop for Dynamic Programming Update)**:
   - The inner loop (`for (int j = r; j >= l; --j)`) is executed 476 times in the slow input compared to just 1 time for the fast input. This loop performs the most computationally intensive task of updating the DP array, which is likely why the slow input takes much longer.
   - Line 22, which updates the DP table, is hit 415 times in the slow input, but not at all in the fast input. This indicates that the number of updates to the DP table is a major contributor to the slowdown.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the observations from the hit count data, here are some natural language performance invariants that describe under what conditions the code slows down:

1. **Sorting Overhead**:
   - **Invariant**: "If the number of souvenirs `n` is large, the sorting step can become a bottleneck due to repeated comparisons. This is especially significant when sorting is based on complex criteria, such as the cost-to-weight ratio."
   - **Reasoning**: The comparator function is called many times when `n` is large, leading to overhead from sorting.

2. **Dynamic Programming Table Updates**:
   - **Invariant**: "When the range of weights (difference between `r` and `l`) becomes large due to the accumulation of item weights close to the limit `m`, the inner loop that updates the dynamic programming table is executed many times, causing a significant slowdown."
   - **Reasoning**: The nested loop performing DP table updates becomes expensive as the weight range (`r-l`) widens, leading to a large number of operations.

3. **Inefficient DP Array Utilization**:
   - **Invariant**: "If the accumulated capacities `r` frequently approach the maximum weight limit `m`, the inefficiency in updating each possible weight capacity contributes to increased execution time. This is exacerbated when multiple items have the same or similar weights."
   - **Reasoning**: The inner loop iterates over multiple possible capacities, which leads to many redundant updates when similar weights are involved.

These invariants point out that the slow execution is mainly due to the extensive calculations required when there are many items with similar weights, causing many updates to the DP table, combined with the sorting overhead for a larger number of items.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

Solution (C++ code):
{solution}


assistant: Below is the implementation of the performance-characterizing invariants translated into C++ checks (Phase 3).

### Phase 3: Implementing Natural Language Invariants in C++

1. **Sorting Overhead**:
   - **Invariant Check**:
     ```cpp
     void check_sort_invariant(int n) {
         if (n > 50) {  // Threshold based on potential sorting overhead
             cerr << "Warning: sort_invariant triggered - sorting large number of items" << endl;
             abort();
         }
     }
     ```

2. **Dynamic Programming Table Updates**:
   - **Invariant Check**:
     ```cpp
     void check_dp_range_invariant(int r, int l) {
         if ((r - l) > 10) {  // Arbitrary threshold indicating a large range
             cerr << "Warning: dp_range_invariant triggered - large range of DP updates" << endl;
             abort();
         }
     }
     ```

3. **Inefficient DP Array Utilization**:
   - **Invariant Check**:
     ```cpp
     void check_accumulated_weight_invariant(int r, int m) {
         if (r > 0.9 * m) {  // Threshold indicating capacity nearing limit
             cerr << "Warning: accumulated_weight_invariant triggered - capacity nearing limit" << endl;
             abort();
         }
     }
     ```

Now, we will integrate these checks into the original C++ program (Phase 4).

### Phase 4: Integrating Checker Code into the Original Program

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance characterization
void check_sort_invariant(int n) {
    if (n > 50) {  // Threshold based on potential sorting overhead
        cerr << "Warning: sort_invariant triggered - sorting large number of items" << endl;
        abort();
    }
}

void check_dp_range_invariant(int r, int l) {
    if ((r - l) > 10) {  // Arbitrary threshold indicating a large range
        cerr << "Warning: dp_range_invariant triggered - large range of DP updates" << endl;
        abort();
    }
}

void check_accumulated_weight_invariant(int r, int m) {
    if (r > 0.9 * m) {  // Threshold indicating capacity nearing limit
        cerr << "Warning: accumulated_weight_invariant triggered - capacity nearing limit" << endl;
        abort();
    }
}

bool cmp(pair<int, long long> a, pair<int, long long> b) {
    return a.second / a.first > b.second / b.first;
}

int main() {
    int n, m, w, l, r;
    long long c, dp[300500], mx;
    cin >> n >> m;

    // Check for sorting overhead
    check_sort_invariant(n);

    vector<pair<int, long long>> t(n);
    for (int i = 0; i < n; ++i) {
        scanf("%d%I64d", &w, &c);
        t[i] = make_pair(w, c);
    }

    sort(t.begin(), t.end(), cmp);
    memset(dp, 0, sizeof(dp));
    r = 0;

    for (int i = 0; i < n; ++i) {
        r = min(r + t[i].first, m);
        l = max(t[i].first, r - 6);

        // Check for large DP update range
        check_dp_range_invariant(r, l);

        for (int j = r; j >= l; --j) {
            dp[j] = max(dp[j], dp[j - t[i].first] + t[i].second);
        }

        // Check for capacity nearing limit
        check_accumulated_weight_invariant(r, m);
    }

    mx = 0;
    for (int i = 0; i <= m; ++i) {
        mx = max(mx, dp[i]);
    }
    cout << mx << endl;
    return 0;
}
```

### Explanation

- **Sort Overhead Check**: Placed after reading the input size `n` to warn if `n` is large, potentially leading to a costly sort operation.
- **DP Range Check**: Placed inside the outer loop, checks if the range of `r - l` becomes too large.
- **Accumulated Weight Check**: Added at the end of each outer loop iteration to detect if the current capacity `r` is nearing the limit `m`. 

These checks are strategically placed to avoid performance overhead while detecting conditions that could lead to a performance bottleneck.

