system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long cost[4][300100];
vector<long long> val[4];
long long cal(long long x) {
  long long sz = val[2].size();
  long long l = 1, r = min(x / 2, sz), best = 0;
  while (l <= r) {
    long long mid = (l + r) / 2;
    if (cost[2][mid * 2] + cost[1][x - mid * 2] >=
        cost[2][(mid - 1) * 2] + cost[1][x - (mid - 1) * 2]) {
      best = mid;
      l = mid + 1;
    } else {
      r = mid - 1;
    }
  }
  return cost[2][best * 2] + cost[1][x - best * 2];
}
int main() {
  int t = 1;
  while (t--) {
    long long n, m;
    cin >> n >> m;
    for (long long i = 1; i <= n; i++) {
      long long x, y;
      cin >> x >> y;
      val[x].push_back(y);
    }
    for (long long i = 1; i <= 3; i++) {
      sort(val[i].begin(), val[i].end());
      reverse(val[i].begin(), val[i].end());
      long long now = 0;
      for (long long j = 0; j < val[i].size(); j++) {
        now += val[i][j];
        cost[i][(j + 1) * i] = now;
      }
      for (long long j = 1; j <= m; j++) {
        cost[i][j] = max(cost[i][j], cost[i][j - 1]);
      }
    }
    long long ans = 0;
    for (long long i = 0; i <= m; i++) {
      ans = max(ans, cost[3][i] + cal(m - i));
    }
    cout << ans << endl;
    memset(cost, 0, sizeof(cost));
    for (long long i = 0; i <= 3; i++) val[i].clear();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

61 120
3 5
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 2
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3
2 3


(G.2) Fast Input

1 2
3 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long cost[4][300100]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> val[4]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long cal(long long x) { /* line 5 slow_hit_count: 121, fast_hit_count: 3 */
  long long sz = val[2].size(); /* line 6 slow_hit_count: 121, fast_hit_count: 3 */
  long long l = 1, r = min(x / 2, sz), best = 0; /* line 7 slow_hit_count: 121, fast_hit_count: 3 */
  while (l <= r) { /* line 8 slow_hit_count: 721, fast_hit_count: 3 */
    long long mid = (l + r) / 2; /* line 9 slow_hit_count: 600, fast_hit_count: 0 */
    if (cost[2][mid * 2] + cost[1][x - mid * 2] >= /* line 10 slow_hit_count: 600, fast_hit_count: 0 */
        cost[2][(mid - 1) * 2] + cost[1][x - (mid - 1) * 2]) { /* line 11 slow_hit_count: 600, fast_hit_count: 0 */
      best = mid; /* line 12 slow_hit_count: 600, fast_hit_count: 0 */
      l = mid + 1; /* line 13 slow_hit_count: 600, fast_hit_count: 0 */
    } else { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      r = mid - 1; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return cost[2][best * 2] + cost[1][x - best * 2]; /* line 18 slow_hit_count: 121, fast_hit_count: 3 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
    long long n, m; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n >> m; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long i = 1; i <= n; i++) { /* line 25 slow_hit_count: 62, fast_hit_count: 2 */
      long long x, y; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> x >> y; /* line 27 slow_hit_count: 61, fast_hit_count: 1 */
      val[x].push_back(y); /* line 28 slow_hit_count: 61, fast_hit_count: 1 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 1; i <= 3; i++) { /* line 30 slow_hit_count: 4, fast_hit_count: 4 */
      sort(val[i].begin(), val[i].end()); /* line 31 slow_hit_count: 3, fast_hit_count: 3 */
      reverse(val[i].begin(), val[i].end()); /* line 32 slow_hit_count: 3, fast_hit_count: 3 */
      long long now = 0; /* line 33 slow_hit_count: 3, fast_hit_count: 3 */
      for (long long j = 0; j < val[i].size(); j++) { /* line 34 slow_hit_count: 64, fast_hit_count: 4 */
        now += val[i][j]; /* line 35 slow_hit_count: 61, fast_hit_count: 1 */
        cost[i][(j + 1) * i] = now; /* line 36 slow_hit_count: 61, fast_hit_count: 1 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long j = 1; j <= m; j++) { /* line 38 slow_hit_count: 363, fast_hit_count: 9 */
        cost[i][j] = max(cost[i][j], cost[i][j - 1]); /* line 39 slow_hit_count: 360, fast_hit_count: 6 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    long long ans = 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long i = 0; i <= m; i++) { /* line 43 slow_hit_count: 122, fast_hit_count: 4 */
      ans = max(ans, cost[3][i] + cal(m - i)); /* line 44 slow_hit_count: 121, fast_hit_count: 3 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
    memset(cost, 0, sizeof(cost)); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long i = 0; i <= 3; i++) val[i].clear(); /* line 48 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit count information, the following observations can be made regarding the slow and fast inputs:

1. **Function `cal(long long x)`**:
   - This function is called 121 times for the slow input but only 3 times for the fast input. 
   - The lines within the while loop in `cal` (lines 9-13) are particularly expensive. They have a significantly higher hit count in the slow input compared to the fast input, indicating that this loop is executed many more times for the slow input.
   - The condition in the while loop (line 8) is evaluated 721 times for the slow input compared to 3 times for the fast input, suggesting that the binary search logic is being repeatedly executed.

2. **Main loop in `main()` function**:
   - The outer loop on line 43 iterates 122 times for the slow input, while only 4 times for the fast input.
   - The combination of the loop 43 and the call to the `cal` function at line 44 seems to be a major contributor to the slowdown, as the function `cal` is invoked for each iteration of the loop.

3. **Nested loop operation for the `cost` array**:
   - The loop on line 38 iterates 363 times in the slow input, compared to 9 times for the fast input.
   - The update operation `cost[i][j] = max(cost[i][j], cost[i][j - 1])` is performed extensively in the slow input, suggesting heavy computation associated with setting up the `cost` array dynamically.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are some natural language performance-characterizing invariants:

1. **Binary Search in `cal` Function**: 
   - If the function `cal` is called frequently within a loop, particularly when the range of `x` is large, the binary search logic will lead to a significant number of iterations, causing the slowdown.
   - **Invariant**: "If the function `cal` is invoked repeatedly with large values of `x`, the repeated binary search operations may cause significant slowdowns, especially if `x` is such that `x/2` is large and results in many mid-point calculations."

2. **Dynamic Array Update**:
   - If the `val` arrays for different weights (1, 2, 3) are large, the algorithm will perform extensive sorting and update operations on the `cost` array. This can degrade performance because each element contributes to a cumulative cost that needs calculation.
   - **Invariant**: "If the `val` arrays have many elements, extensive sorting and repeated updates to the `cost` array can lead to performance bottlenecks due to high computational overhead."

3. **Outer Loop in `main` Function**:
   - The loop in `main` iterating over `m` can exacerbate slowdowns when `m` is large. In such cases, the algorithm has to compute potential maximum costs for many different total weights, leading to excessive calls to the `cal` function.
   - **Invariant**: "If the total weight capacity `m` is large, the outer loop iterating over possible weights will lead to numerous computations of potential costs, which can slow down the execution significantly."

These invariants are designed to capture scenarios that could lead to similar slowdowns in other inputs without relying on exact numeric values from the provided slow input. They consider conditions where the program's logic could become computationally expensive, given the constraints of the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Inferred Invariants as C++ Checker Code

Let's translate the previously inferred performance-characterizing invariants into C++ runtime checks.

### Invariant 1: Binary Search in `cal` Function
This invariant relates to the frequency and complexity of calls to the `cal` function, particularly when `x` is large, causing repeated expensive binary search operations.

**Code Implementation:**

```cpp
void check_cal_invariant(long long x, int callCount) {
    if (x > 100 && callCount > 500) { // Example threshold values
        cerr << "Warning: Performance bottleneck condition triggered in cal - excessive binary search iterations!" << endl;
        abort();
    }
}
```

### Invariant 2: Dynamic Array Update
This invariant concerns the size of the `val` arrays, which, if large, result in costly sorting and updates to the `cost` array.

**Code Implementation:**

```cpp
void check_sort_invariant(const vector<long long>& v) {
    if (v.size() > 5000) { // Example threshold for large arrays
        cerr << "Warning: Performance bottleneck condition triggered - large array for sorting and cost updates!" << endl;
        abort();
    }
}
```

### Invariant 3: Outer Loop in `main` Function
This invariant addresses the potential slowdown when the loop iterating over `m` triggers many computations of potential costs.

**Code Implementation:**

```cpp
void check_loop_invariant(long long m) {
    if (m > 200000) { // Example threshold for large m
        cerr << "Warning: Performance bottleneck condition triggered - extensive computations due to large m!" << endl;
        abort();
    }
}
```

## Phase 4: Insert Conditional Checks into the Original C++ Program

Now we will integrate the checkers into the C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long cost[4][300100];
vector<long long> val[4];

// Checkers for performance bottlenecks
void check_cal_invariant(long long x, int callCount) {
    if (x > 100 && callCount > 500) { // Example threshold values
        cerr << "Warning: Performance bottleneck condition triggered in cal - excessive binary search iterations!" << endl;
        abort();
    }
}

void check_sort_invariant(const vector<long long>& v) {
    if (v.size() > 5000) { // Example threshold for large arrays
        cerr << "Warning: Performance bottleneck condition triggered - large array for sorting and cost updates!" << endl;
        abort();
    }
}

void check_loop_invariant(long long m) {
    if (m > 200000) { // Example threshold for large m
        cerr << "Warning: Performance bottleneck condition triggered - extensive computations due to large m!" << endl;
        abort();
    }
}

// Function for calculating maximum cost
long long cal(long long x) {
    static int calCallCount = 0;
    calCallCount++;
    long long sz = val[2].size();
    long long l = 1, r = min(x / 2, sz), best = 0;
    while (l <= r) {
        long long mid = (l + r) / 2;
        if (cost[2][mid * 2] + cost[1][x - mid * 2] >=
            cost[2][(mid - 1) * 2] + cost[1][x - (mid - 1) * 2]) {
            best = mid;
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }
    check_cal_invariant(x, calCallCount); // Check for excessive calls and iterations
    return cost[2][best * 2] + cost[1][x - best * 2];
}

int main() {
    int t = 1;
    while (t--) {
        long long n, m;
        cin >> n >> m;

        check_loop_invariant(m); // Check before entering the heavy loop with large m

        for (long long i = 1; i <= n; i++) {
            long long x, y;
            cin >> x >> y;
            val[x].push_back(y);
        }

        for (long long i = 1; i <= 3; i++) {
            check_sort_invariant(val[i]); // Check array size before sorting

            sort(val[i].begin(), val[i].end());
            reverse(val[i].begin(), val[i].end());
            long long now = 0;
            for (long long j = 0; j < val[i].size(); j++) {
                now += val[i][j];
                cost[i][(j + 1) * i] = now;
            }
            for (long long j = 1; j <= m; j++) {
                cost[i][j] = max(cost[i][j], cost[i][j - 1]);
            }
        }

        long long ans = 0;
        for (long long i = 0; i <= m; i++) {
            ans = max(ans, cost[3][i] + cal(m - i));
        }
        cout << ans << endl;

        memset(cost, 0, sizeof(cost));
        for (long long i = 0; i <= 3; i++) val[i].clear();
    }
    return 0;
}
```

### Explanation
- **Check in `cal` Function**: The `check_cal_invariant` is called within the `cal` function to monitor excessive calls and iterations.
- **Check after Input**: The `check_loop_invariant` is used after reading `m` to ensure it doesn't lead to excessive computations.
- **Check Before Sorting**: The `check_sort_invariant` is used to monitor the size of `val[i]` before sorting operations.

These checks are strategically placed to provide insights into performance bottlenecks without affecting the algorithm's normal flow or imposing significant overhead.

