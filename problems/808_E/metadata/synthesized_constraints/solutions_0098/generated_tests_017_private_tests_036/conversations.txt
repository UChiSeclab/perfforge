system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 3e5 + 5;
int w[maxn], c[maxn];
vector<int> v[4];
struct data {
  long long v, l, r;
  bool operator>(const data &rhs) const { return v > rhs.v; }
  bool operator<(const data &rhs) const { return v < rhs.v; }
  data operator+(const data &rhs) const {
    return data(v + rhs.v, l + rhs.l, r + rhs.r);
  }
  data() {}
  data(long long a, int b, int c) : v(a), l(b), r(c) {}
} dp[maxn];
int main() {
  int n, m;
  scanf("%d %d", &n, &m);
  for (int i = 0; i < n; ++i)
    scanf("%d %d", &w[i], &c[i]), v[w[i]].push_back(c[i]);
  for (int i = 1; i <= 3; ++i)
    sort(v[i].begin(), v[i].end()), reverse(v[i].begin(), v[i].end());
  dp[0] = data(0, -1, -1);
  for (int i = 0; i < maxn; ++i) {
    if (i + 1 < maxn && dp[i].l + 1 < v[1].size())
      dp[i + 1] = max(dp[i + 1], dp[i] + data(v[1][dp[i].l + 1], 1, 0));
    if (i + 2 < maxn && dp[i].r + 1 < v[2].size())
      dp[i + 2] = max(dp[i + 2], dp[i] + data(v[2][dp[i].r + 1], 0, 1));
  }
  for (int i = 1; i < maxn; ++i) dp[i] = max(dp[i], dp[i - 1]);
  long long s = 0, ans = 0;
  for (int i = 0; i <= v[3].size(); ++i) {
    if (m - 3 * i < 0) continue;
    ans = max(ans, s + dp[m - 3 * i].v);
    if (i < v[3].size()) s += v[3][i];
  }
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 5
1 9
1 8
2 8
3 4
3 1
2 2
3 6
1 1
3 8
2 2


(G.2) Fast Input

8 5
3 9
3 3
1 4
3 1
2 5
3 1
3 6
3 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 3e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int w[maxn], c[maxn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> v[4]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
struct data { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long v, l, r; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator>(const data &rhs) const { return v > rhs.v; } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator<(const data &rhs) const { return v < rhs.v; } /* line 9 slow_hit_count: 685725, fast_hit_count: 300008 */
  data operator+(const data &rhs) const { /* line 10 slow_hit_count: 385721, fast_hit_count: 4 */
    return data(v + rhs.v, l + rhs.l, r + rhs.r); /* line 11 slow_hit_count: 385721, fast_hit_count: 4 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  data() {} /* line 13 slow_hit_count: 300005, fast_hit_count: 300005 */
  data(long long a, int b, int c) : v(a), l(b), r(c) {} /* line 14 slow_hit_count: 771443, fast_hit_count: 9 */
} dp[maxn]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d", &n, &m); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) /* line 19 slow_hit_count: 11, fast_hit_count: 9 */
    scanf("%d %d", &w[i], &c[i]), v[w[i]].push_back(c[i]); /* line 20 slow_hit_count: 10, fast_hit_count: 8 */
  for (int i = 1; i <= 3; ++i) /* line 21 slow_hit_count: 4, fast_hit_count: 4 */
    sort(v[i].begin(), v[i].end()), reverse(v[i].begin(), v[i].end()); /* line 22 slow_hit_count: 3, fast_hit_count: 3 */
  dp[0] = data(0, -1, -1); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < maxn; ++i) { /* line 24 slow_hit_count: 300006, fast_hit_count: 300006 */
    if (i + 1 < maxn && dp[i].l + 1 < v[1].size()) /* line 25 slow_hit_count: 300005, fast_hit_count: 300005 */
      dp[i + 1] = max(dp[i + 1], dp[i] + data(v[1][dp[i].l + 1], 1, 0)); /* line 26 slow_hit_count: 171432, fast_hit_count: 2 */
    if (i + 2 < maxn && dp[i].r + 1 < v[2].size()) /* line 27 slow_hit_count: 300005, fast_hit_count: 300005 */
      dp[i + 2] = max(dp[i + 2], dp[i] + data(v[2][dp[i].r + 1], 0, 1)); /* line 28 slow_hit_count: 214289, fast_hit_count: 2 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i < maxn; ++i) dp[i] = max(dp[i], dp[i - 1]); /* line 30 slow_hit_count: 300005, fast_hit_count: 300005 */
  long long s = 0, ans = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= v[3].size(); ++i) { /* line 32 slow_hit_count: 6, fast_hit_count: 8 */
    if (m - 3 * i < 0) continue; /* line 33 slow_hit_count: 5, fast_hit_count: 7 */
    ans = max(ans, s + dp[m - 3 * i].v); /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
    if (i < v[3].size()) s += v[3][i]; /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts for the slow and fast inputs, we observe the following:

1. **Line 10 and 11** (in `data` operator overloading): These lines are hit 385721 times for the slow input compared to only 4 times for the fast input. This suggests that the creation of new `data` instances and their addition is being performed excessively in the slow scenario.

2. **Line 9** (operator `>` comparison): This line is hit 685725 times for the slow input, compared to 300008 times for the fast input. This indicates frequent comparisons, likely due to the operations in the dynamic programming logic.

3. **Line 26 and 28** (dynamic programming state updates): These lines experience significantly higher hit counts in the slow input (171432 and 214289 times, respectively) compared to just 2 times for the fast input. It shows that the slow input triggers many more updates to the dynamic programming table.

4. **Loops in Lines 24, 25, 27, and 30**: These lines have identical hit counts for both inputs, suggesting that the slow down is not due to loop iterations but rather due to operations within the loops.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, the following natural language performance invariants can be derived:

1. **Frequent Dynamic Programming Updates**: 
   - **Invariant**: "When the dynamic programming state is frequently updated, especially with many potential combinations of weights and costs, it can lead to significant slowdowns. This is often indicated by many additions and comparisons of `data` objects within the algorithm."
   - **Threshold Indicator**: A potential cause for slowdowns can be a large number of smaller-weight souvenirs (weights of 1 or 2), causing many updates in the DP table.

2. **Excessive Data Object Operations**:
   - **Invariant**: "When the program frequently creates and adds `data` objects due to many conditional paths or multiple valid configurations, performance can degrade due to excessive computational overhead."
   - **Threshold Indicator**: The presence of many similar-weight souvenirs (all weights being 1, 2, or a mix) which causes the program to explore a large number of possible combinations exhaustively.

3. **High Operator Overloading Usage**:
   - **Invariant**: "If the operator overloading functions for comparison and addition are invoked excessively, it may indicate an inefficient evaluation of potential solutions, which can cause performance bottlenecks."
   - **Threshold Indicator**: Multiple items with similar weights leading to many different combinations being tested by the dynamic programming approach.

### Conclusion

The slow input's characteristics likely involve a high number of similar-weight souvenirs, leading to more states being evaluated in the dynamic programming solution. This results in excessive object creation and comparisons, contributing to performance bottlenecks. These identified invariants can help detect and address slow scenario triggers in similar contexts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.

This morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.

Help Petya to determine maximum possible total cost.

Input

The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 300000) — the number of Petya's souvenirs and total weight that he can carry to the market.

Then n lines follow. ith line contains two integers wi and ci (1 ≤ wi ≤ 3, 1 ≤ ci ≤ 109) — the weight and the cost of ith souvenir.

Output

Print one number — maximum possible total cost of souvenirs that Petya can carry to the market.

Examples

Input

1 1
2 1


Output

0


Input

2 2
1 3
2 2


Output

3


Input

4 3
3 10
2 7
2 8
1 1


Output

10

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the runtime checks for the natural language invariants derived in the previous phase:

1. **Frequent Dynamic Programming Updates Checker**:
   - This checker ensures that the number of potential combinations (based on the frequency of weights) is not excessively high.

```cpp
void check_dp_update_invariant(int n, const vector<int> v[]) {
    int totalPotentialCombinations = (v[1].size() + 1) * (v[2].size() + 1) * (v[3].size() + 1);
    if (totalPotentialCombinations > 10000) {  // Arbitrary threshold for potential combinations
        cerr << "Warning: Performance bottleneck condition triggered - excessive DP updates due to many combinations!" << endl;
        abort();
    }
}
```

2. **Excessive Data Object Operations Checker**:
   - This checker ensures that there isn't an excessive number of weight 1 or weight 2 items that cause repeated data object creation.

```cpp
void check_data_operations_invariant(int n, const vector<int> &v1, const vector<int> &v2) {
    if (v1.size() * v2.size() > 10000) {  // An arbitrary threshold for excessive operations
        cerr << "Warning: Performance bottleneck condition triggered - excessive data operations!" << endl;
        abort();
    }
}
```

3. **High Operator Overloading Usage Checker**:
   - Checking if there's excessive operator usage due to a large number of combinations being tested.

```cpp
void check_operator_usage_invariant(const vector<int> &v1, const vector<int> &v2, const vector<int> &v3) {
    if ((v1.size() + v2.size() + v3.size()) > 200) {  // Arbitrary threshold for excessive usage
        cerr << "Warning: Operator overloading invariant triggered - excessive comparisons!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, incorporate these conditions into the original C++ program. The checks should be placed where the input is fully read and sorted, as this is the most effective point to evaluate potential bottlenecks without interfering with performance-critical loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 3e5 + 5;
int w[maxn], c[maxn];
vector<int> v[4];

struct data {
    long long v, l, r;
    bool operator>(const data &rhs) const { return v > rhs.v; }
    bool operator<(const data &rhs) const { return v < rhs.v; }
    data operator+(const data &rhs) const {
        return data(v + rhs.v, l + rhs.l, r + rhs.r);
    }
    data() {}
    data(long long a, int b, int c) : v(a), l(b), r(c) {}
} dp[maxn];

// Checker for frequent dynamic programming updates
void check_dp_update_invariant(int n, const vector<int> v[]) {
    int totalPotentialCombinations = (v[1].size() + 1) * (v[2].size() + 1) * (v[3].size() + 1);
    if (totalPotentialCombinations > 10000) {  // Arbitrary threshold for potential combinations
        cerr << "Warning: Performance bottleneck condition triggered - excessive DP updates due to many combinations!" << endl;
        abort();
    }
}

// Checker for excessive data object operations
void check_data_operations_invariant(int n, const vector<int> &v1, const vector<int> &v2) {
    if (v1.size() * v2.size() > 10000) {  // Arbitrary threshold for excessive operations
        cerr << "Warning: Performance bottleneck condition triggered - excessive data operations!" << endl;
        abort();
    }
}

// Checker for high operator overloading usage
void check_operator_usage_invariant(const vector<int> &v1, const vector<int> &v2, const vector<int> &v3) {
    if ((v1.size() + v2.size() + v3.size()) > 200) {  // Arbitrary threshold for excessive usage
        cerr << "Warning: Operator overloading invariant triggered - excessive comparisons!" << endl;
        abort();
    }
}

int main() {
    int n, m;
    scanf("%d %d", &n, &m);
    for (int i = 0; i < n; ++i)
        scanf("%d %d", &w[i], &c[i]), v[w[i]].push_back(c[i]);
    for (int i = 1; i <= 3; ++i)
        sort(v[i].begin(), v[i].end()), reverse(v[i].begin(), v[i].end());

    // Insert performance checks after input and sorting
    check_dp_update_invariant(n, v);
    check_data_operations_invariant(n, v[1], v[2]);
    check_operator_usage_invariant(v[1], v[2], v[3]);

    dp[0] = data(0, -1, -1);
    for (int i = 0; i < maxn; ++i) {
        if (i + 1 < maxn && dp[i].l + 1 < v[1].size())
            dp[i + 1] = max(dp[i + 1], dp[i] + data(v[1][dp[i].l + 1], 1, 0));
        if (i + 2 < maxn && dp[i].r + 1 < v[2].size())
            dp[i + 2] = max(dp[i + 2], dp[i] + data(v[2][dp[i].r + 1], 0, 1));
    }
    for (int i = 1; i < maxn; ++i) dp[i] = max(dp[i], dp[i - 1]);
    long long s = 0, ans = 0;
    for (int i = 0; i <= v[3].size(); ++i) {
        if (m - 3 * i < 0) continue;
        ans = max(ans, s + dp[m - 3 * i].v);
        if (i < v[3].size()) s += v[3][i];
    }
    printf("%lld\n", ans);
    return 0;
}
```

### Explanation
- **Performance Checks Integration**: Each check is placed after reading and sorting inputs to avoid adding overhead during the dynamic programming loop operations.
- **Thresholds**: These thresholds are set based on the analysis of the line-level hit counts and are arbitrarily chosen to catch potential performance bottlenecks without being overly restrictive. Adjust these thresholds as necessary based on further profiling and testing.

