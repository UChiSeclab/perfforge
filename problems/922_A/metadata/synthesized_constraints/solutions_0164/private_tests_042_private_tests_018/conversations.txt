system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Imp likes his plush toy a lot.

<image>

Recently, he found a machine that can clone plush toys. Imp knows that if he applies the machine to an original toy, he additionally gets one more original toy and one copy, and if he applies the machine to a copied toy, he gets two additional copies.

Initially, Imp has only one original toy. He wants to know if it is possible to use machine to get exactly x copied toys and y original toys? He can't throw toys away, and he can't apply the machine to a copy if he doesn't currently have any copies.

Input

The only line contains two integers x and y (0 ≤ x, y ≤ 109) — the number of copies and the number of original toys Imp wants to get (including the initial one).

Output

Print "Yes", if the desired configuration is possible, and "No" otherwise.

You can print each letter in arbitrary case (upper or lower).

Examples

Input

6 3


Output

Yes


Input

4 2


Output

No


Input

1000 1001


Output

Yes

Note

In the first example, Imp has to apply the machine twice to original toys and then twice to copies.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int x, y;
  cin >> x >> y;
  int sum = 1, sum1 = 0;
  for (;;) {
    if (sum == y) break;
    if (sum > y) {
      cout << "No";
      return 0;
    }
    sum++;
    sum1++;
  }
  for (;;) {
    if (sum1 == x && sum == y) {
      cout << "Yes";
      return 0;
    }
    if (sum1 > x) {
      cout << "No";
      return 0;
    }
    if (sum1 > 0) sum1 += 2;
    if (sum1 == 0) {
      cout << "No";
      return 0;
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1000000000


(G.2) Fast Input

1000000000 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int x, y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x >> y; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int sum = 1, sum1 = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (;;) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum == y) break; /* line 8 slow_hit_count: 1000000000, fast_hit_count: 1 */
    if (sum > y) { /* line 9 slow_hit_count: 999999999, fast_hit_count: 0 */
      cout << "No"; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    sum++; /* line 13 slow_hit_count: 999999999, fast_hit_count: 0 */
    sum1++; /* line 14 slow_hit_count: 999999999, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (;;) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum1 == x && sum == y) { /* line 17 slow_hit_count: 2, fast_hit_count: 1 */
      cout << "Yes"; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum1 > x) { /* line 21 slow_hit_count: 2, fast_hit_count: 1 */
      cout << "No"; /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
      return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum1 > 0) sum1 += 2; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    if (sum1 == 0) { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
      cout << "No"; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line Hit Count Comparison:**
    - **Line 8:** `if (sum == y) break;` and subsequent lines (`13` and `14`) have extremely high hit counts for the slow input (`1000000000` times), indicating these lines are executed in a loop far more often than in the fast input.
    - This loop (lines 7-14) is directly tied to the `y` value, as it increments `sum` and `sum1` until `sum` equals `y` (line 8). The slow input requires the loop to iterate a billion times because `y` is `1000000000`, as opposed to the fast input where `y` is just `1`.

2. **Interaction with Data Structures:**
    - The loop is not interacting with complex data structures but is rather involved in inefficiently counting up to `y` using a simple increment operation (`sum++` and `sum1++`), which is computationally expensive due to its sheer number of iterations.

3. **Input Constraints Relation:**
    - The code's performance is directly influenced by the size of `y`. With `y` being `1000000000`, the loop runs excessively, causing the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Statement 1:** 
   "The program enters a slow execution path when the desired number of original toys `y` is significantly large, leading to numerous increment operations within a loop until `sum` matches `y`. This results in a high iteration count directly proportional to the magnitude of `y`."

2. **Invariant Statement 2:** 
   "When the initial difference between `y` and the starting count of original toys (1) is large, the program will have a prolonged loop execution, incrementing `sum` and `sum1` repeatedly, which causes the slowdown."

3. **Invariant Statement 3:** 
   "If both `x` and `y` are large, the calculation becomes computationally expensive, particularly when the loop designed to increase `sum` and `sum1` runs until `sum` equals `y`, exacerbated by a large `y` value."

4. **Threshold Suggestion:**
   "As `y` approaches the upper input constraint (e.g., values close to 10^9), ensure to reconsider the loop structure or logic to prevent excessive iteration counts that significantly impact performance."

These invariants describe how the combination of large values for `x` and `y`, particularly `y`, leads to inefficiencies due to excessive loop iteration. This characterization will help identify and adjust scenarios that trigger slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Imp likes his plush toy a lot.

<image>

Recently, he found a machine that can clone plush toys. Imp knows that if he applies the machine to an original toy, he additionally gets one more original toy and one copy, and if he applies the machine to a copied toy, he gets two additional copies.

Initially, Imp has only one original toy. He wants to know if it is possible to use machine to get exactly x copied toys and y original toys? He can't throw toys away, and he can't apply the machine to a copy if he doesn't currently have any copies.

Input

The only line contains two integers x and y (0 ≤ x, y ≤ 109) — the number of copies and the number of original toys Imp wants to get (including the initial one).

Output

Print "Yes", if the desired configuration is possible, and "No" otherwise.

You can print each letter in arbitrary case (upper or lower).

Examples

Input

6 3


Output

Yes


Input

4 2


Output

No


Input

1000 1001


Output

Yes

Note

In the first example, Imp has to apply the machine twice to original toys and then twice to copies.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the previously derived invariants into C++ code snippets that can be used as runtime checks:

```cpp
void check_large_y_invariant(int y) {
    if (y > 1e8) { // Threshold chosen to detect large y values that cause issues
        cerr << "Warning: Performance bottleneck condition triggered due to large y!" << endl;
        abort();
    }
}

void check_large_difference_invariant(int x, int y) {
    if ((y - 1) > 1e8) { // Large difference from the initial original toy count.
        cerr << "Warning: Performance bottleneck condition triggered due to large y difference!" << endl;
        abort();
    }
}

void check_large_x_and_y_invariant(int x, int y) {
    if (x > 1e8 && y > 1e8) { // Both x and y being large can cause inefficiencies
        cerr << "Warning: Performance bottleneck condition triggered due to large x and y!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Below is the instrumented C++ program with the performance checks integrated:

```cpp
#include <iostream>
using namespace std;

// Checkers for performance bottleneck conditions
void check_large_y_invariant(int y) {
    if (y > 1e8) { // Threshold chosen to detect large y values
        cerr << "Warning: Performance bottleneck condition triggered due to large y!" << endl;
        abort();
    }
}

void check_large_difference_invariant(int x, int y) {
    if ((y - 1) > 1e8) { // Large difference from the initial original toy count.
        cerr << "Warning: Performance bottleneck condition triggered due to large y difference!" << endl;
        abort();
    }
}

void check_large_x_and_y_invariant(int x, int y) {
    if (x > 1e8 && y > 1e8) { // Both x and y being large can cause inefficiencies
        cerr << "Warning: Performance bottleneck condition triggered due to large x and y!" << endl;
        abort();
    }
}

int main() {
    int x, y;
    cin >> x >> y;

    // Insert performance checkers here
    check_large_y_invariant(y);
    check_large_difference_invariant(x, y);
    check_large_x_and_y_invariant(x, y);

    int sum = 1, sum1 = 0;
    for (;;) {
        if (sum == y) break;
        if (sum > y) {
            cout << "No";
            return 0;
        }
        sum++;
        sum1++;
    }
    for (;;) {
        if (sum1 == x && sum == y) {
            cout << "Yes";
            return 0;
        }
        if (sum1 > x) {
            cout << "No";
            return 0;
        }
        if (sum1 > 0) sum1 += 2;
        if (sum1 == 0) {
            cout << "No";
            return 0;
        }
    }
    return 0;
}
```

### Explanation:

- **Location of checks:** The checks are placed immediately after reading inputs. This ensures that the computation does not proceed if the input values indicate potential performance bottlenecks.
- **Thresholds:** The thresholds are set to values that would likely trigger performance issues (`1e8`), which helps in detecting problematic input patterns without relying solely on observed slow inputs.
- **Purpose of checks:** These checks help catch input patterns that could lead to excessive loop iterations due to large values or large differences in desired toy counts. They provide early warnings and terminate the program before performance can degrade significantly.

