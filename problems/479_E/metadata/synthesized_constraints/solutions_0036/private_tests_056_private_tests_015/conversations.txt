system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Imagine that you are in a building that has exactly n floors. You can move between the floors in a lift. Let's number the floors from bottom to top with integers from 1 to n. Now you're on the floor number a. You are very bored, so you want to take the lift. Floor number b has a secret lab, the entry is forbidden. However, you already are in the mood and decide to make k consecutive trips in the lift.

Let us suppose that at the moment you are on the floor number x (initially, you were on floor a). For another trip between floors you choose some floor with number y (y ≠ x) and the lift travels to this floor. As you cannot visit floor b with the secret lab, you decided that the distance from the current floor x to the chosen y must be strictly less than the distance from the current floor x to floor b with the secret lab. Formally, it means that the following inequation must fulfill: |x - y| < |x - b|. After the lift successfully transports you to floor y, you write down number y in your notepad.

Your task is to find the number of distinct number sequences that you could have written in the notebook as the result of k trips in the lift. As the sought number of trips can be rather large, find the remainder after dividing the number by 1000000007 (109 + 7).

Input

The first line of the input contains four space-separated integers n, a, b, k (2 ≤ n ≤ 5000, 1 ≤ k ≤ 5000, 1 ≤ a, b ≤ n, a ≠ b).

Output

Print a single integer — the remainder after dividing the sought number of sequences by 1000000007 (109 + 7).

Examples

Input

5 2 4 1


Output

2


Input

5 2 4 2


Output

2


Input

5 3 4 1


Output

0

Note

Two sequences p1, p2, ..., pk and q1, q2, ..., qk are distinct, if there is such integer j (1 ≤ j ≤ k), that pj ≠ qj.

Notes to the samples:

  1. In the first sample after the first trip you are either on floor 1, or on floor 3, because |1 - 2| < |2 - 4| and |3 - 2| < |2 - 4|. 
  2. In the second sample there are two possible sequences: (1, 2); (1, 3). You cannot choose floor 3 for the first trip because in this case no floor can be the floor for the second trip. 
  3. In the third sample there are no sought sequences, because you cannot choose the floor for the first trip. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 5e3 + 5, MOD = 1e9 + 7;
int n, a, b, m, ans;
int f[N], sum[N], g[N];
int main() {
  scanf("%d%d%d%d", &n, &a, &b, &m);
  f[a] = 1;
  if (a < b) {
    sum[0] = 0;
    for (register int i = 1; i < b; ++i) sum[i] = (sum[i - 1] + f[i]) % MOD;
    for (register int i = 1; i < b; ++i) g[i] = f[i];
    for (register int i = 1; i <= m; ++i) {
      for (register int j = 1; j < b; ++j)
        f[j] =
            ((sum[j + (b - j + 1) / 2 - 1] - sum[0] - g[j]) % MOD + MOD) % MOD;
      sum[0] = 0;
      for (register int j = 1; j < b; ++j) sum[j] = (sum[j - 1] + f[j]) % MOD;
      for (register int j = 1; j < b; ++j) g[j] = f[j];
    }
    for (register int i = 1; i < b; ++i) ans = (ans + f[i]) % MOD;
    printf("%d\n", ans);
  } else {
    sum[b] = 0;
    for (register int i = b + 1; i <= n; ++i)
      sum[i] = (sum[i - 1] + f[i]) % MOD;
    for (register int i = b + 1; i <= n; ++i) g[i] = f[i];
    for (register int i = 1; i <= m; ++i) {
      for (register int j = b + 1; j <= n; ++j)
        f[j] = ((sum[n] - sum[j - (j - b + 1) / 2] - g[j]) % MOD + MOD) % MOD;
      sum[b] = 0;
      for (register int j = b + 1; j <= n; ++j)
        sum[j] = (sum[j - 1] + f[j]) % MOD;
      for (register int j = b + 1; j <= n; ++j) g[j] = f[j];
    }
    for (register int i = b + 1; i <= n; ++i) ans = (ans + f[i]) % MOD;
    printf("%d\n", ans);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5000 4999 5000 5000


(G.2) Fast Input

5000 5000 4999 5000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5e3 + 5, MOD = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, a, b, m, ans; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int f[N], sum[N], g[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d%d", &n, &a, &b, &m); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  f[a] = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  if (a < b) { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    sum[0] = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 0 */
    for (register int i = 1; i < b; ++i) sum[i] = (sum[i - 1] + f[i]) % MOD; /* line 11 slow_hit_count: 5000, fast_hit_count: 0 */
    for (register int i = 1; i < b; ++i) g[i] = f[i]; /* line 12 slow_hit_count: 5000, fast_hit_count: 0 */
    for (register int i = 1; i <= m; ++i) { /* line 13 slow_hit_count: 5001, fast_hit_count: 0 */
      for (register int j = 1; j < b; ++j) /* line 14 slow_hit_count: 25000000, fast_hit_count: 0 */
        f[j] = /* line 15 slow_hit_count: 24995000, fast_hit_count: 0 */
            ((sum[j + (b - j + 1) / 2 - 1] - sum[0] - g[j]) % MOD + MOD) % MOD; /* line 16 slow_hit_count: 24995000, fast_hit_count: 0 */
      sum[0] = 0; /* line 17 slow_hit_count: 5000, fast_hit_count: 0 */
      for (register int j = 1; j < b; ++j) sum[j] = (sum[j - 1] + f[j]) % MOD; /* line 18 slow_hit_count: 25000000, fast_hit_count: 0 */
      for (register int j = 1; j < b; ++j) g[j] = f[j]; /* line 19 slow_hit_count: 25000000, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    for (register int i = 1; i < b; ++i) ans = (ans + f[i]) % MOD; /* line 21 slow_hit_count: 5000, fast_hit_count: 0 */
    printf("%d\n", ans); /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    sum[b] = 0; /* line 24 slow_hit_count: 0, fast_hit_count: 1 */
    for (register int i = b + 1; i <= n; ++i) /* line 25 slow_hit_count: 0, fast_hit_count: 2 */
      sum[i] = (sum[i - 1] + f[i]) % MOD; /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
    for (register int i = b + 1; i <= n; ++i) g[i] = f[i]; /* line 27 slow_hit_count: 0, fast_hit_count: 2 */
    for (register int i = 1; i <= m; ++i) { /* line 28 slow_hit_count: 0, fast_hit_count: 5001 */
      for (register int j = b + 1; j <= n; ++j) /* line 29 slow_hit_count: 0, fast_hit_count: 10000 */
        f[j] = ((sum[n] - sum[j - (j - b + 1) / 2] - g[j]) % MOD + MOD) % MOD; /* line 30 slow_hit_count: 0, fast_hit_count: 5000 */
      sum[b] = 0; /* line 31 slow_hit_count: 0, fast_hit_count: 5000 */
      for (register int j = b + 1; j <= n; ++j) /* line 32 slow_hit_count: 0, fast_hit_count: 10000 */
        sum[j] = (sum[j - 1] + f[j]) % MOD; /* line 33 slow_hit_count: 0, fast_hit_count: 5000 */
      for (register int j = b + 1; j <= n; ++j) g[j] = f[j]; /* line 34 slow_hit_count: 0, fast_hit_count: 10000 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    for (register int i = b + 1; i <= n; ++i) ans = (ans + f[i]) % MOD; /* line 36 slow_hit_count: 0, fast_hit_count: 2 */
    printf("%d\n", ans); /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck of the given C program, let's analyze the line-level hit counts and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Analysis**:
   - Under the slow input, the following lines were executed a large number of times:
     - Lines 11, 12, 14: These loops iterate significantly (up to 25,000,000 times) when `a < b`.
     - Lines 15-19: These operations, modifying `f`, `sum`, and `g` arrays, are heavily hit within the nested loops.
   - Under the fast input, the loop starting at line 29 and continuing to line 34 was executed 10,000 times, which is significantly fewer than the slow input's loops.

2. **Observations**:
   - The slow input triggers the loop that processes when `a < b`, whereas the fast input triggers the loop for `a >= b`. This indicates that the algorithm's complexity may vary significantly depending on the relationship between `a` and `b`.
   - The nested loops in the slow input suggest a computational complexity that grows with `b-a` and `m` (number of trips).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant 1: Large Difference with Forbidden Floor**:
   - **Description**: "If the initial floor `a` is significantly less than the forbidden floor `b`, the program may enter a computationally expensive loop. The complexity increases with the number of floors (`b-a`) processed in each trip sequence."
   - **Reasoning**: The slow input demonstrates that when `a < b`, the loops executing operations based on `b-a` are heavily iterated, indicating a higher time complexity due to increased search space.
   
2. **Invariant 2: High Number of Trips**:
   - **Description**: "If the number of trips `k` is large, especially when combined with a large difference between `a` and `b`, the program may become slow due to repeated calculations over a broad set of possible sequences."
   - **Reasoning**: As the number of trips increases, the number of possible sequences grows exponentially, leading to repeated execution of critical sections in the code.

3. **Invariant 3: Proximity to Forbidden Floor**:
   - **Description**: "When the initial floor and the target floor for each trip are close to the forbidden floor, the constraints lead to a limited set of valid moves, potentially causing inefficiencies in sequence generation."
   - **Reasoning**: Close proximity to the forbidden floor restricts valid floor choices, which can lead to redundant calculations or constrained path selections.

### Conclusion

The program's performance is impacted significantly when `a < b` with a high `b-a` and large `k`, leading to nested loops processing a broad search space. Efficient handling of these scenarios is critical to mitigating slow performance. Additionally, ensuring the algorithm effectively narrows down valid path choices without redundant calculations can improve efficiency.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Imagine that you are in a building that has exactly n floors. You can move between the floors in a lift. Let's number the floors from bottom to top with integers from 1 to n. Now you're on the floor number a. You are very bored, so you want to take the lift. Floor number b has a secret lab, the entry is forbidden. However, you already are in the mood and decide to make k consecutive trips in the lift.

Let us suppose that at the moment you are on the floor number x (initially, you were on floor a). For another trip between floors you choose some floor with number y (y ≠ x) and the lift travels to this floor. As you cannot visit floor b with the secret lab, you decided that the distance from the current floor x to the chosen y must be strictly less than the distance from the current floor x to floor b with the secret lab. Formally, it means that the following inequation must fulfill: |x - y| < |x - b|. After the lift successfully transports you to floor y, you write down number y in your notepad.

Your task is to find the number of distinct number sequences that you could have written in the notebook as the result of k trips in the lift. As the sought number of trips can be rather large, find the remainder after dividing the number by 1000000007 (109 + 7).

Input

The first line of the input contains four space-separated integers n, a, b, k (2 ≤ n ≤ 5000, 1 ≤ k ≤ 5000, 1 ≤ a, b ≤ n, a ≠ b).

Output

Print a single integer — the remainder after dividing the sought number of sequences by 1000000007 (109 + 7).

Examples

Input

5 2 4 1


Output

2


Input

5 2 4 2


Output

2


Input

5 3 4 1


Output

0

Note

Two sequences p1, p2, ..., pk and q1, q2, ..., qk are distinct, if there is such integer j (1 ≤ j ≤ k), that pj ≠ qj.

Notes to the samples:

  1. In the first sample after the first trip you are either on floor 1, or on floor 3, because |1 - 2| < |2 - 4| and |3 - 2| < |2 - 4|. 
  2. In the second sample there are two possible sequences: (1, 2); (1, 3). You cannot choose floor 3 for the first trip because in this case no floor can be the floor for the second trip. 
  3. In the third sample there are no sought sequences, because you cannot choose the floor for the first trip. 

Solution (C++ code):
{solution}


assistant: Phase 3: Implementing the Invariants as C++ Checkers

Let's translate the performance-characterizing invariants we derived into C++ checkers.

### Invariant 1: Large Difference with Forbidden Floor

```cpp
void check_large_difference_invariant(int a, int b, int threshold) {
    if (b - a > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large difference between a and b!" << endl;
        abort();
    }
}
```

### Invariant 2: High Number of Trips

```cpp
void check_high_trips_invariant(int k, int threshold) {
    if (k > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high number of trips!" << endl;
        abort();
    }
}
```

### Invariant 3: Proximity to Forbidden Floor

```cpp
void check_proximity_invariant(int a, int b, int n, int proximity_threshold) {
    if (abs(a - b) < proximity_threshold || abs(b - (n-a)) < proximity_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to proximity to forbidden floor!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Now, let's integrate these checkers into the original C++ program at appropriate locations. I will add these checks after reading the inputs but before the main computation starts to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 5e3 + 5, MOD = 1e9 + 7;
int n, a, b, m, ans;
int f[N], sum[N], g[N];

// Checkers for performance invariants
void check_large_difference_invariant(int a, int b, int threshold) {
    if (b - a > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to large difference between a and b!" << endl;
        abort();
    }
}

void check_high_trips_invariant(int k, int threshold) {
    if (k > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high number of trips!" << endl;
        abort();
    }
}

void check_proximity_invariant(int a, int b, int n, int proximity_threshold) {
    if (abs(a - b) < proximity_threshold || abs(b - (n-a)) < proximity_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to proximity to forbidden floor!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d%d%d", &n, &a, &b, &m);
    
    // Performance checks
    check_large_difference_invariant(a, b, 2500); // Threshold for large difference
    check_high_trips_invariant(m, 3000);          // Threshold for high number of trips
    check_proximity_invariant(a, b, n, 2);        // Threshold for proximity to forbidden floor

    f[a] = 1;
    if (a < b) {
        sum[0] = 0;
        for (register int i = 1; i < b; ++i) sum[i] = (sum[i - 1] + f[i]) % MOD;
        for (register int i = 1; i < b; ++i) g[i] = f[i];
        for (register int i = 1; i <= m; ++i) {
            for (register int j = 1; j < b; ++j)
                f[j] = ((sum[j + (b - j + 1) / 2 - 1] - sum[0] - g[j]) % MOD + MOD) % MOD;
            sum[0] = 0;
            for (register int j = 1; j < b; ++j) sum[j] = (sum[j - 1] + f[j]) % MOD;
            for (register int j = 1; j < b; ++j) g[j] = f[j];
        }
        for (register int i = 1; i < b; ++i) ans = (ans + f[i]) % MOD;
        printf("%d\n", ans);
    } else {
        sum[b] = 0;
        for (register int i = b + 1; i <= n; ++i)
            sum[i] = (sum[i - 1] + f[i]) % MOD;
        for (register int i = b + 1; i <= n; ++i) g[i] = f[i];
        for (register int i = 1; i <= m; ++i) {
            for (register int j = b + 1; j <= n; ++j)
                f[j] = ((sum[n] - sum[j - (j - b + 1) / 2] - g[j]) % MOD + MOD) % MOD;
            sum[b] = 0;
            for (register int j = b + 1; j <= n; ++j)
                sum[j] = (sum[j - 1] + f[j]) % MOD;
            for (register int j = b + 1; j <= n; ++j) g[j] = f[j];
        }
        for (register int i = b + 1; i <= n; ++i) ans = (ans + f[i]) % MOD;
        printf("%d\n", ans);
    }
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are placed after input parsing to prevent overhead in tight loops, ensuring they don't degrade performance.
- **Thresholds**: The thresholds (e.g., `2500` for large differences, `3000` for trips) are selected based on reasonable assumptions given the constraints.
- **Abort on Trigger**: Each check issues a warning and aborts if its condition is met, making it clear when a performance bottleneck condition is encountered.

