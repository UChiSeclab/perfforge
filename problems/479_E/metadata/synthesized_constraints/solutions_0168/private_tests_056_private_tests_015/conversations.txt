system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Imagine that you are in a building that has exactly n floors. You can move between the floors in a lift. Let's number the floors from bottom to top with integers from 1 to n. Now you're on the floor number a. You are very bored, so you want to take the lift. Floor number b has a secret lab, the entry is forbidden. However, you already are in the mood and decide to make k consecutive trips in the lift.

Let us suppose that at the moment you are on the floor number x (initially, you were on floor a). For another trip between floors you choose some floor with number y (y ≠ x) and the lift travels to this floor. As you cannot visit floor b with the secret lab, you decided that the distance from the current floor x to the chosen y must be strictly less than the distance from the current floor x to floor b with the secret lab. Formally, it means that the following inequation must fulfill: |x - y| < |x - b|. After the lift successfully transports you to floor y, you write down number y in your notepad.

Your task is to find the number of distinct number sequences that you could have written in the notebook as the result of k trips in the lift. As the sought number of trips can be rather large, find the remainder after dividing the number by 1000000007 (109 + 7).

Input

The first line of the input contains four space-separated integers n, a, b, k (2 ≤ n ≤ 5000, 1 ≤ k ≤ 5000, 1 ≤ a, b ≤ n, a ≠ b).

Output

Print a single integer — the remainder after dividing the sought number of sequences by 1000000007 (109 + 7).

Examples

Input

5 2 4 1


Output

2


Input

5 2 4 2


Output

2


Input

5 3 4 1


Output

0

Note

Two sequences p1, p2, ..., pk and q1, q2, ..., qk are distinct, if there is such integer j (1 ≤ j ≤ k), that pj ≠ qj.

Notes to the samples:

  1. In the first sample after the first trip you are either on floor 1, or on floor 3, because |1 - 2| < |2 - 4| and |3 - 2| < |2 - 4|. 
  2. In the second sample there are two possible sequences: (1, 2); (1, 3). You cannot choose floor 3 for the first trip because in this case no floor can be the floor for the second trip. 
  3. In the third sample there are no sought sequences, because you cannot choose the floor for the first trip. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T>
inline void Int(T &n) {
  n = 0;
  int f = 1;
  register int ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    if (ch == '-') f = -1;
  for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
  n = n * f;
}
template <typename T>
T gcd(T a, T b) {
  return !b ? a : gcd(b, a % b);
}
template <typename T>
inline void umin(T &a, T b) {
  a = a < b ? a : b;
}
template <typename T>
inline void umax(T &a, T b) {
  a = a > b ? a : b;
}
template <typename T, typename W>
inline void Int(T &x, W &y) {
  Int(x), Int(y);
}
template <typename T, typename W, typename Q>
inline void Int(T &x, W &y, Q &z) {
  Int(x, y), Int(z);
}
const int N = 5e3 + 7;
const int mod = (int)1e9 + 7;
int dp[N], tdp[N];
int l = 1, r, a, b, k;
int Ways(int x) { return dp[x]; }
int Ways(int l, int r) {
  if (l > r) return 0;
  int ret = Ways(r) - Ways(l - 1);
  return (ret % mod + mod) % mod;
}
int solve() {
  Int(r, a);
  Int(b, k);
  if (a < b) r = b - 1;
  if (a > b) l = b + 1;
  for (int i = l; i <= r; ++i) dp[i] = 1;
  for (int j = 1; j <= k; ++j) {
    for (int i = l; i <= r; ++i) {
      tdp[i] = 0;
      dp[i] += dp[i - 1];
      dp[i] %= mod;
    }
    for (int i = l; i <= r; ++i) {
      int mxDist = abs(b - i) - 1;
      tdp[i] += Ways(max(l, i - mxDist), i - 1);
      tdp[i] += Ways(i + 1, min(r, i + mxDist));
      if (tdp[i] > mod) tdp[i] -= mod;
    }
    for (int i = l; i <= r; ++i) dp[i] = tdp[i];
  }
  printf("%d\n", dp[a]);
  return 0;
}
int main() {
  int tests = 1, CaseNo = 0;
  while (tests--) {
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5000 4999 5000 5000


(G.2) Fast Input

5000 5000 4999 5000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline void Int(T &n) { /* line 4 slow_hit_count: 4, fast_hit_count: 4 */
  n = 0; /* line 5 slow_hit_count: 4, fast_hit_count: 4 */
  int f = 1; /* line 6 slow_hit_count: 4, fast_hit_count: 4 */
  register int ch = getchar(); /* line 7 slow_hit_count: 4, fast_hit_count: 4 */
  for (; !isdigit(ch); ch = getchar()) /* line 8 slow_hit_count: 4, fast_hit_count: 4 */
    if (ch == '-') f = -1; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0'; /* line 10 slow_hit_count: 20, fast_hit_count: 20 */
  n = n * f; /* line 11 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 12 slow_hit_count: 4, fast_hit_count: 4 */
template <typename T> /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
T gcd(T a, T b) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return !b ? a : gcd(b, a % b); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
inline void umin(T &a, T b) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  a = a < b ? a : b; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
inline void umax(T &a, T b) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  a = a > b ? a : b; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename W> /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
inline void Int(T &x, W &y) { /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
  Int(x), Int(y); /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 28 slow_hit_count: 2, fast_hit_count: 2 */
template <typename T, typename W, typename Q> /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
inline void Int(T &x, W &y, Q &z) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  Int(x, y), Int(z); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5e3 + 7; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = (int)1e9 + 7; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int dp[N], tdp[N]; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int l = 1, r, a, b, k; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int Ways(int x) { return dp[x]; } /* line 37 slow_hit_count: 99950000, fast_hit_count: 0 */
int Ways(int l, int r) { /* line 38 slow_hit_count: 49990000, fast_hit_count: 10000 */
  if (l > r) return 0; /* line 39 slow_hit_count: 49990000, fast_hit_count: 10000 */
  int ret = Ways(r) - Ways(l - 1); /* line 40 slow_hit_count: 49975000, fast_hit_count: 0 */
  return (ret % mod + mod) % mod; /* line 41 slow_hit_count: 49975000, fast_hit_count: 0 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
int solve() { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  Int(r, a); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  Int(b, k); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  if (a < b) r = b - 1; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  if (a > b) l = b + 1; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = l; i <= r; ++i) dp[i] = 1; /* line 48 slow_hit_count: 5000, fast_hit_count: 2 */
  for (int j = 1; j <= k; ++j) { /* line 49 slow_hit_count: 5001, fast_hit_count: 5001 */
    for (int i = l; i <= r; ++i) { /* line 50 slow_hit_count: 25000000, fast_hit_count: 10000 */
      tdp[i] = 0; /* line 51 slow_hit_count: 24995000, fast_hit_count: 5000 */
      dp[i] += dp[i - 1]; /* line 52 slow_hit_count: 24995000, fast_hit_count: 5000 */
      dp[i] %= mod; /* line 53 slow_hit_count: 24995000, fast_hit_count: 5000 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = l; i <= r; ++i) { /* line 55 slow_hit_count: 25000000, fast_hit_count: 10000 */
      int mxDist = abs(b - i) - 1; /* line 56 slow_hit_count: 24995000, fast_hit_count: 5000 */
      tdp[i] += Ways(max(l, i - mxDist), i - 1); /* line 57 slow_hit_count: 24995000, fast_hit_count: 5000 */
      tdp[i] += Ways(i + 1, min(r, i + mxDist)); /* line 58 slow_hit_count: 24995000, fast_hit_count: 5000 */
      if (tdp[i] > mod) tdp[i] -= mod; /* line 59 slow_hit_count: 24995000, fast_hit_count: 5000 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = l; i <= r; ++i) dp[i] = tdp[i]; /* line 61 slow_hit_count: 25000000, fast_hit_count: 10000 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", dp[a]); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  int tests = 1, CaseNo = 0; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  while (tests--) { /* line 68 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Analyzing the provided hit count information, we can see that certain lines within the `solve()` function have significantly higher hit counts in the slow input compared to the fast input. The lines particularly involved are:

- **Line 37 (Function `Ways(int x)`)**: This function is invoked 99,950,000 times for the slow input, indicating significant overhead. The fast input does not hit this line.
- **Line 40 and Line 41**: These lines are involved in computing the number of ways between two floors, using the `Ways(int l, int r)` function. They have high hit counts for the slow input, showing that this computation might be a hotspot.
- **Loop within Line 49 and onwards (Lines 50-61)**: These lines collectively involve computations that are potentially expensive, especially given the nested loop structure iterating over a range (`l` to `r`) with `k` iterations.

## Phase 2: Derive Performance-Characterizing Invariants

Here are some natural language invariants that describe conditions under which the program is likely to slow down:

1. **Invariant on Distance Calculation**:
   - Natural Language Description: "The computation slows down when the number of possible floors to move between becomes very large due to proximity to the forbidden floor b, causing increased calculations for floor transitions."
   - Conditions: The slow input experiences this when `a` is close to `b`, causing many valid transitions, each requiring distance calculations.

2. **Invariant on Loop Bounds**:
   - Natural Language Description: "The performance degrades significantly if the number of trips `k` is high and the range of floors `l` to `r` (determined by position relative to b) encompasses most of the building."
   - Conditions: This happens when the algorithm has to evaluate a large range of floors repeatedly because `k` is high.

3. **Invariant on the `Ways` Function Usage**:
   - Natural Language Description: "Excessive recursive calls to compute the number of ways between floors can lead to slow performance, especially when each call covers a large range determined by the distance from each floor to b."
   - Conditions: This is likely when `a` and `b` are such that the function `Ways(l, r)` is forced to evaluate extensive ranges for each floor transition.

These invariants help us understand the triggers for performance degradation, focusing on the interaction between the problem's constraints and the algorithm's structure. They reflect conditions where computational paths become expensive, largely due to combinatorial growth in the number of valid floor sequences and repeated evaluations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Imagine that you are in a building that has exactly n floors. You can move between the floors in a lift. Let's number the floors from bottom to top with integers from 1 to n. Now you're on the floor number a. You are very bored, so you want to take the lift. Floor number b has a secret lab, the entry is forbidden. However, you already are in the mood and decide to make k consecutive trips in the lift.

Let us suppose that at the moment you are on the floor number x (initially, you were on floor a). For another trip between floors you choose some floor with number y (y ≠ x) and the lift travels to this floor. As you cannot visit floor b with the secret lab, you decided that the distance from the current floor x to the chosen y must be strictly less than the distance from the current floor x to floor b with the secret lab. Formally, it means that the following inequation must fulfill: |x - y| < |x - b|. After the lift successfully transports you to floor y, you write down number y in your notepad.

Your task is to find the number of distinct number sequences that you could have written in the notebook as the result of k trips in the lift. As the sought number of trips can be rather large, find the remainder after dividing the number by 1000000007 (109 + 7).

Input

The first line of the input contains four space-separated integers n, a, b, k (2 ≤ n ≤ 5000, 1 ≤ k ≤ 5000, 1 ≤ a, b ≤ n, a ≠ b).

Output

Print a single integer — the remainder after dividing the sought number of sequences by 1000000007 (109 + 7).

Examples

Input

5 2 4 1


Output

2


Input

5 2 4 2


Output

2


Input

5 3 4 1


Output

0

Note

Two sequences p1, p2, ..., pk and q1, q2, ..., qk are distinct, if there is such integer j (1 ≤ j ≤ k), that pj ≠ qj.

Notes to the samples:

  1. In the first sample after the first trip you are either on floor 1, or on floor 3, because |1 - 2| < |2 - 4| and |3 - 2| < |2 - 4|. 
  2. In the second sample there are two possible sequences: (1, 2); (1, 3). You cannot choose floor 3 for the first trip because in this case no floor can be the floor for the second trip. 
  3. In the third sample there are no sought sequences, because you cannot choose the floor for the first trip. 

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Invariants as C++ Checkers

Here are the C++ code snippets implementing the performance-characterizing invariants derived in Phase 2:

1. **Checker for Distance Calculation**:
   - This check ensures that if many possible floors can be selected (close to the forbidden floor `b`), we abort to avoid performance degradation.
   
```cpp
void check_distance_invariant(int l, int r, int b) {
    if (r - l > n / 2) { // Arbitrary threshold based on half the building
        cerr << "Warning: distance_invariant triggered - too many possible floor moves" << endl;
        abort();
    }
}
```

2. **Checker for Loop Bounds**:
   - This check ensures that excessive range `l` to `r` combined with high `k` triggers an alert.

```cpp
void check_loop_invariant(int k, int l, int r) {
    if ((r - l + 1) * k > 10000) { // Threshold based on k and range product
        cerr << "Warning: loop_invariant triggered - large range and trip count" << endl;
        abort();
    }
}
```

3. **Checker for Ways Function Usage**:
   - Checks if the `Ways` function is likely to be called excessively for a large range.

```cpp
void check_ways_invariant(int l, int r, int b) {
    if (r - l > n / 3) { // Threshold based on a third of the building
        cerr << "Warning: ways_invariant triggered - excessive range in Ways function" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the original C++ code. We'll place these checks at points where the related variables are determined and before entering potentially expensive computational blocks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers to detect performance bottlenecks
void check_distance_invariant(int l, int r, int b) {
    if (r - l > 5000 / 2) { // Threshold based on half the maximum n
        cerr << "Warning: distance_invariant triggered - too many possible floor moves" << endl;
        abort();
    }
}

void check_loop_invariant(int k, int l, int r) {
    if ((r - l + 1) * k > 10000) { // Threshold based on k and range product
        cerr << "Warning: loop_invariant triggered - large range and trip count" << endl;
        abort();
    }
}

void check_ways_invariant(int l, int r, int b) {
    if (r - l > 5000 / 3) { // Threshold based on a third of the maximum n
        cerr << "Warning: ways_invariant triggered - excessive range in Ways function" << endl;
        abort();
    }
}

template <typename T>
inline void Int(T &n) {
  n = 0;
  int f = 1;
  register int ch = getchar();
  for (; !isdigit(ch); ch = getchar())
    if (ch == '-') f = -1;
  for (; isdigit(ch); ch = getchar()) n = (n << 3) + (n << 1) + ch - '0';
  n = n * f;
}

const int N = 5e3 + 7;
const int mod = (int)1e9 + 7;
int dp[N], tdp[N];
int l = 1, r, a, b, k;
int Ways(int x) { return dp[x]; }
int Ways(int l, int r) {
  if (l > r) return 0;
  int ret = Ways(r) - Ways(l - 1);
  return (ret % mod + mod) % mod;
}

int solve() {
  Int(r, a);
  Int(b, k);
  if (a < b) r = b - 1;
  if (a > b) l = b + 1;

  // Insert checkers to detect potential slow paths
  check_distance_invariant(l, r, b);
  check_loop_invariant(k, l, r);

  for (int i = l; i <= r; ++i) dp[i] = 1;
  for (int j = 1; j <= k; ++j) {
    for (int i = l; i <= r; ++i) {
      tdp[i] = 0;
      dp[i] += dp[i - 1];
      dp[i] %= mod;
    }
    for (int i = l; i <= r; ++i) {
      int mxDist = abs(b - i) - 1;
      // Check before using the Ways function
      check_ways_invariant(l, r, b);
      tdp[i] += Ways(max(l, i - mxDist), i - 1);
      tdp[i] += Ways(i + 1, min(r, i + mxDist));
      if (tdp[i] > mod) tdp[i] -= mod;
    }
    for (int i = l; i <= r; ++i) dp[i] = tdp[i];
  }
  printf("%d\n", dp[a]);
  return 0;
}

int main() {
  int tests = 1, CaseNo = 0;
  while (tests--) {
    solve();
  }
  return 0;
}
```

### Explanation of Integration

- **`check_distance_invariant`** is used after calculating `l` and `r` to ensure the initial range is not too large.
- **`check_loop_invariant`** is placed before entering the loops where the number of iterations could grow large due to `k`.
- **`check_ways_invariant`** is used before calls to the `Ways` function to ensure the range of computation is not excessively large.

This instrumentation allows the program to detect and abort when configurations that would lead to slow execution are encountered, aiding tools like fuzzers in diagnosing performance issues.

