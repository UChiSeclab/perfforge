system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.

Output

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.

Examples

Input

8
1
2


Output

1


Input

5
3
4


Output

6


Input

6
4
2


Output

4


Input

20
5
6


Output

2

Note

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int A[10];
int a, b, n, ans = 6;
vector<int> G[10];
void dfs(int pos) {
  if (pos == 6) {
    int tmp = 0;
    for (int i = 1; i <= 6; i++) {
      int sum = 0;
      for (int j = 0; j < G[i].size(); j++) {
        sum += G[i][j];
      }
      if (sum > n) {
        tmp = 8;
        break;
      }
      if (G[i].size() != 0) tmp++;
    }
    ans = min(ans, tmp);
    return;
  }
  for (int i = 1; i <= 6; i++) {
    G[i].push_back(A[pos]);
    dfs(pos + 1);
    G[i].erase(G[i].end() - 1);
  }
}
int main() {
  cin >> n >> a >> b;
  for (int i = 0; i < 4; i++) A[i] = a;
  for (int i = 4; i < 6; i++) A[i] = b;
  dfs(0);
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6
1
1


(G.2) Fast Input

6
6
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int A[10]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a, b, n, ans = 6; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> G[10]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int pos) { /* line 6 slow_hit_count: 55987, fast_hit_count: 55987 */
  if (pos == 6) { /* line 7 slow_hit_count: 55987, fast_hit_count: 55987 */
    int tmp = 0; /* line 8 slow_hit_count: 46656, fast_hit_count: 46656 */
    for (int i = 1; i <= 6; i++) { /* line 9 slow_hit_count: 326592, fast_hit_count: 140336 */
      int sum = 0; /* line 10 slow_hit_count: 279936, fast_hit_count: 138896 */
      for (int j = 0; j < G[i].size(); j++) { /* line 11 slow_hit_count: 559872, fast_hit_count: 303712 */
        sum += G[i][j]; /* line 12 slow_hit_count: 279936, fast_hit_count: 164816 */
      } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      if (sum > n) { /* line 14 slow_hit_count: 279936, fast_hit_count: 138896 */
        tmp = 8; /* line 15 slow_hit_count: 0, fast_hit_count: 45216 */
        break; /* line 16 slow_hit_count: 0, fast_hit_count: 45216 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      if (G[i].size() != 0) tmp++; /* line 18 slow_hit_count: 279936, fast_hit_count: 93680 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    ans = min(ans, tmp); /* line 20 slow_hit_count: 46656, fast_hit_count: 46656 */
    return; /* line 21 slow_hit_count: 46656, fast_hit_count: 46656 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 6; i++) { /* line 23 slow_hit_count: 65317, fast_hit_count: 65317 */
    G[i].push_back(A[pos]); /* line 24 slow_hit_count: 55986, fast_hit_count: 55986 */
    dfs(pos + 1); /* line 25 slow_hit_count: 55986, fast_hit_count: 55986 */
    G[i].erase(G[i].end() - 1); /* line 26 slow_hit_count: 55986, fast_hit_count: 55986 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> b; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 4; i++) A[i] = a; /* line 31 slow_hit_count: 5, fast_hit_count: 5 */
  for (int i = 4; i < 6; i++) A[i] = b; /* line 32 slow_hit_count: 3, fast_hit_count: 3 */
  dfs(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the analysis of the provided C code and the hit count information for the slow and fast inputs, here's a breakdown of the expensive code segments and performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **DFS Function and Loop Iteration (Lines 6-26):**  
   - The recursive `dfs` function is responsible for the significant difference in execution time between the slow and fast inputs.
   - The loop on line 23 iterates over 6 positions, calling `dfs` recursively, which leads to an exponential growth in function calls. This is evident from the hit counts, where line 23 is hit 65,317 times, and each line within the loop, including the `dfs` recursive call, follows closely with 55,986 hits.

2. **Nested Loops in DFS (Lines 9-19):**  
   - The nested loop on line 9 iterates over 6 positions, and inside it, another loop on line 11 processes the vector `G[i]`. The high number of iterations and hits on lines 11 and 12 are indicative of repeated operations.
   - The sum computation and condition checks on lines 14 and 18 are repeatedly executed, contributing to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Exponential Growth Due to Recursive DFS Calls:**
   - **Invariant Description:** When the recursive depth reaches 6 with a high branching factor (6 branches at each level), the number of recursive calls grows exponentially, leading to a performance bottleneck.
   - **Natural Language:** "If the branching factor in a recursive DFS reaches its maximum of 6, the number of recursive calls can grow exponentially, significantly slowing down the execution."

2. **Excessive Iterations with Small Component Sizes:**
   - **Invariant Description:** When the lengths of the components `a` and `b` are small relative to `n`, particularly close to 1, the combination process iterates extensively over possible distributions, causing significant overhead.
   - **Natural Language:** "If the lengths `a` and `b` are small (near the lower constraint), the combinatorial explosion in potential distributions causes excessive iterations, leading to slow execution."

3. **Repeated Operations in Nested Loops:**
   - **Invariant Description:** When each component `a` or `b` has multiple potential configurations within the wooden bar length `n`, repeated operations in nested loops accumulate, degrading performance.
   - **Natural Language:** "If multiple configurations for each component `a` or `b` exist within the wooden bar length, repeated summation and checking operations in nested loops can slow down computation."

### Summary of Performance Triggers

- The recursive DFS strategy results in exponential growth of function calls when the branching factor is maximized.
- Small values for `a` and `b` relative to `n` lead to extensive combinatorial distributions that increase the number of iterations significantly.
- Repeated operations within nested loops, driven by multiple valid configurations of `a` and `b`, cause cumulative overhead, particularly when component sizes are small.

These invariants provide insight into the program's performance behavior and help identify conditions that might lead to slow execution in similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.

Output

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.

Examples

Input

8
1
2


Output

1


Input

5
3
4


Output

6


Input

6
4
2


Output

4


Input

20
5
6


Output

2

Note

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language performance invariants, here are the C++ code snippets to check these conditions at runtime:

1. **Exponential Growth Due to Recursive DFS Calls:**
   ```cpp
   void check_dfs_invariant(int depth, int branching_factor) {
       if (depth >= 6 && branching_factor >= 6) {
           cerr << "Warning: DFS invariant triggered - high recursion depth and branching factor!" << endl;
           abort();
       }
   }
   ```

2. **Excessive Iterations with Small Component Sizes:**
   ```cpp
   void check_component_size_invariant(int a, int b, int n) {
       if (a < n / 10 && b < n / 10) {
           cerr << "Warning: Component size invariant triggered - small component sizes relative to bar length!" << endl;
           abort();
       }
   }
   ```

3. **Repeated Operations in Nested Loops:**
   ```cpp
   void check_nested_loops_invariant(const vector<int> G[], int n) {
       for (int i = 1; i <= 6; i++) {
           if (G[i].size() > n / 2) {
               cerr << "Warning: Nested loops invariant triggered - repeated operations in nested loops!" << endl;
               abort();
           }
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Here is the final, instrumented C++ code with the runtime checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

int A[10];
int a, b, n, ans = 6;
vector<int> G[10];

// Check for high recursion depth and branching factor
void check_dfs_invariant(int depth, int branching_factor) {
    if (depth >= 6 && branching_factor >= 6) {
        cerr << "Warning: DFS invariant triggered - high recursion depth and branching factor!" << endl;
        abort();
    }
}

// Check if component sizes are too small relative to bar length
void check_component_size_invariant(int a, int b, int n) {
    if (a < n / 10 && b < n / 10) {
        cerr << "Warning: Component size invariant triggered - small component sizes relative to bar length!" << endl;
        abort();
    }
}

// Check for repeated operations in nested loops
void check_nested_loops_invariant(const vector<int> G[], int n) {
    for (int i = 1; i <= 6; i++) {
        if (G[i].size() > n / 2) {
            cerr << "Warning: Nested loops invariant triggered - repeated operations in nested loops!" << endl;
            abort();
        }
    }
}

void dfs(int pos) {
    check_dfs_invariant(pos, 6); // Check DFS invariant

    if (pos == 6) {
        int tmp = 0;
        for (int i = 1; i <= 6; i++) {
            int sum = 0;
            for (int j = 0; j < G[i].size(); j++) {
                sum += G[i][j];
            }
            if (sum > n) {
                tmp = 8;
                break;
            }
            if (G[i].size() != 0) tmp++;
        }
        ans = min(ans, tmp);
        return;
    }

    for (int i = 1; i <= 6; i++) {
        G[i].push_back(A[pos]);
        dfs(pos + 1);
        G[i].erase(G[i].end() - 1);
    }
}

int main() {
    cin >> n >> a >> b;

    check_component_size_invariant(a, b, n); // Check component size invariant

    for (int i = 0; i < 4; i++) A[i] = a;
    for (int i = 4; i < 6; i++) A[i] = b;

    dfs(0);

    check_nested_loops_invariant(G, n); // Check nested loops invariant

    cout << ans << endl;
    return 0;
}
```

### Explanation of Check Integrations:

1. **`check_dfs_invariant`:** This check is called at the start of each `dfs` call to ensure that the recursion depth and branching factor do not lead to exponential growth. This is appropriate because it directly correlates to the number of function calls and potential slowdown.

2. **`check_component_size_invariant`:** This check is placed after input reading in `main` to ensure that the values of `a` and `b` are not too small relative to `n`, avoiding excessive combinatorial computations.

3. **`check_nested_loops_invariant`:** This check is called after the `dfs` execution to monitor the size of `G` elements, ensuring that repeated operations in nested loops do not become excessive.

