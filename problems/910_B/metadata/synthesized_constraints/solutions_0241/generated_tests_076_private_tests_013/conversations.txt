system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.

Output

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.

Examples

Input

8
1
2


Output

1


Input

5
3
4


Output

6


Input

6
4
2


Output

4


Input

20
5
6


Output

2

Note

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int md = 1e9 + 7;
const long long hs = 199;
const long double eps = 1e-9, pi = acos(-1);
using namespace std;
int n, a, b, mn = 1e9;
void check(vector<int> &x, vector<bool> &took, int left = 0, int dis = 0) {
  int cnt = 0;
  for (int i = 0; i < 6; i++) {
    if (!took[i]) {
      cnt++, took[i] = true;
      if (x[i] <= left) check(x, took, left - x[i], dis);
      check(x, took, n - x[i], dis + 1);
      took[i] = false;
    }
  }
  if (!cnt) mn = min(mn, dis);
}
int main() {
  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  cin >> n >> a >> b;
  vector<int> tot = {a, a, a, a, b, b};
  vector<bool> took(6, false);
  check(tot, took);
  cout << mn << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6
1
1


(G.2) Fast Input

6
6
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int md = 1e9 + 7; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long hs = 199; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = 1e-9, pi = acos(-1); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, a, b, mn = 1e9; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void check(vector<int> &x, vector<bool> &took, int left = 0, int dis = 0) { /* line 7 slow_hit_count: 37987, fast_hit_count: 2479 */
  int cnt = 0; /* line 8 slow_hit_count: 37987, fast_hit_count: 2479 */
  for (int i = 0; i < 6; i++) { /* line 9 slow_hit_count: 265909, fast_hit_count: 17353 */
    if (!took[i]) { /* line 10 slow_hit_count: 227922, fast_hit_count: 14874 */
      cnt++, took[i] = true; /* line 11 slow_hit_count: 18996, fast_hit_count: 2348 */
      if (x[i] <= left) check(x, took, left - x[i], dis); /* line 12 slow_hit_count: 18996, fast_hit_count: 2348 */
      check(x, took, n - x[i], dis + 1); /* line 13 slow_hit_count: 18996, fast_hit_count: 2348 */
      took[i] = false; /* line 14 slow_hit_count: 18996, fast_hit_count: 2348 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  if (!cnt) mn = min(mn, dis); /* line 17 slow_hit_count: 37987, fast_hit_count: 2479 */
} /* line 18 slow_hit_count: 37987, fast_hit_count: 2479 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> b; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> tot = {a, a, a, a, b, b}; /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
  vector<bool> took(6, false); /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
  check(tot, took); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  cout << mn << '\n'; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the slowdown between the fast and slow inputs for the given C program, we need to analyze the provided hit counts and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts:

1. **Function `check`:** The function `check()` is the focus of performance issues. Its initial lines (7-18) are executed significantly more times for the slow input than the fast input.
   
2. **Loop and Recursion:** The loop on line 9 and the recursive calls on lines 12 and 13 are likely responsible for the increased hit count. The recursion depth and branching factor in the function `check()` are causing a combinatorial explosion for the slow input.

3. **Conditionals and Recursion:** The conditional logic on line 12 indicates that this line is where recursion deepens, especially when `x[i] <= left`. The recursive call on line 13 is executed frequently, indicating that resetting `left` to `n - x[i]` is a common operation which triggers further recursive exploration.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

Given the analysis, here are the performance-characterizing invariants that describe the conditions under which the program slows down:

1. **Recursive Depth and Branching Factor:**
   - **Invariant:** "The code enters a slow path when the recursion depth and branching factor increase significantly during the exploration of possible combinations to fit the wooden bars."
   - **Explanation:** The recursive nature of the `check()` function causes deep exploration of potential configurations. This is exacerbated when the conditions for cutting wooden bars (`x[i] <= left`) are frequently met, leading to a high branching factor and deep recursion.

2. **Bar Length and Side Length Relationship:**
   - **Invariant:** "When the required lengths for constructing door sides are significantly smaller compared to the total available length of the wooden bars, the recursive function may explore many more combinations, causing a slowdown."
   - **Explanation:** If the total length of the wooden bars (`n`) allows for numerous rearrangements of smaller pieces (`a` and `b`), the algorithm spends more time recursively checking possible configurations for fitting these pieces into the total length. This is evident when there is a large difference between `n` and the individual side lengths.

3. **Repeated Exploration due to Similar Lengths:**
   - **Invariant:** "If the required lengths for the sides of the door are close to each other and relatively small, causing frequent resetting of state and re-exploration, the program may run slowly."
   - **Explanation:** When `a` and `b` are close to each other and small relative to `n`, the algorithm tends to revisit similar configurations, particularly when trying to fill the same total length (`left`), increasing redundant calculations.

### Conclusion

These invariants capture the conditions under which the program is likely to slow down, focusing on the recursive exploration of combinations and the relationship between available bar length and required side lengths. These insights can guide developers to optimize or refactor the recursive logic to minimize redundant explorations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.

Output

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.

Examples

Input

8
1
2


Output

1


Input

5
3
4


Output

6


Input

6
4
2


Output

4


Input

20
5
6


Output

2

Note

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants into runtime checks in C++.

1. **Recursive Depth and Branching Factor:**
   - **Checker Code:** We will track the recursion depth and the branching factor (number of recursive calls) and assert when they exceed a reasonable threshold.

```cpp
void check_recursion_invariant(int depth, int maxBranchingFactor, int thresholdDepth = 100, int thresholdBranching = 20) {
    if (depth > thresholdDepth || maxBranchingFactor > thresholdBranching) {
        cerr << "Warning: Recursion depth or branching factor too high!" << endl;
        abort();
    }
}
```

2. **Bar Length and Side Length Relationship:**
   - **Checker Code:** Check if the lengths of `a` and `b` are significantly smaller than `n`, which might lead to excessive recursion.

```cpp
void check_length_invariant(int n, int a, int b, int lengthRatioThreshold = 4) {
    if (n / a >= lengthRatioThreshold || n / b >= lengthRatioThreshold) {
        cerr << "Warning: Bar length to side length ratio too high!" << endl;
        abort();
    }
}
```

3. **Repeated Exploration due to Similar Lengths:**
   - **Checker Code:** Check if `a` and `b` are close to each other and small relative to `n`.

```cpp
void check_similarity_invariant(int n, int a, int b, int similarityThreshold = 2) {
    if ((abs(a - b) < similarityThreshold) && (a < n / 2 && b < n / 2)) {
        cerr << "Warning: Side lengths are too similar and small!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's insert these checks into the original program at appropriate points to catch performance bottlenecks without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
const int md = 1e9 + 7;
const long long hs = 199;
const long double eps = 1e-9, pi = acos(-1);
using namespace std;

int n, a, b, mn = 1e9;

void check_recursion_invariant(int depth, int maxBranchingFactor, int thresholdDepth = 100, int thresholdBranching = 20) {
    if (depth > thresholdDepth || maxBranchingFactor > thresholdBranching) {
        cerr << "Warning: Recursion depth or branching factor too high!" << endl;
        abort();
    }
}

void check_length_invariant(int n, int a, int b, int lengthRatioThreshold = 4) {
    if (n / a >= lengthRatioThreshold || n / b >= lengthRatioThreshold) {
        cerr << "Warning: Bar length to side length ratio too high!" << endl;
        abort();
    }
}

void check_similarity_invariant(int n, int a, int b, int similarityThreshold = 2) {
    if ((abs(a - b) < similarityThreshold) && (a < n / 2 && b < n / 2)) {
        cerr << "Warning: Side lengths are too similar and small!" << endl;
        abort();
    }
}

void check(vector<int>& x, vector<bool>& took, int left = 0, int dis = 0, int depth = 0) {
    int cnt = 0;
    int maxBranchingFactor = 6;  // Maximum at any point due to loop
    check_recursion_invariant(depth, maxBranchingFactor);
  
    for (int i = 0; i < 6; i++) {
        if (!took[i]) {
            cnt++, took[i] = true;
            if (x[i] <= left) check(x, took, left - x[i], dis, depth + 1);
            check(x, took, n - x[i], dis + 1, depth + 1);
            took[i] = false;
        }
    }
    if (!cnt) mn = min(mn, dis);
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    cin >> n >> a >> b;
  
    // Check length and similarity invariants before processing
    check_length_invariant(n, a, b);
    check_similarity_invariant(n, a, b);
  
    vector<int> tot = {a, a, a, a, b, b};
    vector<bool> took(6, false);
    check(tot, took);
    cout << mn << '\n';
}
```

### Explanation of Integration

- **Recursion and Branching Check:** The `check_recursion_invariant` function is called inside the `check` function to monitor recursion depth and branching factor.
- **Length Ratio and Similarity Check:** Before starting the recursive process, we validate the input parameters with `check_length_invariant` and `check_similarity_invariant` to preemptively identify configurations likely leading to high recursion times.

This integration ensures that the program will alert if any of the defined performance bottlenecks are encountered during execution.

