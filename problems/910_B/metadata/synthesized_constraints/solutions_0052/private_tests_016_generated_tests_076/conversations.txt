system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.

Output

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.

Examples

Input

8
1
2


Output

1


Input

5
3
4


Output

6


Input

6
4
2


Output

4


Input

20
5
6


Output

2

Note

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const double pi =
    3.141592653589793238462643383279502884197169399375105820974944;
using namespace std;
long long n, i, j, k, l, sum = 0, flag = 0, ans = 0, a, b, A, B;
vector<long long int> v;
long long f(int a, int b, int k) {
  if (a == 0 && b == 0) return 0;
  long long l = 1000000007;
  if (a != 0) {
    if (k - A > 0) l = min(l, f(a - 1, b, k - A));
    if (k - A == 0) {
      l = min(l, f(a - 1, b, 0));
      l = min(l, 1 + f(a - 1, b, n));
    }
    if (k < A) l = min(l, 1 + f(a, b, n));
  }
  if (b != 0) {
    if (k - B > 0) l = min(l, f(a, b - 1, k - B));
    if (k - B == 0) {
      l = min(l, f(a, b - 1, 0));
      l = min(l, 1 + f(a, b - 1, n));
    }
    if (k < B) l = min(l, 1 + f(a, b, n));
  }
  return l;
}
int main() {
  int t = 1;
  while (t--) {
    cin >> n >> A >> B;
    cout << 1 + f(4, 2, n) << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
1
1


(G.2) Fast Input

6
1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
    3.141592653589793238462643383279502884197169399375105820974944; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long n, i, j, k, l, sum = 0, flag = 0, ans = 0, a, b, A, B; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> v; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long f(int a, int b, int k) { /* line 7 slow_hit_count: 7890, fast_hit_count: 70 */
  if (a == 0 && b == 0) return 0; /* line 8 slow_hit_count: 7890, fast_hit_count: 70 */
  long long l = 1000000007; /* line 9 slow_hit_count: 4050, fast_hit_count: 40 */
  if (a != 0) { /* line 10 slow_hit_count: 4050, fast_hit_count: 40 */
    if (k - A > 0) l = min(l, f(a - 1, b, k - A)); /* line 11 slow_hit_count: 2835, fast_hit_count: 34 */
    if (k - A == 0) { /* line 12 slow_hit_count: 2835, fast_hit_count: 34 */
      l = min(l, f(a - 1, b, 0)); /* line 13 slow_hit_count: 1942, fast_hit_count: 10 */
      l = min(l, 1 + f(a - 1, b, n)); /* line 14 slow_hit_count: 1942, fast_hit_count: 10 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (k < A) l = min(l, 1 + f(a, b, n)); /* line 16 slow_hit_count: 2835, fast_hit_count: 34 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (b != 0) { /* line 18 slow_hit_count: 4050, fast_hit_count: 40 */
    if (k - B > 0) l = min(l, f(a, b - 1, k - B)); /* line 19 slow_hit_count: 1836, fast_hit_count: 20 */
    if (k - B == 0) { /* line 20 slow_hit_count: 1836, fast_hit_count: 20 */
      l = min(l, f(a, b - 1, 0)); /* line 21 slow_hit_count: 1276, fast_hit_count: 5 */
      l = min(l, 1 + f(a, b - 1, n)); /* line 22 slow_hit_count: 1276, fast_hit_count: 5 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    if (k < B) l = min(l, 1 + f(a, b, n)); /* line 24 slow_hit_count: 1836, fast_hit_count: 20 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return l; /* line 26 slow_hit_count: 4050, fast_hit_count: 40 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> n >> A >> B; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 1 + f(4, 2, n) << '\n'; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided C code and the hit count information, we can analyze the performance characteristics and derive performance-characterizing invariants for the given problem. Here's a step-by-step analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Recursive Function Call Frequency:**
   - The function `f` is called significantly more often for the slow input compared to the fast input. This is evident from the hit counts of lines within the function `f`.
   - For the slow input, line 7 (function entry) is hit 7890 times, while for the fast input, it is hit only 70 times. This indicates that the recursion depth or the branching factor is contributing to the slowdown.

2. **Conditions for Recursive Calls:**
   - Lines 11 to 16 involve recursive calls when handling the vertical sides (`a`) of the door frames.
   - Lines 19 to 24 involve recursive calls when handling the top sides (`b`) of the door frames.
   - These recursive calls are conditioned on the remaining bar length `k` compared to `A` and `B`, and the recursive nature creates many function invocations when `k` is small or equal to `A` or `B`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, we can derive the following performance-characterizing invariants:

1. **Recursive Depth and Branching Factor:**
   - **Invariant:** "If the length of the wooden bar `n` is small and close to the lengths `a` and/or `b` required for the door frame, the recursion depth and branching factor increase significantly, leading to a slowdown."
   - **Explanation:** When `n` is small, the number of recursive calls increases because the function tries to fit the required pieces within the limited length, causing deeper recursion or more branching.

2. **Excessive Recursive Calls Due to Small Remainder:**
   - **Invariant:** "When the remainder of the wooden bar `k` is frequently less than or equal to `A` or `B`, the recursive calls proliferate, causing a slowdown."
   - **Explanation:** The code makes recursive calls when `k` is insufficient to cover `A` or `B`, leading to additional bar usage and deeper recursion.

3. **Minimal Bar Length Utilization:**
   - **Invariant:** "If the bar length `n` is barely sufficient to accommodate one complete side of the frame (`A` or `B`), the recursive attempts to fit sides consume extra computational resources, leading to a performance bottleneck."
   - **Explanation:** The algorithm tries to use the minimal number of bars, but with small `n`, it enters many recursive branches to find a viable configuration.

These invariants highlight conditions under which the recursive approach leads to a combinatorial explosion of function calls, significantly slowing down the execution when `n` is close to `A` and `B`. This understanding can guide optimizations or adjustments to prevent such scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).

Input

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.

Output

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.

Examples

Input

8
1
2


Output

1


Input

5
3
4


Output

6


Input

6
4
2


Output

4


Input

20
5
6


Output

2

Note

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Let's translate the performance-characterizing invariants from Phase 2 into C++ checker code.

#### Invariant 1: Recursive Depth and Branching Factor
**Natural Language Invariant:**
"If the length of the wooden bar `n` is small and close to the lengths `a` and/or `b` required for the door frame, the recursion depth and branching factor increase significantly, leading to a slowdown."

**Checker Code:**
```cpp
void check_recursion_invariant(int n, int a, int b) {
    if (n <= a + b) {
        cerr << "Warning: Recursion invariant triggered - small bar length relative to needed pieces!" << endl;
        abort();
    }
}
```

#### Invariant 2: Excessive Recursive Calls Due to Small Remainder
**Natural Language Invariant:**
"When the remainder of the wooden bar `k` is frequently less than or equal to `A` or `B`, the recursive calls proliferate, causing a slowdown."

**Checker Code:**
```cpp
void check_remainder_invariant(int k, int A, int B) {
    if (k <= A || k <= B) {
        cerr << "Warning: Remainder invariant triggered - small remainder leads to excessive recursion!" << endl;
        abort();
    }
}
```

#### Invariant 3: Minimal Bar Length Utilization
**Natural Language Invariant:**
"If the bar length `n` is barely sufficient to accommodate one complete side of the frame (`A` or `B`), the recursive attempts to fit sides consume extra computational resources, leading to a performance bottleneck."

**Checker Code:**
```cpp
void check_minimal_bar_invariant(int n, int A, int B) {
    if (n == A || n == B) {
        cerr << "Warning: Minimal bar invariant triggered - bar length barely sufficient for one side!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate the checker code into the provided C++ program. We'll place the checks at appropriate points in the code to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, i, j, k, l, sum = 0, flag = 0, ans = 0, a, b, A, B;
vector<long long int> v;

// Checker functions
void check_recursion_invariant(int n, int a, int b) {
    if (n <= a + b) {
        cerr << "Warning: Recursion invariant triggered - small bar length relative to needed pieces!" << endl;
        abort();
    }
}

void check_remainder_invariant(int k, int A, int B) {
    if (k <= A || k <= B) {
        cerr << "Warning: Remainder invariant triggered - small remainder leads to excessive recursion!" << endl;
        abort();
    }
}

void check_minimal_bar_invariant(int n, int A, int B) {
    if (n == A || n == B) {
        cerr << "Warning: Minimal bar invariant triggered - bar length barely sufficient for one side!" << endl;
        abort();
    }
}

long long f(int a, int b, int k) {
    if (a == 0 && b == 0) return 0;
    long long l = 1000000007;
    if (a != 0) {
        if (k - A > 0) l = min(l, f(a - 1, b, k - A));
        if (k - A == 0) {
            l = min(l, f(a - 1, b, 0));
            l = min(l, 1 + f(a - 1, b, n));
        }
        if (k < A) l = min(l, 1 + f(a, b, n));
    }
    if (b != 0) {
        if (k - B > 0) l = min(l, f(a, b - 1, k - B));
        if (k - B == 0) {
            l = min(l, f(a, b - 1, 0));
            l = min(l, 1 + f(a, b - 1, n));
        }
        if (k < B) l = min(l, 1 + f(a, b, n));
    }
    return l;
}

int main() {
    int t = 1;
    while (t--) {
        cin >> n >> A >> B;

        // Insert invariants checks after reading inputs
        check_recursion_invariant(n, A, B);
        check_minimal_bar_invariant(n, A, B);

        cout << 1 + f(4, 2, n) << '\n';
    }
    return 0;
}
```

### Explanation of Integration

- **Invariant Checks:** The invariant checks are placed right after reading the inputs. This ensures we catch potential performance bottlenecks before executing the expensive recursive calculations.
- **Redundant Checks Avoided:** The check for the remainder invariant is not placed inside the recursive function `f` to avoid running the check at every recursion level, which could add overhead. Instead, identifying bottlenecks is focused on input conditions that guide code execution paths.
- **Abort on Trigger:** Each checker prints a warning and aborts the program if the performance condition is met, making it clear when and why the program might not perform optimally.

