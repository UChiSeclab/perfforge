system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.

More precisely, two different numbers a and b are friends if gcd(a,b), (a)/(gcd(a,b)), (b)/(gcd(a,b)) can form sides of a triangle.

Three numbers a, b and c can form sides of a triangle if a + b > c, b + c > a and c + a > b.

In a group of numbers, a number is lonely if it doesn't have any friends in that group.

Given a group of numbers containing all numbers from 1, 2, 3, ..., n, how many numbers in that group are lonely?

Input

The first line contains a single integer t (1 ≤ t ≤ 10^6) - number of test cases.

On next line there are t numbers, n_i (1 ≤ n_i ≤ 10^6) - meaning that in case i you should solve for numbers 1, 2, 3, ..., n_i.

Output

For each test case, print the answer on separate lines: number of lonely numbers in group 1, 2, 3, ..., n_i.

Example

Input


3
1 5 10


Output


1
3
3

Note

For first test case, 1 is the only number and therefore lonely.

For second test case where n=5, numbers 1, 3 and 5 are lonely.

For third test case where n=10, numbers 1, 5 and 7 are lonely.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC target("avx2")
#pragma GCC optimization("O3")
#pragma GCC optimization("unroll-loops")
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int n, i, j;
  cin >> n;
  int a[n];
  for (i = 0; i < n; i++) cin >> a[i];
  int ma = *max_element(a, a + n);
  vector<int> p(ma + 1, 1);
  for (int i = 2; i * i <= ma; i++) {
    if (p[i]) {
      for (int j = i * i; j <= ma; j += i) p[j] = 0;
    }
  }
  for (i = 2; i <= ma; i++) p[i] += p[i - 1];
  for (int i : a) {
    cout << p[i] - p[(int)ceil((float)sqrt(i + 1)) - 1] + 1 << "\n";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7
1 10 100 1000 10110 100010 1000000


(G.2) Fast Input

3
1 7 10


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target("avx2") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimization("O3") /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimization("unroll-loops") /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target("avx,avx2,fma") /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int n, i, j; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int a[n]; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) cin >> a[i]; /* line 15 slow_hit_count: 8, fast_hit_count: 4 */
  int ma = *max_element(a, a + n); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> p(ma + 1, 1); /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 2; i * i <= ma; i++) { /* line 18 slow_hit_count: 1000, fast_hit_count: 3 */
    if (p[i]) { /* line 19 slow_hit_count: 999, fast_hit_count: 2 */
      for (int j = i * i; j <= ma; j += i) p[j] = 0; /* line 20 slow_hit_count: 2122216, fast_hit_count: 7 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 2; i <= ma; i++) p[i] += p[i - 1]; /* line 23 slow_hit_count: 1000000, fast_hit_count: 10 */
  for (int i : a) { /* line 24 slow_hit_count: 8, fast_hit_count: 4 */
    cout << p[i] - p[(int)ceil((float)sqrt(i + 1)) - 1] + 1 << "\n"; /* line 25 slow_hit_count: 7, fast_hit_count: 3 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for certain inputs, let's follow the outlined phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The lines within the loop structure (lines 18-23) show significant differences between slow and fast runs.
   - Line 20 (`for (int j = i * i; j <= ma; j += i) p[j] = 0;`) has a very high hit count for slow input compared to the fast input. This suggests that the sieve operation within the loop is a major bottleneck.
   - Line 23 (`for (i = 2; i <= ma; i++) p[i] += p[i - 1];`) also shows a substantial increase in executions under slow input, which indicates that the prefix sum computation has become expensive due to large `ma`.

2. **Pinpoint Lines or Functions of Interest:**
   - The nested loop structure from lines 18 to 23, particularly the inner loop on line 20, seems to be a critical bottleneck due to the high number of iterations required when `ma` (the maximum number in the input array `a`) increases.
   - The overall complexity increases with larger values of `ma`, leading to more prime marking operations and prefix sum calculations.

3. **Infer Data Interactions:**
   - The inefficiency primarily stems from the sieve of Eratosthenes implementation, which marks non-prime numbers. The time complexity is O(n log log n) and is affected significantly by the size of `ma`.
   - The execution time increases with larger values of `ma`, causing the operations at these critical lines to scale poorly when `ma` is large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements:**
   - **Invariant 1:** "When the maximum number in the input set (`ma`) is large, particularly close to the upper limit of constraints, the sieve of Eratosthenes loop can become a performance bottleneck due to increased marking operations."
   - **Invariant 2:** "The computation of prefix sums over a large range of numbers (`ma` being large) significantly increases execution time as the number of summation operations grows."

2. **Avoid Using Specific Numeric Values:**
   - Instead of focusing on `ma` values from the slow input, we can generalize to "when `ma` is a significant fraction of the upper constraint (i.e., close to 1,000,000)."

3. **Correlate Conditions to Input Patterns:**
   - **Invariant 1:** "As `n_i` approaches the upper constraint, the resulting maximum number processed (`ma`) may lead to a quadratic increase in operations within nested loops, causing slowdown."
   - **Invariant 2:** "Large values of `ma` lead to extensive prefix sum calculations, creating a linear increase in the number of operations that impacts performance."

4. **Broad Statement Coverage:**
   - Ensure the identified conditions, when `ma` is large, are broad yet specific enough to apply to future potential scenarios with similar characteristics.

### Final Output: Performance Invariants

1. **Invariant 1:** "When `ma`, the maximum number in the input, is large and close to 1,000,000, the sieve of Eratosthenes loop experiences a substantial increase in marking operations, leading to performance degradation."
2. **Invariant 2:** "As `ma` approaches the maximum constraint, the prefix sum computation becomes costly due to the linear increase in operations, slowing down execution significantly."

These invariants help capture the conditions under which the program's performance becomes suboptimal, emphasizing the impact of large values in the input on computational complexity.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.

More precisely, two different numbers a and b are friends if gcd(a,b), (a)/(gcd(a,b)), (b)/(gcd(a,b)) can form sides of a triangle.

Three numbers a, b and c can form sides of a triangle if a + b > c, b + c > a and c + a > b.

In a group of numbers, a number is lonely if it doesn't have any friends in that group.

Given a group of numbers containing all numbers from 1, 2, 3, ..., n, how many numbers in that group are lonely?

Input

The first line contains a single integer t (1 ≤ t ≤ 10^6) - number of test cases.

On next line there are t numbers, n_i (1 ≤ n_i ≤ 10^6) - meaning that in case i you should solve for numbers 1, 2, 3, ..., n_i.

Output

For each test case, print the answer on separate lines: number of lonely numbers in group 1, 2, 3, ..., n_i.

Example

Input


3
1 5 10


Output


1
3
3

Note

For first test case, 1 is the only number and therefore lonely.

For second test case where n=5, numbers 1, 3 and 5 are lonely.

For third test case where n=10, numbers 1, 5 and 7 are lonely.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++ Code

Let's translate the previously derived natural language invariants into C++ checker code.

#### Invariant 1:
- Natural Language: "When `ma`, the maximum number in the input, is large and close to 1,000,000, the sieve of Eratosthenes loop experiences a substantial increase in marking operations, leading to performance degradation."
- C++ Code:
```cpp
void check_sieve_invariant(int maxNumber) {
    if (maxNumber >= 1000000) {  // Check if maxNumber is close to the upper constraint
        cerr << "Warning: sieve_invariant triggered - large maxNumber causing performance bottleneck in sieve." << endl;
        abort();
    }
}
```

#### Invariant 2:
- Natural Language: "As `ma` approaches the maximum constraint, the prefix sum computation becomes costly due to the linear increase in operations, slowing down execution significantly."
- C++ Code:
```cpp
void check_prefix_sum_invariant(int maxNumber) {
    if (maxNumber >= 1000000) {  // Condition as maxNumber is near the constraint
        cerr << "Warning: prefix_sum_invariant triggered - large maxNumber impacting prefix sum performance." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, we will integrate these invariants into the given C++ code. We'll insert the checks at appropriate points to ensure they don't affect performance unnecessarily.

```cpp
#include <bits/stdc++.h>
#pragma GCC target("avx2")
#pragma GCC optimization("O3")
#pragma GCC optimization("unroll-loops")
#pragma GCC optimize("Ofast")
#pragma GCC target("avx,avx2,fma")
using namespace std;

// Function to check the sieve invariant
void check_sieve_invariant(int maxNumber) {
    if (maxNumber >= 1000000) {  // Check if maxNumber is close to the upper constraint
        cerr << "Warning: sieve_invariant triggered - large maxNumber causing performance bottleneck in sieve." << endl;
        abort();
    }
}

// Function to check the prefix sum invariant
void check_prefix_sum_invariant(int maxNumber) {
    if (maxNumber >= 1000000) {  // Condition as maxNumber is near the constraint
        cerr << "Warning: prefix_sum_invariant triggered - large maxNumber impacting prefix sum performance." << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n, i, j;
    cin >> n;
    int a[n];
    for (i = 0; i < n; i++) cin >> a[i];
    int ma = *max_element(a, a + n);

    // Insert check after determining max element
    check_sieve_invariant(ma);
    check_prefix_sum_invariant(ma);

    vector<int> p(ma + 1, 1);
    for (int i = 2; i * i <= ma; i++) {
        if (p[i]) {
            for (int j = i * i; j <= ma; j += i) p[j] = 0;
        }
    }
    for (i = 2; i <= ma; i++) p[i] += p[i - 1];
    for (int i : a) {
        cout << p[i] - p[(int)ceil((float)sqrt(i + 1)) - 1] + 1 << "\n";
    }
    return 0;
}
```

### Comments:
- **Placement of Invariants:** The checks for both invariants are placed right after the calculation of `ma` (the maximum element in the input array) but before any performance-critical operations like the sieve or prefix sum calculations.
- **Reasoning:** This placement ensures that we catch any potential performance issues early without introducing overhead within the critical loops themselves.
- **Utility:** These checks can help a fuzzer to detect situations where performance is likely to degrade due to large input constraints, allowing for optimization before full computation proceeds.

