system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.

More precisely, two different numbers a and b are friends if gcd(a,b), (a)/(gcd(a,b)), (b)/(gcd(a,b)) can form sides of a triangle.

Three numbers a, b and c can form sides of a triangle if a + b > c, b + c > a and c + a > b.

In a group of numbers, a number is lonely if it doesn't have any friends in that group.

Given a group of numbers containing all numbers from 1, 2, 3, ..., n, how many numbers in that group are lonely?

Input

The first line contains a single integer t (1 ≤ t ≤ 10^6) - number of test cases.

On next line there are t numbers, n_i (1 ≤ n_i ≤ 10^6) - meaning that in case i you should solve for numbers 1, 2, 3, ..., n_i.

Output

For each test case, print the answer on separate lines: number of lonely numbers in group 1, 2, 3, ..., n_i.

Example

Input


3
1 5 10


Output


1
3
3

Note

For first test case, 1 is the only number and therefore lonely.

For second test case where n=5, numbers 1, 3 and 5 are lonely.

For third test case where n=10, numbers 1, 5 and 7 are lonely.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[1000005], b[1000005];
bool check[1000005];
int main() {
  int n, tmp = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    tmp = max(tmp, a[i]);
  }
  for (int i = 2; i <= tmp; i++) check[i] = true;
  for (int i = 2; i * i <= tmp; i++) {
    if (check[i] == true)
      for (int j = i * i; j <= tmp; j += i) check[j] = false;
  }
  for (int i = 2; i <= tmp; i++) {
    b[i] = (check[i] == true) + b[i - 1];
  }
  for (int i = 0; i < n; i++) {
    int cnt = sqrt(a[i]);
    cout << b[a[i]] - b[cnt] + 1 << " ";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7
1 10 100 1000 10100 100010 1000000


(G.2) Fast Input

3
1 7 10


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[1000005], b[1000005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool check[1000005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n, tmp = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 8, fast_hit_count: 4 */
    cin >> a[i]; /* line 9 slow_hit_count: 7, fast_hit_count: 3 */
    tmp = max(tmp, a[i]); /* line 10 slow_hit_count: 7, fast_hit_count: 3 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i <= tmp; i++) check[i] = true; /* line 12 slow_hit_count: 1000000, fast_hit_count: 10 */
  for (int i = 2; i * i <= tmp; i++) { /* line 13 slow_hit_count: 1000, fast_hit_count: 3 */
    if (check[i] == true) /* line 14 slow_hit_count: 999, fast_hit_count: 2 */
      for (int j = i * i; j <= tmp; j += i) check[j] = false; /* line 15 slow_hit_count: 2122216, fast_hit_count: 7 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i <= tmp; i++) { /* line 17 slow_hit_count: 1000000, fast_hit_count: 10 */
    b[i] = (check[i] == true) + b[i - 1]; /* line 18 slow_hit_count: 999999, fast_hit_count: 9 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 20 slow_hit_count: 8, fast_hit_count: 4 */
    int cnt = sqrt(a[i]); /* line 21 slow_hit_count: 7, fast_hit_count: 3 */
    cout << b[a[i]] - b[cnt] + 1 << " "; /* line 22 slow_hit_count: 7, fast_hit_count: 3 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C program and derive performance-characterizing invariants, we will examine the line-level hit counts and determine which parts of the code contribute to the slowdown when using the slow input compared to the fast input.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Identification of Heavily Hit Lines:**
   - **Line 12:** `for (int i = 2; i <= tmp; i++) check[i] = true;`  
     - **Slow Input Hit Count:** 1,000,000
     - **Fast Input Hit Count:** 10  
     - The initialization of the `check` array gets significantly more hits for the slow input, indicating that `tmp` is much larger.
   
   - **Line 13-15:**  
     - **Line 13:** `for (int i = 2; i * i <= tmp; i++) {`  
       - **Slow Input Hit Count:** 1,000
       - **Fast Input Hit Count:** 3  
     - **Line 15:** `for (int j = i * i; j <= tmp; j += i) check[j] = false;`  
       - **Slow Input Hit Count:** 2,122,216
       - **Fast Input Hit Count:** 7  
     - These lines are part of the Sieve of Eratosthenes algorithm, which marks non-prime numbers. The significantly higher hit counts suggest the algorithm runs for a larger number of iterations due to the higher value of `tmp`.

   - **Line 17-18:**  
     - **Line 17:** `for (int i = 2; i <= tmp; i++) {`  
       - **Slow Input Hit Count:** 1,000,000
       - **Fast Input Hit Count:** 10  
     - **Line 18:** `b[i] = (check[i] == true) + b[i - 1];`  
       - **Slow Input Hit Count:** 999,999
       - **Fast Input Hit Count:** 9  
     - These lines accumulate the number of primes up to `tmp`, which again has significantly more hits for the slow input due to the larger value of `tmp`.

### Phase 2: Derive Performance-Characterizing Invariants

Given the analysis above, we come up with the following performance-characterizing invariants in natural language:

1. **Invariant on `tmp` Size:**
   - Natural Language Description: "If `tmp` (the maximum value in input n_i) is large, particularly close to 10^6, the computation may slow significantly due to the initialization and processing of large arrays, especially within the Sieve of Eratosthenes."
   - This invariant captures the essence of lines 12, 13-15, 17-18, where operations are directly proportional to the size of `tmp`.

2. **Invariant on Sieve Algorithm Execution:**
   - Natural Language Description: "The Sieve of Eratosthenes becomes a performance bottleneck when the input maximum (tmp) allows for large prime calculations, leading to excessive iterations and memory usage."
   - This invariant reflects the extensive loop iterations in lines 13-15 that mark non-prime numbers, exacerbated by larger values `tmp`.

3. **Invariant on Prime Count Accumulation:**
   - Natural Language Description: "When the upper limit of the input numbers (tmp) approaches the constraint maximum, the accumulation of prime numbers up to this limit can significantly increase execution time."
   - This relates to lines 17-18 where the calculation of prime counts up to `tmp` becomes costly as `tmp` increases.

By adhering to these performance-characterizing invariants, we can identify conditions under which the program is likely to enter a slow path, allowing for potential optimizations or early warnings during large input scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.

More precisely, two different numbers a and b are friends if gcd(a,b), (a)/(gcd(a,b)), (b)/(gcd(a,b)) can form sides of a triangle.

Three numbers a, b and c can form sides of a triangle if a + b > c, b + c > a and c + a > b.

In a group of numbers, a number is lonely if it doesn't have any friends in that group.

Given a group of numbers containing all numbers from 1, 2, 3, ..., n, how many numbers in that group are lonely?

Input

The first line contains a single integer t (1 ≤ t ≤ 10^6) - number of test cases.

On next line there are t numbers, n_i (1 ≤ n_i ≤ 10^6) - meaning that in case i you should solve for numbers 1, 2, 3, ..., n_i.

Output

For each test case, print the answer on separate lines: number of lonely numbers in group 1, 2, 3, ..., n_i.

Example

Input


3
1 5 10


Output


1
3
3

Note

For first test case, 1 is the only number and therefore lonely.

For second test case where n=5, numbers 1, 3 and 5 are lonely.

For third test case where n=10, numbers 1, 5 and 7 are lonely.

Solution (C++ code):
{solution}


assistant: To incorporate performance-characterizing invariants into the provided C++ code, we'll follow the tasks outlined in Phase 3 and Phase 4.

### Phase 3: Implement Invariants as Checker Code in C++

Below, we translate the natural language invariants into C++ checker functions:

1. **Invariant on `tmp` Size:**

```cpp
void check_tmp_size_invariant(int tmp) {
    if (tmp >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - large value of tmp!" << endl;
        abort();
    }
}
```

2. **Invariant on Sieve Algorithm Execution:**

```cpp
void check_sieve_invariant(int tmp) {
    if (tmp >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive sieve operations!" << endl;
        abort();
    }
}
```

3. **Invariant on Prime Count Accumulation:**

```cpp
void check_prime_count_invariant(int tmp) {
    if (tmp >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - costly prime accumulation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Next, we'll incorporate these checks into the provided C++ program, ensuring to place the checks outside of tight loops to avoid adding unnecessary overhead.

Here is the instrumented program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[1000005], b[1000005];
bool check[1000005];

void check_tmp_size_invariant(int tmp) {
    if (tmp >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - large value of tmp!" << endl;
        abort();
    }
}

void check_sieve_invariant(int tmp) {
    if (tmp >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive sieve operations!" << endl;
        abort();
    }
}

void check_prime_count_invariant(int tmp) {
    if (tmp >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - costly prime accumulation!" << endl;
        abort();
    }
}

int main() {
    int n, tmp = 0;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        tmp = max(tmp, a[i]);
    }

    // Check the invariants after determining 'tmp'
    check_tmp_size_invariant(tmp);

    for (int i = 2; i <= tmp; i++) check[i] = true;
    for (int i = 2; i * i <= tmp; i++) {
        if (check[i] == true)
            for (int j = i * i; j <= tmp; j += i) check[j] = false;
    }
    
    // Check sieve invariant after initialization
    check_sieve_invariant(tmp);
    
    for (int i = 2; i <= tmp; i++) {
        b[i] = (check[i] == true) + b[i - 1];
    }

    // Check prime count accumulation invariant
    check_prime_count_invariant(tmp);

    for (int i = 0; i < n; i++) {
        int cnt = sqrt(a[i]);
        cout << b[a[i]] - b[cnt] + 1 << " ";
    }
    return 0;
}
```

### Explanation

- **`check_tmp_size_invariant`** is placed after determining the maximum value `tmp` from the input. This ensures we're aware of any potential large values early in the computation.
- **`check_sieve_invariant`** is placed after completing the Sieve of Eratosthenes algorithm, where extensive operations are performed based on `tmp`.
- **`check_prime_count_invariant`** follows the prime count accumulation loop to catch any issues with costly operations due to large `tmp`.

These checks will help detect conditions that lead to slow execution, aligning with the performance bottlenecks identified earlier.

