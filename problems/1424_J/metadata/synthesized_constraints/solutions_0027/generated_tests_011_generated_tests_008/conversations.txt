system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.

More precisely, two different numbers a and b are friends if gcd(a,b), (a)/(gcd(a,b)), (b)/(gcd(a,b)) can form sides of a triangle.

Three numbers a, b and c can form sides of a triangle if a + b > c, b + c > a and c + a > b.

In a group of numbers, a number is lonely if it doesn't have any friends in that group.

Given a group of numbers containing all numbers from 1, 2, 3, ..., n, how many numbers in that group are lonely?

Input

The first line contains a single integer t (1 ≤ t ≤ 10^6) - number of test cases.

On next line there are t numbers, n_i (1 ≤ n_i ≤ 10^6) - meaning that in case i you should solve for numbers 1, 2, 3, ..., n_i.

Output

For each test case, print the answer on separate lines: number of lonely numbers in group 1, 2, 3, ..., n_i.

Example

Input


3
1 5 10


Output


1
3
3

Note

For first test case, 1 is the only number and therefore lonely.

For second test case where n=5, numbers 1, 3 and 5 are lonely.

For third test case where n=10, numbers 1, 5 and 7 are lonely.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t;
  cin >> t;
  vector<pair<int, int> > a(t);
  for (int i = (0); i < (t); i++) {
    int x;
    cin >> x;
    a[i] = make_pair(x, i);
  }
  sort(a.begin(), a.end());
  queue<int> next;
  int MAXN = 1000005;
  vector<bool> isprime(MAXN, 1);
  int last = 1;
  int ans = 1;
  vector<int> rta(t);
  for (int T = (0); T < (t); T++) {
    if (last >= a[T].first)
      rta[a[T].second] = ans;
    else {
      while (last < a[T].first) {
        last++;
        if (!next.empty() && (next.front() == last)) {
          next.pop();
          ans--;
        }
        if (isprime[last]) {
          ans++;
          next.push(last * last);
          for (int i = 2 * last; i < MAXN; i += last) isprime[i] = 0;
        }
      }
      rta[a[T].second] = ans;
    }
  }
  for (int i = (0); i < (t); i++) cout << rta[i] << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7
1 10 100 1000 10100 100010 1000000


(G.2) Fast Input

3
1 7 10


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, int> > a(t); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = (0); i < (t); i++) { /* line 10 slow_hit_count: 8, fast_hit_count: 4 */
    int x; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 12 slow_hit_count: 7, fast_hit_count: 3 */
    a[i] = make_pair(x, i); /* line 13 slow_hit_count: 7, fast_hit_count: 3 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a.begin(), a.end()); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  queue<int> next; /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
  int MAXN = 1000005; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  vector<bool> isprime(MAXN, 1); /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  int last = 1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 1; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> rta(t); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int T = (0); T < (t); T++) { /* line 22 slow_hit_count: 8, fast_hit_count: 4 */
    if (last >= a[T].first) /* line 23 slow_hit_count: 7, fast_hit_count: 3 */
      rta[a[T].second] = ans; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    else { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      while (last < a[T].first) { /* line 26 slow_hit_count: 1000005, fast_hit_count: 11 */
        last++; /* line 27 slow_hit_count: 999999, fast_hit_count: 9 */
        if (!next.empty() && (next.front() == last)) { /* line 28 slow_hit_count: 999999, fast_hit_count: 9 */
          next.pop(); /* line 29 slow_hit_count: 168, fast_hit_count: 2 */
          ans--; /* line 30 slow_hit_count: 168, fast_hit_count: 2 */
        } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        if (isprime[last]) { /* line 32 slow_hit_count: 999999, fast_hit_count: 9 */
          ans++; /* line 33 slow_hit_count: 78498, fast_hit_count: 4 */
          next.push(last * last); /* line 34 slow_hit_count: 78498, fast_hit_count: 4 */
          for (int i = 2 * last; i < MAXN; i += last) isprime[i] = 0; /* line 35 slow_hit_count: 2853716, fast_hit_count: 1176193 */
        } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      rta[a[T].second] = ans; /* line 38 slow_hit_count: 6, fast_hit_count: 2 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (0); i < (t); i++) cout << rta[i] << '\n'; /* line 41 slow_hit_count: 8, fast_hit_count: 4 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem of performance bottlenecks in the provided C program, let's follow the outlined phases to analyze and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - The line with significant differences between slow and fast input is line 35, which encapsulates a nested loop: `for (int i = 2 * last; i < MAXN; i += last) isprime[i] = 0;`
   - Additionally, other lines within the `while` loop (lines 26-35) also have high hit counts for the slow input.

2. **Pinpointing Lines with Significant Hits**:
   - The `for` loop on line 35 is executed 2,853,716 times for the slow input, while only 1,176,193 times for the fast one. This suggests that the number of iterations through this loop is crucially affecting performance.

3. **Inference on Data Interaction**:
   - The `isprime` vector is being manipulated extensively. This loop marks multiples of primes as non-prime. The performance issue seems related to the sieve of Eratosthenes logic used in the primality test and marking.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants**:

   - **Invariant 1**: "If `n_i` is large, the sieve algorithm's computation over a range of numbers up to `n_i` becomes extensive, significantly increasing execution time."
     - *Explanation*: The `while` loop iterates over numbers up to `n_i`, marking non-primes. Execution time grows due to increased iterations in both the outer loop (up to `n_i`) and inner loop (marking multiples).

   - **Invariant 2**: "When `n_i` approaches the upper constraint (1,000,000), the cumulative effect of marking multiples of many numbers in `isprime` results in a large number of loop iterations."
     - *Explanation*: As `n_i` grows, there are more numbers to check for primality, and more marking operations must be performed, leading to exponential growth in computation time.

   - **Invariant 3**: "If there are many test cases (`t` is large), and each has a high `n_i` value, the repeated computation for marking non-primes exacerbates performance issues."
     - *Explanation*: The program's loop structure must handle `t` test cases, each with potentially high computation needs, compounding the number of operations significantly.

2. **Threshold Values and Input Patterns**:

   - These invariants are derived with the constraints in mind, especially considering `n_i` can be up to 1,000,000. The slow performance is largely due to the scale at which the sieve operates when `n_i` is near this upper limit.

3. **Correlating Conditions to Input Patterns**:

   - Given the task constraints, the performance slowdown is primarily triggered by high `n_i` values in conjunction with multiple test cases (`t`), leading to extensive computations for each case due to the primality logic employed.

These invariants reflect the nature of inefficiencies observed and provide insight into conditions likely to trigger slow paths, without relying on specific input values beyond the constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.

More precisely, two different numbers a and b are friends if gcd(a,b), (a)/(gcd(a,b)), (b)/(gcd(a,b)) can form sides of a triangle.

Three numbers a, b and c can form sides of a triangle if a + b > c, b + c > a and c + a > b.

In a group of numbers, a number is lonely if it doesn't have any friends in that group.

Given a group of numbers containing all numbers from 1, 2, 3, ..., n, how many numbers in that group are lonely?

Input

The first line contains a single integer t (1 ≤ t ≤ 10^6) - number of test cases.

On next line there are t numbers, n_i (1 ≤ n_i ≤ 10^6) - meaning that in case i you should solve for numbers 1, 2, 3, ..., n_i.

Output

For each test case, print the answer on separate lines: number of lonely numbers in group 1, 2, 3, ..., n_i.

Example

Input


3
1 5 10


Output


1
3
3

Note

For first test case, 1 is the only number and therefore lonely.

For second test case where n=5, numbers 1, 3 and 5 are lonely.

For third test case where n=10, numbers 1, 5 and 7 are lonely.

Solution (C++ code):
{solution}


assistant: Let's complete the tasks in two phases, as outlined. We'll implement the checker code to enforce the performance-characterizing invariants and then integrate this checker code into the original C++ program.

### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, here are the C++ checks:

1. **Invariant 1**: Checking if `n_i` is large, leading to extensive sieve operations.
   ```cpp
   void check_large_ni_invariant(int ni) {
       if (ni > 500000) {  // Threshold chosen for demonstration; adjust based on actual analysis
           cerr << "Warning: Performance bottleneck condition triggered due to large n_i!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2**: Check when `n_i` approaches the upper constraint, leading to excessive marking operations.
   ```cpp
   void check_approaching_upper_bound(int ni) {
       if (ni > 900000) {  // Threshold chosen for demonstration; adjust based on actual analysis
           cerr << "Warning: Performance bottleneck due to n_i approaching upper bound!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3**: Check if there are many test cases (`t` is large) with high `n_i` values.
   ```cpp
   void check_many_tests_large_values(int t, int ni) {
       if (t > 500000 && ni > 500000) {  // Thresholds chosen for demonstration; adjust based on actual analysis
           cerr << "Warning: Performance bottleneck due to many tests with large n_i!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original C++ Program

Now, let's integrate these checks into the original code, placing them at strategic points to avoid impacting performance in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Invariant checker functions
void check_large_ni_invariant(int ni) {
    if (ni > 500000) {  // Threshold chosen for demonstration; adjust based on actual analysis
        cerr << "Warning: Performance bottleneck condition triggered due to large n_i!" << endl;
        abort();
    }
}

void check_approaching_upper_bound(int ni) {
    if (ni > 900000) {  // Threshold chosen for demonstration; adjust based on actual analysis
        cerr << "Warning: Performance bottleneck due to n_i approaching upper bound!" << endl;
        abort();
    }
}

void check_many_tests_large_values(int t, int ni) {
    if (t > 500000 && ni > 500000) {  // Thresholds chosen for demonstration; adjust based on actual analysis
        cerr << "Warning: Performance bottleneck due to many tests with large n_i!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t;
    cin >> t;
    vector<pair<int, int>> a(t);
    for (int i = 0; i < t; i++) {
        int x;
        cin >> x;
        a[i] = make_pair(x, i);

        // Check invariants after reading each input
        check_large_ni_invariant(x);
        check_approaching_upper_bound(x);
        check_many_tests_large_values(t, x);
    }
    sort(a.begin(), a.end());
    queue<int> next;
    int MAXN = 1000005;
    vector<bool> isprime(MAXN, 1);
    int last = 1;
    int ans = 1;
    vector<int> rta(t);
    for (int T = 0; T < t; T++) {
        if (last >= a[T].first)
            rta[a[T].second] = ans;
        else {
            while (last < a[T].first) {
                last++;
                if (!next.empty() && (next.front() == last)) {
                    next.pop();
                    ans--;
                }
                if (isprime[last]) {
                    ans++;
                    next.push(last * last);
                    for (int i = 2 * last; i < MAXN; i += last) isprime[i] = 0;
                }
            }
            rta[a[T].second] = ans;
        }
    }
    for (int i = 0; i < t; i++) cout << rta[i] << '\n';
    return 0;
}
```

### Explanation

- **Function Definitions**: The checker functions are defined to encapsulate the logic for each invariant. They print a warning and abort execution if the condition is met.
  
- **Integration Points**: The checkers are placed immediately after reading each test case input. This ensures the program can warn about potential slowdowns before entering the heavy computation sections.

- **Thresholds**: The thresholds in the checkers are chosen based on the analysis, but they should be fine-tuned according to actual performance profiling and requirements.

This integrated code will provide early warnings and abort execution when performance bottleneck conditions are detected, aiding in debugging and optimization efforts.

