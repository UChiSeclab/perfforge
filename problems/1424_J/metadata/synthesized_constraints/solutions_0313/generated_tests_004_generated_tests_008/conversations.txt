system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.

More precisely, two different numbers a and b are friends if gcd(a,b), (a)/(gcd(a,b)), (b)/(gcd(a,b)) can form sides of a triangle.

Three numbers a, b and c can form sides of a triangle if a + b > c, b + c > a and c + a > b.

In a group of numbers, a number is lonely if it doesn't have any friends in that group.

Given a group of numbers containing all numbers from 1, 2, 3, ..., n, how many numbers in that group are lonely?

Input

The first line contains a single integer t (1 ≤ t ≤ 10^6) - number of test cases.

On next line there are t numbers, n_i (1 ≤ n_i ≤ 10^6) - meaning that in case i you should solve for numbers 1, 2, 3, ..., n_i.

Output

For each test case, print the answer on separate lines: number of lonely numbers in group 1, 2, 3, ..., n_i.

Example

Input


3
1 5 10


Output


1
3
3

Note

For first test case, 1 is the only number and therefore lonely.

For second test case where n=5, numbers 1, 3 and 5 are lonely.

For third test case where n=10, numbers 1, 5 and 7 are lonely.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
inline long long read() {
  long long sign = 1;
  long long x = 0;
  char ch;
  while (!isdigit(ch = getchar()))
    if (ch == '-') sign = -1;
  while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();
  return x * sign;
}
inline void wonl() { putchar('\n'); }
inline void ww(long long k) {
  if (k < 0) putchar('-'), k *= -1;
  char ch[20];
  int num = 0;
  while (k) ch[++num] = k % 10, k /= 10;
  if (num == 0) ch[++num] = 0;
  while (num) putchar(ch[num--] + '0');
}
using namespace std;
const int N = 1e6 + 4;
template <typename T, typename... V>
inline void wonl(T t, V... v) {
  ww(t);
  if (sizeof...(v)) putchar(' ');
  wonl(v...);
}
int main() {
  int t = 1;
  t = read();
  int arr[t], mx = 0;
  for (int i = 0; i < t; i++) {
    arr[i] = read();
    if (arr[i] > mx) mx = arr[i];
  }
  vector<bool> nos(mx + 1, 1);
  for (int i = 2; i * i <= mx; i++) {
    if (nos[i]) {
      for (int j = i * i; j <= mx; j += i) {
        if (nos[j]) nos[j] = 0;
      }
    }
  }
  vector<int> primes;
  for (int i = 2; i <= mx; i++) {
    if (nos[i]) primes.push_back(i);
  }
  for (int i = 0; i < t; i++) {
    vector<int>::iterator it;
    it = upper_bound(primes.begin(), primes.end(), arr[i]);
    int x = (int)sqrt(arr[i]);
    vector<int>::iterator it2;
    it2 = upper_bound(primes.begin(), primes.end(), x);
    int ans = it - it2;
    wonl(ans + 1);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7
1 10 100 1000 10000 100010 1000000


(G.2) Fast Input

3
1 7 10


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
inline long long read() { /* line 2 slow_hit_count: 8, fast_hit_count: 4 */
  long long sign = 1; /* line 3 slow_hit_count: 8, fast_hit_count: 4 */
  long long x = 0; /* line 4 slow_hit_count: 8, fast_hit_count: 4 */
  char ch; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  while (!isdigit(ch = getchar())) /* line 6 slow_hit_count: 8, fast_hit_count: 4 */
    if (ch == '-') sign = -1; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar(); /* line 8 slow_hit_count: 37, fast_hit_count: 9 */
  return x * sign; /* line 9 slow_hit_count: 8, fast_hit_count: 4 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
inline void wonl() { putchar('\n'); } /* line 11 slow_hit_count: 7, fast_hit_count: 3 */
inline void ww(long long k) { /* line 12 slow_hit_count: 7, fast_hit_count: 3 */
  if (k < 0) putchar('-'), k *= -1; /* line 13 slow_hit_count: 7, fast_hit_count: 3 */
  char ch[20]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  int num = 0; /* line 15 slow_hit_count: 7, fast_hit_count: 3 */
  while (k) ch[++num] = k % 10, k /= 10; /* line 16 slow_hit_count: 27, fast_hit_count: 6 */
  if (num == 0) ch[++num] = 0; /* line 17 slow_hit_count: 7, fast_hit_count: 3 */
  while (num) putchar(ch[num--] + '0'); /* line 18 slow_hit_count: 27, fast_hit_count: 6 */
} /* line 19 slow_hit_count: 7, fast_hit_count: 3 */
using namespace std; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 4; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... V> /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
inline void wonl(T t, V... v) { /* line 23 slow_hit_count: 7, fast_hit_count: 3 */
  ww(t); /* line 24 slow_hit_count: 7, fast_hit_count: 3 */
  if (sizeof...(v)) putchar(' '); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  wonl(v...); /* line 26 slow_hit_count: 7, fast_hit_count: 3 */
} /* line 27 slow_hit_count: 7, fast_hit_count: 3 */
int main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  t = read(); /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
  int arr[t], mx = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < t; i++) { /* line 32 slow_hit_count: 8, fast_hit_count: 4 */
    arr[i] = read(); /* line 33 slow_hit_count: 7, fast_hit_count: 3 */
    if (arr[i] > mx) mx = arr[i]; /* line 34 slow_hit_count: 7, fast_hit_count: 3 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  vector<bool> nos(mx + 1, 1); /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 2; i * i <= mx; i++) { /* line 37 slow_hit_count: 1000, fast_hit_count: 3 */
    if (nos[i]) { /* line 38 slow_hit_count: 999, fast_hit_count: 2 */
      for (int j = i * i; j <= mx; j += i) { /* line 39 slow_hit_count: 2122216, fast_hit_count: 7 */
        if (nos[j]) nos[j] = 0; /* line 40 slow_hit_count: 2122048, fast_hit_count: 5 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> primes; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= mx; i++) { /* line 45 slow_hit_count: 1000000, fast_hit_count: 10 */
    if (nos[i]) primes.push_back(i); /* line 46 slow_hit_count: 999999, fast_hit_count: 9 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < t; i++) { /* line 48 slow_hit_count: 8, fast_hit_count: 4 */
    vector<int>::iterator it; /* line 49 slow_hit_count: 7, fast_hit_count: 3 */
    it = upper_bound(primes.begin(), primes.end(), arr[i]); /* line 50 slow_hit_count: 7, fast_hit_count: 3 */
    int x = (int)sqrt(arr[i]); /* line 51 slow_hit_count: 7, fast_hit_count: 3 */
    vector<int>::iterator it2; /* line 52 slow_hit_count: 7, fast_hit_count: 3 */
    it2 = upper_bound(primes.begin(), primes.end(), x); /* line 53 slow_hit_count: 7, fast_hit_count: 3 */
    int ans = it - it2; /* line 54 slow_hit_count: 7, fast_hit_count: 3 */
    wonl(ans + 1); /* line 55 slow_hit_count: 7, fast_hit_count: 3 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 57 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance issues in the given C program, I will analyze the code and hit counts to identify the bottlenecks and then derive performance-characterizing invariants that describe the conditions under which the program experiences slowdowns.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - Lines 37-40 and 45-46 exhibit significantly more hits during the slow input compared to the fast input. Specifically, lines 39 and 40 (the nested loop for marking non-prime numbers) have very high hit counts in the slow input.
   - The prime number sieve (lines 37-42) and the prime number collection (lines 45-46) are the most computationally intensive parts of the code. 

2. **Understanding the Bottleneck:**
   - The nested loop in the sieve of Eratosthenes (lines 39-40) has a complexity of O(n log log n), where `n` is the maximum value in the input array. The loop iterates over each prime number and marks its multiples as non-prime.
   - For each test case, the program executes this sieve algorithm, which becomes costly as `mx` (maximum value of `n_i`) approaches 1000000. 

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant #1: High Input Range**
   - Natural language description: "When the maximum value in the input set, `n_i`, is large and close to the upper constraint (e.g., near 1000000), the primality test becomes computationally expensive due to the increased number of iterations in the sieve of Eratosthenes."
   
2. **Invariant #2: Frequent Prime Checks**
   - Natural language description: "If the input requires checking primes for a large number of test cases with high values of `n_i`, the repeated execution of the sieve algorithm results in increased computational overhead, especially when `n_i` is close to 1000000."
   
3. **Invariant #3: Large Prime Collection**
   - Natural language description: "As the number of primes collected increases with larger values of `n_i`, operations such as `upper_bound` on the prime list become more time-consuming, significantly impacting performance when `n_i` approaches the maximum constraint."

These invariants describe conditions likely to lead to slow performance, focusing on the interplay between input size and the computational complexity of the sieve algorithm and prime number operations. Implementing checks based on these conditions can help preemptively identify scenarios where the program might slow down.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.

More precisely, two different numbers a and b are friends if gcd(a,b), (a)/(gcd(a,b)), (b)/(gcd(a,b)) can form sides of a triangle.

Three numbers a, b and c can form sides of a triangle if a + b > c, b + c > a and c + a > b.

In a group of numbers, a number is lonely if it doesn't have any friends in that group.

Given a group of numbers containing all numbers from 1, 2, 3, ..., n, how many numbers in that group are lonely?

Input

The first line contains a single integer t (1 ≤ t ≤ 10^6) - number of test cases.

On next line there are t numbers, n_i (1 ≤ n_i ≤ 10^6) - meaning that in case i you should solve for numbers 1, 2, 3, ..., n_i.

Output

For each test case, print the answer on separate lines: number of lonely numbers in group 1, 2, 3, ..., n_i.

Example

Input


3
1 5 10


Output


1
3
3

Note

For first test case, 1 is the only number and therefore lonely.

For second test case where n=5, numbers 1, 3 and 5 are lonely.

For third test case where n=10, numbers 1, 5 and 7 are lonely.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

In this phase, I will translate the performance-characterizing invariants derived from the analysis into C++ runtime checks. Each check will be designed to identify conditions that potentially lead to performance bottlenecks.

#### Invariant 1: High Input Range

We need to check if the maximum `n_i` in the input set is large, approaching the upper constraint, since this triggers the sieve of Eratosthenes over a large range.

```cpp
void check_high_input_range(int maxN) {
    if (maxN >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - High input range." << endl;
        abort();
    }
}
```

#### Invariant 2: Frequent Prime Checks

Check if the sieve of Eratosthenes is executed multiple times for high values of `n_i`, which can significantly increase computational overhead.

```cpp
void check_frequent_prime_checks(int testCases, int maxN) {
    if (testCases > 1 && maxN >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - Frequent prime checks." << endl;
        abort();
    }
}
```

#### Invariant 3: Large Prime Collection

The number of primes collected from the sieve should not be excessively large, as operations on these primes can become a bottleneck.

```cpp
void check_large_prime_collection(const std::vector<int>& primes) {
    if (primes.size() > 100000) {  // Assuming 100,000 is a threshold for a large prime collection.
        cerr << "Warning: Performance bottleneck condition triggered - Large prime collection." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, I'll integrate these checks into the original program to ensure that the program alerts us when it encounters potentially slow scenarios.

```cpp
#include <bits/stdc++.h>

using namespace std;

// Checkers for performance bottlenecks
void check_high_input_range(int maxN) {
    if (maxN >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - High input range." << endl;
        abort();
    }
}

void check_frequent_prime_checks(int testCases, int maxN) {
    if (testCases > 1 && maxN >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - Frequent prime checks." << endl;
        abort();
    }
}

void check_large_prime_collection(const std::vector<int>& primes) {
    if (primes.size() > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - Large prime collection." << endl;
        abort();
    }
}

inline long long read() {
    long long sign = 1;
    long long x = 0;
    char ch;
    while (!isdigit(ch = getchar()))
        if (ch == '-') sign = -1;
    while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();
    return x * sign;
}

inline void wonl() { putchar('\n'); }

inline void ww(long long k) {
    if (k < 0) putchar('-'), k *= -1;
    char ch[20];
    int num = 0;
    while (k) ch[++num] = k % 10, k /= 10;
    if (num == 0) ch[++num] = 0;
    while (num) putchar(ch[num--] + '0');
}

const int N = 1e6 + 4;

template <typename T, typename... V>
inline void wonl(T t, V... v) {
    ww(t);
    if (sizeof...(v)) putchar(' ');
    wonl(v...);
}

int main() {
    int t = 1;
    t = read();
    int arr[t], mx = 0;
    for (int i = 0; i < t; i++) {
        arr[i] = read();
        if (arr[i] > mx) mx = arr[i];
    }

    // Checkers inserted after reading input and determining the maximum value.
    check_high_input_range(mx);
    check_frequent_prime_checks(t, mx);

    vector<bool> nos(mx + 1, 1);
    for (int i = 2; i * i <= mx; i++) {
        if (nos[i]) {
            for (int j = i * i; j <= mx; j += i) {
                if (nos[j]) nos[j] = 0;
            }
        }
    }

    vector<int> primes;
    for (int i = 2; i <= mx; i++) {
        if (nos[i]) primes.push_back(i);
    }

    // Check the size of the prime collection
    check_large_prime_collection(primes);

    for (int i = 0; i < t; i++) {
        vector<int>::iterator it;
        it = upper_bound(primes.begin(), primes.end(), arr[i]);
        int x = (int)sqrt(arr[i]);
        vector<int>::iterator it2;
        it2 = upper_bound(primes.begin(), primes.end(), x);
        int ans = it - it2;
        wonl(ans + 1);
    }
    
    return 0;
}
```

**Explanation:**
- **High Input Range Check:** Placed after reading all inputs and determining the maximum value, `mx`. This ensures it triggers before any heavy computation is done.
- **Frequent Prime Checks Check:** Also inserted after input processing to determine if the sieve will be executed multiple times with large values.
- **Large Prime Collection Check:** Added after generating the primes to ensure the collection isn't excessively large. 

These checks are intended to identify conditions that can lead to performance degradation, enabling developers to catch and address these bottlenecks early in the testing phase.

